var searchIndex = JSON.parse('{\
"crypto":{"doc":"","i":[[5,"main","crypto","",null,[[]]]],"p":[]},\
"cycles_minting_canister":{"doc":"","i":[[3,"CyclesCanisterInitPayload","cycles_minting_canister","",null,null],[12,"ledger_canister_id","","",0,null],[12,"governance_canister_id","","",0,null],[12,"minting_account_id","","",0,null],[3,"IcptsToCycles","","",null,null],[12,"xdr_permyriad_per_icp","","Number of 1/10,000ths of XDR that 1 ICP is worth.",1,null],[12,"cycles_per_xdr","","Number of cycles that 1 XDR is worth.",1,null],[3,"SetAuthorizedSubnetworkListArgs","","Argument taken by the set_authorized_subnetwork_list…",null,null],[12,"who","","",2,null],[12,"subnets","","",2,null],[5,"create_canister_txn","","",null,[[["subaccount",3],["option",4],["icpts",3],["canisterid",3],["principalid",3]]]],[5,"top_up_canister_txn","","",null,[[["subaccount",3],["option",4],["icpts",3],["canisterid",3]]]],[6,"CreateCanisterResult","","The result of create_canister transaction notification. In…",null,null],[6,"TopUpCanisterResult","","The result of top_up_canister transaction notification. In…",null,null],[17,"DEFAULT_CYCLES_PER_XDR","","",null,null],[17,"CREATE_CANISTER_REFUND_FEE","","",null,null],[17,"TOP_UP_CANISTER_REFUND_FEE","","",null,null],[17,"MEMO_CREATE_CANISTER","","",null,null],[17,"MEMO_TOP_UP_CANISTER","","",null,null],[11,"to_cycles","","",1,[[["icpts",3]],["cycles",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",2,[[]]],[11,"clone","","",0,[[],["cyclescanisterinitpayload",3]]],[11,"clone","","",2,[[],["setauthorizedsubnetworklistargs",3]]],[11,"eq","","",0,[[["cyclescanisterinitpayload",3]]]],[11,"ne","","",0,[[["cyclescanisterinitpayload",3]]]],[11,"eq","","",2,[[["setauthorizedsubnetworklistargs",3]]]],[11,"ne","","",2,[[["setauthorizedsubnetworklistargs",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"hash","","",2,[[]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"_ty","","",0,[[],["type",4]]],[11,"id","","",0,[[],["typeid",3]]],[11,"idl_serialize","","",0,[[],["result",4]]],[11,"_ty","","",2,[[],["type",4]]],[11,"id","","",2,[[],["typeid",3]]],[11,"idl_serialize","","",2,[[],["result",4]]]],"p":[[3,"CyclesCanisterInitPayload"],[3,"IcptsToCycles"],[3,"SetAuthorizedSubnetworkListArgs"]]},\
"dfn_candid":{"doc":"","i":[[8,"ArgumentDecoder","dfn_candid","Allow decoding of any sized argument.",null,null],[10,"decode","","Decodes a value of type [Self], modifying the deserializer…",0,[[["idldeserialize",3]],[["error",4],["result",4]]]],[5,"decode_args","","Decode a series of arguments, represented as a tuple.…",null,[[],[["result",4],["error",4]]]],[5,"encode_args","","Serialize an encoding of a tuple to a vector of bytes.",null,[[],[["vec",3],["result",4],["error",4]]]],[5,"encode_one","","Serialize a single value to a vector of bytes.",null,[[],[["vec",3],["result",4],["error",4]]]],[8,"ArgumentEncoder","","Allow encoding of any serializable value.",null,null],[10,"encode","","Encode a value of type [Self].",1,[[["idlbuilder",3]],[["result",4],["error",4]]]],[3,"Candid","","",null,null],[12,"0","","",2,null],[3,"CandidOne","","",null,null],[12,"0","","",3,null],[5,"candid","","this is a private mirror of the type in dfn_core::api…",null,[[["candidone",3]]]],[5,"candid_multi_arity","","This type witness will force the function to return a…",null,[[["candid",3]]]],[5,"candid_one","","This is a candid function that takes one argument and…",null,[[["candidone",3]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from_bytes","","",2,[[["vec",3]],[["result",4],["string",3]]]],[11,"from_bytes","","",3,[[["vec",3]],[["result",4],["string",3]]]],[11,"into_bytes","","",2,[[],[["result",4],["vec",3],["string",3]]]],[11,"into_bytes","","",3,[[],[["result",4],["vec",3],["string",3]]]],[11,"from_inner","","",2,[[]]],[11,"into_inner","","",2,[[]]],[11,"from_inner","","",3,[[]]],[11,"into_inner","","",3,[[]]]],"p":[[8,"ArgumentDecoder"],[8,"ArgumentEncoder"],[3,"Candid"],[3,"CandidOne"]]},\
"dfn_core":{"doc":"","i":[[3,"CanisterId","dfn_core","A type representing a canister\'s [`PrincipalId`].",null,null],[5,"bytes","","This tells communication function that you\'d like you…",null,[[["vec",3],["bytess",3]]]],[5,"from","","This tells communication function that you\'d like you…",null,[[["froms",3]]]],[3,"BytesS","","This tells the compiler to just read/write the raw bytes…",null,null],[12,"0","","",0,null],[3,"FromS","","This causes values to be serialized and deserialized using…",null,null],[12,"0","","",1,null],[0,"api","","",null,null],[3,"CanisterId","dfn_core::api","A type representing a canister\'s [`PrincipalId`].",null,null],[3,"PrincipalId","","The type representing principals as described in the…",null,null],[3,"Funds","","This is a simplified version of `ic_types::Funds`.",null,null],[12,"cycles","","",2,null],[4,"TokenUnit","","Represents the different token units that are available on…",null,null],[13,"Cycles","","",3,null],[13,"ICP","","",3,null],[4,"CanisterStatus","","",null,null],[13,"Running","","",4,null],[13,"Stopping","","",4,null],[13,"Stopped","","",4,null],[5,"call_raw","","A thin wrapper around `call_simple`. Calls another…",null,[[["option",4],["funds",3],["canisterid",3]]]],[5,"call_with_callbacks","","Calls another canister and executes one of the callbacks.",null,[[["canisterid",3]]]],[5,"call_bytes","","Calls another canister and returns a future.",null,[[["funds",3],["canisterid",3]]]],[5,"call_bytes_with_cleanup","","",null,[[["funds",3],["canisterid",3]]]],[5,"call","","This function has some really nasty behavior if it traps…",null,[[["canisterid",3]]]],[5,"call_with_cleanup","","",null,[[["canisterid",3]]]],[5,"call_no_reply","","",null,[[["funds",3],["canisterid",3]],[["result",4],["string",3]]]],[5,"call_explicit","","",null,[[["funds",3],["canisterid",3]]]],[5,"call_explicit_with_cleanup","","",null,[[["funds",3],["canisterid",3]]]],[5,"call_with_funds","","",null,[[["funds",3],["canisterid",3]]]],[5,"call_with_funds_and_cleanup","","",null,[[["funds",3],["canisterid",3]]]],[5,"call_cycles_add","","",null,[[]]],[5,"arg_size","","Safe wrapper around an unsafe function",null,[[]]],[5,"arg_data","","Returns the argument extracted from the message payload.",null,[[],["vec",3]]],[5,"caller","","Returns the caller of the current call.",null,[[],["principalid",3]]],[5,"id","","Returns this canister\'s id as a blob.",null,[[],["canisterid",3]]],[5,"controller","","Returns the controller of the canister as a blob.",null,[[],["principalid",3]]],[5,"reject_message","","Returns the rejection message.",null,[[],["string",3]]],[5,"reply","","Replies with the given byte array. Note, currently we do…",null,[[]]],[5,"reject","","Rejects the current call with the given message. Warning…",null,[[]]],[5,"reject_code","","Returns the rejection code.",null,[[]]],[5,"print","","Prints the given message.",null,[[["asref",8]]]],[5,"trap_with","","Traps with the given message.",null,[[]]],[5,"now","","",null,[[],["systemtime",3]]],[5,"time_nanos","","",null,[[]]],[5,"stable_memory_size_in_pages","","",null,[[]]],[5,"canister_cycle_balance","","Returns the amount of cycles in the canister\'s account.",null,[[]]],[5,"msg_cycles_available","","Returns the cycles available in this current message.",null,[[]]],[5,"msg_cycles_refunded","","Returns the amount of cycles refunded with a response.",null,[[]]],[5,"msg_cycles_accept","","Indicates that `amount` of cycles should be accepted in…",null,[[]]],[5,"set_certified_data","","Sets the certified data of this canister.",null,[[]]],[5,"data_certificate","","When called from a query call, returns the data…",null,[[],[["vec",3],["option",4]]]],[5,"canister_status","","",null,[[],["canisterstatus",4]]],[5,"mint_cycles","","",null,[[]]],[0,"futures","","This module contains all mechanisms required to enable…",null,null],[3,"RefCounted","dfn_core::api::futures","A reference counter wrapper we use with the CallFuture.…",null,null],[5,"spawn","","Spawns a future running concurrently with the caller.",null,[[["future",8]]]],[6,"FutureResult","","The result type of the CallFuture.",null,null],[11,"new","","",5,[[]]],[11,"into_raw","","",5,[[]]],[11,"from_raw","","",5,[[]]],[11,"borrow_mut","","",5,[[],["refmut",3]]],[11,"as_ptr","","",5,[[]]],[0,"ic0","dfn_core::api","",null,null],[5,"canister_self_copy","dfn_core::api::ic0","",null,[[]]],[5,"canister_self_size","","",null,[[]]],[5,"controller_copy","","",null,[[]]],[5,"controller_size","","",null,[[]]],[5,"debug_print","","",null,[[]]],[5,"msg_arg_data_copy","","",null,[[]]],[5,"msg_arg_data_size","","",null,[[]]],[5,"msg_caller_copy","","",null,[[]]],[5,"msg_caller_size","","",null,[[]]],[5,"msg_reject","","",null,[[]]],[5,"msg_reject_code","","",null,[[]]],[5,"msg_reject_msg_copy","","",null,[[]]],[5,"msg_reject_msg_size","","",null,[[]]],[5,"msg_reply","","",null,[[]]],[5,"msg_reply_data_append","","",null,[[]]],[5,"trap","","",null,[[]]],[5,"call_simple","","",null,[[]]],[5,"call_new","","",null,[[]]],[5,"call_data_append","","",null,[[]]],[5,"call_on_cleanup","","",null,[[]]],[5,"call_cycles_add","","",null,[[]]],[5,"call_perform","","",null,[[]]],[5,"stable_size","","",null,[[]]],[5,"stable_grow","","",null,[[]]],[5,"stable_read","","",null,[[]]],[5,"stable_write","","",null,[[]]],[5,"time","","",null,[[]]],[5,"canister_cycle_balance","","",null,[[]]],[5,"msg_cycles_available","","",null,[[]]],[5,"msg_cycles_refunded","","",null,[[]]],[5,"msg_cycles_accept","","",null,[[]]],[5,"certified_data_set","","",null,[[]]],[5,"data_certificate_present","","",null,[[]]],[5,"data_certificate_size","","",null,[[]]],[5,"data_certificate_copy","","",null,[[]]],[5,"canister_status","","",null,[[]]],[5,"mint_cycles","","",null,[[]]],[11,"new","dfn_core::api","",2,[[]]],[11,"zero","","",2,[[]]],[0,"endpoint","dfn_core","",null,null],[5,"bytes","dfn_core::endpoint","This tells communication function that you\'d like you…",null,[[["vec",3],["bytess",3]]]],[5,"from","","This tells communication function that you\'d like you…",null,[[["froms",3]]]],[5,"over","","Over allows you to create canister endpoints easily…",null,[[]]],[5,"over_init","","Useful for writing the canister_init function because it…",null,[[]]],[5,"over_may_reject","","Like over, but `reject`s the call when the function `f`…",null,[[]]],[5,"over_explicit","","Create endpoints with the incoming and outgoing encoding…",null,[[]]],[5,"over_async","","Allows you to create asynchronous canister endpoints…",null,[[]]],[5,"over_async_may_reject","","Like over_async, but `reject`s the call when the function…",null,[[]]],[5,"over_async_explicit","","",null,[[]]],[5,"over_async_may_reject_explicit","","",null,[[]]],[5,"over_bytes","","",null,[[]]],[5,"over_bytes_may_reject","","",null,[[]]],[5,"over_bytes_init","","",null,[[]]],[5,"over_async_bytes","","",null,[[]]],[5,"over_async_bytes_may_reject","","",null,[[]]],[5,"over_bytes_result","","",null,[[]]],[5,"over_from","","",null,[[]]],[0,"printer","dfn_core","",null,null],[5,"_print","dfn_core::printer","",null,[[],["result",6]]],[5,"set_stdout","","Sets a line-buffered stdout, uses debug.trace",null,[[]]],[5,"set_panic_hook","","Sets a custom panic hook, uses debug.trace",null,[[]]],[5,"hook","","Sets stdout, stderr, and a custom panic hook",null,[[]]],[0,"setup","dfn_core","",null,null],[7,"START","dfn_core::setup","",null,null],[0,"stable","dfn_core","",null,null],[5,"set","dfn_core::stable","Sets the contents of the stable memory",null,[[]]],[5,"write","","Writes `content` to the given offset in the stable memory",null,[[]]],[5,"get","","Gets the contents of the stable memory",null,[[],["vec",3]]],[5,"read","","Reads `len` bytes from `offset` in stable memory",null,[[],["vec",3]]],[5,"length","","",null,[[]]],[14,"print","dfn_core","Emulates the default `print!` macro.",null,null],[14,"eprint","","Emulates the default `eprint!` macro.",null,null],[14,"println","","Emulates the default `println!` macro.",null,null],[14,"eprintln","","Emulates the default `eprintln!` macro.",null,null],[11,"from","dfn_core::api","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"encode_hex","","",6,[[]]],[11,"encode_hex_upper","","",6,[[]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",6,[[]]],[11,"from","dfn_core","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","dfn_core::api","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"encode_hex","","",7,[[]]],[11,"encode_hex_upper","","",7,[[]]],[11,"proxy_encode","","",7,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",7,[[],[["result",4],["proxydecodeerror",4]]]],[11,"erased_serialize","","",7,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",7,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","dfn_core::api::futures","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"into_future","","",5,[[]]],[11,"vzip","","",5,[[]]],[11,"try_poll","","",5,[[["pin",3],["context",3]],["poll",4]]],[11,"eq","dfn_core::api","",6,[[["canisterid",3]]]],[11,"ne","","",6,[[["canisterid",3]]]],[11,"eq","","",7,[[["principalid",3]]]],[11,"ne","","",7,[[["principalid",3]]]],[11,"partial_cmp","","",7,[[["principalid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["principalid",3]]]],[11,"le","","",7,[[["principalid",3]]]],[11,"gt","","",7,[[["principalid",3]]]],[11,"ge","","",7,[[["principalid",3]]]],[11,"partial_cmp","","",6,[[["canisterid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["canisterid",3]]]],[11,"le","","",6,[[["canisterid",3]]]],[11,"gt","","",6,[[["canisterid",3]]]],[11,"ge","","",6,[[["canisterid",3]]]],[11,"default","","",7,[[],["principalid",3]]],[11,"from","","",7,[[["canisterid",3]],["principalid",3]]],[11,"from","","",6,[[],["canisterid",3]]],[11,"from","","",7,[[["principalid",3]],["principalid",3]]],[11,"from","","",6,[[["id",3],["subnettag",3],["principalid",3]],["canisterid",3]]],[11,"cmp","","",7,[[["principalid",3]],["ordering",4]]],[11,"cmp","","",6,[[["canisterid",3]],["ordering",4]]],[11,"fmt","","",7,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"fmt","","",7,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"into","","",7,[[],["vec",3]]],[11,"as_ref","","",7,[[]]],[11,"as_ref","","",6,[[]]],[11,"as_ref","","",6,[[],["principalid",3]]],[11,"_ty","","",6,[[],["type",4]]],[11,"id","","",6,[[],["typeid",3]]],[11,"idl_serialize","","",6,[[],["result",4]]],[11,"id","","",7,[[],["typeid",3]]],[11,"_ty","","",7,[[],["type",4]]],[11,"idl_serialize","","",7,[[],["result",4]]],[11,"clone","","",7,[[],["principalid",3]]],[11,"clone","","",6,[[],["canisterid",3]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"from_str","","",7,[[],[["result",4],["principalid",3]]]],[11,"from_str","","",6,[[],[["canisterid",3],["result",4]]]],[11,"encode_raw","","",7,[[]]],[11,"merge_field","","",7,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",7,[[]]],[11,"clear","","",7,[[]]],[11,"deserialize","","",7,[[],[["result",4],["principalid",3]]]],[11,"deserialize","","",6,[[],[["result",4],["canisterid",3]]]],[11,"try_from","","",7,[[],[["result",4],["principalid",3]]]],[11,"try_from","","",6,[[["vec",3]],[["result",4],["canisterid",3]]]],[11,"try_from","","",6,[[["vec",3]],[["result",4],["canisterid",3]]]],[11,"try_from","","",6,[[],[["result",4],["canisterid",3]]]],[11,"try_from","","",7,[[["principalid",3]],[["result",4],["principalid",3]]]],[11,"try_from","","",7,[[["vec",3]],[["result",4],["principalid",3]]]],[11,"try_from","","",6,[[["principalid",3]],[["result",4],["canisterid",3]]]],[11,"try_from","","",6,[[["canisterid",3]],[["result",4],["canisterid",3]]]],[11,"try_from","","",7,[[["vec",3]],[["result",4],["principalid",3]]]],[11,"into_inner","dfn_core","",0,[[],["vec",3]]],[11,"from_inner","","",0,[[["vec",3]],["bytess",3]]],[11,"into_inner","","",1,[[]]],[11,"from_inner","","",1,[[],["froms",3]]],[11,"into_bytes","","",0,[[],[["result",4],["vec",3],["string",3]]]],[11,"into_bytes","","",1,[[],[["result",4],["vec",3],["string",3]]]],[11,"from_bytes","","",1,[[["vec",3]],[["result",4],["froms",3],["string",3]]]],[11,"from_bytes","","",0,[[["vec",3]],[["bytess",3],["result",4],["string",3]]]],[11,"into","dfn_core::api","",3,[[],["vec",3]]],[11,"clone","dfn_core::api::futures","",5,[[]]],[11,"clone","dfn_core::api","",4,[[],["canisterstatus",4]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"poll","dfn_core::api::futures","",5,[[["context",3],["pin",3]],["poll",4]]],[11,"ic_00","dfn_core::api","Returns the id of the management canister",6,[[],["canisterid",3]]],[11,"get_ref","","",6,[[],["principalid",3]]],[11,"get","","",6,[[],["principalid",3]]],[11,"new","","",6,[[["principalid",3]],[["canisteriderror",4],["result",4],["canisterid",3]]]],[11,"from_u64","","",6,[[],["canisterid",3]]],[18,"MAX_LENGTH_IN_BYTES","","",7,null],[11,"as_slice","","",7,[[]]],[11,"to_vec","","",7,[[],["vec",3]]],[11,"into_vec","","",7,[[],["vec",3]]],[11,"new_user_test_id","","",7,[[],["principalid",3]]],[11,"new_node_test_id","","",7,[[],["principalid",3]]],[11,"new_subnet_test_id","","",7,[[],["principalid",3]]],[11,"new","","",7,[[],["principalid",3]]],[11,"new_self_authenticating","","",7,[[],["principalid",3]]],[11,"new_derived","","",7,[[["principalid",3]],["principalid",3]]],[11,"new_anonymous","","",7,[[],["principalid",3]]],[11,"authenticates_for_pubkey","","",7,[[]]],[11,"is_self_authenticating","","",7,[[]]],[11,"is_derived","","",7,[[["principalid",3]]]],[11,"is_anonymous","","",7,[[]]]],"p":[[3,"BytesS"],[3,"FromS"],[3,"Funds"],[4,"TokenUnit"],[4,"CanisterStatus"],[3,"RefCounted"],[3,"CanisterId"],[3,"PrincipalId"]]},\
"dfn_http":{"doc":"","i":[[3,"RequestWrapper","dfn_http","This is currently unstable and may stop working on the IC…",null,null],[12,"secure","","",0,null],[12,"remote_address","","",0,null],[12,"request","","",0,null],[3,"Request","","",null,null],[12,"http_version","","",1,null],[12,"method","","",1,null],[12,"path","","",1,null],[12,"headers","","",1,null],[12,"body","","",1,null],[3,"Header","","",null,null],[12,"field","","",2,null],[12,"value","","",2,null],[3,"Response","","",null,null],[12,"body","","",3,null],[12,"status_code","","",3,null],[12,"headers","","",3,null],[4,"Method","","",null,null],[13,"Get","","",4,null],[13,"Head","","",4,null],[13,"Post","","",4,null],[13,"Put","","",4,null],[13,"Delete","","",4,null],[13,"Connect","","",4,null],[13,"Options","","",4,null],[13,"Trace","","",4,null],[13,"Patch","","",4,null],[13,"NonStandard","","",4,null],[5,"http","","This is currently unstable and may stop working on the IC…",null,[[]]],[5,"http_unchecked","","This is largely the same as \\\"http\\\" but the caller ID isn\'t…",null,[[]]],[0,"types","","",null,null],[3,"HttpRequest","dfn_http::types","",null,null],[12,"method","","",5,null],[12,"url","","",5,null],[12,"headers","","",5,null],[12,"body","","",5,null],[3,"HttpResponse","","",null,null],[12,"status_code","","",6,null],[12,"headers","","",6,null],[12,"body","","",6,null],[12,"streaming_strategy","","",6,null],[3,"Token","","",null,null],[3,"StreamingCallbackHttpResponse","","",null,null],[12,"body","","",7,null],[12,"token","","",7,null],[4,"StreamingStrategy","","",null,null],[13,"Callback","","",8,null],[12,"callback","dfn_http::types::StreamingStrategy","",9,null],[12,"token","","",9,null],[17,"HTTP_CANISTER_ID","dfn_http","",null,null],[11,"from_status_code","","",3,[[]]],[11,"set_body","","Sets and overwrites the body of the response `no_run # use…",3,[[]]],[11,"set_headers","","Sets and overwrites the values of all the existing headers…",3,[[]]],[11,"push_header","","Appends a header to the back of the list of headers…",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","dfn_http::types","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"clone","","",5,[[],["httprequest",3]]],[11,"clone","","",6,[[],["httpresponse",3]]],[11,"clone","","",10,[[],["token",3]]],[11,"clone","","",8,[[],["streamingstrategy",4]]],[11,"clone","","",7,[[],["streamingcallbackhttpresponse",3]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","dfn_http","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"_ty","dfn_http::types","",5,[[],["type",4]]],[11,"id","","",5,[[],["typeid",3]]],[11,"idl_serialize","","",5,[[],["result",4]]],[11,"_ty","","",6,[[],["type",4]]],[11,"id","","",6,[[],["typeid",3]]],[11,"idl_serialize","","",6,[[],["result",4]]],[11,"_ty","","",10,[[],["type",4]]],[11,"id","","",10,[[],["typeid",3]]],[11,"idl_serialize","","",10,[[],["result",4]]],[11,"_ty","","",8,[[],["type",4]]],[11,"id","","",8,[[],["typeid",3]]],[11,"idl_serialize","","",8,[[],["result",4]]],[11,"_ty","","",7,[[],["type",4]]],[11,"id","","",7,[[],["typeid",3]]],[11,"idl_serialize","","",7,[[],["result",4]]],[11,"_ty","dfn_http","",0,[[],["type",4]]],[11,"id","","",0,[[],["typeid",3]]],[11,"idl_serialize","","",0,[[],["result",4]]],[11,"_ty","","",1,[[],["type",4]]],[11,"id","","",1,[[],["typeid",3]]],[11,"idl_serialize","","",1,[[],["result",4]]],[11,"_ty","","",2,[[],["type",4]]],[11,"id","","",2,[[],["typeid",3]]],[11,"idl_serialize","","",2,[[],["result",4]]],[11,"_ty","","",3,[[],["type",4]]],[11,"id","","",3,[[],["typeid",3]]],[11,"idl_serialize","","",3,[[],["result",4]]],[11,"_ty","","",4,[[],["type",4]]],[11,"id","","",4,[[],["typeid",3]]],[11,"idl_serialize","","",4,[[],["result",4]]]],"p":[[3,"RequestWrapper"],[3,"Request"],[3,"Header"],[3,"Response"],[4,"Method"],[3,"HttpRequest"],[3,"HttpResponse"],[3,"StreamingCallbackHttpResponse"],[4,"StreamingStrategy"],[13,"Callback"],[3,"Token"]]},\
"dfn_macro":{"doc":"","i":[[23,"query","dfn_macro","",null,null],[23,"update","","",null,null]],"p":[]},\
"dfn_protobuf":{"doc":"","i":[[3,"ProtoBuf","dfn_protobuf","",null,null],[12,"0","","",0,null],[5,"protobuf","","This is the witness for protobuf types (types with a…",null,[[["protobuf",3]]]],[8,"ToProto","","This is deliberately less flexible than From/TryFrom…",null,null],[16,"Proto","","",1,null],[10,"from_proto","","",1,[[],[["result",4],["string",3]]]],[10,"to_proto","","",1,[[]]],[11,"new","","",0,[[]]],[11,"get","","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from_bytes","","",0,[[["vec",3]],[["result",4],["string",3]]]],[11,"into_bytes","","",0,[[],[["result",4],["vec",3],["string",3]]]],[11,"into_inner","","",0,[[]]],[11,"from_inner","","",0,[[]]]],"p":[[3,"ProtoBuf"],[8,"ToProto"]]},\
"fwd":{"doc":"Demonstration of forward secure encryption","i":[[5,"main","fwd","",null,[[]]]],"p":[]},\
"genesis_token_canister":{"doc":"","i":[[5,"gtc","genesis_token_canister","",null,[[],["gtc",3]]],[5,"gtc_mut","","",null,[[],["gtc",3]]],[5,"canister_init","","",null,[[]]],[5,"canister_pre_upgrade","","",null,[[]]],[5,"canister_post_upgrade","","",null,[[]]],[5,"total","","Returns the sum of all token balances in the internal ledger",null,[[]]],[5,"total_","","",null,[[]]],[5,"balance","","Returns the token balance of a given address",null,[[]]],[5,"balance_","","",null,[[["string",3]]]],[5,"len","","Returns the number of unique addresses present in the ledger",null,[[]]],[5,"len_","","",null,[[]]],[5,"get_account","","Return the account state of the given GTC address",null,[[]]],[5,"get_account_","","",null,[[["string",3]],[["result",4],["accountstate",3],["string",3]]]],[5,"claim_neurons","","Claim the caller\'s GTC neurons (on behalf of the caller)…",null,[[]]],[5,"claim_neurons_","","",null,[[["string",3]]]],[5,"donate_account","","Donate the caller\'s GTC account funds to the Neuron given…",null,[[]]],[5,"donate_account_","","",null,[[["string",3]]]],[5,"forward_all_unclaimed_accounts","","Transfer the funds of all unclaimed accounts to the Neuron…",null,[[]]],[5,"forward_all_unclaimed_accounts_","","",null,[[]]],[5,"main","","",null,[[]]],[7,"GTC","","",null,null]],"p":[]},\
"governance_canister":{"doc":"","i":[[3,"CanisterEnv","governance_canister","",null,null],[12,"rng","","",0,null],[3,"LedgerCanister","","",null,null],[5,"governance","","Returns an immutable reference to the global state.",null,[[],["governance",3]]],[5,"governance_mut","","Returns a mutable reference to the global state.",null,[[],["governance",3]]],[5,"canister_init","","",null,[[]]],[5,"canister_init_","","",null,[[["governanceproto",3]]]],[5,"canister_pre_upgrade","","",null,[[]]],[5,"canister_post_upgrade","","",null,[[]]],[5,"update_authz","","",null,[[]]],[5,"update_authz_","","",null,[[["vec",3],["methodauthzchange",3]]]],[5,"current_authz","","",null,[[]]],[5,"current_authz_","","",null,[[],["canisterauthzinfo",3]]],[5,"vote","","DEPRECATED: Use manage_neuron directly instead.",null,[[]]],[5,"neuron_stake_transfer_notification","","",null,[[]]],[5,"neuron_stake_transfer_notification_pb","","",null,[[]]],[5,"create_or_refresh_neuron","","",null,[[["transactionnotification",3]]]],[5,"claim_gtc_neurons","","",null,[[]]],[5,"claim_gtc_neurons_","","",null,[[["principalid",3],["neuronidproto",3],["vec",3]],[["governanceerror",3],["result",4]]]],[5,"transfer_gtc_neuron","","",null,[[]]],[5,"transfer_gtc_neuron_","","",null,[[["neuronidproto",3]]]],[5,"manage_neuron","","",null,[[]]],[5,"manage_neuron_","","",null,[[["manageneuron",3]]]],[5,"get_full_neuron","","Returns the full neuron corresponding to the neuron id.",null,[[]]],[5,"get_full_neuron_","","",null,[[["neuronid",3]],[["result",4],["neuron",3],["governanceerror",3]]]],[5,"get_neuron_info","","Returns the public neuron info corresponding to the neuron…",null,[[]]],[5,"get_neuron_info_","","",null,[[["neuronid",3]],[["result",4],["neuroninfo",3],["governanceerror",3]]]],[5,"get_proposal_info","","",null,[[]]],[5,"get_proposal_info_","","",null,[[["proposalid",3]],[["proposalinfo",3],["option",4]]]],[5,"get_pending_proposals","","",null,[[]]],[5,"get_pending_proposals_","","",null,[[],[["proposalinfo",3],["vec",3]]]],[5,"list_proposals","","",null,[[]]],[5,"list_proposals_","","",null,[[["listproposalinfo",3]],["listproposalinforesponse",3]]],[5,"list_neurons","","",null,[[]]],[5,"list_neurons_","","",null,[[["listneurons",3]],["listneuronsresponse",3]]],[5,"submit_proposal","","DEPRECATED: Only callable from the registry. Use…",null,[[]]],[5,"submit_proposal_","","",null,[[["neuronid",3],["proposal",3],["principalid",3]],["proposalid",3]]],[5,"execute_eligible_proposals","","DEPRECATED: Proposals are now executed on every vote.",null,[[]]],[5,"get_latest_reward_event","","Provides information about the last reward event.",null,[[]]],[5,"get_neuron_ids","","Return the Neuron IDs of all Neurons that have `caller()`…",null,[[]]],[5,"get_neuron_ids_","","",null,[[],[["vec",3],["neuronid",3]]]],[5,"canister_heartbeat","","",null,[[]]],[5,"manage_neuron_pb","","",null,[[]]],[5,"list_proposals_pb","","",null,[[]]],[5,"list_neurons_pb","","",null,[[]]],[5,"main","","",null,[[]]],[7,"GOVERNANCE","","",null,null],[17,"STABLE_MEM_BUFFER_SIZE","","Size of the buffer for stable memory reads and writes.",null,null],[17,"LOG_PREFIX","","",null,null],[11,"new","","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"now","","",0,[[]]],[11,"random_u64","","",0,[[]]],[11,"random_byte_array","","",0,[[]]],[11,"execute_nns_function","","",0,[[["executennsfunction",3]],[["governanceerror",3],["result",4]]]],[11,"transfer_funds","","",1,[[["option",4],["subaccount",3],["accountidentifier",3]],[["box",3],["pin",3]]]],[11,"total_supply","","",1,[[],[["pin",3],["box",3]]]]],"p":[[3,"CanisterEnv"],[3,"LedgerCanister"]]},\
"http_wasm":{"doc":"","i":[[5,"main","http_wasm","",null,[[]]],[5,"handler","","",null,[[["requestwrapper",3]],["response",3]]],[17,"BODY","","",null,null]],"p":[]},\
"ic_artifact_manager":{"doc":"","i":[[0,"actors","ic_artifact_manager","The module runs `ArtifactProcessor` as actors.",null,null],[3,"ClientActor","ic_artifact_manager::actors","Each `ArtifactProcessor` runs as an actor.",null,null],[3,"ConsensusClient","","Consensus `OnStateChange` client.",null,null],[3,"IngressClient","","The ingress `OnStateChange` client.",null,null],[3,"CertificationClient","","Certification `OnStateChange` client.",null,null],[3,"DkgClient","","Distributed key generation (DKG) `OnStateChange` client.",null,null],[4,"BoxOrArcClient","","A client may be either wrapped in `Box` or `Arc`.",null,null],[13,"BoxClient","","The client wrapped in `Box`.",0,null],[13,"ArcClient","","The client wrapped in `Arc`.",0,null],[11,"new","","The function creates an actor and starts it in the given…",1,[[["fn",8],["boxorarcclient",4],["systimesource",3],["send",8],["arbiter",3],["metricsregistry",3],["arc",3]],[["addr",3],["clientactor",3]]]],[11,"run","","The functions runs Consensus `on_state_change` as an actor…",2,[[["arc",3],["rwlock",3],["arc",3],["systimesource",3],["replicalogger",6],["arbiter",3],["rwlock",3],["metricsregistry",3],["send",8],["fn",8],["fnonce",8],["arc",3]]]],[11,"run","","The function runs ingress `on_state_change` as an actor in…",3,[[["replicalogger",6],["systimesource",3],["arbiter",3],["ingresshandler",8],["arc",3],["fn",8],["metricsregistry",3],["send",8],["rwlock",3],["arc",3],["arc",3]]]],[11,"run","","The function runs certification `on_state_change` as an…",4,[[["fn",8],["consensuspoolcache",8],["rwlock",3],["systimesource",3],["arc",3],["arc",3],["arbiter",3],["replicalogger",6],["metricsregistry",3],["send",8],["fnonce",8],["arc",3]]]],[11,"run","","The functino runs DKG `on_state_change` as an actor in the…",5,[[["replicalogger",6],["systimesource",3],["arbiter",3],["fn",8],["metricsregistry",3],["arc",3],["send",8],["rwlock",3],["fnonce",8],["arc",3]]]],[0,"artifact","ic_artifact_manager","The module contains implementations for different artifact…",null,null],[3,"ConsensusArtifact","ic_artifact_manager::artifact","The `ArtifactKind` of Consensus messages.",null,null],[3,"IngressArtifact","","The `ArtifactKind` of ingress message.",null,null],[3,"CertificationArtifact","","The `ArtifactKind` of certification messages.",null,null],[3,"DkgArtifact","","The `ArtifactKind` of DKG messages.",null,null],[0,"clients","ic_artifact_manager","The module contains implementations of the artifact client…",null,null],[3,"ConsensusClient","ic_artifact_manager::clients","The Consensus `ArtifactClient` to be managed by the…",null,null],[3,"IngressClient","","The ingress `ArtifactClient` to be managed by the…",null,null],[3,"CertificationClient","","The certification `ArtifactClient` to be managed by the…",null,null],[3,"DkgClient","","The DKG client.",null,null],[11,"new","","The constructor creates a `ConsensusClient` instance.",6,[[["arc",3],["consensusgossip",8],["rwlock",3]]]],[11,"new","","The constructor creates an `IngressClient` instance.",7,[[["replicalogger",6],["timesource",8],["rwlock",3],["arc",3],["arc",3]]]],[11,"new","","The constructor creates a `CertificationClient` instance.",8,[[["rwlock",3],["arc",3],["arc",3],["certifiergossip",8],["consensuspoolcache",8]]]],[11,"new","","The constructor creates a `DkgClient` instance.",9,[[["arc",3],["dkggossip",8],["rwlock",3]]]],[0,"manager","ic_artifact_manager","The artifact manager implementation.",null,null],[3,"ArtifactManagerImpl","ic_artifact_manager::manager","The artifact manager maintains a list of artifact clients,…",null,null],[3,"ArtifactManagerMaker","","The `ArtifactManagerMaker` is a helper to create an…",null,null],[11,"new","","The constructor creates an `ArtifactManagerImpl` instance.",10,[[["timesource",8],["arc",3]]]],[11,"new","","The constructor creates an `ArtifactManagerMaker` instance.",11,[[["timesource",8],["arc",3]]]],[11,"add_arc_client","","The method adds a new `ArtifactClient` (that is already…",11,[[["artifactclient",8],["arc",3],["addr",3],["clientactor",3]]]],[11,"add_client","","The method adds a new `ArtifactClient` to be managed.",11,[[["addr",3],["clientactor",3]]]],[11,"finish","","The method finishes the collection of `ArtifactClient`…",11,[[],[["arc",3],["artifactmanager",8]]]],[11,"from","ic_artifact_manager::actors","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","ic_artifact_manager::artifact","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"equivalent","","",12,[[]]],[11,"vzip","","",12,[[]]],[11,"erased_serialize","","",12,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"equivalent","","",13,[[]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"equivalent","","",14,[[]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"equivalent","","",15,[[]]],[11,"vzip","","",15,[[]]],[11,"from","ic_artifact_manager::clients","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","ic_artifact_manager::manager","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"clone","ic_artifact_manager::artifact","",12,[[],["consensusartifact",3]]],[11,"clone","","",13,[[],["ingressartifact",3]]],[11,"clone","","",14,[[],["certificationartifact",3]]],[11,"clone","","",15,[[],["dkgartifact",3]]],[11,"eq","","",12,[[["consensusartifact",3]]]],[11,"eq","","",13,[[["ingressartifact",3]]]],[11,"eq","","",14,[[["certificationartifact",3]]]],[11,"eq","","",15,[[["dkgartifact",3]]]],[11,"hash","","",12,[[]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"check_artifact_acceptance","ic_artifact_manager::clients","The method checks if the protocol version in the Consensus…",6,[[["nodeid",6],["consensusmessage",4]],[["result",4],["artifactacceptance",4],["artifactpoolerror",4]]]],[11,"has_artifact","","The method returns `true` if and only if the Consensus…",6,[[["consensusmessageid",3]]]],[11,"get_validated_by_identifier","","The method returns the Consensus message with the given ID…",6,[[["consensusmessageid",3]],[["option",4],["consensusmessage",4]]]],[11,"get_filter","","The method returns the Consensus message filter.",6,[[],["consensusmessagefilter",3]]],[11,"get_all_validated_by_filter","","The method returns all adverts for validated Consensus…",6,[[["consensusmessagefilter",3]],[["vec",3],["advert",3]]]],[11,"get_priority_function","","The method returns the priority function.",6,[[],[["option",4],["priorityfn",6]]]],[11,"get_chunk_tracker","","The method returns the chunk tracker for the given…",6,[[["consensusmessageid",3]],[["box",3],["chunkable",8]]]],[11,"check_artifact_acceptance","","The method checks whether the given signed ingress bytes…",7,[[["nodeid",6],["signedrequestbytes",3]],[["result",4],["artifactpoolerror",4],["artifactacceptance",4]]]],[11,"has_artifact","","The method checks if the ingress pool contains an ingress…",7,[[["ingressmessageid",3]]]],[11,"get_validated_by_identifier","","The method returns the `SignedIngress` message with the…",7,[[["ingressmessageid",3]],[["signedingress",3],["option",4]]]],[11,"get_filter","","The method returns the ingress message filter.",7,[[],["ingressmessagefilter",6]]],[11,"get_all_validated_by_filter","","The method returns all adverts for validated ingress…",7,[[["ingressmessagefilter",6]],[["vec",3],["advert",3]]]],[11,"get_priority_function","","The method returns the priority function.",7,[[],[["priorityfn",6],["option",4]]]],[11,"get_chunk_tracker","","The method returns a new chunk tracker for…",7,[[["ingressmessageid",3]],[["box",3],["chunkable",8]]]],[11,"check_artifact_acceptance","","The method always accepts the given `CertificationMessage`.",8,[[["nodeid",6],["certificationmessage",4]],[["result",4],["artifactacceptance",4],["artifactpoolerror",4]]]],[11,"has_artifact","","The method checks if the certification pool contains a…",8,[[["certificationmessageid",3]]]],[11,"get_validated_by_identifier","","The method returns the `CertificationMessage` for the…",8,[[["certificationmessageid",3]],[["certificationmessage",4],["option",4]]]],[11,"get_filter","","The method returns the certification message filter.",8,[[],["certificationmessagefilter",3]]],[11,"get_all_validated_by_filter","","The method returns all adverts for validated certification…",8,[[["certificationmessagefilter",3]],[["advert",3],["vec",3]]]],[11,"get_priority_function","","The method returns the priority function.",8,[[],[["priorityfn",6],["option",4]]]],[11,"get_chunk_tracker","","The method returns a new (single-chunked) certification…",8,[[["certificationmessageid",3]],[["box",3],["chunkable",8]]]],[11,"check_artifact_acceptance","","The method checks if the protocol version is correct.",9,[[["nodeid",6],["dkgmessage",6]],[["result",4],["artifactacceptance",4],["artifactpoolerror",4]]]],[11,"has_artifact","","The method checks if the DKG pool contains a DKG message…",9,[[["dkgmessageid",6]]]],[11,"get_validated_by_identifier","","The method returns the validated DKG message for the given…",9,[[["dkgmessageid",6]],[["dkgmessage",6],["option",4]]]],[11,"get_priority_function","","The method returns the priority function.",9,[[],[["priorityfn",6],["option",4]]]],[11,"get_chunk_tracker","","The method returns a new (single-chunked) DKG message…",9,[[["dkgmessageid",6]],[["box",3],["chunkable",8]]]],[11,"process_changes","ic_artifact_manager::actors","The method processes changes in the Consensus pool and…",2,[[["unvalidatedartifact",3],["timesource",8],["vec",3]]]],[11,"process_changes","","The method processes changes in the ingress pool.",3,[[["unvalidatedartifact",3],["timesource",8],["vec",3]]]],[11,"process_changes","","The method processes changes in the certification pool.",4,[[["timesource",8],["unvalidatedartifact",3],["vec",3]]]],[11,"process_changes","","The method processes changes in the DKG pool.",5,[[["unvalidatedartifact",3],["timesource",8],["vec",3]]]],[11,"on_artifact","ic_artifact_manager::manager","When a new artifact is received by Gossip, it is forwarded…",10,[[["artifact",4],["gossipadvert",3],["nodeid",6]],[["onartifacterror",4],["result",4]]]],[11,"has_artifact","","The method checks if any of the artifact clients already…",10,[[["artifactid",4]]]],[11,"get_validated_by_identifier","","The method returns a validated artifact with the given…",10,[[["artifactid",4]],[["box",3],["option",4]]]],[11,"get_filter","","The method returns a collection of all filters from all…",10,[[],["artifactfilter",3]]],[11,"get_all_validated_by_filter","","The method returns adverts of all validated artifacts by…",10,[[["artifactfilter",3]],[["gossipadvert",3],["vec",3]]]],[11,"get_remaining_quota","","The method returns the remaining quota the given peer is…",10,[[["nodeid",6],["artifacttag",4]],["option",4]]],[11,"get_priority_function","","The method returns the priority function for a specific…",10,[[["artifacttag",4]],[["option",4],["artifactpriorityfn",6]]]],[11,"get_chunk_tracker","","The method returns the chunk tracker for an advert with…",10,[[["artifactid",4]],[["box",3],["option",4]]]],[11,"to_advert","ic_artifact_manager::artifact","The function converts a `ConsensusMessage` into an advert…",12,[[["consensusmessage",4]],[["advert",3],["consensusartifact",3]]]],[11,"to_advert","","The function converts a `SignedIngress` into an advert for…",13,[[["signedingress",3]],[["advert",3],["ingressartifact",3]]]],[11,"to_advert","","The function converts a `CertificationMessage` into an…",14,[[["certificationmessage",4]],[["advert",3],["certificationartifact",3]]]],[11,"to_advert","","The function converts a `DkgMessage` into an advert for a…",15,[[["dkgmessage",6]],[["dkgartifact",3],["advert",3]]]]],"p":[[4,"BoxOrArcClient"],[3,"ClientActor"],[3,"ConsensusClient"],[3,"IngressClient"],[3,"CertificationClient"],[3,"DkgClient"],[3,"ConsensusClient"],[3,"IngressClient"],[3,"CertificationClient"],[3,"DkgClient"],[3,"ArtifactManagerImpl"],[3,"ArtifactManagerMaker"],[3,"ConsensusArtifact"],[3,"IngressArtifact"],[3,"CertificationArtifact"],[3,"DkgArtifact"]]},\
"ic_artifact_pool":{"doc":"","i":[[5,"get_replica_version","ic_artifact_pool","",null,[[["path",3],["asref",8]],[["option",4],["replicaversion",3]]]],[5,"set_replica_version","","",null,[[["path",3],["asref",8],["replicaversion",3]]]],[5,"ensure_persistent_pool_replica_version_compatibility","","Check that the replica version of the pool matches that of…",null,[[["pathbuf",3]]]],[0,"certification_pool","","",null,null],[3,"CertificationPoolImpl","ic_artifact_pool::certification_pool","Certification pool contains 2 types of artifacts: partial…",null,null],[12,"persistent_pool","","",0,null],[8,"MutablePoolSection","","Operations that mutates the persistent pool.",null,null],[10,"insert","","",1,[[["certificationmessage",4]]]],[10,"certifications","","",1,[[],["heightindexedpool",8]]],[10,"certification_shares","","",1,[[],["heightindexedpool",8]]],[10,"purge_below","","",1,[[["height",6]]]],[11,"new","","",0,[[["metricsregistry",3],["replicalogger",6],["artifactpoolconfig",3]]]],[0,"consensus_pool","ic_artifact_pool","",null,null],[3,"PoolSectionOps","ic_artifact_pool::consensus_pool","",null,null],[12,"ops","","",2,null],[3,"ConsensusPoolImpl","","",null,null],[3,"UncachedConsensusPoolImpl","","",null,null],[12,"validated","","",3,null],[4,"PoolSectionOp","","",null,null],[13,"Insert","","",4,null],[13,"Remove","","",4,null],[13,"PurgeBelow","","",4,null],[8,"InitializablePoolSection","","",null,null],[10,"insert_cup_with_proto","","",5,[[["cupwithoriginalprotobuf",3]]]],[8,"MutablePoolSection","","",null,null],[10,"mutate","","",6,[[["poolsectionops",3]]]],[10,"pool_section","","",6,[[],["poolsection",8]]],[11,"new","","",2,[[],["poolsectionops",3]]],[11,"insert","","",2,[[]]],[11,"remove","","",2,[[["consensusmessageid",3]]]],[11,"purge_below","","",2,[[["height",6]]]],[11,"new","","",3,[[["replicalogger",6],["artifactpoolconfig",3]],["uncachedconsensuspoolimpl",3]]],[11,"new","","Create a consensus pool from a given `config`, and…",7,[[["metricsregistry",3],["replicalogger",6],["artifactpoolconfig",3],["cupwithoriginalprotobuf",3],["subnetid",6]],["consensuspoolimpl",3]]],[11,"from_uncached","","Can be used to instantiate an empty pool without a CUP.",7,[[["metricsregistry",3],["uncachedconsensuspoolimpl",3]],["consensuspoolimpl",3]]],[11,"new_from_cup_without_bytes","","",7,[[["metricsregistry",3],["catchuppackage",6],["replicalogger",6],["artifactpoolconfig",3],["subnetid",6]],["consensuspoolimpl",3]]],[11,"get_cache","","Get a copy of ConsensusPoolCache.",7,[[],[["arc",3],["consensuspoolcache",8]]]],[0,"dkg_pool","ic_artifact_pool","",null,null],[3,"DkgPoolImpl","ic_artifact_pool::dkg_pool","The DkgPool is used to store messages that are exchanged…",null,null],[11,"new","","Instantiates a new DKG pool from the time source.",8,[[["metricsregistry",3]]]],[11,"get","","Returns a DKG message by hash if available in either the…",8,[[["cryptohashof",6]],[["message",6],["option",4]]]],[0,"ingress_pool","ic_artifact_pool","",null,null],[3,"IngressPoolImpl","ic_artifact_pool::ingress_pool","",null,null],[11,"new","","",9,[[["metricsregistry",3],["replicalogger",6],["artifactpoolconfig",3]],["ingresspoolimpl",3]]],[11,"from","ic_artifact_pool::certification_pool","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","ic_artifact_pool::consensus_pool","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","ic_artifact_pool::dkg_pool","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","ic_artifact_pool::ingress_pool","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"clone","ic_artifact_pool::consensus_pool","",4,[[],["poolsectionop",4]]],[11,"clone","","",2,[[],["poolsectionops",3]]],[11,"clone","ic_artifact_pool::ingress_pool","",9,[[],["ingresspoolimpl",3]]],[11,"default","ic_artifact_pool::consensus_pool","",2,[[],["poolsectionops",3]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"certification_at_height","ic_artifact_pool::certification_pool","",0,[[["height",6]],[["option",4],["certification",3]]]],[11,"shares_at_height","","",0,[[["height",6]],[["box",3],["iterator",8]]]],[11,"validated_shares","","",0,[[],[["box",3],["iterator",8]]]],[11,"unvalidated_shares_at_height","","",0,[[["height",6]],[["iterator",8],["box",3]]]],[11,"unvalidated_certifications_at_height","","",0,[[["height",6]],[["iterator",8],["box",3]]]],[11,"all_heights_with_artifacts","","",0,[[],[["vec",3],["height",6]]]],[11,"certified_heights","","",0,[[],[["hashset",3],["height",6]]]],[11,"insert","","",0,[[["certificationmessage",4]]]],[11,"apply_changes","","",0,[[["changeset",6]]]],[11,"finalized_block","ic_artifact_pool::consensus_pool","",3,[[],["block",3]]],[11,"consensus_time","","",3,[[],[["time",3],["option",4]]]],[11,"catch_up_package","","",3,[[],["catchuppackage",6]]],[11,"cup_with_protobuf","","",3,[[],["cupwithoriginalprotobuf",3]]],[11,"summary_block","","",3,[[],["block",3]]],[11,"validated","","",3,[[],["poolsection",8]]],[11,"unvalidated","","",3,[[],["poolsection",8]]],[11,"as_cache","","",3,[[],["consensuspoolcache",8]]],[11,"validated","","",7,[[],["poolsection",8]]],[11,"unvalidated","","",7,[[],["poolsection",8]]],[11,"as_cache","","",7,[[],["consensuspoolcache",8]]],[11,"select_validated","ic_artifact_pool::ingress_pool","",9,[[["rangeinclusive",3],["time",3],["box",3],["fnmut",8]],[["signedingress",3],["vec",3]]]],[11,"insert","ic_artifact_pool::consensus_pool","",7,[[["unvalidatedconsensusartifact",6]]]],[11,"apply_changes","","",7,[[["changeset",6],["timesource",8]]]],[11,"get_validated","ic_artifact_pool::dkg_pool","",8,[[],[["box",3],["iterator",8]]]],[11,"get_validated_older_than","","",8,[[["duration",3]],[["box",3],["iterator",8]]]],[11,"get_unvalidated","","",8,[[],[["box",3],["iterator",8]]]],[11,"get_current_start_height","","",8,[[],["height",6]]],[11,"validated_contains","","",8,[[["message",6]]]],[11,"insert","","Inserts an unvalidated artifact into the unvalidated…",8,[[["unvalidatedartifact",3],["message",6]]]],[11,"apply_changes","","Applies the provided change set atomically.",8,[[["changeset",6]]]],[11,"contains","ic_artifact_pool::certification_pool","",0,[[]]],[11,"get_validated_by_identifier","","",0,[[],[["option",4],["certificationmessage",4]]]],[11,"get_all_validated_by_filter","","",0,[[],[["box",3],["iterator",8]]]],[11,"contains","ic_artifact_pool::consensus_pool","",7,[[["consensusmessageid",3]]]],[11,"get_validated_by_identifier","","",7,[[["consensusmessageid",3]],[["consensusmessage",4],["option",4]]]],[11,"get_all_validated_by_filter","","",7,[[],[["box",3],["iterator",8]]]],[11,"contains","ic_artifact_pool::dkg_pool","",8,[[]]],[11,"get_validated_by_identifier","","",8,[[],[["message",6],["option",4]]]],[11,"get_all_validated_by_filter","","",8,[[],[["iterator",8],["box",3]]]],[11,"check_quota","ic_artifact_pool::ingress_pool","",9,[[["signedingress",3],["nodeid",6]],[["result",4],["artifactpoolerror",4]]]],[11,"contains","","Check if an Ingress message exists by its hash",9,[[["ingressmessageid",3]]]],[11,"get_validated_by_identifier","","",9,[[["ingressmessageid",3]],[["signedingress",3],["option",4]]]],[11,"get_all_validated_by_filter","","",9,[[],[["box",3],["iterator",8]]]],[11,"validated","","Validated Ingress Pool Section",9,[[],["poolsection",8]]],[11,"unvalidated","","Unvalidated Ingress Pool",9,[[],["poolsection",8]]],[11,"insert","","Insert a new ingress message in the Ingress Pool and…",9,[[["unvalidatedartifact",3],["signedingress",3]]]],[11,"apply_changeset","","Apply changeset to the Ingress Pool",9,[[["changeset",6]]]],[11,"exceeds_threshold","","",9,[[]]]],"p":[[3,"CertificationPoolImpl"],[8,"MutablePoolSection"],[3,"PoolSectionOps"],[3,"UncachedConsensusPoolImpl"],[4,"PoolSectionOp"],[8,"InitializablePoolSection"],[8,"MutablePoolSection"],[3,"ConsensusPoolImpl"],[3,"DkgPoolImpl"],[3,"IngressPoolImpl"]]},\
"ic_base_server":{"doc":"","i":[[5,"shutdown_signal","ic_base_server","Returns a `Future` that completes when the service should…",null,[[["logger",3]]]]],"p":[]},\
"ic_base_thread":{"doc":"The crate contains common concurrency patterns.","i":[[3,"ObservableCountingSemaphore","ic_base_thread","Semaphore with integrated gauge that tracks the…",null,null],[3,"SemaphorePermit","","The semaphore permit type returned from the…",null,null],[5,"spawn_and_wait","","Executes async task in sync context without starving other…",null,[[]]],[11,"new","","",0,[[["genericgauge",3],["arc",3]]]],[11,"acquire","","A call to acquire will return a permit that will be valid…",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"drop","","",1,[[]]]],"p":[[3,"ObservableCountingSemaphore"],[3,"SemaphorePermit"]]},\
"ic_base_types":{"doc":"A crate containing various basic types that are especially…","i":[[3,"CanisterId","ic_base_types","A type representing a canister\'s [`PrincipalId`].",null,null],[3,"PrincipalId","","The type representing principals as described in the…",null,null],[3,"RegistryVersionTag","","",null,null],[3,"NodeTag","","",null,null],[3,"SubnetTag","","",null,null],[3,"NumSecondsTag","","",null,null],[3,"NumBytesTag","","",null,null],[3,"CanisterInstallModeError","","A type to represent an error that can occur when…",null,null],[12,"0","","",0,null],[4,"CanisterIdBlobParseError","","Represents an error that can occur when parsing a blob…",null,null],[13,"PrincipalIdBlobParseError","","",1,null],[13,"CanisterIdError","","",1,null],[4,"CanisterIdError","","Represents an error that can occur when constructing a…",null,null],[13,"InvalidPrincipalId","","An invalid [`PrincipalId`] was given.",2,null],[13,"PrincipalIdParseError","","The input string could not be parsed into a [`PrincipalId`].",2,null],[4,"PrincipalIdBlobParseError","","Represents an error that can occur when parsing a blob…",null,null],[13,"TooLong","","",3,null],[4,"PrincipalIdParseError","","Represents an error that can occur when parsing a string…",null,null],[13,"TooLong","","",4,null],[13,"TooShort","","",4,null],[13,"NotBase32","","",4,null],[13,"Wrong","","",4,null],[12,"expected","ic_base_types::PrincipalIdParseError","",5,null],[4,"CanisterStatusType","ic_base_types","Indicates whether the canister is running, stopping, or…",null,null],[13,"Running","","",6,null],[13,"Stopping","","",6,null],[13,"Stopped","","",6,null],[4,"CanisterInstallMode","","The mode with which a canister is installed.",null,null],[13,"Install","","A fresh install of a new canister.",7,null],[13,"Reinstall","","Reinstalling a canister that was already installed.",7,null],[13,"Upgrade","","Upgrade an existing canister.",7,null],[5,"subnet_id_into_protobuf","","Converts a SubnetId into its protobuf definition.…",null,[[["subnetid",6]],["subnetid",3]]],[5,"subnet_id_try_from_protobuf","","From its protobuf definition convert to a SubnetId.…",null,[[["subnetid",3]],[["subnetid",6],["result",4],["principalidblobparseerror",4]]]],[11,"ic_00","","Returns the id of the management canister",8,[[]]],[11,"get_ref","","",8,[[],["principalid",3]]],[11,"get","","",8,[[],["principalid",3]]],[11,"new","","",8,[[["principalid",3]],[["result",4],["canisteriderror",4]]]],[11,"from_u64","","",8,[[]]],[18,"MAX_LENGTH_IN_BYTES","","",9,null],[11,"as_slice","","",9,[[]]],[11,"to_vec","","",9,[[],["vec",3]]],[11,"into_vec","","",9,[[],["vec",3]]],[11,"new_user_test_id","","",9,[[]]],[11,"new_node_test_id","","",9,[[]]],[11,"new_subnet_test_id","","",9,[[]]],[11,"new","","",9,[[]]],[11,"new_self_authenticating","","",9,[[]]],[11,"new_derived","","",9,[[["principalid",3]]]],[11,"new_anonymous","","",9,[[]]],[11,"authenticates_for_pubkey","","",9,[[]]],[11,"is_self_authenticating","","",9,[[]]],[11,"is_derived","","",9,[[["principalid",3]]]],[11,"is_anonymous","","",9,[[]]],[6,"RegistryVersion","","A type representing the registry\'s version.",null,null],[6,"NodeId","","A type representing a node\'s [`PrincipalId`].",null,null],[6,"SubnetId","","A type representing a subnet\'s [`PrincipalId`].",null,null],[6,"NumSeconds","","Models a non-negative number of seconds.",null,null],[6,"NumBytes","","This type models a non-negative number of bytes.",null,null],[11,"iter","","",7,[[],[["canisterinstallmode",4],["iter",3]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"encode_hex","","",8,[[]]],[11,"encode_hex_upper","","",8,[[]]],[11,"erased_serialize","","",8,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"encode_hex","","",9,[[]]],[11,"encode_hex_upper","","",9,[[]]],[11,"proxy_encode","","",9,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",9,[[],[["proxydecodeerror",4],["result",4]]]],[11,"erased_serialize","","",9,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",4,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"erased_serialize","","",7,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",7,[[]]],[11,"as_ref","","",8,[[],["principalid",3]]],[11,"as_ref","","",8,[[]]],[11,"as_ref","","",9,[[]]],[11,"from","","",8,[[["subnetid",6]]]],[11,"from","","",9,[[["canisterid",3]]]],[11,"from","","",8,[[]]],[11,"into","","",9,[[],["vec",3]]],[11,"clone","","",8,[[],["canisterid",3]]],[11,"clone","","",2,[[],["canisteriderror",4]]],[11,"clone","","",1,[[],["canisteridblobparseerror",4]]],[11,"clone","","",9,[[],["principalid",3]]],[11,"clone","","",3,[[],["principalidblobparseerror",4]]],[11,"clone","","",4,[[],["principalidparseerror",4]]],[11,"clone","","",6,[[],["canisterstatustype",4]]],[11,"clone","","",7,[[],["canisterinstallmode",4]]],[11,"default","","",9,[[],["principalid",3]]],[11,"default","","",7,[[]]],[11,"cmp","","",8,[[["canisterid",3]],["ordering",4]]],[11,"cmp","","",9,[[["principalid",3]],["ordering",4]]],[11,"eq","","",8,[[["canisterid",3]]]],[11,"ne","","",8,[[["canisterid",3]]]],[11,"eq","","",2,[[["canisteriderror",4]]]],[11,"ne","","",2,[[["canisteriderror",4]]]],[11,"eq","","",9,[[["principalid",3]]]],[11,"ne","","",9,[[["principalid",3]]]],[11,"eq","","",3,[[["principalidblobparseerror",4]]]],[11,"ne","","",3,[[["principalidblobparseerror",4]]]],[11,"eq","","",4,[[["principalidparseerror",4]]]],[11,"ne","","",4,[[["principalidparseerror",4]]]],[11,"eq","","",6,[[["canisterstatustype",4]]]],[11,"eq","","",7,[[["canisterinstallmode",4]]]],[11,"partial_cmp","","",8,[[["canisterid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["canisterid",3]]]],[11,"le","","",8,[[["canisterid",3]]]],[11,"gt","","",8,[[["canisterid",3]]]],[11,"ge","","",8,[[["canisterid",3]]]],[11,"partial_cmp","","",9,[[["principalid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["principalid",3]]]],[11,"le","","",9,[[["principalid",3]]]],[11,"gt","","",9,[[["principalid",3]]]],[11,"ge","","",9,[[["principalid",3]]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"try_from","","",8,[[["principalid",3]],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_from","","",8,[[["vec",3]],["result",4]]],[11,"try_from","","",8,[[["vec",3]],["result",4]]],[11,"try_from","","",8,[[["canisterid",3]],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_from","","",9,[[["vec",3]],["result",4]]],[11,"try_from","","",9,[[["vec",3]],["result",4]]],[11,"try_from","","",9,[[["principalid",3]],["result",4]]],[11,"try_from","","",7,[[["string",3]],["result",4]]],[11,"from_str","","",8,[[],["result",4]]],[11,"from_str","","",9,[[],["result",4]]],[11,"from_str","","",7,[[],[["result",4],["canisterinstallmode",4]]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"_ty","","",8,[[],["type",4]]],[11,"id","","",8,[[],["typeid",3]]],[11,"idl_serialize","","",8,[[],["result",4]]],[11,"id","","",9,[[],["typeid",3]]],[11,"_ty","","",9,[[],["type",4]]],[11,"idl_serialize","","",9,[[],["result",4]]],[11,"_ty","","",6,[[],["type",4]]],[11,"id","","",6,[[],["typeid",3]]],[11,"idl_serialize","","",6,[[],["result",4]]],[11,"_ty","","",7,[[],["type",4]]],[11,"id","","",7,[[],["typeid",3]]],[11,"idl_serialize","","",7,[[],["result",4]]],[11,"encode_raw","","",9,[[]]],[11,"merge_field","","",9,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",9,[[]]],[11,"clear","","",9,[[]]],[11,"display","","Formats the number of bytes using the most appropriate…",14,[[["formatter",3],["numbytes",6]],["result",6]]]],"p":[[3,"CanisterInstallModeError"],[4,"CanisterIdBlobParseError"],[4,"CanisterIdError"],[4,"PrincipalIdBlobParseError"],[4,"PrincipalIdParseError"],[13,"Wrong"],[4,"CanisterStatusType"],[4,"CanisterInstallMode"],[3,"CanisterId"],[3,"PrincipalId"],[3,"RegistryVersionTag"],[3,"NodeTag"],[3,"SubnetTag"],[3,"NumSecondsTag"],[3,"NumBytesTag"]]},\
"ic_canister_client":{"doc":"A client to interface with canisters via HTTP.","i":[[3,"HttpStatusCode","ic_canister_client","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[3,"HttpClient","","An HTTP Client to communicate with a replica.",null,null],[0,"agent","","An agent to talk to the Internet Computer through the…",null,null],[3,"ClonableKeyPair","ic_canister_client::agent","A version of Keypair with a clone instance. Originally…",null,null],[12,"bytes","","",0,null],[3,"Secp256k1KeyPair","","",null,null],[3,"Agent","","An agent to talk to the Internet Computer through the…",null,null],[12,"url","","Url of the replica to target. This should NOT contain a…",1,null],[12,"sender","","",1,null],[12,"sender_field","","The values that any \'sender\' field should have when…",1,null],[4,"SigKeys","","",null,null],[13,"EcdsaSecp256k1","","",2,null],[4,"Sender","","Represents the identity of the sender.",null,null],[13,"KeyPair","","The sender is defined as public/private keypair.",3,null],[13,"SigKeys","","The sender is defined as a public/private keypair of a…",3,null],[13,"ExternalHsm","","The sender is authenticated via an external HSM devices…",3,null],[12,"pub_key","ic_canister_client::agent::Sender","DER encoded public key",4,null],[12,"sign","","Function that abstracts the external HSM.",4,null],[13,"Anonymous","ic_canister_client::agent","The anonymous sender is used (no signature).",3,null],[13,"PrincipalId","","Principal ID (no signature)",3,null],[5,"query_path","","The HTTP path for query calls on the replica.",null,[[["canisterid",3]],["string",3]]],[5,"read_state_path","","",null,[[["canisterid",3]],["string",3]]],[5,"update_path","","The HTTP path for update calls on the replica.",null,[[["canisterid",3]],["string",3]]],[5,"ed25519_public_key_to_der","","This is a minimal implementation of DER-encoding for…",null,[[["vec",3]],["vec",3]]],[5,"sign_submit","","Wraps the content into an envelope that contains the…",null,[[["httpsubmitcontent",4],["sender",4]],[["result",4],["box",3]]]],[5,"sign_read","","Wraps the content into an envelope that contains the…",null,[[["httpreadcontent",4],["sender",4]],[["box",3],["httprequestenvelope",3],["result",4]]]],[6,"SignF","","",null,null],[11,"from_keypair","","",3,[[["keypair",3]]]],[11,"from_secp256k1_keys","","",3,[[]]],[11,"from_external_hsm","","",3,[[["vec",3],["signf",6]]]],[11,"from_principal_id","","",3,[[["principalid",3]]]],[11,"get_principal_id","","",3,[[],["principalid",3]]],[11,"sign_message_id","","",3,[[["messageid",3]],[["option",4],["result",4],["box",3]]]],[11,"sign","","",3,[[],[["option",4],["result",4],["box",3]]]],[11,"sender_pubkey_der","","",3,[[],[["vec",3],["option",4]]]],[11,"new","","Creates an agent.",1,[[["sender",4],["url",3]]]],[11,"new_with_client","","Creates an agent.",1,[[["sender",4],["httpclient",3],["url",3]]]],[11,"new_for_test","","This is needed by rust_canister tests",1,[[["sender",4]]]],[11,"with_ingress_timeout","","Sets the timeout for ingress requests.",1,[[["duration",3]]]],[11,"with_query_timeout","","Sets the timeout for queries.",1,[[["duration",3]]]],[11,"with_install_timeout","","Sets the timeout for canister installation.",1,[[["duration",3]]]],[11,"query_cup_endpoint","","Queries the cup endpoint given the provided…",1,[[["option",4],["catchuppackageparam",3]]]],[11,"execute_query","","Calls the query method \'method\' on the given canister,…",1,[[["vec",3],["canisterid",3]]]],[11,"execute_update","","Calls the query method \'method\' on the canister located at…",1,[[["vec",3],["tostring",8],["canisterid",3]]]],[11,"wait_ingress","","Requests the status of a pending canister update call…",1,[[["canisterid",3],["messageid",3],["instant",3]]]],[11,"ic_api_version","","Requests the version of the public spec supported by this…",1,[[]]],[11,"impl_version","","Requests the Replica impl version of this node by querying…",1,[[]]],[11,"root_key","","Requests the root key of this node by querying…",1,[[]]],[11,"http_client","","",1,[[],["httpclient",3]]],[11,"install_canister","","",1,[[["installcodeargs",3]]]],[0,"cbor","ic_canister_client","Asynchronous method to interact with canisters.",null,null],[3,"RequestStatus","ic_canister_client::cbor","",null,null],[12,"status","","",5,null],[12,"reply","","",5,null],[12,"reject_message","","",5,null],[3,"CanisterCallResponse","","",null,null],[12,"status","","",6,null],[12,"arg","","",6,null],[12,"reject_message","","",6,null],[5,"parse_read_state_response","","Given a CBOR response from a `read_state` and a…",null,[[["messageid",3],["cbor",4]],[["result",4],["requeststatus",3],["string",3]]]],[11,"prepare_update_raw","ic_canister_client::agent","Prepares an update request.",1,[[["time",3],["vec",3],["canisterid",3],["tostring",8]],[["result",4],["box",3]]]],[11,"prepare_update","","Prepares and serailizes a CBOR update request.",1,[[["vec",3],["canisterid",3],["tostring",8]],[["box",3],["result",4]]]],[11,"prepare_query","","Prepares and serializes a CBOR query request.",1,[[["vec",3],["canisterid",3]],[["vec",3],["result",4],["box",3]]]],[11,"prepare_read_state","","Prepares and serializes a CBOR read_state request, with…",1,[[],[["vec",3],["result",4],["box",3]]]],[11,"new","ic_canister_client","",7,[[]]],[11,"send_post_request","","",7,[[["vec",3],["instant",3]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"equivalent","","",8,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","ic_canister_client::agent","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","ic_canister_client::cbor","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"eq","ic_canister_client","",8,[[]]],[11,"eq","","",8,[[["statuscode",3]]]],[11,"ne","","",8,[[["statuscode",3]]]],[11,"default","","",8,[[],["statuscode",3]]],[11,"cmp","","",8,[[["statuscode",3]],["ordering",4]]],[11,"fmt","","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",8,[[],["statuscode",3]]],[11,"from_str","","",8,[[],[["invalidstatuscode",3],["result",4],["statuscode",3]]]],[11,"try_from","","",8,[[],[["result",4],["statuscode",3]]]],[11,"try_from","","",8,[[],[["result",4],["statuscode",3]]]],[11,"try_from","","",8,[[],[["result",4],["statuscode",3]]]],[11,"partial_cmp","","",8,[[["statuscode",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["statuscode",3]]]],[11,"le","","",8,[[["statuscode",3]]]],[11,"gt","","",8,[[["statuscode",3]]]],[11,"ge","","",8,[[["statuscode",3]]]],[11,"from","","",8,[[["statuscode",3]],["statuscode",3]]],[11,"hash","","",8,[[]]],[11,"clone","ic_canister_client::agent","",0,[[],["clonablekeypair",3]]],[11,"clone","","",9,[[],["secp256k1keypair",3]]],[11,"clone","","",2,[[],["sigkeys",4]]],[11,"clone","","",3,[[],["sender",4]]],[11,"clone","","",1,[[],["agent",3]]],[11,"clone","ic_canister_client","",7,[[],["httpclient",3]]],[11,"default","","",7,[[]]],[11,"eq","ic_canister_client::cbor","",5,[[["requeststatus",3]]]],[11,"ne","","",5,[[["requeststatus",3]]]],[11,"fmt","ic_canister_client::agent","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_canister_client::cbor","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"from_u16","ic_canister_client","Converts a u16 to a status code.",8,[[],[["invalidstatuscode",3],["result",4],["statuscode",3]]]],[11,"from_bytes","","Converts a &[u8] to a status code",8,[[],[["invalidstatuscode",3],["result",4],["statuscode",3]]]],[11,"as_u16","","Returns the `u16` corresponding to this `StatusCode`.",8,[[]]],[11,"as_str","","Returns a &str representation of the `StatusCode`",8,[[]]],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",8,[[],["option",4]]],[11,"is_informational","","Check if status is within 100-199.",8,[[]]],[11,"is_success","","Check if status is within 200-299.",8,[[]]],[11,"is_redirection","","Check if status is within 300-399.",8,[[]]],[11,"is_client_error","","Check if status is within 400-499.",8,[[]]],[11,"is_server_error","","Check if status is within 500-599.",8,[[]]],[18,"CONTINUE","","100 Continue [RFC7231, Section 6.2.1]",8,null],[18,"SWITCHING_PROTOCOLS","","101 Switching Protocols [RFC7231, Section 6.2.2]",8,null],[18,"PROCESSING","","102 Processing [RFC2518]",8,null],[18,"OK","","200 OK [RFC7231, Section 6.3.1]",8,null],[18,"CREATED","","201 Created [RFC7231, Section 6.3.2]",8,null],[18,"ACCEPTED","","202 Accepted [RFC7231, Section 6.3.3]",8,null],[18,"NON_AUTHORITATIVE_INFORMATION","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",8,null],[18,"NO_CONTENT","","204 No Content [RFC7231, Section 6.3.5]",8,null],[18,"RESET_CONTENT","","205 Reset Content [RFC7231, Section 6.3.6]",8,null],[18,"PARTIAL_CONTENT","","206 Partial Content [RFC7233, Section 4.1]",8,null],[18,"MULTI_STATUS","","207 Multi-Status [RFC4918]",8,null],[18,"ALREADY_REPORTED","","208 Already Reported [RFC5842]",8,null],[18,"IM_USED","","226 IM Used [RFC3229]",8,null],[18,"MULTIPLE_CHOICES","","300 Multiple Choices [RFC7231, Section 6.4.1]",8,null],[18,"MOVED_PERMANENTLY","","301 Moved Permanently [RFC7231, Section 6.4.2]",8,null],[18,"FOUND","","302 Found [RFC7231, Section 6.4.3]",8,null],[18,"SEE_OTHER","","303 See Other [RFC7231, Section 6.4.4]",8,null],[18,"NOT_MODIFIED","","304 Not Modified [RFC7232, Section 4.1]",8,null],[18,"USE_PROXY","","305 Use Proxy [RFC7231, Section 6.4.5]",8,null],[18,"TEMPORARY_REDIRECT","","307 Temporary Redirect [RFC7231, Section 6.4.7]",8,null],[18,"PERMANENT_REDIRECT","","308 Permanent Redirect [RFC7238]",8,null],[18,"BAD_REQUEST","","400 Bad Request [RFC7231, Section 6.5.1]",8,null],[18,"UNAUTHORIZED","","401 Unauthorized [RFC7235, Section 3.1]",8,null],[18,"PAYMENT_REQUIRED","","402 Payment Required [RFC7231, Section 6.5.2]",8,null],[18,"FORBIDDEN","","403 Forbidden [RFC7231, Section 6.5.3]",8,null],[18,"NOT_FOUND","","404 Not Found [RFC7231, Section 6.5.4]",8,null],[18,"METHOD_NOT_ALLOWED","","405 Method Not Allowed [RFC7231, Section 6.5.5]",8,null],[18,"NOT_ACCEPTABLE","","406 Not Acceptable [RFC7231, Section 6.5.6]",8,null],[18,"PROXY_AUTHENTICATION_REQUIRED","","407 Proxy Authentication Required [RFC7235, Section 3.2]",8,null],[18,"REQUEST_TIMEOUT","","408 Request Timeout [RFC7231, Section 6.5.7]",8,null],[18,"CONFLICT","","409 Conflict [RFC7231, Section 6.5.8]",8,null],[18,"GONE","","410 Gone [RFC7231, Section 6.5.9]",8,null],[18,"LENGTH_REQUIRED","","411 Length Required [RFC7231, Section 6.5.10]",8,null],[18,"PRECONDITION_FAILED","","412 Precondition Failed [RFC7232, Section 4.2]",8,null],[18,"PAYLOAD_TOO_LARGE","","413 Payload Too Large [RFC7231, Section 6.5.11]",8,null],[18,"URI_TOO_LONG","","414 URI Too Long [RFC7231, Section 6.5.12]",8,null],[18,"UNSUPPORTED_MEDIA_TYPE","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",8,null],[18,"RANGE_NOT_SATISFIABLE","","416 Range Not Satisfiable [RFC7233, Section 4.4]",8,null],[18,"EXPECTATION_FAILED","","417 Expectation Failed [RFC7231, Section 6.5.14]",8,null],[18,"IM_A_TEAPOT","","418 I\'m a teapot [curiously not registered by IANA but…",8,null],[18,"MISDIRECTED_REQUEST","","421 Misdirected Request RFC7540, Section 9.1.2",8,null],[18,"UNPROCESSABLE_ENTITY","","422 Unprocessable Entity [RFC4918]",8,null],[18,"LOCKED","","423 Locked [RFC4918]",8,null],[18,"FAILED_DEPENDENCY","","424 Failed Dependency [RFC4918]",8,null],[18,"UPGRADE_REQUIRED","","426 Upgrade Required [RFC7231, Section 6.5.15]",8,null],[18,"PRECONDITION_REQUIRED","","428 Precondition Required [RFC6585]",8,null],[18,"TOO_MANY_REQUESTS","","429 Too Many Requests [RFC6585]",8,null],[18,"REQUEST_HEADER_FIELDS_TOO_LARGE","","431 Request Header Fields Too Large [RFC6585]",8,null],[18,"UNAVAILABLE_FOR_LEGAL_REASONS","","451 Unavailable For Legal Reasons [RFC7725]",8,null],[18,"INTERNAL_SERVER_ERROR","","500 Internal Server Error [RFC7231, Section 6.6.1]",8,null],[18,"NOT_IMPLEMENTED","","501 Not Implemented [RFC7231, Section 6.6.2]",8,null],[18,"BAD_GATEWAY","","502 Bad Gateway [RFC7231, Section 6.6.3]",8,null],[18,"SERVICE_UNAVAILABLE","","503 Service Unavailable [RFC7231, Section 6.6.4]",8,null],[18,"GATEWAY_TIMEOUT","","504 Gateway Timeout [RFC7231, Section 6.6.5]",8,null],[18,"HTTP_VERSION_NOT_SUPPORTED","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",8,null],[18,"VARIANT_ALSO_NEGOTIATES","","506 Variant Also Negotiates [RFC2295]",8,null],[18,"INSUFFICIENT_STORAGE","","507 Insufficient Storage [RFC4918]",8,null],[18,"LOOP_DETECTED","","508 Loop Detected [RFC5842]",8,null],[18,"NOT_EXTENDED","","510 Not Extended [RFC2774]",8,null],[18,"NETWORK_AUTHENTICATION_REQUIRED","","511 Network Authentication Required [RFC6585]",8,null]],"p":[[3,"ClonableKeyPair"],[3,"Agent"],[4,"SigKeys"],[4,"Sender"],[13,"ExternalHsm"],[3,"RequestStatus"],[3,"CanisterCallResponse"],[3,"HttpClient"],[3,"HttpStatusCode"],[3,"Secp256k1KeyPair"]]},\
"ic_canonical_state":{"doc":"Conversion, filtering and encoding of Replicated State as…","i":[[5,"traverse","ic_canonical_state","Traverses `state` as if it was a state in canonical form…",null,[[["visitor",8],["replicatedstate",3]]]],[5,"traverse_partial","","Traverses `state` partially (Wasm state excluded). It\'s…",null,[[["visitor",8],["replicatedstate",3]]]],[0,"encoding","","Provides canonical CBOR encoding for Canonical State tree…",null,null],[5,"encode_message","ic_canonical_state::encoding","Encodes a `RequestOrResponse` into canonical CBOR…",null,[[["requestorresponse",4]],["vec",3]]],[5,"decode_message","","Decodes a `RequestOrResponse` from canonical CBOR…",null,[[],[["result",4],["requestorresponse",4],["proxydecodeerror",4]]]],[5,"encode_stream_header","","Encodes a `StreamHeader` into canonical CBOR representation.",null,[[["streamheader",3]],["vec",3]]],[5,"decode_stream_header","","Decodes a `StreamHeader` from canonical CBOR representation.",null,[[],[["result",4],["streamheader",3],["proxydecodeerror",4]]]],[5,"encode_metadata","","Encodes a `SystemMetadata` into canonical CBOR…",null,[[["systemmetadata",3]],["vec",3]]],[8,"CborProxyEncoder","","Allows a canonical type to act as a proxy for encoding a…",null,null],[10,"proxy_encode","","Encodes `t` into a vector via this proxy.",0,[[],[["vec",3],["result",4],["error",3]]]],[8,"CborProxyDecoder","","Allows a canonical type to act as a proxy for encoding a…",null,null],[10,"proxy_decode","","Decodes a `T` from a slice via this proxy.",1,[[],[["proxydecodeerror",4],["result",4]]]],[0,"lazy_tree","ic_canonical_state","Canonical State traversal using lazy trees, i.e. a tree…",null,null],[4,"Lazy","ic_canonical_state::lazy_tree","Lazy is either a computed value or a function that knows…",null,null],[13,"Value","","",2,null],[13,"Func","","",2,null],[4,"LazyTree","","A tree that can lazily expand while it\'s being traversed.",null,null],[13,"Blob","","",3,null],[13,"LazyBlob","","",3,null],[13,"LazyFork","","",3,null],[5,"fork","","A helper function to construct a fork of a lazy tree.",null,[[],["lazytree",4]]],[5,"blob","","A helper function that constructs a leaf with a lazy blob.",null,[[],["lazytree",4]]],[5,"string","","A helper function that construct a leaf from a string.",null,[[],["lazytree",4]]],[5,"num","","A helper function that construct a leaf from a number.",null,[[],["lazytree",4]]],[5,"follow_path","","A function that extracts a value from the lazy tree by the…",null,[[["lazytree",4]],[["lazytree",4],["option",4]]]],[0,"conversion","","Conversion from `ReplicatedState` to `LazyTree`.",null,null],[8,"LabelLike","ic_canonical_state::lazy_tree::conversion","LabelLike defines a (partial) conversion between a type…",null,null],[10,"to_label","","",4,[[],["vec",3]]],[10,"from_label","","",4,[[],["option",4]]],[0,"materialize","ic_canonical_state::lazy_tree","Support for materializing (part of) a [`LazyTree`] as a…",null,null],[5,"materialize_partial","ic_canonical_state::lazy_tree::materialize","This function provides materializing a LazyTree partially,…",null,[[["lazytree",4],["treepattern",6]],[["option",4],["labeledtree",4]]]],[6,"TreePattern","","A pattern to be used for fitering the parts of a…",null,null],[6,"ArcFn","ic_canonical_state::lazy_tree","A type alias for a ref-counted stateless function.",null,null],[8,"LazyFork","","The trait representing interface of a fork in the lazy tree.",null,null],[10,"edge","","Retrieves a subtree with the specified `label`.",5,[[],[["lazytree",4],["option",4]]]],[10,"labels","","Enumerates all the labels reachable from this fork.",5,[[],[["box",3],["iterator",8]]]],[11,"force","","",2,[[]]],[0,"size_limit_visitor","ic_canonical_state","Canonical State [`Visitor`] that limits the byte size of…",null,null],[3,"SizeLimitVisitor","ic_canonical_state::size_limit_visitor","Visitor that limits the byte size of blob leaves matching…",null,null],[4,"Matcher","","Simple label matcher: either any label matches; or only…",null,null],[13,"Any","","Match any label.",6,null],[13,"Label","","Match a specific label.",6,null],[11,"new","","",7,[[["matcher",4],["vec",3]]]],[0,"subtree_visitor","ic_canonical_state","Canonical State [`Visitor`] that filters the nodes seen by…",null,null],[3,"Pattern","ic_canonical_state::subtree_visitor","Pattern defines a rule to filter a tree.",null,null],[3,"SubtreeVisitor","","Visitor that applies visitor V to the subtree that matches…",null,null],[11,"all","","Match any subtree.",8,[[]]],[11,"none","","Discard any tree.",8,[[]]],[11,"any","","Match all edges at first level and apply the pattern for…",8,[[]]],[11,"match_only","","Create a constructor that matches a single edge with the…",8,[[]]],[11,"match_any","","Match the specified subset of edges and apply the…",8,[[]]],[11,"match_range","","Match all the edges in range [from, to) and apply the…",8,[[["pattern",3]]]],[11,"new","","",9,[[["pattern",3]]]],[0,"visitor","ic_canonical_state","Utilities for traversing the Replicated State as if it was…",null,null],[4,"Control","ic_canonical_state::visitor","Data structure controlling the traversal of the state tree.",null,null],[13,"Continue","","Continue descending into the state tree.",10,null],[13,"Skip","","Skip the subtree this edge point to.",10,null],[5,"subtree","","Executes a function in the scope of a new subtree.",null,[[],["result",4]]],[5,"with_edge","","Enter edge labeled as `name` and execute `f` if it was not…",null,[[["asref",8]],["result",4]]],[5,"named_subtree","","Executes a function in a scope of a new subtree after…",null,[[["asref",8]],["result",4]]],[5,"named_blob","","Visits the `blob` after entering edge with the given name.",null,[[["asref",8]],["result",4]]],[5,"named_num","","Visits the `num` after entering edge with the given name.",null,[[["asref",8]],["result",4]]],[8,"Visitor","","`Visitor` can compute a value on a canonical state tree…",null,null],[16,"Output","","If the traversal succeeds, it produces a value of this type.",11,null],[10,"start_subtree","","Start a subtree traversal.",11,[[],["result",4]]],[10,"end_subtree","","Complete the subtree traversal.",11,[[],["result",4]]],[10,"enter_edge","","Descend into the subtree along the edge labeled with…",11,[[],[["control",4],["result",4]]]],[10,"visit_num","","Visit a leaf of the state tree that contains a number.",11,[[],["result",4]]],[10,"visit_blob","","Visit a leaf of the state tree that contains a `blob`.",11,[[],["result",4]]],[10,"finish","","Complete the tree traversal.",11,[[]]],[6,"Label","ic_canonical_state","Label applied to tree edges in the Canonical State.",null,null],[17,"CURRENT_CERTIFICATION_VERSION","","The Canonical State certification version produced by this…",null,null],[11,"from","ic_canonical_state::lazy_tree","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","ic_canonical_state::size_limit_visitor","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"equivalent","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","ic_canonical_state::subtree_visitor","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"equivalent","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","ic_canonical_state::visitor","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"equivalent","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"start_subtree","ic_canonical_state::size_limit_visitor","",7,[[],["result",4]]],[11,"enter_edge","","",7,[[],[["result",4],["control",4]]]],[11,"end_subtree","","",7,[[],["result",4]]],[11,"visit_blob","","",7,[[],["result",4]]],[11,"visit_num","","",7,[[],["result",4]]],[11,"finish","","",7,[[]]],[11,"start_subtree","ic_canonical_state::subtree_visitor","",9,[[],["result",4]]],[11,"enter_edge","","",9,[[],[["result",4],["control",4]]]],[11,"end_subtree","","",9,[[],["result",4]]],[11,"visit_blob","","",9,[[],["result",4]]],[11,"visit_num","","",9,[[],["result",4]]],[11,"finish","","",9,[[]]],[11,"from","ic_canonical_state::lazy_tree","",3,[[["replicatedstate",3]],["lazytree",4]]],[11,"clone","","",2,[[],["lazy",4]]],[11,"clone","","",3,[[],["lazytree",4]]],[11,"clone","ic_canonical_state::size_limit_visitor","",6,[[],["matcher",4]]],[11,"clone","ic_canonical_state::subtree_visitor","",8,[[],["pattern",3]]],[11,"eq","ic_canonical_state::size_limit_visitor","",6,[[["matcher",4]]]],[11,"ne","","",6,[[["matcher",4]]]],[11,"eq","ic_canonical_state::subtree_visitor","",8,[[["pattern",3]]]],[11,"ne","","",8,[[["pattern",3]]]],[11,"eq","ic_canonical_state::visitor","",10,[[["control",4]]]],[11,"fmt","ic_canonical_state::size_limit_visitor","",6,[[["formatter",3]],["result",6]]],[11,"fmt","ic_canonical_state::subtree_visitor","",8,[[["formatter",3]],["result",6]]],[11,"fmt","ic_canonical_state::visitor","",10,[[["formatter",3]],["result",6]]]],"p":[[8,"CborProxyEncoder"],[8,"CborProxyDecoder"],[4,"Lazy"],[4,"LazyTree"],[8,"LabelLike"],[8,"LazyFork"],[4,"Matcher"],[3,"SizeLimitVisitor"],[3,"Pattern"],[3,"SubtreeVisitor"],[4,"Control"],[8,"Visitor"]]},\
"ic_certified_vars":{"doc":"","i":[[4,"CertificateValidationError","ic_certified_vars","Describes an error that occurred during parsing and…",null,null],[13,"DeserError","","Failed to deserialize some part of the certificate.",0,null],[13,"InvalidSignature","","Signature verification failed.",0,null],[13,"CertifiedDataMismatch","","The value at path `/canister/<cid>/certified_data` does…",0,null],[12,"certified","ic_certified_vars::CertificateValidationError","",1,null],[12,"computed","","",1,null],[13,"MalformedHashTree","ic_certified_vars","The hash tree in the response was not well-formed.",0,null],[13,"SubnetDelegationNotAllowed","","The certification contains a subnet delegation, which is…",0,null],[5,"verify_certificate","","Checks if the specified certificate verifies the certified…",null,[[["canisterid",3],["thresholdsigpublickey",3]],[["result",4],["time",3],["certificatevalidationerror",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[4,"CertificateValidationError"],[13,"CertifiedDataMismatch"]]},\
"ic_config":{"doc":"","i":[[0,"config","ic_config","This module defines the `Config` data structure which is…",null,null],[3,"Config","ic_config::config","The config struct for the replica. Just consists of…",null,null],[12,"registry_client","","",0,null],[12,"transport","","",0,null],[12,"state_manager","","",0,null],[12,"scheduler","","",0,null],[12,"hypervisor","","",0,null],[12,"http_handler","","",0,null],[12,"metrics","","",0,null],[12,"artifact_pool","","",0,null],[12,"consensus","","",0,null],[12,"crypto","","",0,null],[12,"logger","","",0,null],[12,"nodemanager_logger","","",0,null],[12,"message_routing","","",0,null],[12,"malicious_behaviour","","",0,null],[12,"firewall","","",0,null],[12,"registration","","",0,null],[12,"nns_registry_replicator","","",0,null],[3,"ConfigOptional","","Mirrors the Config struct except that fields are made…",null,null],[12,"registry_client","","",1,null],[12,"transport","","",1,null],[12,"state_manager","","",1,null],[12,"scheduler","","",1,null],[12,"hypervisor","","",1,null],[12,"http_handler","","",1,null],[12,"metrics","","",1,null],[12,"artifact_pool","","",1,null],[12,"consensus","","",1,null],[12,"crypto","","",1,null],[12,"logger","","",1,null],[12,"nodemanager_logger","","",1,null],[12,"message_routing","","",1,null],[12,"malicious_behaviour","","",1,null],[12,"firewall","","",1,null],[12,"registration","","",1,null],[12,"nns_registry_replicator","","",1,null],[11,"new","","Return a [Config] with default settings that put all paths…",0,[[["pathbuf",3]]]],[11,"run_with_temp_config","","Run a function with default [Config] created with…",0,[[]]],[11,"temp_config","","Return a function with default [Config] created with…",0,[[]]],[11,"load_with_default","","Load [Config] from the given \'config_descr\' where if a…",0,[[["configsource",4],["config",3]],[["configerror",4],["result",4]]]],[11,"load_with_tmpdir","","Load the Replica config from the given source",0,[[["pathbuf",3],["configsource",4]],["config",3]]],[0,"config_parser","ic_config","",null,null],[4,"ConfigSource","ic_config::config_parser","ConfigSource specifies source of a serialized…",null,null],[13,"Default","","Use the hard-coded default configuration.",2,null],[13,"StdIn","","Read the config from stdin.",2,null],[13,"Literal","","Use the literal string as the entire content of the config.",2,null],[13,"File","","Read the config from the specified file.",2,null],[4,"ConfigError","","",null,null],[13,"IoError","","An error occurred during config file I/O.",3,null],[12,"source","ic_config::config_parser::ConfigError","",4,null],[12,"io_error","","",4,null],[13,"ParseError","ic_config::config_parser","Failed to parse configuration.",3,null],[12,"source","ic_config::config_parser::ConfigError","",5,null],[12,"message","","",5,null],[13,"ValidationError","ic_config::config_parser","Failed to validate configuration",3,null],[12,"source","ic_config::config_parser::ConfigError","",6,null],[12,"message","","",6,null],[8,"ConfigValidate","ic_config::config_parser","Rules for validating the values of the Config struct This…",null,null],[10,"validate","","",7,[[],[["result",4],["string",3]]]],[11,"load","","Loads a value from the provided config source. The source…",2,[[],[["default",8],["result",4],["configvalidate",8],["configerror",4],["deserializeowned",8]]]],[0,"config_sample","ic_config","",null,null],[17,"SAMPLE_CONFIG","ic_config::config_sample","This constant contains a configuration of ic-replica with…",null,null],[0,"subnet_config","ic_config","This module implements support for static configurations…",null,null],[3,"SchedulerConfig","ic_config::subnet_config","The per subnet type configuration for the scheduler…",null,null],[12,"scheduler_cores","","Number of canisters that the scheduler is allowed to…",8,null],[12,"max_instructions_per_round","","Maximum amount of instructions a single round can consume…",8,null],[12,"max_instructions_per_message","","Maximum amount of instructions a single message\'s…",8,null],[12,"subnet_heap_delta_capacity","","This specifies the upper limit on how much heap delta all…",8,null],[3,"CyclesAccountManagerConfig","","",null,null],[12,"canister_creation_fee","","Fee for creating canisters on a subnet",9,null],[12,"update_message_execution_fee","","Fee for every update message executed",9,null],[12,"ten_update_instructions_execution_fee","","Fee for every 10 instructions executed when executing…",9,null],[12,"xnet_call_fee","","Fee for every inter-canister call performed. This includes…",9,null],[12,"xnet_byte_transmission_fee","","Fee for every byte sent in an inter-canister call. The fee…",9,null],[12,"ingress_message_reception_fee","","Fee for every ingress message received.",9,null],[12,"ingress_byte_reception_fee","","Fee for every byte received in an ingress message.",9,null],[12,"gib_storage_per_second_fee","","Fee for storing a GiB of data per second.",9,null],[12,"compute_percent_allocated_per_second_fee","","Fee for each percent of the reserved compute allocation.…",9,null],[3,"CowMemoryManagerConfig","","The per subnet type configuration for CoW Memory Manager",null,null],[12,"enabled","","Flag to enable or disable the feature",10,null],[3,"SubnetConfig","","If a component has at least one static configuration that…",null,null],[12,"scheduler_config","","",11,null],[12,"cycles_account_manager_config","","",11,null],[12,"cow_memory_manager_config","","",11,null],[3,"SubnetConfigs","","A struct that holds the per subnet configuration for all…",null,null],[11,"application_subnet","","",8,[[]]],[11,"system_subnet","","",8,[[]]],[11,"verified_application_subnet","","",8,[[]]],[11,"application_subnet","","",9,[[]]],[11,"verified_application_subnet","","",9,[[]]],[11,"system_subnet","","All processing is free on system subnets",9,[[]]],[11,"application_subnet","","",10,[[]]],[11,"system_subnet","","",10,[[]]],[11,"verified_application_subnet","","",10,[[]]],[11,"default_application_subnet","","Returns the subnet configuration for the application…",11,[[]]],[11,"default_system_subnet","","Returns the subnet configuration for the system subnet type.",11,[[]]],[11,"default_verified_application_subnet","","Returns the subnet configuration for the verified…",11,[[]]],[11,"own_subnet_config","","Returns the appropriate subnet configuration based on the…",12,[[["subnettype",4]],["subnetconfig",3]]],[0,"artifact_pool","ic_config","",null,null],[3,"ArtifactPoolTomlConfig","ic_config::artifact_pool","External configuration for artifact pools meant to be used…",null,null],[12,"consensus_pool_path","","The path in which to store the validated section of the…",13,null],[12,"ingress_pool_size_threshold","","If the total entries in validated + unvalidated ingress…",13,null],[12,"consensus_pool_backend","","Choice of persistent pool backend database. None means…",13,null],[12,"backup_spool_path","","Path to a folder with write permissions, for consensus…",13,null],[3,"ArtifactPoolConfig","","The configuration for the ingress and consensus artifact…",null,null],[12,"ingress_pool_validated_capacity","","The maximum size, in number of messages, of the validated…",14,null],[12,"ingress_pool_unvalidated_capacity_per_peer","","The maximum size, in number of messages, of the…",14,null],[12,"ingress_pool_size_threshold","","Threshold for ingress rate limiting. If this field is not…",14,null],[12,"consensus_pool_unvalidated_capacity_per_peer","","The maximum size, in number of messages, of the…",14,null],[12,"consensus_pool_validated_capacity","","The maximum size, in number of messages, of the validated…",14,null],[12,"persistent_pool_backend","","Choice of persistent pool backend",14,null],[12,"persistent_pool_read_only","","Whether the persistent pool should be opened as read-only",14,null],[12,"backup_spool_path","","Path to a folder with write permissions, for consensus…",14,null],[3,"LMDBConfig","","LMDB specific configuration",null,null],[12,"persistent_pool_validated_persistent_db_path","","The path at which the validated section of the persistent…",15,null],[3,"RocksDBConfig","","RocksDB specific configuration",null,null],[12,"persistent_pool_validated_skip_fsync_for_tests","","Whether the validated section on the artifact pool, which…",16,null],[12,"persistent_pool_validated_persistent_db_path","","The path at which the validated section of the persistent…",16,null],[12,"persistent_pool_validated_purge_interval","","Consensus pool is purged at a fixed interval.",16,null],[4,"PersistentPoolBackend","","Choice of persistent pool database is either LMDB or…",null,null],[13,"LMDB","","",17,null],[13,"RocksDB","","",17,null],[11,"new","","Create a ArtifactPoolTomlConfig from a given path to the…",13,[[["pathbuf",3],["option",4]]]],[11,"new","","",14,[[["pathbuf",3]],["artifactpoolconfig",3]]],[11,"persistent_pool_db_path","","Return the directory path to the persistent pool database.",14,[[],["pathbuf",3]]],[0,"consensus","ic_config","",null,null],[3,"ConsensusConfig","ic_config::consensus","",null,null],[11,"new","","",18,[[]]],[11,"detect_starvation","","",18,[[]]],[0,"crypto","ic_config","",null,null],[3,"CryptoConfig","ic_config::crypto","`# use ic_config::crypto::CryptoConfig; let config = \\\"{…",null,null],[12,"crypto_root","","Path to use for storing state on the file system",19,null],[11,"new","","Return a new CryptoConfig with the given crypto_root path.",19,[[["pathbuf",3]]]],[11,"new_in_temp_dir","","Creates a new CryptoConfig in a temporary directory and…",19,[[]]],[11,"run_with_temp_config","","Run the given `run` function with a new CryptoConfig…",19,[[]]],[11,"set_dir_with_required_permission","","Set a directory permission to u+rwx (0700), which is…",19,[[["pathbuf",3]],[["result",4],["string",3]]]],[0,"embedders","ic_config","",null,null],[3,"Config","ic_config::embedders","",null,null],[12,"persistence_type","","",20,null],[12,"max_wasm_stack_size","","",20,null],[12,"num_runtime_generic_threads","","",20,null],[12,"num_runtime_query_threads","","",20,null],[12,"max_globals","","",20,null],[12,"max_functions","","",20,null],[4,"PersistenceType","","",null,null],[13,"Sigsegv","","",21,null],[13,"Pagemap","","",21,null],[4,"EmbedderType","","",null,null],[13,"Wasmtime","","",22,null],[11,"new","","",20,[[]]],[0,"execution_environment","ic_config","",null,null],[3,"Config","ic_config::execution_environment","",null,null],[12,"embedder_type","","",23,null],[12,"persistence_type","","",23,null],[12,"create_funds_whitelist","","This is no longer used in the code. It is not removed yet…",23,null],[12,"max_instructions_for_message_acceptance_calls","","The maximum number of instructions that the methods that…",23,null],[12,"subnet_memory_capacity","","The maximum amount of logical storage available to all the…",23,null],[12,"max_canister_memory_size","","The maximum amount of memory that can be utilized by a…",23,null],[12,"max_cycles_per_canister","","The maximum amount of cycles a canister can hold. If set…",23,null],[12,"default_provisional_cycles_balance","","The default value used when provisioning a canister if…",23,null],[12,"default_freeze_threshold","","The default number of seconds after which a canister will…",23,null],[12,"max_globals","","Maximum number of globals allowed in a Wasm module.",23,null],[12,"max_functions","","Maximum number of functions allowed in a Wasm module.",23,null],[0,"firewall","ic_config","",null,null],[3,"Config","ic_config::firewall","",null,null],[12,"config_file","","Path to use for storing state on the file system",24,null],[12,"firewall_config","","",24,null],[12,"ipv4_prefixes","","",24,null],[12,"ipv6_prefixes","","",24,null],[17,"FIREWALL_FILE_DEFAULT_PATH","","",null,null],[0,"http_handler","ic_config","",null,null],[3,"ExternalConfig","ic_config::http_handler","The external configuration that can be loaded from a…",null,null],[12,"port","","DEPRECATED: Use `listen_addr` instead.",25,null],[12,"listen_addr","","IP address and port to listen on",25,null],[12,"allow_ipv6_my_users_have_no_privacy","","An escape hatch to allow API traffic over IPv6 if…",25,null],[12,"show_root_key_in_status","","",25,null],[12,"clients_x509_cert","","",25,null],[3,"Config","","The internal configuration -- any historical warts from…",null,null],[12,"listen_addr","","IP address and port to listen on",26,null],[12,"port_file_path","","The path to write the listening port to",26,null],[12,"show_root_key_in_status","","True if the replica public key is returned from the…",26,null],[12,"clients_x509_cert","","The digital certificate used by TLS.",26,null],[4,"PortConfig","","The port configuration. Defaults to using port 8080.",null,null],[13,"Port","","Instructs the HTTP handler to use the specified port",27,null],[13,"WritePortTo","","Instructs the HTTP handler to bind to any open port and…",27,null],[0,"logger","ic_config","",null,null],[3,"Config","ic_config::logger","",null,null],[12,"node_id","","",28,null],[12,"dc_id","","",28,null],[12,"level","","",28,null],[12,"format","","",28,null],[12,"debug_overrides","","",28,null],[12,"sampling_rates","","",28,null],[12,"enabled_tags","","",28,null],[12,"target","","",28,null],[12,"block_on_overflow","","",28,null],[4,"LevelDef","","Represents the required log level defined in the…",null,null],[13,"Critical","","",29,null],[13,"Error","","",29,null],[13,"Warning","","",29,null],[13,"Info","","",29,null],[13,"Debug","","",29,null],[13,"Trace","","",29,null],[4,"LogFormat","","The format of emitted log lines",null,null],[13,"TextFull","","",30,null],[13,"Json","","",30,null],[4,"LogTarget","","",null,null],[13,"Stdout","","",31,null],[13,"Stderr","","",31,null],[13,"File","","",31,null],[5,"default_logtarget","","",null,[[],["logtarget",4]]],[0,"message_routing","ic_config","",null,null],[3,"Config","ic_config::message_routing","Message Routing replica config.",null,null],[12,"xnet_ip_addr","","",32,null],[12,"xnet_port","","",32,null],[0,"metrics","ic_config","",null,null],[3,"Config","ic_config::metrics","",null,null],[12,"exporter","","",33,null],[12,"clients_x509_cert","","Clients X509 certificate used for establishing TLS…",33,null],[4,"Exporter","","",null,null],[13,"Log","","Log metrics at `TRACE` level every 30 seconds.",34,null],[13,"Http","","Expose Prometheus metrics on the specified address.",34,null],[13,"File","","Dump metrics to the given file on shutdown.",34,null],[0,"nns_registry_replicator","ic_config","",null,null],[3,"Config","ic_config::nns_registry_replicator","Configuration of the NNS Registry Replicator.",null,null],[12,"poll_delay_duration_ms","","The duration to",35,null],[0,"registration","ic_config","",null,null],[3,"Config","ic_config::registration","We assume pre-agreed values when interacting with the USB…",null,null],[12,"pkcs11_keycard_transport_pin","","The transport PIN required for the DC-owned USB HSM.",36,null],[12,"pkcs11_keycard_key_id","","The key id of the key to be used.",36,null],[12,"pkcs11_keycard_slot","","The slot to be used to fetch the public key.",36,null],[12,"eject_keycard_signal_file","","During registration, this file is created the first time…",36,null],[12,"nns_url","","When the node manager runs the first time, it will attempt…",36,null],[12,"nns_pub_key_pem","","Public key of the NNS that is used to verify the response…",36,null],[0,"registry_client","ic_config","",null,null],[3,"Config","ic_config::registry_client","Eventually, the replica will only read registry data from…",null,null],[12,"data_provider","","",37,null],[4,"DataProviderConfig","","",null,null],[13,"Bootstrap","","DEPRECATED On an initial node of the NNS subnetwork, the…",38,null],[12,"initial_registry_file","ic_config::registry_client::DataProviderConfig","",39,null],[12,"registry_canister_url","","",39,null],[13,"RegistryCanisterUrl","ic_config::registry_client","DEPRECATED Comma separated list of base Urls of a node on…",38,null],[13,"ProtobufFile","","DEPRECATED A protobuf file that contains a snapshot of the…",38,null],[13,"LocalStore","","A path to a directory that containing the locally…",38,null],[11,"get_registry_urls","","",38,[[],[["vec",3],["url",3]]]],[0,"scheduler","ic_config","",null,null],[3,"Config","ic_config::scheduler","",null,null],[12,"nns_subnet_scheduler_cores","","Number of canisters that the scheduler is allowed to…",40,null],[12,"non_nns_subnet_scheduler_cores","","Number of canisters that the scheduler is allowed to…",40,null],[12,"max_instructions_per_round","","Maximum amount of instructions a single round can consume…",40,null],[12,"max_instructions_per_message","","Maximum amount of instructions a single message\'s…",40,null],[12,"subnet_state_delta_change_capacity","","This specifies the upper limit on how much delta all the…",40,null],[12,"round_cycles_max","","Maximum amount of cycles a single round can consume (on…",40,null],[12,"exec_cycles","","Maximum amount of cycles a single message\'s execution can…",40,null],[12,"scheduler_cores","","Number of cores that the execution component is allowed to…",40,null],[0,"state_manager","ic_config","",null,null],[3,"Config","ic_config::state_manager","",null,null],[11,"new","","",41,[[["pathbuf",3]]]],[11,"state_root","","",41,[[],["pathbuf",3]]],[11,"from","ic_config::config","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",1,[[]]],[11,"from","ic_config::config_parser","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","ic_config::subnet_config","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","ic_config::artifact_pool","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"erased_serialize","","",13,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","ic_config::consensus","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"erased_serialize","","",18,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",18,[[]]],[11,"from","ic_config::crypto","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"erased_serialize","","",19,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",19,[[]]],[11,"from","ic_config::embedders","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"erased_serialize","","",21,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"erased_serialize","","",22,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",22,[[]]],[11,"from","ic_config::execution_environment","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"erased_serialize","","",23,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",23,[[]]],[11,"from","ic_config::firewall","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"erased_serialize","","",24,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",24,[[]]],[11,"from","ic_config::http_handler","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"erased_serialize","","",25,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"erased_serialize","","",26,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"erased_serialize","","",27,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",27,[[]]],[11,"from","ic_config::logger","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"erased_serialize","","",28,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"erased_serialize","","",30,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"erased_serialize","","",31,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",31,[[]]],[11,"from","ic_config::message_routing","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"erased_serialize","","",32,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",32,[[]]],[11,"from","ic_config::metrics","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"erased_serialize","","",33,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"erased_serialize","","",34,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",34,[[]]],[11,"from","ic_config::nns_registry_replicator","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"erased_serialize","","",35,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",35,[[]]],[11,"from","ic_config::registration","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"erased_serialize","","",36,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",36,[[]]],[11,"from","ic_config::registry_client","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"erased_serialize","","",37,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",37,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"erased_serialize","","",38,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",38,[[]]],[11,"from","ic_config::scheduler","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"erased_serialize","","",40,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",40,[[]]],[11,"from","ic_config::state_manager","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"erased_serialize","","",41,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",41,[[]]],[11,"validate","ic_config::config","",1,[[],[["result",4],["string",3]]]],[11,"from","ic_config::artifact_pool","",14,[[["artifactpooltomlconfig",3]],["artifactpoolconfig",3]]],[11,"clone","ic_config::config","",0,[[],["config",3]]],[11,"clone","","",1,[[],["configoptional",3]]],[11,"clone","ic_config::config_parser","",2,[[],["configsource",4]]],[11,"clone","ic_config::subnet_config","",8,[[],["schedulerconfig",3]]],[11,"clone","","",9,[[],["cyclesaccountmanagerconfig",3]]],[11,"clone","","",10,[[],["cowmemorymanagerconfig",3]]],[11,"clone","","",11,[[],["subnetconfig",3]]],[11,"clone","ic_config::artifact_pool","",13,[[],["artifactpooltomlconfig",3]]],[11,"clone","","",14,[[],["artifactpoolconfig",3]]],[11,"clone","","",17,[[],["persistentpoolbackend",4]]],[11,"clone","","",15,[[],["lmdbconfig",3]]],[11,"clone","","",16,[[],["rocksdbconfig",3]]],[11,"clone","ic_config::consensus","",18,[[],["consensusconfig",3]]],[11,"clone","ic_config::crypto","",19,[[],["cryptoconfig",3]]],[11,"clone","ic_config::embedders","",20,[[],["config",3]]],[11,"clone","","",21,[[],["persistencetype",4]]],[11,"clone","","",22,[[],["embeddertype",4]]],[11,"clone","ic_config::execution_environment","",23,[[],["config",3]]],[11,"clone","ic_config::firewall","",24,[[],["config",3]]],[11,"clone","ic_config::http_handler","",27,[[],["portconfig",4]]],[11,"clone","","",25,[[],["externalconfig",3]]],[11,"clone","","",26,[[],["config",3]]],[11,"clone","ic_config::logger","",29,[[],["leveldef",4]]],[11,"clone","","",30,[[],["logformat",4]]],[11,"clone","","",31,[[],["logtarget",4]]],[11,"clone","","",28,[[],["config",3]]],[11,"clone","ic_config::message_routing","",32,[[],["config",3]]],[11,"clone","ic_config::metrics","",34,[[],["exporter",4]]],[11,"clone","","",33,[[],["config",3]]],[11,"clone","ic_config::nns_registry_replicator","",35,[[],["config",3]]],[11,"clone","ic_config::registration","",36,[[],["config",3]]],[11,"clone","ic_config::registry_client","",37,[[],["config",3]]],[11,"clone","","",38,[[],["dataproviderconfig",4]]],[11,"clone","ic_config::scheduler","",40,[[],["config",3]]],[11,"clone","ic_config::state_manager","",41,[[],["config",3]]],[11,"default","ic_config::config","",1,[[],["configoptional",3]]],[11,"default","ic_config::subnet_config","",12,[[]]],[11,"default","ic_config::consensus","",18,[[]]],[11,"default","ic_config::embedders","",20,[[]]],[11,"default","ic_config::execution_environment","",23,[[]]],[11,"default","ic_config::firewall","",24,[[]]],[11,"default","ic_config::http_handler","",25,[[]]],[11,"default","","",26,[[]]],[11,"default","ic_config::logger","",28,[[]]],[11,"default","ic_config::message_routing","",32,[[]]],[11,"default","ic_config::metrics","",34,[[]]],[11,"default","","",33,[[],["config",3]]],[11,"default","ic_config::nns_registry_replicator","",35,[[]]],[11,"default","ic_config::registration","",36,[[]]],[11,"default","ic_config::registry_client","",37,[[]]],[11,"default","ic_config::scheduler","",40,[[]]],[11,"eq","ic_config::config","",0,[[["config",3]]]],[11,"ne","","",0,[[["config",3]]]],[11,"eq","","",1,[[["configoptional",3]]]],[11,"ne","","",1,[[["configoptional",3]]]],[11,"eq","ic_config::config_parser","",2,[[["configsource",4]]]],[11,"ne","","",2,[[["configsource",4]]]],[11,"eq","ic_config::subnet_config","",9,[[["cyclesaccountmanagerconfig",3]]]],[11,"ne","","",9,[[["cyclesaccountmanagerconfig",3]]]],[11,"eq","ic_config::artifact_pool","",13,[[["artifactpooltomlconfig",3]]]],[11,"ne","","",13,[[["artifactpooltomlconfig",3]]]],[11,"eq","ic_config::consensus","",18,[[["consensusconfig",3]]]],[11,"ne","","",18,[[["consensusconfig",3]]]],[11,"eq","ic_config::crypto","",19,[[["cryptoconfig",3]]]],[11,"ne","","",19,[[["cryptoconfig",3]]]],[11,"eq","ic_config::embedders","",21,[[["persistencetype",4]]]],[11,"eq","","",22,[[["embeddertype",4]]]],[11,"eq","ic_config::execution_environment","",23,[[["config",3]]]],[11,"ne","","",23,[[["config",3]]]],[11,"eq","ic_config::firewall","",24,[[["config",3]]]],[11,"ne","","",24,[[["config",3]]]],[11,"eq","ic_config::http_handler","",27,[[["portconfig",4]]]],[11,"ne","","",27,[[["portconfig",4]]]],[11,"eq","","",25,[[["externalconfig",3]]]],[11,"ne","","",25,[[["externalconfig",3]]]],[11,"eq","","",26,[[["config",3]]]],[11,"ne","","",26,[[["config",3]]]],[11,"eq","ic_config::logger","",30,[[["logformat",4]]]],[11,"eq","","",31,[[["logtarget",4]]]],[11,"ne","","",31,[[["logtarget",4]]]],[11,"eq","","",28,[[["config",3]]]],[11,"ne","","",28,[[["config",3]]]],[11,"eq","ic_config::message_routing","",32,[[["config",3]]]],[11,"ne","","",32,[[["config",3]]]],[11,"eq","ic_config::metrics","",34,[[["exporter",4]]]],[11,"ne","","",34,[[["exporter",4]]]],[11,"eq","","",33,[[["config",3]]]],[11,"ne","","",33,[[["config",3]]]],[11,"eq","ic_config::nns_registry_replicator","",35,[[["config",3]]]],[11,"ne","","",35,[[["config",3]]]],[11,"eq","ic_config::registration","",36,[[["config",3]]]],[11,"ne","","",36,[[["config",3]]]],[11,"eq","ic_config::registry_client","",37,[[["config",3]]]],[11,"ne","","",37,[[["config",3]]]],[11,"eq","","",38,[[["dataproviderconfig",4]]]],[11,"ne","","",38,[[["dataproviderconfig",4]]]],[11,"eq","ic_config::scheduler","",40,[[["config",3]]]],[11,"ne","","",40,[[["config",3]]]],[11,"eq","ic_config::state_manager","",41,[[["config",3]]]],[11,"ne","","",41,[[["config",3]]]],[11,"fmt","ic_config::config","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::config_parser","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::subnet_config","",9,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::artifact_pool","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::consensus","",18,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::crypto","",19,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::embedders","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::execution_environment","",23,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::firewall","",24,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::http_handler","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::logger","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::message_routing","",32,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::metrics","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::nns_registry_replicator","",35,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::registration","",36,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::registry_client","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::scheduler","",40,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::state_manager","",41,[[["formatter",3]],["result",6]]],[11,"fmt","ic_config::config_parser","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"hash","ic_config::registration","",36,[[]]],[11,"try_from","ic_config::http_handler","",26,[[["externalconfig",3]],["result",4]]],[11,"try_from","","",26,[[["option",4],["externalconfig",3]],["result",4]]],[11,"source","ic_config::config_parser","",3,[[],[["error",8],["option",4]]]],[11,"deserialize","ic_config::config","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","ic_config::artifact_pool","",13,[[],["result",4]]],[11,"deserialize","ic_config::consensus","",18,[[],["result",4]]],[11,"deserialize","ic_config::crypto","",19,[[],["result",4]]],[11,"deserialize","ic_config::embedders","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","ic_config::execution_environment","",23,[[],["result",4]]],[11,"deserialize","ic_config::firewall","",24,[[],["result",4]]],[11,"deserialize","ic_config::http_handler","",27,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","ic_config::logger","",30,[[],["result",4]]],[11,"deserialize","","",31,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","ic_config::message_routing","",32,[[],["result",4]]],[11,"deserialize","ic_config::metrics","",34,[[],["result",4]]],[11,"deserialize","","",33,[[],["result",4]]],[11,"deserialize","ic_config::nns_registry_replicator","",35,[[],["result",4]]],[11,"deserialize","ic_config::registration","",36,[[],["result",4]]],[11,"deserialize","ic_config::registry_client","",37,[[],["result",4]]],[11,"deserialize","","",38,[[],["result",4]]],[11,"deserialize","ic_config::scheduler","",40,[[],["result",4]]],[11,"deserialize","ic_config::state_manager","",41,[[],["result",4]]],[11,"serialize","ic_config::config","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","ic_config::artifact_pool","",13,[[],["result",4]]],[11,"serialize","ic_config::consensus","",18,[[],["result",4]]],[11,"serialize","ic_config::crypto","",19,[[],["result",4]]],[11,"serialize","ic_config::embedders","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","ic_config::execution_environment","",23,[[],["result",4]]],[11,"serialize","ic_config::firewall","",24,[[],["result",4]]],[11,"serialize","ic_config::http_handler","",27,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","ic_config::logger","",30,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","ic_config::message_routing","",32,[[],["result",4]]],[11,"serialize","ic_config::metrics","",34,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","ic_config::nns_registry_replicator","",35,[[],["result",4]]],[11,"serialize","ic_config::registration","",36,[[],["result",4]]],[11,"serialize","ic_config::registry_client","",37,[[],["result",4]]],[11,"serialize","","",38,[[],["result",4]]],[11,"serialize","ic_config::scheduler","",40,[[],["result",4]]],[11,"serialize","ic_config::state_manager","",41,[[],["result",4]]]],"p":[[3,"Config"],[3,"ConfigOptional"],[4,"ConfigSource"],[4,"ConfigError"],[13,"IoError"],[13,"ParseError"],[13,"ValidationError"],[8,"ConfigValidate"],[3,"SchedulerConfig"],[3,"CyclesAccountManagerConfig"],[3,"CowMemoryManagerConfig"],[3,"SubnetConfig"],[3,"SubnetConfigs"],[3,"ArtifactPoolTomlConfig"],[3,"ArtifactPoolConfig"],[3,"LMDBConfig"],[3,"RocksDBConfig"],[4,"PersistentPoolBackend"],[3,"ConsensusConfig"],[3,"CryptoConfig"],[3,"Config"],[4,"PersistenceType"],[4,"EmbedderType"],[3,"Config"],[3,"Config"],[3,"ExternalConfig"],[3,"Config"],[4,"PortConfig"],[3,"Config"],[4,"LevelDef"],[4,"LogFormat"],[4,"LogTarget"],[3,"Config"],[3,"Config"],[4,"Exporter"],[3,"Config"],[3,"Config"],[3,"Config"],[4,"DataProviderConfig"],[13,"Bootstrap"],[3,"Config"],[3,"Config"]]},\
"ic_consensus":{"doc":"The consensus crate provides implementations of the…","i":[[0,"certification","ic_consensus","This module defines the certification component, which is…",null,null],[3,"CertifierImpl","ic_consensus::certification","The Certification component, processing the changes on the…",null,null],[3,"VerifierImpl","","VerifierImpl implements the verification of state hash…",null,null],[5,"setup","","Return both Certifier and CertifierGossip components.",null,[[["replicaconfig",3],["membership",3],["statemanager",8],["replicalogger",6],["arc",3],["arc",3],["certificationcrypto",8],["arc",3],["metricsregistry",3]]]],[11,"new","","Construct a new CertifierImpl.",0,[[["replicaconfig",3],["membership",3],["statemanager",8],["replicalogger",6],["arc",3],["arc",3],["certificationcrypto",8],["arc",3],["metricsregistry",3]]]],[11,"new","","Construct a new VerifierImpl.",1,[[["certificationcrypto",8],["arc",3]]]],[8,"CertificationCrypto","","A trait that encompasses all crypto signing/verification…",null,null],[0,"consensus","ic_consensus","This module encapsulates all components required for…",null,null],[3,"Membership","ic_consensus::consensus","Allow a node to determine what its roles are for the…",null,null],[3,"ConsensusImpl","","ConsensusImpl holds all consensus subcomponents, and…",null,null],[3,"ConsensusGossipImpl","","Implement Consensus Gossip interface.",null,null],[5,"generate_responses_to_subnet_calls","","This function creates responses to the message routing…",null,[[["statemanager",8],["btreemap",3],["replicalogger",6],["height",6]],[["vec",3],["response",3]]]],[5,"setup","","Setup consensus component, and return two objects…",null,[[["xnetpayloadbuilder",8],["membership",3],["consensuscrypto",8],["arc",3],["arc",3],["option",4],["replicalogger",6],["rwlock",3],["arc",3],["arc",3],["timesource",8],["arc",3],["metricsregistry",3],["arc",3],["replicaconfig",3],["maliciousflags",3],["statemanager",8],["consensusconfig",3],["arc",3],["arc",3],["ingressselector",8],["arc",3],["registryclient",8],["messagerouting",8],["arc",3]]]],[11,"new","","Construct a new MembershipImpl instance.",2,[[["subnetid",6],["arc",3],["consensuspoolcache",8],["arc",3],["registryclient",8]]]],[11,"get_block_maker_rank","","Return the the block maker rank of the given node id at…",2,[[["randombeacon",6],["nodeid",6],["height",6]],[["membershiperror",4],["result",4],["option",4]]]],[11,"node_belongs_to_threshold_committee","","Return whether the given node is part of the given…",2,[[["height",6],["committee",4],["nodeid",6]],[["membershiperror",4],["result",4]]]],[11,"get_committee_threshold","","Return the threshold of the given consensus committee at…",2,[[["committee",4],["height",6]],[["membershiperror",4],["result",4]]]],[11,"node_belongs_to_notarization_committee","","Return true if the given node ID is part of the…",2,[[["randombeacon",6],["nodeid",6],["height",6]],[["membershiperror",4],["result",4]]]],[0,"payload_builder","","Payload creation/validation subcomponent",null,null],[3,"PayloadBuilderImpl","ic_consensus::consensus::payload_builder","Implementation of PayloadBuilder.",null,null],[8,"PayloadBuilder","","The PayloadBuilder is responsible for creating and…",null,null],[10,"get_payload","","Produces a payload that is valid given `past_payloads` and…",3,[[["ingresspoolselect",8],["validationcontext",3],["height",6]],[["xnetpayloaderror",4],["result",4],["batchpayload",3]]]],[10,"validate_payload","","Checks whether the provided `payload` is valid given…",3,[[["payload",3],["validationcontext",3]],[["validationresult",6],["payloadvalidationerror",6]]]],[11,"new","","Helper to create PayloadBuilder",4,[[["arc",3],["xnetpayloadbuilder",8],["ingressselector",8],["arc",3],["metricsregistry",3]]]],[0,"pool_reader","ic_consensus::consensus","Wrapper to read the consensus pool",null,null],[3,"PoolReader","ic_consensus::consensus::pool_reader","A struct and corresponding impl with helper methods to…",null,null],[11,"new","","Create a PoolReader for a ConsensusPool.",5,[[["consensuspool",8]]]],[11,"as_cache","","Return a ConsensusPoolCache reference.",5,[[],["consensuspoolcache",8]]],[11,"registry_version","","Return the registry version to be used for the given…",5,[[["height",6]],[["registryversion",6],["option",4]]]],[11,"follow_to_height","","Follow `block`\'s ancestors until a block with `height` is…",5,[[["block",3],["height",6]],[["block",3],["option",4]]]],[11,"chain_iterator","","Find ancestor blocks of `block`, and return an iterator…",5,[[["block",3]],[["box",3],["iterator",8]]]],[11,"get_range","","Get the range of ancestor blocks of `block` specified…",5,[[["block",3],["height",6]],[["box",3],["iterator",8]]]],[11,"get_payloads_from_height","","Return a `Vec` of all of the `Payload` between the…",5,[[["block",3],["height",6]],["vec",3]]],[11,"get_parent","","Returns the parent of the given block if there exist one.",5,[[["block",3]],[["block",3],["option",4]]]],[11,"get_block","","Return a valid block with the matching hash and height if…",5,[[["height",6],["cryptohashof",6]],[["result",4],["block",3],["onlyerror",4]]]],[11,"get_notarized_block","","Return a valid notarized block with the matching hash and…",5,[[["height",6],["cryptohashof",6]],[["result",4],["block",3],["onlyerror",4]]]],[11,"get_finalized_block","","Return the finalized block of a given height which is…",5,[[["height",6]],[["block",3],["option",4]]]],[11,"get_notarized_blocks","","Return all valid notarized blocks of a given height.",5,[[["height",6]],[["box",3],["iterator",8]]]],[11,"get_valid_blocks","","Return all valid blocks at a given height.",5,[[["height",6]],[["box",3],["iterator",8]]]],[11,"get_random_beacon_height","","Get the max height of all valid random beacons.",5,[[],["height",6]]],[11,"get_notarized_height","","Get max height of valid notarized blocks. Note that this…",5,[[],["height",6]]],[11,"get_finalized_height","","Get max height of valid finalized blocks. Note that this…",5,[[],["height",6]]],[11,"get_finalized_tip","","Get the finalized block with greatest height.",5,[[],["block",3]]],[11,"get_highest_catch_up_package","","Get the CatchUpPackage with greatest height.",5,[[],["catchuppackage",6]]],[11,"get_highest_summary_block","","Get the DKG summary block with greatest height.",5,[[],["block",3]]],[11,"get_catch_up_height","","Get the greatest height of CatchUpPackage.",5,[[],["height",6]]],[11,"get_random_beacon","","Get a valid random beacon at the given height if it exists.",5,[[["height",6]],[["randombeacon",6],["option",4]]]],[11,"get_random_beacon_tip","","Get the random beacon with greatest height.",5,[[],["randombeacon",6]]],[11,"get_round_start_time","","Get the round start time of a given height, which is the…",5,[[["height",6]],[["option",4],["time",3]]]],[11,"get_random_beacon_shares","","Get all valid random beacon shares at the given height.",5,[[["height",6]],[["iterator",8],["box",3]]]],[11,"get_notarization_shares","","Get all valid notarization shares at the given height.",5,[[["height",6]],[["box",3],["iterator",8]]]],[11,"get_finalization_shares","","Get all valid finalization shares in the given height…",5,[[["height",6]],[["box",3],["iterator",8]]]],[11,"get_random_tape","","Get the valid random tape at the given height if it exists.",5,[[["height",6]],[["option",4],["randomtape",6]]]],[11,"get_random_tape_shares","","Get all valid random tape shares at the given height.",5,[[["height",6]],[["box",3],["iterator",8]]]],[11,"get_catch_up_package_shares","","Get all valid CatchUpPackageShares at the given height.",5,[[["height",6]],[["box",3],["iterator",8]]]],[11,"pool","","Get the underlying pool.",5,[[],["consensuspool",8]]],[11,"dkg_summary_block","","Returns the DKG summary block for the given valid block…",5,[[["block",3]],[["block",3],["option",4]]]],[11,"get_dkg_payloads","","Returns the set of DKG messages (indexed by the dealer Id)…",5,[[],[["btreemap",3],["nidkgdealing",3],["nodeid",6]]]],[11,"get_replica_version_from_highest_catch_up_package","","Return the replica version as recorded in the block DKG…",5,[[["registryclient",8],["replicalogger",6],["replicaconfig",3]],[["option",4],["replicaversion",3]]]],[0,"utils","ic_consensus::consensus","Consensus utility functions",null,null],[3,"RoundRobin","ic_consensus::consensus::utils","Rotate on_state_change calls with a round robin schedule…",null,null],[5,"crypto_hashable_to_seed","","Convert a CryptoHashable into a 32 bytes which can be used…",null,[[]]],[5,"get_block_maker_delay","","Calculate the required delay for block making based on the…",null,[[["registryclient",8],["rank",3],["replicalogger",6],["registryversion",6],["subnetid",6]],[["option",4],["duration",3]]]],[5,"is_root_subnet","","Return true if the given subnet id is the root subnet",null,[[["registryclient",8],["registryversion",6],["subnetid",6]],[["result",4],["string",3]]]],[5,"is_time_to_make_block","","Return true if the time since round start is greater than…",null,[[["registryclient",8],["height",6],["rank",3],["poolreader",3],["replicalogger",6],["timesource",8],["subnetid",6]]]],[5,"get_adjusted_notary_delay","","Calculate the required delay for notary based on the rank…",null,[[["height",6],["rank",3],["poolreader",3],["replicalogger",6],["membership",3],["statemanager",8]],[["option",4],["duration",3]]]],[5,"find_lowest_ranked_proposals","","Return the validated block proposals with the lowest rank…",null,[[["poolreader",3],["height",6]],[["vec",3],["blockproposal",6]]]],[5,"get_notarization_delay_settings","","Fetches the notarization delay settings from the registry.",null,[[["registryclient",8],["replicalogger",6],["registryversion",6],["subnetid",6]],[["notarizationdelaysettings",3],["option",4]]]],[5,"aggregate","","Aggregate shares into complete artifacts",null,[[["box",3],["iterator",8],["fn",8],["replicalogger",6],["membership",3],["aggregate",8]],[["signed",3],["vec",3]]]],[5,"get_block_hash_string","","Return the hash of a block as a string.",null,[[["block",3]],["string",3]]],[5,"lookup_replica_version","","Helper function to lookup replica version, and log errors…",null,[[["registryclient",8],["replicalogger",6],["registryversion",6],["subnetid",6]],[["option",4],["replicaversion",3]]]],[5,"registry_version_at_height","","Return the registry version to be used for the given…",null,[[["consensuspoolcache",8],["height",6]],[["registryversion",6],["option",4]]]],[5,"active_low_threshold_transcript","","Return the current low transcript for the given height if…",null,[[["consensuspoolcache",8],["height",6]],[["nidkgtranscript",3],["option",4]]]],[5,"active_high_threshold_transcript","","Return the current high transcript for the given height if…",null,[[["consensuspoolcache",8],["height",6]],[["nidkgtranscript",3],["option",4]]]],[11,"call_next","","Call the next function in the given list of calls…",6,[[],["vec",3]]],[17,"HALT_AFTER_REGISTRY_UNREACHABLE","ic_consensus::consensus","The maximum duration that we allow the registry to be…",null,null],[8,"ConsensusCrypto","","A trait that encompass all crypto signing/verification…",null,null],[11,"new","","Create a new ConsensusImpl along with all subcomponents it…",7,[[["xnetpayloadbuilder",8],["membership",3],["consensuscrypto",8],["arc",3],["arc",3],["option",4],["replicalogger",6],["rwlock",3],["arc",3],["arc",3],["timesource",8],["arc",3],["metricsregistry",3],["arc",3],["replicaconfig",3],["maliciousflags",3],["statemanager",8],["consensusconfig",3],["arc",3],["arc",3],["ingressselector",8],["arc",3],["registryclient",8],["messagerouting",8],["arc",3]]]],[11,"check_registry_outdated","","check whether the subnet should halt because it has not…",7,[[],[["result",4],["string",3]]]],[11,"should_halt_by_subnet_record","","check whether the subnet should halt because the subnet…",7,[[]]],[11,"new","","Create a new ConsensusGossipImpl.",8,[[["arc",3],["messagerouting",8]]]],[0,"dkg","ic_consensus","This module defines an embedding of the dkg algorithm…",null,null],[3,"DkgImpl","ic_consensus::dkg","`DkgImpl` is responsible for holding DKG dependencies and…",null,null],[3,"DkgGossipImpl","","`DkgGossipImpl` is a placeholder for gossip related DKG…",null,null],[4,"PermanentError","","Transient Dkg message validation errors.",null,null],[13,"CryptoError","","",9,null],[13,"DkgCreateTranscriptError","","",9,null],[13,"DkgVerifyDealingError","","",9,null],[13,"MismatchedDkgSummary","","",9,null],[13,"MissingDkgConfigForDealing","","",9,null],[13,"LastSummaryHasMultipleConfigsForSameTag","","",9,null],[13,"DkgStartHeightDoesNotMatchParentBlock","","",9,null],[13,"DkgSummaryAtNonStartHeight","","",9,null],[13,"DkgDealingAtStartHeight","","",9,null],[13,"MissingRegistryVersion","","",9,null],[13,"InvalidDealer","","",9,null],[13,"DealerAlreadyDealt","","",9,null],[13,"FailedToCreateDkgConfig","","",9,null],[4,"TransientError","","Permanent Dkg message validation errors.",null,null],[13,"CryptoError","","Crypto related errors.",10,null],[13,"StateManagerError","","",10,null],[13,"DkgCreateTranscriptError","","",10,null],[13,"DkgVerifyDealingError","","",10,null],[13,"FailedToGetDkgIntervalSettingFromRegistry","","",10,null],[13,"FailedToGetSubnetMemberListFromRegistry","","",10,null],[13,"MissingDkgStartBlock","","",10,null],[5,"validate_payload","","Validates the DKG payload. The parent block is expected to…",null,[[["registryclient",8],["validationcontext",3],["block",3],["subnetid",6],["consensuscrypto",8],["statemanager",8],["intcountervec",6],["poolreader",3],["blockpayload",4],["dkgpool",8]],[["dkgmessagevalidationerror",6],["validationresult",6]]]],[5,"create_payload","","Creates the DKG payload for a new block proposal with the…",null,[[["registryclient",8],["block",3],["subnetid",6],["consensuscrypto",8],["arc",3],["rwlock",3],["statemanager",8],["poolreader",3],["replicalogger",6],["validationcontext",3]],[["result",4],["transienterror",4],["payload",4]]]],[5,"get_configs_for_local_transcripts","","Creates DKG configs for the local subnet for the next DKG…",null,[[["height",6],["btreeset",3],["btreemap",3],["nodeid",6],["registryversion",6],["subnetid",6]],[["vec",3],["transienterror",4],["result",4]]]],[5,"make_genesis_summary","","Generates the summary for the genesis block.",null,[[["registryclient",8],["option",4],["registryversion",6],["subnetid",6]],["summary",3]]],[5,"make_registry_cup","","Construcs a genesis/recovery CUP from the CUP contents…",null,[[["registryclient",8],["subnetid",6]],[["option",4],["catchuppackage",6]]]],[6,"DkgMessageValidationError","","Dkg errors.",null,null],[11,"new","","Build a new DKG component",11,[[["arc",3],["replicalogger",6],["metricsregistry",3],["nodeid",6],["arc",3],["consensuspoolcache",8],["consensuscrypto",8]]]],[11,"from","ic_consensus::certification","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","ic_consensus::consensus","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","ic_consensus::consensus::payload_builder","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","ic_consensus::consensus::pool_reader","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","ic_consensus::consensus::utils","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","ic_consensus::dkg","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"init","","",12,[[]]],[11,"deref","","",12,[[]]],[11,"deref_mut","","",12,[[]]],[11,"drop","","",12,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"get_payload","ic_consensus::consensus::payload_builder","",4,[[["ingresspoolselect",8],["validationcontext",3],["height",6]],[["xnetpayloaderror",4],["result",4],["batchpayload",3]]]],[11,"validate_payload","","",4,[[["payload",3],["validationcontext",3]],[["validationresult",6],["payloadvalidationerror",6]]]],[11,"from","ic_consensus::dkg","",9,[[["dkgcreatetranscripterror",4]]]],[11,"from","","",10,[[["dkgcreatetranscripterror",4]]]],[11,"from","","",9,[[["dkgverifydealingerror",4]]]],[11,"from","","",10,[[["dkgverifydealingerror",4]]]],[11,"from","","",9,[[["cryptoerror",4]]]],[11,"from","","",10,[[["cryptoerror",4]]]],[11,"from","ic_consensus","",13,[[["permanenterror",4]]]],[11,"from","","",13,[[["transienterror",4]]]],[11,"default","ic_consensus::consensus::utils","",6,[[],["roundrobin",3]]],[11,"fmt","ic_consensus::dkg","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"on_state_change","ic_consensus::certification","",0,[[["consensuspoolcache",8],["arc",3],["rwlock",3]],["changeset",6]]],[11,"validate","","",1,[[["certification",3],["registryversion",6],["subnetid",6]],[["validationresult",6],["verifiererror",6]]]],[11,"on_state_change","ic_consensus::consensus","Invoke `on_state_change` on each subcomponent in order.…",7,[[["ingresspoolselect",8],["consensuspool",8]],["changeset",6]]],[11,"get_priority_function","","Return a priority function that matches the given…",8,[[["consensuspool",8]],[["consensusmessageid",3],["consensusmessageattribute",4],["priorityfn",6]]]],[11,"get_filter","","Return a filter that represents what artifacts are needed…",8,[[],["consensusmessagefilter",3]]],[11,"on_state_change","ic_consensus::dkg","",11,[[["dkgpool",8]],["changeset",6]]],[11,"get_priority_function","","",12,[[["dkgpool",8]],[["dkgmessageattribute",3],["priorityfn",6],["dkgmessageid",6]]]]],"p":[[3,"CertifierImpl"],[3,"VerifierImpl"],[3,"Membership"],[8,"PayloadBuilder"],[3,"PayloadBuilderImpl"],[3,"PoolReader"],[3,"RoundRobin"],[3,"ConsensusImpl"],[3,"ConsensusGossipImpl"],[4,"PermanentError"],[4,"TransientError"],[3,"DkgImpl"],[3,"DkgGossipImpl"],[6,"DkgMessageValidationError"]]},\
"ic_consensus_message":{"doc":"","i":[[5,"make_genesis","ic_consensus_message","Return the genesis BlockProposal and RandomBeacon made for…",null,[[["summary",3]],["catchuppackage",6]]],[8,"ConsensusMessageHashable","","",null,null],[10,"get_id","","",0,[[],["consensusmessageid",3]]],[10,"get_cm_hash","","",0,[[],["consensusmessagehash",4]]],[10,"assert","","",0,[[["consensusmessage",4]],["option",4]]],[10,"to_message","","",0,[[],["consensusmessage",4]]],[11,"check_integrity","","Check integrity of a message. Default is true. This should…",0,[[]]],[11,"check_integrity","","Check integrity of a message. Default is true. This should…",0,[[]]]],"p":[[8,"ConsensusMessageHashable"]]},\
"ic_consensus_pool_util":{"doc":"","i":[[5,"main","ic_consensus_pool_util","",null,[[]]],[5,"parse_artifact_names","","",null,[[],["vec",3]]],[5,"open_consensus_pool","","",null,[[],["uncachedconsensuspoolimpl",3]]],[5,"open_certification_pool","","",null,[[],["certificationpoolimpl",3]]],[5,"from_str","","",null,[[],[["result",4],["deserialize",8],["error",3]]]],[5,"to_string","","",null,[[],["string",3]]],[5,"export","","",null,[[["argmatches",3]]]],[5,"import","","",null,[[]]],[5,"export_cup_proto","","",null,[[["argmatches",3]]]],[17,"ALL_ARTIFACT_NAMES","","",null,null]],"p":[]},\
"ic_context_logger":{"doc":"","i":[[3,"LogMetadata","ic_context_logger","Metadata about the log entry",null,null],[12,"level","","",0,null],[12,"module_path","","",0,null],[12,"line","","",0,null],[12,"column","","",0,null],[3,"ContextLogger","","A logger that holds context that can be updated and logged",null,null],[12,"context","","",1,null],[12,"inner_logger","","",1,null],[0,"macros","","These macros provide an interface to ContextLogger",null,null],[8,"Logger","","Logs data of type `T`",null,null],[10,"log","","Log the given log event",2,[[["logmetadata",3],["string",3]]]],[10,"is_enabled_at","","Return true if events should be logged at the given level…",2,[[["level",4]]]],[10,"should_sample","","Return true if a `sample!` log with the given key and…",2,[[["into",8],["string",3]]]],[10,"is_tag_enabled","","Return true if a log with the given tag should be logged,…",2,[[["string",3]]]],[10,"is_n_seconds","","Return true if this is the first log in n seconds, false…",2,[[["logmetadata",3],["into",8]]]],[11,"new","","",1,[[]]],[11,"get_context","","",1,[[]]],[11,"with_new_context","","",1,[[]]],[11,"log","","",1,[[["logmetadata",3],["string",3]]]],[11,"is_enabled_at","","",1,[[["level",4]]]],[11,"should_sample","","",1,[[["into",8],["string",3]]]],[11,"is_tag_enabled","","",1,[[["string",3]]]],[11,"is_n_seconds","","",1,[[["logmetadata",3],["into",8]]]],[14,"new_logger","","Create a new logger with the supplied context",null,null],[14,"trace","","Log a trace-level message, with context fields if given",null,null],[14,"debug","","Log a debug-level log, with context fields if given",null,null],[14,"info","","Log an info-level log, with context fields if given",null,null],[14,"warn","","Log a warn-level log, with context fields if given",null,null],[14,"error","","Log an error-level log, with context fields if given",null,null],[14,"crit","","Log a crit-level log, with context fields if given",null,null],[14,"fatal","","Log a crit-level log, with context fields if given, then…",null,null],[14,"log","","Log an entry at the given log level, with context fields…",null,null],[14,"update_context","","",null,null],[14,"log_metadata","","Return a LogMetadata",null,null],[14,"info_sample","","Sample the given log event",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",1,[[["logger",3]]]],[11,"clone","","",0,[[],["logmetadata",3]]],[11,"clone","","",1,[[],["contextlogger",3]]],[11,"default","","",1,[[]]],[11,"eq","","",0,[[["logmetadata",3]]]],[11,"ne","","",0,[[["logmetadata",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"LogMetadata"],[3,"ContextLogger"],[8,"Logger"]]},\
"ic_cow_state":{"doc":"","i":[[3,"MappedStateImpl","ic_cow_state","",null,null],[3,"CowMemoryManagerCommon","","",null,null],[4,"ReadOnly","","",null,null],[4,"ReadWrite","","",null,null],[4,"CowMemoryManagerImpl","","",null,null],[13,"ReadOnly","","",0,null],[13,"ReadWrite","","",0,null],[0,"error","","",null,null],[4,"SlotDbOp","ic_cow_state::error","",null,null],[13,"OpenDb","","Error opening the round database",1,null],[13,"OpenCursor","","Error opening ro cursor for round",1,null],[4,"CowError","","",null,null],[13,"SlotDbError","","",2,null],[12,"op","ic_cow_state::error::CowError","",3,null],[12,"round","","",3,null],[12,"err","","",3,null],[8,"AccessPolicy","ic_cow_state","",null,null],[8,"ReadOnlyPolicy","","",null,null],[8,"ReadWritePolicy","","",null,null],[8,"MappedState","","",null,null],[10,"get_heap_base","","Returns the base of memory region where canister heap…",4,[[]]],[10,"get_heap_len","","Returns the max heap len when the heap was first…",4,[[]]],[10,"make_heap_accessible","","Resets the permission on the heap based on the type",4,[[]]],[10,"get_globals","","Returns slice of globals memory associated with this…",4,[[]]],[11,"update_globals","","Update the globals memory with new globals.",4,[[]]],[11,"soft_commit","","soft_commit ensures that all modified pages (mutations)…",4,[[]]],[11,"update_heap_page","","Using update_heap_page, individual heap pages can be…",4,[[]]],[11,"copy_to_heap","","",4,[[],["vec",3]]],[10,"copy_from_heap","","",4,[[]]],[11,"clear","","",4,[[]]],[8,"CowMemoryManager","","",null,null],[10,"get_map","","get_map returns a MappedState representing \\\"current\\\"…",5,[[],["mappedstateimpl",3]]],[10,"get_map_for_snapshot","","get_map_for_snapshot returns a MappedState representing in…",5,[[],[["result",4],["mappedstateimpl",3],["cowerror",4]]]],[10,"create_snapshot","","create_snapshot creates a snapshot of all soft_committed…",5,[[]]],[10,"checkpoint","","checkpoint primarily ensures slot_mgr\'s internal metadata…",5,[[]]],[10,"upgrade","","Reset\'s canister\'s \\\"current\\\" state to \\\"vanilla\\\" initial…",5,[[]]],[10,"is_valid","","",5,[[]]],[10,"remove_states_below","","",5,[[]]],[11,"open_readonly","","",0,[[["pathbuf",3]]]],[11,"open_readwrite","","",0,[[["pathbuf",3]]]],[11,"open_readwrite_statesync","","",0,[[["pathbuf",3]]]],[11,"open_readwrite_fake","","",0,[[]]],[11,"state_root","","",0,[[],["pathbuf",3]]],[11,"is_cow","","",0,[[["path",3]]]],[11,"purge","","",0,[[["path",3]]]],[11,"open_fake","","",6,[[]]],[11,"open","","",6,[[["pathbuf",3]]]],[11,"open_fake","","",6,[[]]],[11,"open","","",6,[[["pathbuf",3]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","ic_cow_state::error","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"get_heap_base","ic_cow_state","",7,[[]]],[11,"get_heap_len","","",7,[[]]],[11,"make_heap_accessible","","",7,[[]]],[11,"get_globals","","",7,[[]]],[11,"update_globals","","",7,[[]]],[11,"soft_commit","","",7,[[]]],[11,"update_heap_page","","",7,[[]]],[11,"copy_to_heap","","",7,[[],["vec",3]]],[11,"copy_from_heap","","",7,[[]]],[11,"clear","","",7,[[]]],[11,"get_map","","get_map returns a MappedState representing \\\"current\\\"…",0,[[],["mappedstateimpl",3]]],[11,"get_map_for_snapshot","","get_map_for_snapshot returns a MappedState representing in…",0,[[],[["result",4],["mappedstateimpl",3],["cowerror",4]]]],[11,"create_snapshot","","create_snapshot creates a snapshot of all soft_committed…",0,[[]]],[11,"checkpoint","","checkpoint primarily ensures slot_mgr\'s internal metadata…",0,[[]]],[11,"upgrade","","Reset\'s canister\'s \\\"current\\\" state to \\\"vanilla\\\" initial…",0,[[]]],[11,"is_valid","","",0,[[]]],[11,"remove_states_below","","",0,[[]]],[11,"get_map_for_snapshot","","",6,[[],[["result",4],["mappedstateimpl",3],["cowerror",4]]]],[11,"get_map","","",6,[[],["mappedstateimpl",3]]],[11,"is_valid","","",6,[[]]],[11,"create_snapshot","","",6,[[]]],[11,"checkpoint","","",6,[[]]],[11,"upgrade","","",6,[[]]],[11,"remove_states_below","","",6,[[]]],[11,"get_map","","",6,[[],["mappedstateimpl",3]]],[11,"get_map_for_snapshot","","",6,[[],[["result",4],["mappedstateimpl",3],["cowerror",4]]]],[11,"create_snapshot","","",6,[[]]],[11,"checkpoint","","",6,[[]]],[11,"remove_states_below","","",6,[[]]],[11,"upgrade","","",6,[[]]],[11,"is_valid","","",6,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",0,[[["cowmemorymanagercommon",3],["readonly",4]],["cowmemorymanagerimpl",4]]],[11,"from","","",0,[[["readwrite",4],["cowmemorymanagercommon",3]],["cowmemorymanagerimpl",4]]],[11,"clone","","",8,[[],["readonly",4]]],[11,"clone","","",9,[[],["readwrite",4]]],[11,"clone","","",0,[[],["cowmemorymanagerimpl",4]]],[11,"clone","","",6,[[],["cowmemorymanagercommon",3]]],[11,"fmt","ic_cow_state::error","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","ic_cow_state","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","ic_cow_state::error","",2,[[["formatter",3]],["result",6]]],[11,"try_into","ic_cow_state","",0,[[],[["result",4],["cowmemorymanagercommon",3]]]],[11,"try_into","","",0,[[],[["result",4],["cowmemorymanagercommon",3]]]]],"p":[[4,"CowMemoryManagerImpl"],[4,"SlotDbOp"],[4,"CowError"],[13,"SlotDbError"],[8,"MappedState"],[8,"CowMemoryManager"],[3,"CowMemoryManagerCommon"],[3,"MappedStateImpl"],[4,"ReadOnly"],[4,"ReadWrite"]]},\
"ic_crypto":{"doc":"This crate provides the `CryptoComponent` and a set of…","i":[[5,"combined_threshold_signature_and_public_key","ic_crypto","Creates a combined threshold signature together with its…",null,[[["id",3],["randomnesstag",3]]]],[5,"ecdsa_p256_signature_from_der_bytes","","Decodes an ECDSA P-256 signature from DER.",null,[[],[["result",4],["cryptoerror",4],["basicsig",3]]]],[5,"ed25519_public_key_to_der","","Encodes a raw ed25519 public key into DER.",null,[[["vec",3]],[["vec",3],["result",4],["cryptoerror",4]]]],[5,"threshold_sig_public_key_from_der","","Decodes a threshold signature public key from DER.",null,[[],[["cryptoerror",4],["result",4],["thresholdsigpublickey",3]]]],[5,"threshold_sig_public_key_to_der","","Encodes a threshold signature public key into DER.",null,[[["thresholdsigpublickey",3]],[["vec",3],["result",4],["cryptoerror",4]]]],[5,"user_public_key_from_bytes","","Parses the given `bytes` as a DER- or COSE-encoded public…",null,[[],[["result",4],["cryptoerror",4]]]],[5,"verify_combined_threshold_sig","","Verifies a combined threshold signature.",null,[[["id",3],["thresholdsigpublickey",3]],[["cryptoerror",4],["result",4]]]],[4,"KeyBytesContentType","","Indicates the content type of serialised key bytes passed…",null,null],[13,"Ed25519PublicKeyDer","","",0,null],[13,"EcdsaP256PublicKeyDer","","",0,null],[13,"EcdsaSecp256k1PublicKeyDer","","",0,null],[13,"EcdsaP256PublicKeyDerWrappedCose","","",0,null],[13,"IcCanisterSignatureAlgPublicKeyDer","","",0,null],[3,"CryptoComponentFatClient","","Allows Internet Computer nodes to perform crypto…",null,null],[3,"LockableThresholdSigDataStore","","A `ThresholdSigDataStore` that is wrapped by a `RwLock`.",null,null],[5,"crypto_hash","","Creates a (typed) domain-separated cryptographic hash.",null,[[],[["cryptohashof",6],["cryptohashable",8]]]],[0,"cli","","Command line interface for the crypto component.",null,null],[5,"main","ic_crypto::cli","Processes a command from the command line.",null,[[],["result",4]]],[5,"csp","","Creates a Crypto Service Provider (CSP) in the current…",null,[[],[["protosecretkeystore",3],["csp",3],["osrng",3]]]],[0,"csp","","Command line interface for the crypto service provider…",null,null],[5,"main","ic_crypto::cli::csp","Processes a command from the command line.",null,[[],["result",4]]],[0,"prng","ic_crypto","Offers cryptographically secure pseudorandom number…",null,null],[3,"Csprng","ic_crypto::prng","A cryptographically secure pseudorandom number generator…",null,null],[3,"RandomnessPurposeIter","","",null,null],[4,"RandomnessPurpose","","The purpose the randomness is used for.",null,null],[13,"CommitteeSampling","","",1,null],[13,"BlockmakerRanking","","",1,null],[13,"DkgCommitteeSampling","","",1,null],[13,"ExecutionThread","","",1,null],[17,"RANDOMNESSPURPOSE_COUNT","","",null,null],[11,"from_random_beacon_and_purpose","","Creates a CSPRNG from the given random beacon for the…",2,[[["randombeacon",6],["randomnesspurpose",4]]]],[11,"from_seed_and_purpose","","Creates a CSPRNG from the given seed for the given purpose.",2,[[["randomness",6],["randomnesspurpose",4]]]],[11,"seed_from_random_tape","","Creates a CSPRNG seed from the given random tape.",2,[[["randomtape",6]],["randomness",6]]],[0,"utils","ic_crypto","Static crypto utility methods.",null,null],[5,"combined_threshold_signature_and_public_key","ic_crypto::utils","Creates a combined threshold signature together with its…",null,[[["id",3],["randomnesstag",3]]]],[3,"NodeKeysToGenerate","","Selects which keys should be generated for a…",null,null],[12,"generate_node_signing_keys","","",3,null],[12,"generate_committee_signing_keys","","",3,null],[12,"generate_dkg_dealing_encryption_keys","","",3,null],[12,"generate_tls_keys_and_certificate","","",3,null],[5,"generate_initial_dkg_encryption_keys","","Generates initial DKG ephemeral encryption keys for the…",null,[[["path",3],["nodeid",6],["initialdkgconfig",3]],[["cryptoresult",6],["encryptionpublickeywithpop",3]]]],[5,"generate_dkg_dealing_encryption_keys","","Generates (forward-secure) NI-DKG dealing encryption key…",null,[[["path",3],["nodeid",6]],["publickeyproto",3]]],[5,"get_node_keys_or_generate_if_missing_for_node_id","","Obtains the node keys or generates them for the given…",null,[[["path",3],["nodeid",6]],["nodepublickeys",3]]],[5,"get_node_keys_or_generate_if_missing","","Obtains the node keys or generates them if they are missing.",null,[[["path",3]]]],[0,"dkg","","Utilities for interactive Distributed Key Generation (DKG).",null,null],[3,"InitialDkgConfig","ic_crypto::utils::dkg","A config used to create an initial interactive DKG…",null,null],[5,"initial_dkg_transcript","","Creates an initial DKG transcript.",null,[[["initialdkgconfig",3],["btreemap",3]],["transcript",3]]],[5,"initial_dkg_transcript_record_from_transcript","","Converts a DKG transcript into the corresponding protobuf…",null,[[["transcript",3]],["initialdkgtranscriptrecord",3]]],[5,"threshold_sig_pubkey_from_transcript","","Extracts the threshold signature public key from a DKG…",null,[[["transcript",3]],["thresholdsigpublickey",3]]],[0,"ni_dkg","ic_crypto::utils","Utilities for non-interactive Distributed Key Generation…",null,null],[3,"InitialNiDkgConfig","ic_crypto::utils::ni_dkg","A config used to create an initial NI-DKG transcript. Such…",null,null],[5,"initial_dkg_transcript","","Creates an initial DKG transcript.",null,[[["initialnidkgconfig",3],["btreemap",3]],["nidkgtranscript",3]]],[5,"initial_ni_dkg_transcript_record_from_transcript","","Converts an NI-DKG transcript into the corresponding…",null,[[["nidkgtranscript",3]],["initialnidkgtranscriptrecord",3]]],[6,"TempCryptoComponent","ic_crypto::utils","A crypto component set up in a temporary directory. The…",null,null],[6,"CryptoComponent","ic_crypto","A type alias for `CryptoComponentFatClient<Csp<OsRng,…",null,null],[17,"THRESHOLD_SIG_DATA_STORE_CAPACITY","","Defines the maximum number of entries contained in the…",null,null],[8,"CryptoComponentForNonReplicaProcess","","A crypto component that offers limited functionality and…",null,null],[11,"new","","Creates a store.",4,[[]]],[11,"write","","Returns a write lock to the store.",4,[[],[["rwlockwriteguard",6],["thresholdsigdatastoreimpl",3]]]],[11,"read","","Returns a read lock to the store.",4,[[],[["rwlockreadguard",6],["thresholdsigdatastoreimpl",3]]]],[11,"new_with_rng_and_fake_node_id","","Creates a crypto component using the given `csprng` and…",5,[[["cryptoconfig",3],["arc",3],["nodeid",6],["registryclient",8],["replicalogger",6]]]],[11,"new_with_csp_and_fake_node_id","","Creates a crypto component using the given `csp` and fake…",5,[[["arc",3],["nodeid",6],["registryclient",8],["replicalogger",6]]]],[11,"new","","Creates a new crypto component.",5,[[["metricsregistry",3],["cryptoconfig",3],["arc",3],["option",4],["registryclient",8],["replicalogger",6]]]],[11,"new_with_fake_node_id","","Creates a crypto component using a fake `node_id`.",5,[[["cryptoconfig",3],["arc",3],["nodeid",6],["registryclient",8],["replicalogger",6]]]],[11,"new_for_non_replica_process","","Creates a crypto component that offers limited…",5,[[["cryptoconfig",3],["arc",3],["registryclient",8],["replicalogger",6]]]],[11,"get_node_id","","Returns the `NodeId` of this crypto component.",5,[[],["nodeid",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","ic_crypto::utils::dkg","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","ic_crypto::utils::ni_dkg","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"erased_serialize","","",7,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",7,[[]]],[11,"equivalent","","",7,[[]]],[11,"from","ic_crypto::utils","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","ic_crypto::prng","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"equivalent","","",1,[[]]],[11,"eq","ic_crypto","",0,[[["keybytescontenttype",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",0,[[],["keybytescontenttype",4]]],[11,"next_back","ic_crypto::prng","",8,[[],["option",4]]],[11,"len","","",8,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"nth","","",8,[[],["option",4]]],[11,"clone","ic_crypto::utils::ni_dkg","",7,[[],["initialnidkgconfig",3]]],[11,"clone","ic_crypto::utils","",3,[[],["nodekeystogenerate",3]]],[11,"clone","ic_crypto::prng","",1,[[],["randomnesspurpose",4]]],[11,"clone","","",8,[[],["randomnesspurposeiter",3]]],[11,"eq","ic_crypto::utils::ni_dkg","",7,[[["initialnidkgconfig",3]]]],[11,"ne","","",7,[[["initialnidkgconfig",3]]]],[11,"eq","ic_crypto::prng","",1,[[["randomnesspurpose",4]]]],[11,"ne","","",1,[[["randomnesspurpose",4]]]],[11,"fmt","ic_crypto::utils::ni_dkg","",7,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto::prng","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto","",5,[[["formatter",3]],["result",6]]],[11,"hash","ic_crypto::utils::ni_dkg","",7,[[]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"next_u32","ic_crypto::prng","",2,[[]]],[11,"next_u64","","",2,[[]]],[11,"fill_bytes","","",2,[[]]],[11,"try_fill_bytes","","",2,[[],[["result",4],["error",3]]]],[11,"iter","","",1,[[],["randomnesspurposeiter",3]]],[11,"count","","",1,[[]]],[11,"perform_tls_server_handshake","ic_crypto","",5,[[["registryversion",6],["allowedclients",3],["tcpstream",3]],[["pin",3],["box",3]]]],[11,"perform_tls_server_handshake_temp_with_optional_client_auth","","",5,[[["registryversion",6],["allowedclients",3],["tcpstream",3]],[["pin",3],["box",3]]]],[11,"perform_tls_client_handshake","","",5,[[["nodeid",6],["registryversion",6],["tcpstream",3]],[["box",3],["pin",3]]]],[11,"generate_user_keys_ed25519","","",5,[[],["cryptoresult",6]]],[11,"generate_committee_member_keys","","",5,[[],["cryptoresult",6]]],[11,"node_public_keys","","",5,[[],["nodepublickeys",3]]],[11,"check_keys_with_registry","","",5,[[["registryversion",6]],["cryptoresult",6]]],[11,"generate_encryption_keys","","",5,[[["config",3],["nodeid",6]],[["cryptoresult",6],["encryptionpublickeywithpop",3]]]],[11,"verify_encryption_public_key","","",5,[[["config",3],["encryptionpublickeywithpop",3],["nodeid",6]],["cryptoresult",6]]],[11,"create_dealing","","",5,[[["config",3],["btreemap",3],["nodeid",6]],[["cryptoresult",6],["dealing",3]]]],[11,"verify_dealing","","",5,[[["nodeid",6],["config",3],["btreemap",3],["dealing",3]],["cryptoresult",6]]],[11,"create_response","","",5,[[["btreemap",3],["config",3],["btreemap",3],["nodeid",6]],[["response",3],["cryptoresult",6]]]],[11,"verify_response","","",5,[[["btreemap",3],["config",3],["btreemap",3],["nodeid",6],["response",3]],["cryptoresult",6]]],[11,"create_transcript","","",5,[[["btreemap",3],["config",3],["btreemap",3],["btreemap",3]],[["cryptoresult",6],["transcript",3]]]],[11,"load_transcript","","",5,[[["transcript",3],["nodeid",6]],["cryptoresult",6]]],[11,"create_dealing","","",5,[[["nidkgconfig",3]],[["nidkgdealing",3],["result",4],["dkgcreatedealingerror",4]]]],[11,"verify_dealing","","",5,[[["nodeid",6],["nidkgdealing",3],["nidkgconfig",3]],[["result",4],["dkgverifydealingerror",4]]]],[11,"create_transcript","","",5,[[["btreemap",3],["nidkgconfig",3]],[["nidkgtranscript",3],["dkgcreatetranscripterror",4],["result",4]]]],[11,"load_transcript","","",5,[[["nidkgtranscript",3]],[["result",4],["dkgloadtranscripterror",4]]]],[11,"retain_only_active_keys","","",5,[[["hashset",3],["nidkgtranscript",3]],[["result",4],["dkgkeyremovalerror",4]]]],[11,"sign_basic","","",5,[[["registryversion",6],["nodeid",6]],[["basicsigof",6],["cryptoresult",6]]]],[11,"verify_basic_sig","","",5,[[["basicsigof",6],["registryversion",6],["nodeid",6]],["cryptoresult",6]]],[11,"verify_basic_sig_by_public_key","","",5,[[["basicsigof",6],["userpublickey",3]],["cryptoresult",6]]],[11,"verify_canister_sig","","",5,[[["userpublickey",3],["registryversion",6],["canistersigof",6]],["cryptoresult",6]]],[11,"sign_multi","","",5,[[["registryversion",6],["nodeid",6]],[["individualmultisigof",6],["cryptoresult",6]]]],[11,"verify_multi_sig_individual","","",5,[[["nodeid",6],["registryversion",6],["individualmultisigof",6]],["cryptoresult",6]]],[11,"combine_multi_sig_individuals","","Combines a non-empty collection of individual signatures…",5,[[["nodeid",6],["individualmultisigof",6],["btreemap",3],["registryversion",6]],[["cryptoresult",6],["combinedmultisigof",6]]]],[11,"verify_multi_sig_combined","","Verifies a combined signature from a non-empty set of…",5,[[["btreeset",3],["combinedmultisigof",6],["nodeid",6],["registryversion",6]],["cryptoresult",6]]],[11,"sign_threshold","","",5,[[["dkgid",4]],[["thresholdsigshareof",6],["cryptoresult",6]]]],[11,"verify_threshold_sig_share","","",5,[[["dkgid",4],["thresholdsigshareof",6],["nodeid",6]],["cryptoresult",6]]],[11,"combine_threshold_sig_shares","","",5,[[["thresholdsigshareof",6],["nodeid",6],["dkgid",4],["btreemap",3]],[["cryptoresult",6],["combinedthresholdsigof",6]]]],[11,"verify_threshold_sig_combined","","",5,[[["combinedthresholdsigof",6],["dkgid",4]],["cryptoresult",6]]],[11,"verify_combined_threshold_sig_by_public_key","","",5,[[["combinedthresholdsigof",6],["registryversion",6],["subnetid",6]],["cryptoresult",6]]],[11,"new","ic_crypto::utils::dkg","Creates an initial DKG config for a subnet initially…",6,[[["subnetid",6],["btreeset",3]]]],[11,"get","","",6,[[],["config",3]]],[18,"START_BLOCK_HEIGHT","ic_crypto::utils::ni_dkg","",7,null],[11,"new","","Creates an initial DKG config for a subnet initially…",7,[[["nidkgtag",4],["btreeset",3],["nidkgtargetid",3],["registryversion",6],["subnetid",6]]]],[11,"get","","",7,[[],["nidkgconfig",3]]],[11,"all","ic_crypto::utils","",3,[[]]],[11,"none","","",3,[[]]],[11,"all_except_dkg_dealing_encryption_key","","",3,[[]]]],"p":[[4,"KeyBytesContentType"],[4,"RandomnessPurpose"],[3,"Csprng"],[3,"NodeKeysToGenerate"],[3,"LockableThresholdSigDataStore"],[3,"CryptoComponentFatClient"],[3,"InitialDkgConfig"],[3,"InitialNiDkgConfig"],[3,"RandomnessPurposeIter"]]},\
"ic_crypto_internal_basic_sig_der_utils":{"doc":"DER conversion utilities for basic signatures.","i":[[3,"KeyDerParsingError","ic_crypto_internal_basic_sig_der_utils","The provided DER-encoded bytes are malformed.",null,null],[12,"internal_error","","",0,null],[3,"SecretKeyData","","The secret and public keys as bytes, as well as the OID.",null,null],[12,"oid","","",1,null],[12,"sk_bytes","","",1,null],[12,"pk_bytes","","",1,null],[5,"subject_public_key_info_der","","Encodes the given `key` according to RFC 8410.",null,[[["oid",3]],[["result",4],["vec",3],["string",3]]]],[5,"public_key_bytes_from_der_wrapped_cose","","Parses a DER-wrapped COSE public key, and returns the…",null,[[],[["vec",3],["result",4],["keyderparsingerror",3]]]],[5,"oid_and_public_key_bytes_from_der","","Parses a DER-wrapped COSE public key, and returns the OID…",null,[[],[["result",4],["keyderparsingerror",3]]]],[5,"oid_and_key_pair_bytes_from_der","","Parses a DER-wrapped secret key, and returns the OID and…",null,[[],[["keyderparsingerror",3],["result",4],["secretkeydata",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"clone","","",0,[[],["keyderparsingerror",3]]],[11,"eq","","",0,[[["keyderparsingerror",3]]]],[11,"ne","","",0,[[["keyderparsingerror",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"KeyDerParsingError"],[3,"SecretKeyData"]]},\
"ic_crypto_internal_basic_sig_ecdsa_secp256k1":{"doc":"Basic signatures implemented with ECDSA secp256k1.","i":[[0,"api","ic_crypto_internal_basic_sig_ecdsa_secp256k1","ECDSA signature methods",null,null],[5,"secret_key_from_components","ic_crypto_internal_basic_sig_ecdsa_secp256k1::api","Create a secp256k1 secret key from raw bytes",null,[[["publickeybytes",3]],[["cryptoresult",6],["secretkeybytes",3]]]],[5,"public_key_from_der","","Parse a secp256k1 public key from the DER enncoding",null,[[],[["cryptoresult",6],["publickeybytes",3]]]],[5,"public_key_to_der","","Encode a secp256k1 public key to the DER encoding",null,[[["publickeybytes",3]],[["vec",3],["cryptoresult",6]]]],[5,"sign","","Sign a message using a secp256k1 private key",null,[[["secretkeybytes",3]],[["cryptoresult",6],["signaturebytes",3]]]],[5,"verify","","Verify a signature using a secp256k1 public key",null,[[["publickeybytes",3],["signaturebytes",3]],["cryptoresult",6]]],[0,"types","ic_crypto_internal_basic_sig_ecdsa_secp256k1","Types for ECDSA secp256k1 signatures",null,null],[3,"SecretKeyBytes","ic_crypto_internal_basic_sig_ecdsa_secp256k1::types","ECDSA secp256k1 secret key bytes.",null,null],[12,"0","","",0,null],[3,"PublicKeyBytes","","ECDSA secp256k1 public key bytes, in uncompressed format",null,null],[12,"0","","",1,null],[3,"SignatureBytes","","ECDSA secp256k1 signature",null,null],[12,"0","","",2,null],[17,"FIELD_SIZE","","The size of the secp256k1 field (256 bits, 32 bytes)",null,null],[18,"SIZE","","",1,null],[18,"SIZE","","",2,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",0,[[]]],[11,"zeroize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",2,[[]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",1,[[["vec",3]]]],[11,"clone","","",1,[[]]],[11,"clone","","",0,[[]]],[11,"clone","","",2,[[],["signaturebytes",3]]],[11,"eq","","",2,[[]]],[11,"eq","","",1,[[["publickeybytes",3]]]],[11,"ne","","",1,[[["publickeybytes",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"try_from","","",2,[[["vec",3]],[["cryptoerror",4],["result",4]]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[["deserializer",8]],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[["serializer",8]],["result",4]]],[11,"zeroize","","",0,[[]]]],"p":[[3,"SecretKeyBytes"],[3,"PublicKeyBytes"],[3,"SignatureBytes"]]},\
"ic_crypto_internal_basic_sig_ecdsa_secp256r1":{"doc":"ECDSA signatures using the secp256r1 (P-256) group","i":[[0,"api","ic_crypto_internal_basic_sig_ecdsa_secp256r1","ECDSA signature methods",null,null],[5,"new_keypair","ic_crypto_internal_basic_sig_ecdsa_secp256r1::api","Create a new secp256r1 keypair. This function should only…",null,[[],["cryptoresult",6]]],[5,"public_key_from_der","","Parse a secp256r1 public key from the DER enncoding",null,[[],[["cryptoresult",6],["publickeybytes",3]]]],[5,"signature_from_der","","Decode an ECDSA signature from the DER encoding",null,[[],[["cryptoresult",6],["signaturebytes",3]]]],[5,"public_key_from_cose","","Parse a CBOR-encoded ECDSA P-256 key in the COSE (RFC…",null,[[],[["cryptoresult",6],["publickeybytes",3]]]],[5,"sign","","Sign a message using a secp256r1 private key",null,[[["secretkeybytes",3]],[["cryptoresult",6],["signaturebytes",3]]]],[5,"verify","","Verify a signature using a secp256r1 public key",null,[[["publickeybytes",3],["signaturebytes",3]],["cryptoresult",6]]],[0,"types","ic_crypto_internal_basic_sig_ecdsa_secp256r1","Simple signature types",null,null],[3,"SecretKeyBytes","ic_crypto_internal_basic_sig_ecdsa_secp256r1::types","ECDSA secp256r1 secret key bytes",null,null],[12,"0","","",0,null],[3,"PublicKeyBytes","","ECDSA secp256r1 public key bytes, in uncompressed format",null,null],[12,"0","","",1,null],[3,"SignatureBytes","","ECDSA secp256r1 signature",null,null],[12,"0","","",2,null],[17,"FIELD_SIZE","","The size of a secp256r1 field element (256 bits, 32 bytes)",null,null],[18,"SIZE","","",1,null],[18,"SIZE","","",2,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",0,[[]]],[11,"zeroize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",2,[[]]],[11,"from","","",0,[[["vec",3]]]],[11,"from","","",1,[[["vec",3]]]],[11,"into","","",0,[[],["string",3]]],[11,"into","","",1,[[],["string",3]]],[11,"into","","",2,[[],["string",3]]],[11,"clone","","",1,[[]]],[11,"clone","","",2,[[],["signaturebytes",3]]],[11,"eq","","",2,[[]]],[11,"eq","","",1,[[["publickeybytes",3]]]],[11,"ne","","",1,[[["publickeybytes",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"try_from","","",0,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",1,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",1,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",2,[[["vec",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",2,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",2,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[["deserializer",8]],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[["serializer",8]],["result",4]]],[11,"zeroize","","",0,[[]]]],"p":[[3,"SecretKeyBytes"],[3,"PublicKeyBytes"],[3,"SignatureBytes"]]},\
"ic_crypto_internal_basic_sig_ecdsa_wycheproof":{"doc":"Tests for known vulnerabilities of crypto implementations","i":[],"p":[]},\
"ic_crypto_internal_basic_sig_ed25519":{"doc":"Basic signatures implemented with Ed25519","i":[[0,"api","ic_crypto_internal_basic_sig_ed25519","API for Ed25519 basic signature",null,null],[5,"keypair_from_rng","ic_crypto_internal_basic_sig_ed25519::api","Generates an Ed25519 keypair.",null,[[]]],[5,"public_key_from_der","","Decodes an Ed25519 public key from a DER-encoding…",null,[[],[["publickeybytes",3],["cryptoresult",6]]]],[5,"public_key_to_der","","Encodes the given `key` as DER-encoded Ed25519 public key…",null,[[["publickeybytes",3]],["vec",3]]],[5,"sign","","Signs a message with an Ed25519 secret key.",null,[[["secretkeybytes",3]],[["cryptoresult",6],["signaturebytes",3]]]],[5,"verify","","Verifies a signature using an Ed25519 public key.",null,[[["publickeybytes",3],["signaturebytes",3]],["cryptoresult",6]]],[5,"verify_public_key","","Verifies whether the given key is a valid Ed25519 public…",null,[[["publickeybytes",3]]]],[0,"types","ic_crypto_internal_basic_sig_ed25519","Types for Ed25519 basic signatures",null,null],[3,"SecretKeyBytes","ic_crypto_internal_basic_sig_ed25519::types","A wrapper for Ed25519 secret key bytes.",null,null],[12,"0","","",0,null],[3,"PublicKeyBytes","","A wrapper for Ed25519 public key bytes.",null,null],[12,"0","","",1,null],[3,"SignatureBytes","","A wrapper for Ed25519 signature bytes.",null,null],[12,"0","","",2,null],[18,"SIZE","","",0,null],[18,"SIZE","","",1,null],[18,"SIZE","","",2,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",0,[[]]],[11,"zeroize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",2,[[]]],[11,"into","","",0,[[],["string",3]]],[11,"into","","",1,[[],["string",3]]],[11,"into","","",2,[[],["string",3]]],[11,"clone","","",0,[[],["secretkeybytes",3]]],[11,"clone","","",1,[[],["publickeybytes",3]]],[11,"clone","","",2,[[],["signaturebytes",3]]],[11,"eq","","",2,[[]]],[11,"eq","","",0,[[["secretkeybytes",3]]]],[11,"ne","","",0,[[["secretkeybytes",3]]]],[11,"eq","","",1,[[["publickeybytes",3]]]],[11,"ne","","",1,[[["publickeybytes",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"try_from","","",1,[[["publickeyproto",3]],["result",4]]],[11,"try_from","","",0,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",0,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",1,[[["vec",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",1,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",1,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",2,[[["vec",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",2,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",2,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"deserialize","","",0,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",1,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",2,[[["deserializer",8]],["result",4]]],[11,"serialize","","",0,[[["serializer",8]],["result",4]]],[11,"serialize","","",1,[[["serializer",8]],["result",4]]],[11,"serialize","","",2,[[["serializer",8]],["result",4]]],[11,"zeroize","","",0,[[]]]],"p":[[3,"SecretKeyBytes"],[3,"PublicKeyBytes"],[3,"SignatureBytes"]]},\
"ic_crypto_internal_basic_sig_iccsa":{"doc":"Internet Computer Canister Signature Algorithm (ICCSA)","i":[[0,"api","ic_crypto_internal_basic_sig_iccsa","ICCSA (Internet Computer Canister Signature Algorithm) API",null,null],[5,"public_key_bytes_from_der","ic_crypto_internal_basic_sig_iccsa::api","Parse `pk_der` as DER-encoded public key with OID…",null,[[],[["cryptoresult",6],["publickeybytes",3]]]],[5,"verify","","Verify a canister signature",null,[[["publickeybytes",3],["signaturebytes",3],["thresholdsigpublickey",3]],["cryptoresult",6]]],[0,"types","ic_crypto_internal_basic_sig_iccsa","Internet Computer Canister Signature Algorithm (ICCSA) types",null,null],[3,"SignatureBytes","ic_crypto_internal_basic_sig_iccsa::types","An ICCSA signature encoded as a bytestring",null,null],[12,"0","","",0,null],[3,"PublicKeyBytes","","Container for an ICCSA public key without the…",null,null],[12,"0","","",1,null],[3,"Signature","","A decoded ICCSA signature",null,null],[12,"certificate","","",2,null],[12,"tree","","",2,null],[3,"PublicKey","","A ICCSA public key that was successfully parsed.",null,null],[11,"new","","Create a new ICCSA PublicKey instance",3,[[["canisterid",3],["vec",3]]]],[11,"signing_canister_id","","",3,[[],["canisterid",3]]],[11,"seed","","Return a reference to the seed",3,[[]]],[11,"into_seed","","Return the seed, consuming self",3,[[],["vec",3]]],[11,"to_bytes","","",3,[[],["vec",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",3,[[]]],[11,"clone","","",0,[[],["signaturebytes",3]]],[11,"clone","","",1,[[],["publickeybytes",3]]],[11,"clone","","",3,[[],["publickey",3]]],[11,"eq","","",0,[[["signaturebytes",3]]]],[11,"ne","","",0,[[["signaturebytes",3]]]],[11,"eq","","",1,[[["publickeybytes",3]]]],[11,"ne","","",1,[[["publickeybytes",3]]]],[11,"eq","","",3,[[["publickey",3]]]],[11,"ne","","",3,[[["publickey",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"try_from","","",3,[[["publickeybytes",3]],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]]],"p":[[3,"SignatureBytes"],[3,"PublicKeyBytes"],[3,"Signature"],[3,"PublicKey"]]},\
"ic_crypto_internal_bls12381_common":{"doc":"Common methods for working with BLS12-381 primitives","i":[[5,"scalar_multiply","ic_crypto_internal_bls12381_common","Multiply an element of a group by a scalar. This can be…",null,[[["curveprojective",8],["frrepr",3],["into",8]],["curveprojective",8]]],[5,"sum","","Sum elements of a group. This can be applied to elements…",null,[[],["curveprojective",8]]],[5,"hash_to_fr","","Deterministically create a BLS12-381 field element from a…",null,[[["sha256",3]],["fr",3]]],[5,"hash_to_g1","","Hash onto BLS12-381 G1 (random oracle variant) returning…",null,[[],["g1",3]]],[5,"hash_to_miracl_g1","","Hash onto BLS12-381 G1 (random oracle variant) returning…",null,[[],["miraclg1",6]]],[0,"serde","","Serde utilities",null,null],[0,"pairing","ic_crypto_internal_bls12381_common::serde","Serialisation and deserialisation of the pairing library…",null,null],[5,"g1_from_bytes","ic_crypto_internal_bls12381_common::serde::pairing","Decode BLS12-381 G1 point from bytes",null,[[],[["result",4],["g1",3],["groupdecodingerror",4]]]],[5,"g1_to_bytes","","Encode BLS12-381 G1 point to bytes",null,[[["g1",3]]]],[5,"g2_from_bytes","","Decode BLS12-381 G2 point from bytes",null,[[],[["result",4],["groupdecodingerror",4],["g2",3]]]],[5,"g2_to_bytes","","Encode BLS12-381 G2 point to bytes",null,[[["g2",3]]]],[5,"fr_to_bytes","","Encode BLS12-381 field element to bytes",null,[[["frrepr",3]]]],[5,"fr_from_bytes","","Decode BLS12-381 field element from bytes",null,[[],["frrepr",3]]],[17,"FR_SIZE","","",null,null],[17,"G1_SIZE","","",null,null],[17,"G2_SIZE","","",null,null],[0,"test_utils","ic_crypto_internal_bls12381_common","Test utilities",null,null],[5,"uint_to_fr","ic_crypto_internal_bls12381_common::test_utils","Convert an unsigned number into the corresponding field…",null,[[],["fr",3]]],[5,"int_to_fr","","Convert a signed integer into the corresponding field…",null,[[],["fr",3]]],[5,"uint_to_g2","","Get G2 elements by primitive double and add.",null,[[],["g2",3]]],[6,"MiraclG1","ic_crypto_internal_bls12381_common","Type alias for a Miracl BLS12-381 G1 elliptic curve point.",null,null]],"p":[]},\
"ic_crypto_internal_bls12381_serde_miracl":{"doc":"Conversion between MIRACL representations of BLS12-381…","i":[[3,"FrBytes","ic_crypto_internal_bls12381_serde_miracl","A field representative in serialised, library independent…",null,null],[12,"0","","",0,null],[3,"G1Bytes","","A point in the group \\\"G1\\\" in serialised, library…",null,null],[12,"0","","",1,null],[3,"G2Bytes","","A point in the group \\\"G2\\\".",null,null],[12,"0","","",2,null],[5,"miracl_fr_to_bytes","","Serializes a MIRACL `Fr` (i.e. `BIG`) to a standard,…",null,[[["big",3]],["frbytes",3]]],[5,"miracl_fr_from_bytes","","Parses an `Fr` in a standard, library-independent form to…",null,[[],[["big",3],["result",4]]]],[5,"miracl_g1_to_bytes","","Serializes a MIRACL `G1` (i.e. `ECP`) to a standard,…",null,[[["ecp",3]],["g1bytes",3]]],[5,"miracl_g1_from_bytes","","Parses a `G1` in a standard, library-independent form to a…",null,[[],[["ecp",3],["result",4]]]],[5,"miracl_g2_to_bytes","","Serializes a MIRACL `G2` (i.e. `ECP2`) to a standard,…",null,[[["ecp2",3]],["g2bytes",3]]],[5,"miracl_g2_from_bytes","","Parses a `G2` in a standard, library-independent form to a…",null,[[],[["ecp2",3],["result",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"zeroize","","",0,[[]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"zeroize","","",1,[[]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",1,[[]]],[11,"encode_hex","","",1,[[]]],[11,"encode_hex_upper","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"zeroize","","",2,[[]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",2,[[]]],[11,"encode_hex","","",2,[[]]],[11,"encode_hex_upper","","",2,[[]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"eq","","",2,[[["g2",3]]]],[11,"eq","","",1,[[["g1",3]]]],[11,"eq","","",0,[[["fr",3]]]],[11,"ne","","",0,[[["fr",3]]]],[11,"default","","",1,[[],["g1",3]]],[11,"default","","",2,[[],["g2",3]]],[11,"default","","",0,[[],["fr",3]]],[11,"from","","",0,[[["fsencryptionplaintext",3]],["fr",3]]],[11,"hash","","",2,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",0,[[]]],[11,"fmt","","",2,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"as_ref","","",1,[[]]],[11,"as_ref","","",2,[[]]],[11,"clone","","",1,[[],["g1",3]]],[11,"clone","","",0,[[],["fr",3]]],[11,"clone","","",2,[[],["g2",3]]],[11,"deserialize","","",1,[[],[["g1",3],["result",4]]]],[11,"deserialize","","",2,[[],[["g2",3],["result",4]]]],[11,"deserialize","","",0,[[],[["result",4],["fr",3]]]],[18,"SIZE","","",0,null],[11,"as_bytes","","",0,[[]]],[18,"SIZE","","",1,null],[18,"COMPRESSED_FLAG","","",1,null],[18,"INFINITY_FLAG","","",1,null],[18,"SIGN_FLAG","","",1,null],[18,"NON_FLAG_BITS","","",1,null],[18,"FLAG_BYTE_OFFSET","","",1,null],[18,"X_BYTES_OFFSET","","",1,null],[11,"as_bytes","","",1,[[]]],[18,"SIZE","","",2,null],[18,"COMPRESSED_FLAG","","",2,null],[18,"INFINITY_FLAG","","",2,null],[18,"SIGN_FLAG","","",2,null],[18,"NON_FLAG_BITS","","",2,null],[18,"FLAG_BYTE_OFFSET","","",2,null],[18,"X1_BYTES_OFFSET","","",2,null],[18,"X0_BYTES_OFFSET","","",2,null],[11,"as_bytes","","",2,[[]]]],"p":[[3,"FrBytes"],[3,"G1Bytes"],[3,"G2Bytes"]]},\
"ic_crypto_internal_csp":{"doc":"Interface for the cryptographic service provider","i":[[3,"Csp","ic_crypto_internal_csp","Implements the CryptoServiceProvider for an RNG and a…",null,null],[0,"api","","Top level traits for interacting with the crypto service…",null,null],[4,"CspThresholdSignError","ic_crypto_internal_csp::api","Errors occuring while performing threshold signature…",null,null],[13,"SecretKeyNotFound","","",0,null],[12,"algorithm","ic_crypto_internal_csp::api::CspThresholdSignError","",1,null],[12,"key_id","","",1,null],[13,"UnsupportedAlgorithm","ic_crypto_internal_csp::api","",0,null],[12,"algorithm","ic_crypto_internal_csp::api::CspThresholdSignError","",2,null],[13,"WrongSecretKeyType","ic_crypto_internal_csp::api","",0,null],[13,"MalformedSecretKey","","",0,null],[12,"algorithm","ic_crypto_internal_csp::api::CspThresholdSignError","",3,null],[0,"tls_errors","ic_crypto_internal_csp::api","TLS error types",null,null],[3,"CspMalformedPeerCertificateError","ic_crypto_internal_csp::api::tls_errors","The TLS peer certificate was malformed",null,null],[12,"internal_error","","",4,null],[4,"CspTlsClientHandshakeError","","Errors occurring during a TLS handshake",null,null],[13,"MalformedSelfCertificate","","",5,null],[12,"internal_error","ic_crypto_internal_csp::api::tls_errors::CspTlsClientHandshakeError","",6,null],[13,"MalformedServerCertificate","ic_crypto_internal_csp::api::tls_errors","",5,null],[13,"CreateConnectorError","","",5,null],[12,"description","ic_crypto_internal_csp::api::tls_errors::CspTlsClientHandshakeError","",7,null],[12,"client_cert_der","","",7,null],[12,"server_cert_der","","",7,null],[12,"internal_error","","",7,null],[13,"HandshakeError","ic_crypto_internal_csp::api::tls_errors","",5,null],[12,"internal_error","ic_crypto_internal_csp::api::tls_errors::CspTlsClientHandshakeError","",8,null],[13,"SecretKeyNotFound","ic_crypto_internal_csp::api::tls_errors","",5,null],[13,"MalformedSecretKey","","",5,null],[13,"WrongSecretKeyType","","",5,null],[4,"CspTlsServerHandshakeError","","TLS handshake failed (server side)",null,null],[13,"MalformedSelfCertificate","","",9,null],[12,"internal_error","ic_crypto_internal_csp::api::tls_errors::CspTlsServerHandshakeError","",10,null],[13,"MalformedClientCertificate","ic_crypto_internal_csp::api::tls_errors","",9,null],[13,"CreateAcceptorError","","",9,null],[12,"description","ic_crypto_internal_csp::api::tls_errors::CspTlsServerHandshakeError","",11,null],[12,"cert_der","","",11,null],[12,"internal_error","","",11,null],[13,"HandshakeError","ic_crypto_internal_csp::api::tls_errors","",9,null],[12,"internal_error","ic_crypto_internal_csp::api::tls_errors::CspTlsServerHandshakeError","",12,null],[13,"SecretKeyNotFound","ic_crypto_internal_csp::api::tls_errors","",9,null],[13,"MalformedSecretKey","","",9,null],[13,"WrongSecretKeyType","","",9,null],[8,"CspKeyGenerator","ic_crypto_internal_csp::api","A trait that can be used to generate cryptographic key pairs",null,null],[10,"gen_key_pair","","Generate a public/private key pair.",13,[[["algorithmid",4]],[["result",4],["cryptoerror",4]]]],[10,"gen_key_pair_with_pop","","Generate a public/private key pair with proof of possession.",13,[[["algorithmid",4]],[["result",4],["cryptoerror",4]]]],[10,"gen_tls_key_pair","","Generates TLS key material for node with ID `node_id`.",13,[[["nodeid",6]],["x509publickeycert",3]]],[8,"CspSecretKeyStoreChecker","","A trait that allows checking the secret key store for the…",null,null],[10,"sks_contains","","Checks whether the store contains a key with the given `id`.",14,[[["keyid",3]]]],[10,"sks_contains_tls_key","","Checks whether the store contains a private key for the…",14,[[["x509publickeycert",3]]]],[8,"NodePublicKeyData","","A trait that exposes the information about node public…",null,null],[10,"node_public_keys","","Returns the public keys of this node.",15,[[],["nodepublickeys",3]]],[10,"node_signing_key_id","","Returns the id of the node signing key.",15,[[],["keyid",3]]],[10,"dkg_dealing_encryption_key_id","","Returns the id of the dkg dealing encryption key.",15,[[],["keyid",3]]],[8,"CspSigner","","A trait that can generate and verify public key signatures",null,null],[10,"sign","","Sign a message using the specified algorithm and key IDs",16,[[["keyid",3],["algorithmid",4]],[["cryptoresult",6],["cspsignature",4]]]],[10,"verify","","Verify a public key signature.",16,[[["cspsignature",4],["csppublickey",4],["algorithmid",4]],["cryptoresult",6]]],[10,"verify_pop","","Verify a proof of posession (PoP).",16,[[["csppop",4],["csppublickey",4],["algorithmid",4]],["cryptoresult",6]]],[10,"combine_sigs","","Combines individual signatures into a multisignature",16,[[["vec",3],["algorithmid",4]],[["cryptoresult",6],["cspsignature",4]]]],[10,"verify_multisig","","Verify a multisignature",16,[[["vec",3],["csppublickey",4],["cspsignature",4],["algorithmid",4]],["cryptoresult",6]]],[8,"CspSecretKeyInjector","","Trait for injecting secret keys into the CSP\'s key store…",null,null],[10,"insert_secret_key","","Inserts the given secret key into the secret key store…",17,[[["keyid",3],["cspsecretkey",4]]]],[8,"DistributedKeyGenerationCspClient","","Crypto service provider (CSP) client for distributed key…",null,null],[10,"dkg_create_ephemeral","","Generates an ephemeral key used for distributed key…",18,[[["idkgid",3]],[["result",4],["dkgcreateephemeralerror",4]]]],[10,"dkg_verify_ephemeral","","Verifies that an ephemeral public key and PoP is valid.",18,[[["idkgid",3]],[["dkgverifyephemeralerror",4],["result",4]]]],[10,"dkg_create_dealing","","Generates keys for each eligible receiver.",18,[[["idkgid",3],["numberofnodes",6]],[["result",4],["dkgcreatedealingerror",4],["cspdealing",3]]]],[10,"dkg_verify_dealing","","Verifies the syntactic correctness of the dealing",18,[[["numberofnodes",6],["cspdealing",3]],[["dkgverifydealingerror",4],["result",4]]]],[10,"dkg_create_response","","Verifies that an encrypted key for this node is valid.",18,[[["idkgid",3],["nodeindex",6]],[["result",4],["cspresponse",4],["dkgcreateresponseerror",4]]]],[10,"dkg_verify_response","","Verifies the complaints and other relevant fields in a…",18,[[["idkgid",3],["cspresponse",4],["nodeindex",6]],[["dkgverifyresponseerror",4],["result",4]]]],[10,"dkg_create_transcript","","Filters out bad dealings.",18,[[["numberofnodes",6]],[["cspdkgtranscript",4],["dkgcreatetranscripterror",4],["result",4]]]],[10,"dkg_load_private_key","","Creates a threshold key in the secret key store.",18,[[["idkgid",3],["cspdkgtranscript",4]],[["dkgloadprivatekeyerror",4],["result",4]]]],[10,"dkg_create_resharing_dealing","","Generates a fresh set of threshold keys from a threshold…",18,[[["idkgid",3],["numberofnodes",6],["csppubliccoefficients",6]],[["result",4],["dkgcreateresharedealingerror",4],["cspdealing",3]]]],[10,"dkg_verify_resharing_dealing","","Verifies the syntactic correctness of a reshared dealing.",18,[[["numberofnodes",6],["nodeindex",6],["cspdealing",3],["csppubliccoefficients",6]],[["result",4],["dkgverifyresharedealingerror",4]]]],[10,"dkg_create_resharing_transcript","","Filters out bad resharing dealings.",18,[[["numberofnodes",6],["csppubliccoefficients",6]],[["cspdkgtranscript",4],["dkgcreateresharetranscripterror",4],["result",4]]]],[8,"NiDkgCspClient","","Crypto service provider (CSP) client for non-interactive…",null,null],[10,"create_forward_secure_key_pair","","Generates a forward secure key pair used to encrypt…",19,[[["nodeid",6],["algorithmid",4]],[["cspdkgcreatefskeyerror",4],["result",4]]]],[10,"verify_forward_secure_key","","Verifies that a forward secure public key and PoP is valid.",19,[[["cspfsencryptionpop",4],["cspfsencryptionpublickey",4],["nodeid",6],["algorithmid",4]],[["result",4],["cspdkgverifyfskeyerror",4]]]],[10,"update_forward_secure_epoch","","Updates the secret key corresponding to public_key so that…",19,[[["epoch",6],["algorithmid",4]],[["cspdkgupdatefsepocherror",4],["result",4]]]],[10,"create_dealing","","Generates keys for each eligible receiver.",19,[[["numberofnodes",6],["epoch",6],["nodeindex",6],["btreemap",3],["cspfsencryptionpublickey",4],["nidkgid",3],["algorithmid",4]],[["result",4],["cspnidkgdealing",4],["cspdkgcreatedealingerror",4]]]],[10,"create_resharing_dealing","","Generates a fresh set of threshold keys from a threshold…",19,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspfsencryptionpublickey",4],["csppubliccoefficients",6],["algorithmid",4],["epoch",6],["nidkgid",3]],[["result",4],["cspnidkgdealing",4],["cspdkgcreateresharedealingerror",4]]]],[10,"verify_dealing","","Verifies the correctness of the dealing",19,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspfsencryptionpublickey",4],["algorithmid",4],["epoch",6],["nidkgid",3],["cspnidkgdealing",4]],[["cspdkgverifydealingerror",4],["result",4]]]],[10,"verify_resharing_dealing","","Verifies the correctness of a reshared dealing.",19,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspfsencryptionpublickey",4],["csppubliccoefficients",6],["algorithmid",4],["epoch",6],["nidkgid",3],["cspnidkgdealing",4]],[["result",4],["cspdkgverifyresharedealingerror",4]]]],[10,"create_transcript","","Assembles all valid dealings into a single record.",19,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspnidkgdealing",4],["algorithmid",4]],[["result",4],["cspnidkgtranscript",4],["cspdkgcreatetranscripterror",4]]]],[10,"create_resharing_transcript","","Assembles all valid resharing dealings into a single record.",19,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["csppubliccoefficients",6],["cspnidkgdealing",4],["algorithmid",4]],[["cspnidkgtranscript",4],["result",4],["cspdkgcreateresharetranscripterror",4]]]],[10,"load_threshold_signing_key","","Computes a threshold signing key and stores it in the…",19,[[["epoch",6],["cspnidkgtranscript",4],["nodeindex",6],["nidkgid",3],["algorithmid",4]],[["result",4],["cspdkgloadprivatekeyerror",4]]]],[10,"retain_threshold_keys_if_present","","Keeps the specified NiDKG threshold keys.",19,[[["btreeset",3],["csppubliccoefficients",6]]]],[8,"ThresholdSignatureCspClient","","Crypto service provider (CSP) client for threshold…",null,null],[10,"threshold_sign_to_be_removed","","Signs with a threshold key",20,[[["keyid",3],["algorithmid",4]],[["cspsignature",4],["cspthresholdsignerror",4],["result",4]]]],[10,"threshold_sign","","Signs with a threshold key",20,[[["csppubliccoefficients",6],["algorithmid",4]],[["cspsignature",4],["cspthresholdsignerror",4],["result",4]]]],[10,"threshold_combine_signatures","","Combine multiple individual signatures.",20,[[["csppubliccoefficients",6],["algorithmid",4]],[["cryptoresult",6],["cspsignature",4]]]],[10,"threshold_individual_public_key","","Gets an individual signatory\'s public key.",20,[[["csppubliccoefficients",6],["nodeindex",6],["algorithmid",4]],[["cryptoresult",6],["cspthresholdsigpublickey",4]]]],[10,"threshold_verify_individual_signature","","Checks whether an individual node\'s signature is valid.",20,[[["cspsignature",4],["cspthresholdsigpublickey",4],["algorithmid",4]],["cryptoresult",6]]],[10,"threshold_verify_combined_signature","","Checks whether a combined signature is valid. If…",20,[[["cspsignature",4],["csppubliccoefficients",6],["algorithmid",4]],["cryptoresult",6]]],[8,"CspTlsClientHandshake","","A trait that exposes TLS client-side handshaking",null,null],[10,"perform_tls_client_handshake","","Transforms a TCP stream into a TLS stream by performing a…",21,[[["tcpstream",3],["x509publickeycert",3]],[["pin",3],["box",3]]]],[8,"CspTlsServerHandshake","","A trait that exposes TLS server-side handshaking",null,null],[10,"perform_tls_server_handshake","","Transforms a TCP stream into a TLS stream by performing a…",22,[[["tcpstream",3],["x509publickeycert",3],["vec",3]],[["box",3],["pin",3]]]],[0,"crypto_lib","ic_crypto_internal_csp","Cryptographic schemes",null,null],[0,"hash","ic_crypto_internal_csp::crypto_lib","Hash implementation",null,null],[3,"Sha256Hasher","ic_crypto_internal_csp::crypto_lib::hash","SHA-256 hash function",null,null],[3,"Sha512Hasher","","SHA-512 hash function",null,null],[11,"new","","Begin a new hash computation",23,[[["context",8]]]],[11,"update","","Update the hash computation",23,[[]]],[11,"finalize","","Finalize the digest, consuming self",23,[[]]],[11,"new","","Begin a new hash computation",24,[[["context",8]]]],[11,"update","","Update the hash computation",24,[[]]],[11,"finalize","","Finalize the digest, consuming self",24,[[]]],[0,"imported_test_utils","ic_crypto_internal_csp","Testing utilities",null,null],[0,"ed25519","ic_crypto_internal_csp::imported_test_utils","Ed25519 test vectors",null,null],[5,"csp_testvec","ic_crypto_internal_csp::imported_test_utils::ed25519","TODO(CRP-995): This function is only used for testing and…",null,[[["ed25519testvector",4]]]],[0,"imported_utilities","ic_crypto_internal_csp","A collection of utility functions",null,null],[0,"sign_utils","ic_crypto_internal_csp::imported_utilities","Signature utilities",null,null],[4,"KeyBytesContentType","ic_crypto_internal_csp::imported_utilities::sign_utils","Indicates the content type of serialised key bytes passed…",null,null],[13,"Ed25519PublicKeyDer","","",25,null],[13,"EcdsaP256PublicKeyDer","","",25,null],[13,"EcdsaSecp256k1PublicKeyDer","","",25,null],[13,"EcdsaP256PublicKeyDerWrappedCose","","",25,null],[13,"IcCanisterSignatureAlgPublicKeyDer","","",25,null],[5,"user_public_key_from_bytes","","Parses the given `bytes` as a DER- or COSE-encoded public…",null,[[],["cryptoresult",6]]],[5,"ecdsa_p256_signature_from_der_bytes","","Decodes an ECDSA P-256 signature from DER.",null,[[],[["basicsig",3],["cryptoresult",6]]]],[5,"threshold_sig_public_key_to_der","","Encodes a threshold signature public key into DER.",null,[[["thresholdsigpublickey",3]],[["vec",3],["cryptoresult",6]]]],[5,"threshold_sig_public_key_from_der","","Decodes a threshold signature public key from DER.",null,[[],[["cryptoresult",6],["thresholdsigpublickey",3]]]],[5,"ed25519_public_key_to_der","","Encodes a raw ed25519 public key into DER.",null,[[["vec",3]],[["vec",3],["cryptoresult",6]]]],[5,"verify_combined_threshold_sig","","Verifies a combined threshold signature.",null,[[["combinedthresholdsigof",6],["thresholdsigpublickey",3]],["cryptoresult",6]]],[5,"combined_threshold_signature_and_public_key","","Creates a combined threshold signature together with its…",null,[[["randomness",6]]]],[0,"public_key_store","ic_crypto_internal_csp","Interfaces for saving and retrieving public keys",null,null],[4,"PublicKeyStoreError","ic_crypto_internal_csp::public_key_store","Error while reading or writing public keys",null,null],[13,"ParsingError","","",26,null],[13,"SerialisationError","","",26,null],[13,"IOError","","",26,null],[5,"store_node_public_keys","","Write the node public keys to local storage",null,[[["path",3],["nodepublickeys",3]],[["result",4],["publickeystoreerror",4]]]],[5,"read_node_public_keys","","Read the node public keys from local storage",null,[[["path",3]],[["publickeystoreerror",4],["result",4],["nodepublickeys",3]]]],[0,"secret_key_store","ic_crypto_internal_csp","Interfaces for saving and retrieving secret keys",null,null],[0,"scope","ic_crypto_internal_csp::secret_key_store","Defines scopes for grouping keys.",null,null],[4,"Scope","ic_crypto_internal_csp::secret_key_store::scope","A scope is a label for grouping keys.",null,null],[13,"Const","","Simple scheme with no hierarchy.",27,null],[4,"ScopeSchemeNames","","Auto-generated discriminant enum variants",null,null],[13,"Const","","Simple scheme with no hierarchy.",28,null],[4,"ConstScope","","Simple, fixed labels.",null,null],[13,"Test0","","Placeholders, used for testing.",29,null],[13,"Test1","","",29,null],[13,"NiDkgThresholdKeys","","Threshold keys generated by NiDKG for the IC consensus…",29,null],[13,"NiDkgFsEncryptionKeys","","",29,null],[3,"ConstScopeIter","","",null,null],[4,"Scope","ic_crypto_internal_csp::secret_key_store","A scope is a label for grouping keys.",null,null],[13,"Const","","Simple scheme with no hierarchy.",27,null],[4,"SecretKeyStoreError","","Errors that can occur while interacting with the secret…",null,null],[13,"DuplicateKeyId","","",30,null],[0,"proto_store","","Filesystem-backed secret key store",null,null],[3,"ProtoSecretKeyStore","ic_crypto_internal_csp::secret_key_store::proto_store","A secret key store that persists data to the filesystem,…",null,null],[0,"pb","","The secret key store protobuf definitions",null,null],[3,"SecretKeyV1","ic_crypto_internal_csp::secret_key_store::proto_store::pb","",null,null],[12,"csp_secret_key","","CBOR serialization of `CspSecretKey`",31,null],[12,"scope","","Rust\'s `to_string()` of `Scope`",31,null],[3,"SecretKeyStore","","SecretKeyStore stores secret keys.",null,null],[12,"key_id_to_csp_secret_key","","Mapping from KeyId to serialised CspSecretKey.",32,null],[12,"version","","Version of SecretKeyStore",32,null],[12,"key_id_to_secret_key_v1","","Mapping from KeyId to SecretKeyV1. `KeyId` is represented…",32,null],[11,"open","ic_crypto_internal_csp::secret_key_store::proto_store","Creates a database instance.",33,[[["path",3],["replicalogger",6],["option",4]]]],[0,"volatile_store","ic_crypto_internal_csp::secret_key_store","In-memory secret key store (for testing)",null,null],[3,"VolatileSecretKeyStore","ic_crypto_internal_csp::secret_key_store::volatile_store","An in-memory, non-thread-safe secret key store for testing…",null,null],[11,"new","","",34,[[]]],[8,"SecretKeyStore","ic_crypto_internal_csp::secret_key_store","A store for secret key material",null,null],[10,"insert","","Adds a key with a given `id` to the store.",35,[[["scope",4],["cspsecretkey",4],["keyid",3],["option",4]],[["secretkeystoreerror",4],["result",4]]]],[11,"insert_or_replace","","Inserts a key with a given `id` into the store, replacing…",35,[[["scope",4],["cspsecretkey",4],["keyid",3],["option",4]],[["secretkeystoreerror",4],["result",4]]]],[10,"get","","Retrieves the key with the given `id`.",35,[[["keyid",3]],[["cspsecretkey",4],["option",4]]]],[10,"contains","","Checks if the store contains a key with the given `id`.",35,[[["keyid",3]]]],[10,"remove","","Removes the key with the given `id` from the store.",35,[[["keyid",3]]]],[11,"retain","","Keeps only entries in a scope for which the filter…",35,[[["scope",4]]]],[0,"threshold","ic_crypto_internal_csp","Threshold signature implementation for the CSP",null,null],[0,"dkg","ic_crypto_internal_csp::threshold","Distributed key generation",null,null],[5,"public_coefficients_key_id","ic_crypto_internal_csp::threshold::dkg","Compute a key identifier from public coefficients",null,[[["csppubliccoefficients",6]],["keyid",3]]],[0,"ni_dkg","ic_crypto_internal_csp::threshold","Non-Interactive Distributed Key Generation",null,null],[0,"static_api","ic_crypto_internal_csp::threshold::ni_dkg","Some methods are non-static purely due to the way the mock…",null,null],[5,"verify_forward_secure_key","ic_crypto_internal_csp::threshold::ni_dkg::static_api","Verifies that a forward secure public key and PoP are valid.",null,[[["cspfsencryptionpop",4],["cspfsencryptionpublickey",4],["nodeid",6],["algorithmid",4]],[["result",4],["cspdkgverifyfskeyerror",4]]]],[5,"verify_dealing","","Verifies a CSP dealing",null,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspfsencryptionpublickey",4],["algorithmid",4],["epoch",6],["nidkgid",3],["cspnidkgdealing",4]],[["cspdkgverifydealingerror",4],["result",4]]]],[5,"verify_resharing_dealing","","Verifies a CSP resharing",null,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspfsencryptionpublickey",4],["csppubliccoefficients",6],["algorithmid",4],["epoch",6],["nidkgid",3],["cspnidkgdealing",4]],[["result",4],["cspdkgverifyresharedealingerror",4]]]],[5,"create_transcript","","Create a CSP transcript from CSP dealings",null,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspnidkgdealing",4],["algorithmid",4]],[["result",4],["cspnidkgtranscript",4],["cspdkgcreatetranscripterror",4]]]],[5,"create_resharing_transcript","","Create a CSP transcript from CSP dealings",null,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["csppubliccoefficients",6],["cspnidkgdealing",4],["algorithmid",4]],[["cspnidkgtranscript",4],["result",4],["cspdkgcreateresharetranscripterror",4]]]],[0,"specialise","ic_crypto_internal_csp::threshold::ni_dkg","The API methods sometimes take multiple arguments, but…",null,null],[3,"SpecialisationError","ic_crypto_internal_csp::threshold::ni_dkg::specialise","An error during specialisation",null,null],[5,"fs_key_set","","Converts a secret key into a forward secure secret key set.",null,[[["cspsecretkey",4]],[["cspfsencryptionkeyset",4],["malformedsecretkeyerror",3],["result",4]]]],[0,"groth20","","Type specialisations for the NiDkg_Groth20 scheme.",null,null],[5,"threshold_secret_key","ic_crypto_internal_csp::threshold::ni_dkg::specialise::groth20","Converts a threshold secret key to the variant used by…",null,[[["cspsecretkey",4]],[["secretkeybytes",3],["malformedsecretkeyerror",3],["result",4]]]],[5,"public_coefficients","","Note: We use the CSP equivalent of the…",null,[[["csppubliccoefficients",6]],[["result",4],["publiccoefficientsbytes",3],["malformedpublickeyerror",3]]]],[5,"fs_public_key","","Converts a forward secure public key to the variant used…",null,[[["cspfsencryptionpublickey",4]],[["fsencryptionpublickey",3],["malformedpublickeyerror",3],["result",4]]]],[5,"fs_pop","","Converts a proof of possession for a forward secure key to…",null,[[["cspfsencryptionpop",4]],[["fsencryptionpop",3],["result",4],["malformedpoperror",3]]]],[5,"fs_key_set","","Converts a secret key set to the variant used by…",null,[[["cspfsencryptionkeyset",4]],[["fsencryptionkeysetwithpop",3],["result",4],["malformedsecretkeyerror",3]]]],[5,"receiver_keys","","Converts a map of generic public keys to the variant used…",null,[[["btreemap",3]],[["result",4],["btreemap",3]]]],[5,"dealing","","Converts a generic dealing to the variant used by…",null,[[["cspnidkgdealing",4]],[["dealing",3],["result",4],["invalidargumenterror",3]]]],[5,"dealings","","Converts a map of generic dealings to the variant used by…",null,[[["btreemap",3],["nodeindex",6],["cspnidkgdealing",4]],[["btreemap",3],["result",4]]]],[5,"transcript","","Note: We use the CSP equivalent of the…",null,[[["cspnidkgtranscript",4]],[["malformeddataerror",3],["result",4],["transcript",3]]]],[17,"NIDKG_THRESHOLD_SCOPE","ic_crypto_internal_csp::threshold::ni_dkg","",null,null],[17,"NIDKG_FS_SCOPE","","",null,null],[0,"tls_stub","ic_crypto_internal_csp","TLS utilities",null,null],[0,"cert_chain","ic_crypto_internal_csp::tls_stub","X.509 certificate chain utilities",null,null],[3,"CspCertificateChain","ic_crypto_internal_csp::tls_stub::cert_chain","A non-empty list of certificates representing a…",null,null],[4,"CspCertificateChainCreationError","","An error indicating that a certificate chain could not be…",null,null],[13,"ChainEmpty","","",36,null],[11,"chain","","Returns the chain as vector where the root is the first…",37,[[],["vec",3]]],[11,"root","","Returns the root of the chain.",37,[[],["x509",3]]],[11,"leaf","","Returns the leaf of the chain.",37,[[],["x509",3]]],[0,"types","ic_crypto_internal_csp","Cryptographic types",null,null],[6,"CspPublicCoefficients","ic_crypto_internal_csp::types","A type alias for `PublicCoefficients`.",null,null],[3,"CspDealing","","Data associated with a dealing of the interactive DKG",null,null],[12,"common_data","","",38,null],[12,"receiver_data","","",38,null],[3,"SigConverter","","A struct for converting signatures",null,null],[4,"CspSecretKey","","The secret part of a public/private key pair.",null,null],[13,"Ed25519","","",39,null],[13,"MultiBls12_381","","",39,null],[13,"ThresBls12_381","","",39,null],[13,"Secp256k1WithPublicKey","","",39,null],[13,"TlsEd25519","","",39,null],[13,"FsEncryption","","",39,null],[4,"CspEncryptedSecretKey","","An encrypted threshold BLS12-381 key",null,null],[13,"ThresBls12_381","","",40,null],[4,"CspPublicKey","","The public part of a public/private key pair.",null,null],[13,"EcdsaP256","","",41,null],[13,"EcdsaSecp256k1","","",41,null],[13,"Ed25519","","",41,null],[13,"MultiBls12_381","","",41,null],[4,"CspPop","","A Proof of Possession (PoP)",null,null],[13,"MultiBls12_381","","",42,null],[13,"Secp256k1","","",42,null],[4,"CspSignature","","A cryptographic signature generated by a private key",null,null],[13,"EcdsaP256","","",43,null],[13,"EcdsaSecp256k1","","",43,null],[13,"Ed25519","","",43,null],[13,"MultiBls12_381","","",43,null],[13,"ThresBls12_381","","",43,null],[4,"MultiBls12_381_Signature","","A cryptographic signature generated by a BLS12-381…",null,null],[13,"Individual","","",44,null],[13,"Combined","","",44,null],[4,"ThresBls12_381_Signature","","A threshold BLS12-381 signature",null,null],[13,"Individual","","",45,null],[13,"Combined","","",45,null],[4,"CspResponse","","A response to a interactive DKG dealing",null,null],[13,"Secp256k1","","",46,null],[4,"CspDkgTranscript","","The transcript of a interactive DKG dealing",null,null],[13,"Secp256k1","","",47,null],[0,"conversions","","Type conversion utilities",null,null],[4,"CspPopFromPublicKeyProtoError","ic_crypto_internal_csp::types::conversions","A problem while reading PoP from a public key protobuf",null,null],[13,"NoPopForAlgorithm","","",48,null],[12,"algorithm","ic_crypto_internal_csp::types::conversions::CspPopFromPublicKeyProtoError","",49,null],[13,"MissingProofData","ic_crypto_internal_csp::types::conversions","",48,null],[13,"MalformedPop","","",48,null],[12,"pop_bytes","ic_crypto_internal_csp::types::conversions::CspPopFromPublicKeyProtoError","",50,null],[12,"internal_error","","",50,null],[4,"CspSecretKeyConversionError","ic_crypto_internal_csp::types::conversions","Error while converting secret key",null,null],[13,"WrongSecretKeyType","","",51,null],[5,"key_id_from_csp_pub_coeffs","","Create a key identifier from the public coefficients",null,[[["csppubliccoefficients",6]],["keyid",3]]],[5,"csp_pub_coeffs_from_transcript","","Decode the public coefficients from a transcript",null,[[["transcript",3]],["csppubliccoefficients",6]]],[0,"dkg_id_to_key_id","","Compute a key identifier for a DKG id",null,null],[5,"dkg_id_to_key_id","ic_crypto_internal_csp::types::conversions::dkg_id_to_key_id","Compute a key identifier for a DKG id",null,[[["idkgid",3]],["keyid",3]]],[11,"for_target","ic_crypto_internal_csp::types","",52,[[["algorithmid",4]]]],[11,"try_from_basic","","Convert from a BasicSigOf to a CspSignature",52,[[["basicsigof",6]],[["cryptoresult",6],["cspsignature",4]]]],[11,"ed25519_from_hex","","This function is only used for tests",39,[[]]],[11,"multi_bls12381_from_hex","","This function is only used for tests",39,[[]]],[11,"ed25519_from_hex","","This function is only used for tests",41,[[]]],[11,"multi_bls12381_from_hex","","This function is only used for tests",41,[[]]],[11,"ed25519_from_hex","","This function is only used for tests",43,[[]]],[11,"multi_bls12381_individual_from_hex","","This function is only used for tests",43,[[]]],[11,"thres_bls12381_indiv_from_array_of","","This function is only used for tests",43,[[]]],[11,"thres_bls12381_combined_from_array_of","","This function is only used for tests",43,[[]]],[11,"multi_bls12381_from_hex","","This function is only used for tests",42,[[]]],[11,"ed25519_bytes","","",39,[[],["option",4]]],[11,"ecdsa_p256_bytes","","Return the ECDSA P-256 public key, or else None if the…",41,[[],["option",4]]],[11,"ed25519_bytes","","Return the Ed25519 public key, or else None if the wrong…",41,[[],["option",4]]],[11,"multi_bls12_381_bytes","","Return the BLS12-381 public key, or else None if the wrong…",41,[[],["option",4]]],[11,"algorithm_id","","Return the algorithm identifier of this public key",41,[[],["algorithmid",4]]],[11,"pk_bytes","","Return the binary encoding of this public key",41,[[]]],[11,"new_without_complaints","","",46,[[],["cspresponse",4]]],[11,"algorithm","","Return what algorithm was used to generate this signature",43,[[],["algorithmid",4]]],[0,"keygen","ic_crypto_internal_csp","Utilities for key generation and key identifier generation",null,null],[5,"tls_cert_hash_as_key_id","ic_crypto_internal_csp::keygen","Create a key identifier by hashing the bytes of the…",null,[[["tlsed25519certificatederbytes",3]],["keyid",3]]],[5,"tls_registry_cert_hash_as_key_id","","Create a key identifier by hashing the bytes of the…",null,[[["x509publickeycert",3]],["keyid",3]]],[5,"public_key_hash_as_key_id","","Compute the key identifier of the given public key",null,[[["csppublickey",4]],["keyid",3]]],[5,"forward_secure_key_id","","Compute the key identifier for a forward secure encryption…",null,[[["cspfsencryptionpublickey",4]],["keyid",3]]],[0,"utils","","Some key related utils",null,null],[5,"dkg_dealing_encryption_pk_to_proto","ic_crypto_internal_csp::keygen::utils","Form a protobuf structure of the public key and proof of…",null,[[["cspfsencryptionpop",4],["cspfsencryptionpublickey",4]],["publickeyproto",3]]],[8,"CryptoServiceProvider","ic_crypto_internal_csp","Describes the interface of the crypto service provider…",null,null],[11,"new","","Creates a production-grade crypto service provider.",53,[[["metrics",3],["option",4],["cryptoconfig",3],["replicalogger",6],["option",4]]]],[11,"new_with_rng","","Creates a crypto service provider for testing.",53,[[["cryptoconfig",3]]]],[11,"reset_public_key_data","","Resets public key data according to the given…",53,[[["nodepublickeys",3]]]],[11,"of","","Creates a crypto service provider for testing.",53,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","ic_crypto_internal_csp::api","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",0,[[]]],[11,"from","ic_crypto_internal_csp::api::tls_errors","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","ic_crypto_internal_csp::crypto_lib::hash","",23,[[]]],[11,"into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","ic_crypto_internal_csp::imported_utilities::sign_utils","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","ic_crypto_internal_csp::public_key_store","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","ic_crypto_internal_csp::secret_key_store","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"erased_serialize","","",27,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",27,[[]]],[11,"from","ic_crypto_internal_csp::secret_key_store::scope","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"erased_serialize","","",29,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",29,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"into_iter","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","ic_crypto_internal_csp::secret_key_store","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","ic_crypto_internal_csp::secret_key_store::proto_store","",33,[[]]],[11,"into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","ic_crypto_internal_csp::secret_key_store::proto_store::pb","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"proxy_encode","","",31,[[],[["vec",3],["result",4],["encodeerror",3]]]],[11,"proxy_decode","","",31,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"proxy_encode","","",32,[[],[["vec",3],["result",4],["encodeerror",3]]]],[11,"proxy_decode","","",32,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",32,[[]]],[11,"from","ic_crypto_internal_csp::secret_key_store::volatile_store","",34,[[]]],[11,"into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","ic_crypto_internal_csp::threshold::ni_dkg::specialise","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","ic_crypto_internal_csp::tls_stub::cert_chain","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","ic_crypto_internal_csp::types","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"erased_serialize","","",38,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",38,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"erased_serialize","","",39,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",39,[[]]],[11,"zeroize","","",39,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"erased_serialize","","",40,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"erased_serialize","","",41,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",41,[[]]],[11,"encode_hex","","",41,[[]]],[11,"encode_hex_upper","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"erased_serialize","","",42,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",42,[[]]],[11,"encode_hex","","",42,[[]]],[11,"encode_hex_upper","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"erased_serialize","","",43,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",43,[[]]],[11,"encode_hex","","",43,[[]]],[11,"encode_hex_upper","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"erased_serialize","","",44,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"erased_serialize","","",45,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"erased_serialize","","",46,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"erased_serialize","","",47,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",47,[[]]],[11,"from","ic_crypto_internal_csp::types::conversions","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"serialize","ic_crypto_internal_csp::secret_key_store","",27,[[],["result",4]]],[11,"serialize","ic_crypto_internal_csp::secret_key_store::scope","",29,[[],["result",4]]],[11,"iter","","",29,[[],["constscopeiter",3]]],[11,"eq","","",29,[[["constscope",4]]]],[11,"eq","ic_crypto_internal_csp::secret_key_store","",27,[[["scope",4]]]],[11,"ne","","",27,[[["scope",4]]]],[11,"eq","ic_crypto_internal_csp::secret_key_store::scope","",28,[[["scopeschemenames",4]]]],[11,"next","","",54,[[],["option",4]]],[11,"size_hint","","",54,[[]]],[11,"nth","","",54,[[],["option",4]]],[11,"from","","",28,[[["scope",4]],["scopeschemenames",4]]],[11,"from","","",28,[[["scope",4]],["scopeschemenames",4]]],[11,"fmt","ic_crypto_internal_csp::secret_key_store","",27,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ic_crypto_internal_csp::secret_key_store::scope","",29,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",28,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",29,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ic_crypto_internal_csp::secret_key_store","",27,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","ic_crypto_internal_csp::secret_key_store::scope","",29,[[],["constscope",4]]],[11,"clone","","",54,[[],["constscopeiter",3]]],[11,"clone","","",28,[[],["scopeschemenames",4]]],[11,"clone","ic_crypto_internal_csp::secret_key_store","",27,[[],["scope",4]]],[11,"deserialize","","",27,[[],[["result",4],["scope",4]]]],[11,"deserialize","ic_crypto_internal_csp::secret_key_store::scope","",29,[[],[["constscope",4],["result",4]]]],[11,"from_str","","",29,[[],[["constscope",4],["result",4]]]],[11,"from_str","ic_crypto_internal_csp::secret_key_store","",27,[[],[["result",4],["scope",4]]]],[11,"from_str","ic_crypto_internal_csp::secret_key_store::scope","",28,[[],[["result",4],["scopeschemenames",4]]]],[11,"next_back","","",54,[[],["option",4]]],[11,"len","","",54,[[]]],[11,"gen_key_pair","ic_crypto_internal_csp","",53,[[["algorithmid",4]],[["result",4],["cryptoerror",4]]]],[11,"gen_key_pair_with_pop","","",53,[[["algorithmid",4]],[["result",4],["cryptoerror",4]]]],[11,"gen_tls_key_pair","","",53,[[["nodeid",6]],["x509publickeycert",3]]],[11,"sks_contains","","",53,[[["keyid",3]]]],[11,"sks_contains_tls_key","","",53,[[["x509publickeycert",3]]]],[11,"node_public_keys","","",53,[[],["nodepublickeys",3]]],[11,"node_signing_key_id","","",53,[[],["keyid",3]]],[11,"dkg_dealing_encryption_key_id","","",53,[[],["keyid",3]]],[11,"sign","","",53,[[["keyid",3],["algorithmid",4]],[["cryptoresult",6],["cspsignature",4]]]],[11,"verify","","",53,[[["cspsignature",4],["csppublickey",4],["algorithmid",4]],["cryptoresult",6]]],[11,"verify_pop","","",53,[[["csppop",4],["csppublickey",4],["algorithmid",4]],["cryptoresult",6]]],[11,"combine_sigs","","",53,[[["vec",3],["algorithmid",4]],[["cryptoresult",6],["cspsignature",4]]]],[11,"verify_multisig","","",53,[[["vec",3],["csppublickey",4],["cspsignature",4],["algorithmid",4]],["cryptoresult",6]]],[11,"threshold_sign_to_be_removed","","",53,[[["keyid",3],["algorithmid",4]],[["cspsignature",4],["cspthresholdsignerror",4],["result",4]]]],[11,"threshold_sign","","",53,[[["csppubliccoefficients",6],["algorithmid",4]],[["cspsignature",4],["cspthresholdsignerror",4],["result",4]]]],[11,"threshold_combine_signatures","","",53,[[["csppubliccoefficients",6],["algorithmid",4]],[["cryptoresult",6],["cspsignature",4]]]],[11,"threshold_individual_public_key","","",53,[[["csppubliccoefficients",6],["nodeindex",6],["algorithmid",4]],[["cryptoresult",6],["cspthresholdsigpublickey",4]]]],[11,"threshold_verify_individual_signature","","",53,[[["cspsignature",4],["cspthresholdsigpublickey",4],["algorithmid",4]],["cryptoresult",6]]],[11,"threshold_verify_combined_signature","","",53,[[["cspsignature",4],["csppubliccoefficients",6],["algorithmid",4]],["cryptoresult",6]]],[11,"dkg_create_ephemeral","","",53,[[["idkgid",3]],[["result",4],["dkgcreateephemeralerror",4]]]],[11,"dkg_verify_ephemeral","","",53,[[["idkgid",3]],[["dkgverifyephemeralerror",4],["result",4]]]],[11,"dkg_create_dealing","","",53,[[["idkgid",3],["numberofnodes",6]],[["result",4],["dkgcreatedealingerror",4],["cspdealing",3]]]],[11,"dkg_verify_dealing","","",53,[[["numberofnodes",6],["cspdealing",3]],[["dkgverifydealingerror",4],["result",4]]]],[11,"dkg_create_response","","",53,[[["idkgid",3],["nodeindex",6]],[["result",4],["cspresponse",4],["dkgcreateresponseerror",4]]]],[11,"dkg_verify_response","","",53,[[["idkgid",3],["cspresponse",4],["nodeindex",6]],[["dkgverifyresponseerror",4],["result",4]]]],[11,"dkg_create_transcript","","",53,[[["numberofnodes",6]],[["cspdkgtranscript",4],["dkgcreatetranscripterror",4],["result",4]]]],[11,"dkg_load_private_key","","",53,[[["idkgid",3],["cspdkgtranscript",4]],[["dkgloadprivatekeyerror",4],["result",4]]]],[11,"dkg_create_resharing_dealing","","",53,[[["idkgid",3],["numberofnodes",6],["csppubliccoefficients",6]],[["result",4],["dkgcreateresharedealingerror",4],["cspdealing",3]]]],[11,"dkg_verify_resharing_dealing","","",53,[[["numberofnodes",6],["nodeindex",6],["cspdealing",3],["csppubliccoefficients",6]],[["result",4],["dkgverifyresharedealingerror",4]]]],[11,"dkg_create_resharing_transcript","","",53,[[["numberofnodes",6],["csppubliccoefficients",6]],[["cspdkgtranscript",4],["dkgcreateresharetranscripterror",4],["result",4]]]],[11,"create_forward_secure_key_pair","","Creates a key pair for encrypting threshold key shares in…",53,[[["nodeid",6],["algorithmid",4]],[["cspdkgcreatefskeyerror",4],["result",4]]]],[11,"verify_forward_secure_key","","Verifies that a forward secure public key and PoP are valid.",53,[[["cspfsencryptionpop",4],["cspfsencryptionpublickey",4],["nodeid",6],["algorithmid",4]],[["result",4],["cspdkgverifyfskeyerror",4]]]],[11,"update_forward_secure_epoch","","Erases forward secure secret keys before a given epoch",53,[[["epoch",6],["algorithmid",4]],[["cspdkgupdatefsepocherror",4],["result",4]]]],[11,"create_dealing","","Creates a CSP dealing",53,[[["numberofnodes",6],["epoch",6],["nodeindex",6],["btreemap",3],["cspfsencryptionpublickey",4],["nidkgid",3],["algorithmid",4]],[["result",4],["cspnidkgdealing",4],["cspdkgcreatedealingerror",4]]]],[11,"create_resharing_dealing","","Creates a CSP dealing by resharing a previous secret key",53,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspfsencryptionpublickey",4],["csppubliccoefficients",6],["algorithmid",4],["epoch",6],["nidkgid",3]],[["result",4],["cspnidkgdealing",4],["cspdkgcreateresharedealingerror",4]]]],[11,"verify_dealing","","Verify a CSP dealing",53,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspfsencryptionpublickey",4],["algorithmid",4],["epoch",6],["nidkgid",3],["cspnidkgdealing",4]],[["cspdkgverifydealingerror",4],["result",4]]]],[11,"verify_resharing_dealing","","Verify a resharing dealing",53,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspfsencryptionpublickey",4],["csppubliccoefficients",6],["algorithmid",4],["epoch",6],["nidkgid",3],["cspnidkgdealing",4]],[["result",4],["cspdkgverifyresharedealingerror",4]]]],[11,"create_transcript","","Create a CSP transcript from CSP dealings",53,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["cspnidkgdealing",4],["algorithmid",4]],[["result",4],["cspnidkgtranscript",4],["cspdkgcreatetranscripterror",4]]]],[11,"create_resharing_transcript","","Create a CSP transcript from CSP resharing dealings",53,[[["numberofnodes",6],["btreemap",3],["nodeindex",6],["csppubliccoefficients",6],["cspnidkgdealing",4],["algorithmid",4]],[["cspnidkgtranscript",4],["result",4],["cspdkgcreateresharetranscripterror",4]]]],[11,"load_threshold_signing_key","","Derives the threshold signing key share and loads it into…",53,[[["epoch",6],["cspnidkgtranscript",4],["nodeindex",6],["nidkgid",3],["algorithmid",4]],[["result",4],["cspdkgloadprivatekeyerror",4]]]],[11,"retain_threshold_keys_if_present","","",53,[[["btreeset",3],["csppubliccoefficients",6]]]],[11,"insert_secret_key","","",53,[[["keyid",3],["cspsecretkey",4]]]],[11,"insert","ic_crypto_internal_csp::secret_key_store::proto_store","",33,[[["scope",4],["cspsecretkey",4],["keyid",3],["option",4]],[["secretkeystoreerror",4],["result",4]]]],[11,"get","","",33,[[["keyid",3]],[["cspsecretkey",4],["option",4]]]],[11,"contains","","",33,[[["keyid",3]]]],[11,"remove","","",33,[[["keyid",3]]]],[11,"retain","","",33,[[["scope",4]]]],[11,"insert","ic_crypto_internal_csp::secret_key_store::volatile_store","",34,[[["scope",4],["cspsecretkey",4],["keyid",3],["option",4]],[["secretkeystoreerror",4],["result",4]]]],[11,"get","","",34,[[["keyid",3]],[["cspsecretkey",4],["option",4]]]],[11,"contains","","",34,[[["keyid",3]]]],[11,"remove","","",34,[[["keyid",3]]]],[11,"retain","","",34,[[["scope",4]]]],[11,"perform_tls_server_handshake","ic_crypto_internal_csp","",53,[[["tcpstream",3],["x509publickeycert",3],["vec",3]],[["box",3],["pin",3]]]],[11,"perform_tls_client_handshake","","",53,[[["tcpstream",3],["x509publickeycert",3]],[["pin",3],["box",3]]]],[11,"as_ref","ic_crypto_internal_csp::types","",41,[[]]],[11,"as_ref","","",42,[[]]],[11,"as_ref","","",43,[[]]],[11,"from","ic_crypto_internal_csp::api","",0,[[["clibthresholdsignerror",4]]]],[11,"from","","",0,[[["cspsecretkeyconversionerror",4]]]],[11,"from","ic_crypto_internal_csp::api::tls_errors","",5,[[["createtlsconnectorerror",3]]]],[11,"from","","",9,[[["createtlsacceptorerror",3]]]],[11,"from","ic_crypto_internal_csp::types","",38,[[["dealing",3]]]],[11,"from","","",42,[[["encryptionpublickeypop",3]]]],[11,"from","","",46,[[["response",3]]]],[11,"from","ic_crypto_internal_csp","",56,[[["cspdkgtranscript",4]]]],[11,"from","ic_crypto_internal_csp::types::conversions","",48,[[["popbytesfromprotoerror",4]]]],[11,"from","ic_crypto_internal_csp::types","",38,[[["clibdealingbytes",3]],["cspdealing",3]]],[11,"from","","",47,[[["transcriptbytes",3]]]],[11,"clone","ic_crypto_internal_csp::api","",0,[[],["cspthresholdsignerror",4]]],[11,"clone","ic_crypto_internal_csp::api::tls_errors","",5,[[],["csptlsclienthandshakeerror",4]]],[11,"clone","","",4,[[],["cspmalformedpeercertificateerror",3]]],[11,"clone","","",9,[[],["csptlsserverhandshakeerror",4]]],[11,"clone","ic_crypto_internal_csp::imported_utilities::sign_utils","",25,[[],["keybytescontenttype",4]]],[11,"clone","ic_crypto_internal_csp::public_key_store","",26,[[],["publickeystoreerror",4]]],[11,"clone","ic_crypto_internal_csp::secret_key_store::proto_store::pb","",31,[[],["secretkeyv1",3]]],[11,"clone","","",32,[[],["secretkeystore",3]]],[11,"clone","ic_crypto_internal_csp::secret_key_store","",30,[[],["secretkeystoreerror",4]]],[11,"clone","ic_crypto_internal_csp::tls_stub::cert_chain","",37,[[],["cspcertificatechain",3]]],[11,"clone","","",36,[[],["cspcertificatechaincreationerror",4]]],[11,"clone","ic_crypto_internal_csp::types::conversions","",48,[[],["csppopfrompublickeyprotoerror",4]]],[11,"clone","ic_crypto_internal_csp::types","",39,[[],["cspsecretkey",4]]],[11,"clone","","",40,[[],["cspencryptedsecretkey",4]]],[11,"clone","","",41,[[],["csppublickey",4]]],[11,"clone","","",42,[[],["csppop",4]]],[11,"clone","","",43,[[],["cspsignature",4]]],[11,"clone","","",44,[[],["multibls12_381_signature",4]]],[11,"clone","","",45,[[],["thresbls12_381_signature",4]]],[11,"clone","","",38,[[],["cspdealing",3]]],[11,"clone","","",46,[[],["cspresponse",4]]],[11,"clone","","",47,[[],["cspdkgtranscript",4]]],[11,"default","ic_crypto_internal_csp::secret_key_store::proto_store::pb","",31,[[]]],[11,"default","","",32,[[]]],[11,"eq","ic_crypto_internal_csp::api","",0,[[["cspthresholdsignerror",4]]]],[11,"ne","","",0,[[["cspthresholdsignerror",4]]]],[11,"eq","ic_crypto_internal_csp::api::tls_errors","",5,[[["csptlsclienthandshakeerror",4]]]],[11,"ne","","",5,[[["csptlsclienthandshakeerror",4]]]],[11,"eq","","",4,[[["cspmalformedpeercertificateerror",3]]]],[11,"ne","","",4,[[["cspmalformedpeercertificateerror",3]]]],[11,"eq","","",9,[[["csptlsserverhandshakeerror",4]]]],[11,"ne","","",9,[[["csptlsserverhandshakeerror",4]]]],[11,"eq","ic_crypto_internal_csp::imported_utilities::sign_utils","",25,[[["keybytescontenttype",4]]]],[11,"eq","ic_crypto_internal_csp::secret_key_store::proto_store::pb","",31,[[["secretkeyv1",3]]]],[11,"ne","","",31,[[["secretkeyv1",3]]]],[11,"eq","","",32,[[["secretkeystore",3]]]],[11,"ne","","",32,[[["secretkeystore",3]]]],[11,"eq","ic_crypto_internal_csp::tls_stub::cert_chain","",36,[[["cspcertificatechaincreationerror",4]]]],[11,"eq","ic_crypto_internal_csp::types::conversions","",48,[[["csppopfrompublickeyprotoerror",4]]]],[11,"ne","","",48,[[["csppopfrompublickeyprotoerror",4]]]],[11,"eq","ic_crypto_internal_csp::types","",39,[[["cspsecretkey",4]]]],[11,"ne","","",39,[[["cspsecretkey",4]]]],[11,"eq","","",40,[[["cspencryptedsecretkey",4]]]],[11,"ne","","",40,[[["cspencryptedsecretkey",4]]]],[11,"eq","","",41,[[["csppublickey",4]]]],[11,"ne","","",41,[[["csppublickey",4]]]],[11,"eq","","",42,[[["csppop",4]]]],[11,"ne","","",42,[[["csppop",4]]]],[11,"eq","","",43,[[["cspsignature",4]]]],[11,"ne","","",43,[[["cspsignature",4]]]],[11,"eq","","",44,[[["multibls12_381_signature",4]]]],[11,"ne","","",44,[[["multibls12_381_signature",4]]]],[11,"eq","","",45,[[["thresbls12_381_signature",4]]]],[11,"ne","","",45,[[["thresbls12_381_signature",4]]]],[11,"eq","","",38,[[["cspdealing",3]]]],[11,"ne","","",38,[[["cspdealing",3]]]],[11,"eq","","",46,[[["cspresponse",4]]]],[11,"ne","","",46,[[["cspresponse",4]]]],[11,"eq","","",47,[[["cspdkgtranscript",4]]]],[11,"ne","","",47,[[["cspdkgtranscript",4]]]],[11,"fmt","ic_crypto_internal_csp::api","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::api::tls_errors","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::imported_utilities::sign_utils","",25,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::public_key_store","",26,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::secret_key_store::proto_store::pb","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::secret_key_store","",30,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::threshold::ni_dkg::specialise","",55,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::tls_stub::cert_chain","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::types::conversions","",48,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::types","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::api","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_csp::secret_key_store","",30,[[["formatter",3]],["result",6]]],[11,"hash","ic_crypto_internal_csp::api","",0,[[]]],[11,"finish","ic_crypto_internal_csp::crypto_lib::hash","",23,[[]]],[11,"write","","",23,[[]]],[11,"try_from","ic_crypto_internal_csp::tls_stub::cert_chain","Perform the conversion assuming that the stack\'s iterator…",37,[[["stackref",3]],["result",4]]],[11,"try_from","ic_crypto_internal_csp::types","",41,[[["publickeyproto",3]],["result",4]]],[11,"try_from","","",42,[[["publickeyproto",3]],["result",4]]],[11,"try_from","","",41,[[["userpublickey",3]],["result",4]]],[11,"try_from","","",43,[[["individualmultisigof",6]],["result",4]]],[11,"try_from","","",43,[[["combinedmultisigof",6]],["result",4]]],[11,"try_from","","",43,[[["thresholdsigshareof",6]],["result",4]]],[11,"try_from","","",43,[[["combinedthresholdsigof",6]],["result",4]]],[11,"encode_raw","ic_crypto_internal_csp::secret_key_store::proto_store::pb","",31,[[]]],[11,"merge_field","","",31,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",31,[[]]],[11,"clear","","",31,[[]]],[11,"encode_raw","","",32,[[]]],[11,"merge_field","","",32,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",32,[[]]],[11,"clear","","",32,[[]]],[11,"serialize","ic_crypto_internal_csp::api","",0,[[],["result",4]]],[11,"serialize","ic_crypto_internal_csp::types","",39,[[],["result",4]]],[11,"serialize","","",40,[[],["result",4]]],[11,"serialize","","",41,[[],["result",4]]],[11,"serialize","","",42,[[],["result",4]]],[11,"serialize","","",43,[[],["result",4]]],[11,"serialize","","",44,[[],["result",4]]],[11,"serialize","","",45,[[],["result",4]]],[11,"serialize","","",38,[[],["result",4]]],[11,"serialize","","",46,[[],["result",4]]],[11,"serialize","","",47,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_csp::api","",0,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_csp::types","",39,[[],["result",4]]],[11,"deserialize","","",40,[[],["result",4]]],[11,"deserialize","","",41,[[],["result",4]]],[11,"deserialize","","",42,[[],["result",4]]],[11,"deserialize","","",43,[[],["result",4]]],[11,"deserialize","","",44,[[],["result",4]]],[11,"deserialize","","",45,[[],["result",4]]],[11,"deserialize","","",38,[[],["result",4]]],[11,"deserialize","","",46,[[],["result",4]]],[11,"deserialize","","",47,[[],["result",4]]],[11,"zeroize","","",39,[[]]]],"p":[[4,"CspThresholdSignError"],[13,"SecretKeyNotFound"],[13,"UnsupportedAlgorithm"],[13,"MalformedSecretKey"],[3,"CspMalformedPeerCertificateError"],[4,"CspTlsClientHandshakeError"],[13,"MalformedSelfCertificate"],[13,"CreateConnectorError"],[13,"HandshakeError"],[4,"CspTlsServerHandshakeError"],[13,"MalformedSelfCertificate"],[13,"CreateAcceptorError"],[13,"HandshakeError"],[8,"CspKeyGenerator"],[8,"CspSecretKeyStoreChecker"],[8,"NodePublicKeyData"],[8,"CspSigner"],[8,"CspSecretKeyInjector"],[8,"DistributedKeyGenerationCspClient"],[8,"NiDkgCspClient"],[8,"ThresholdSignatureCspClient"],[8,"CspTlsClientHandshake"],[8,"CspTlsServerHandshake"],[3,"Sha256Hasher"],[3,"Sha512Hasher"],[4,"KeyBytesContentType"],[4,"PublicKeyStoreError"],[4,"Scope"],[4,"ScopeSchemeNames"],[4,"ConstScope"],[4,"SecretKeyStoreError"],[3,"SecretKeyV1"],[3,"SecretKeyStore"],[3,"ProtoSecretKeyStore"],[3,"VolatileSecretKeyStore"],[8,"SecretKeyStore"],[4,"CspCertificateChainCreationError"],[3,"CspCertificateChain"],[3,"CspDealing"],[4,"CspSecretKey"],[4,"CspEncryptedSecretKey"],[4,"CspPublicKey"],[4,"CspPop"],[4,"CspSignature"],[4,"MultiBls12_381_Signature"],[4,"ThresBls12_381_Signature"],[4,"CspResponse"],[4,"CspDkgTranscript"],[4,"CspPopFromPublicKeyProtoError"],[13,"NoPopForAlgorithm"],[13,"MalformedPop"],[4,"CspSecretKeyConversionError"],[3,"SigConverter"],[3,"Csp"],[3,"ConstScopeIter"],[3,"SpecialisationError"],[6,"CspPublicCoefficients"]]},\
"ic_crypto_internal_fs_ni_dkg":{"doc":"Non-interactive distributed key generation","i":[[0,"encryption_key_pop","ic_crypto_internal_fs_ni_dkg","Generating and verifying Proofs of Possession (PoP)",null,null],[3,"EncryptionKeyPop","ic_crypto_internal_fs_ni_dkg::encryption_key_pop","Proof of Possession (PoP) of the Encryption Key.",null,null],[12,"pop_key","","",0,null],[12,"challenge","","",0,null],[12,"response","","",0,null],[3,"EncryptionKeyInstance","","Instance for the Possession of the Encryption Key.",null,null],[12,"g1_gen","","",1,null],[12,"public_key","","",1,null],[12,"associated_data","","",1,null],[4,"EncryptionKeyPopError","","A PoP could not be generated or verified",null,null],[13,"InvalidProof","","",2,null],[13,"InvalidInstance","","",2,null],[5,"prove_pop","","Prove the Possession of an EncryptionKey.",null,[[["encryptionkeyinstance",3],["big",3]],[["result",4],["encryptionkeypop",3],["encryptionkeypoperror",4]]]],[5,"verify_pop","","Verifies the Proof of Possession of an EncryptionKey.",null,[[["encryptionkeyinstance",3],["encryptionkeypop",3]],[["result",4],["encryptionkeypoperror",4]]]],[0,"forward_secure","ic_crypto_internal_fs_ni_dkg","Methods for forward secure encryption",null,null],[3,"BTENode","ic_crypto_internal_fs_ni_dkg::forward_secure","A node of a Binary Tree Encryption scheme.",null,null],[12,"tau","","",3,null],[12,"a","","",3,null],[12,"b","","",3,null],[12,"d_t","","",3,null],[12,"d_h","","",3,null],[12,"e","","",3,null],[3,"ZeroizedBIG","","A BIG that cann be zeroized",null,null],[12,"big","","",4,null],[3,"SecretKey","","A forward-secure secret key is a list of BTE nodes.",null,null],[12,"bte_nodes","","",5,null],[3,"PublicKeyWithPop","","A public key and its associated proof of possession",null,null],[12,"key_value","","",6,null],[12,"proof_data","","",6,null],[3,"SysParam","","NI-DKG system parameters",null,null],[12,"lambda_t","","",7,null],[12,"lambda_h","","",7,null],[12,"f0","","",7,null],[12,"f","","",7,null],[12,"f_h","","",7,null],[12,"h","","",7,null],[3,"SingleCiphertext","","A forward secure ciphertext",null,null],[12,"cc","","",8,null],[12,"rr","","",8,null],[12,"ss","","",8,null],[12,"zz","","",8,null],[3,"CRSZ","","Forward secure ciphertexts",null,null],[12,"cc","","",9,null],[12,"rr","","",9,null],[12,"ss","","",9,null],[12,"zz","","",9,null],[3,"ToxicWaste","","Randomness needed for NIZK proofs.",null,null],[12,"spec_r","","",10,null],[12,"s","","",10,null],[4,"Bit","","Type for a single bit",null,null],[13,"Zero","","",11,null],[13,"One","","",11,null],[4,"DecErr","","Error while decrypting",null,null],[13,"ExpiredKey","","",12,null],[5,"tau_from_epoch","","Generates tau (a vector of bits) from an epoch.",null,[[["epoch",6],["sysparam",3]],[["vec",3],["bit",4]]]],[5,"epoch_from_tau_vec","","Converts an epoch prefix to an epoch by filling in…",null,[[],["epoch",6]]],[5,"kgen","","Generates a (public key, secret key) pair for of…",null,[[["sysparam",3]]]],[5,"node_gen","","Generates the specified child of a given BTE node. Only…",null,[[["bit",4],["sysparam",3],["btenode",3]],["btenode",3]]],[5,"enc_single","","The `Enc` function of section 7.2.",null,[[["ecp",3],["sysparam",3]],["singleciphertext",3]]],[5,"dec_single","","The `Dec` function of Section 7.2.",null,[[["singleciphertext",3],["secretkey",3],["sysparam",3]]]],[5,"enc_chunks","","Encrypt chunks. Returns ciphertext as well as the random…",null,[[["vec",3],["ecp",3],["sysparam",3]],["option",4]]],[5,"baby_giant","","Solves discrete log problem with baby-step giant-step.",null,[[["fp12",3]],["option",4]]],[5,"dec_chunks","","Decrypt the i-th group of chunks.",null,[[["secretkey",3],["sysparam",3],["crsz",3]],[["decerr",4],["result",4],["vec",3]]]],[5,"verify_ciphertext_integrity","","Verify ciphertext integrity",null,[[["sysparam",3],["crsz",3]],["result",4]]],[5,"mk_sys_params","","Return NI-DKG system parameters",null,[[],["sysparam",3]]],[5,"negative_safe_new_int","","Create a BIG from an isize",null,[[],["big",3]]],[5,"solve_cheater_log","","Brute-forces a discrete log for a malicious DKG…",null,[[["fp12",3]],[["big",3],["option",4]]]],[17,"MESSAGE_BYTES","","The ciphertext is an element of Fr which is 256-bits",null,null],[17,"CHUNK_BYTES","","The size in bytes of a chunk",null,null],[17,"CHUNK_SIZE","","The maximum value of a chunk",null,null],[17,"CHUNK_MIN","","The minimum range of a chunk",null,null],[17,"CHUNK_MAX","","The maximum range of a chunk",null,null],[17,"NUM_CHUNKS","","NUM_CHUNKS is simply the number of chunks needed to hold a…",null,null],[17,"LAMBDA_T","","Constant which controls the upper limit of epochs",null,null],[11,"verify","","",6,[[]]],[11,"serialize","","",6,[[],["vec",3]]],[11,"deserialize","","",6,[[],["publickeywithpop",3]]],[11,"fast_derive","","The current key (the end of list of BTENodes) of a…",5,[[["sysparam",3]]]],[11,"slow_derive","","A simpler but slower variant of the above.",5,[[["sysparam",3]]]],[11,"current","","Returns this key\'s BTE-node that corresponds to the…",5,[[],[["option",4],["btenode",3]]]],[11,"update","","Updates this key to the next epoch. After an update, the…",5,[[["sysparam",3]]]],[11,"epoch","","",5,[[],["option",4]]],[11,"update_to","","Updates `self` to the given `epoch`.",5,[[["sysparam",3]]]],[11,"serialize","","",5,[[],["vec",3]]],[11,"deserialize","","",5,[[],["secretkey",3]]],[0,"nizk_chunking","ic_crypto_internal_fs_ni_dkg","Proofs of correct chunking",null,null],[3,"ChunkingInstance","ic_crypto_internal_fs_ni_dkg::nizk_chunking","Instance for a chunking relation.",null,null],[12,"g1_gen","","",13,null],[12,"public_keys","","",13,null],[12,"ciphertext_chunks","","",13,null],[12,"randomizers_r","","",13,null],[3,"ChunkingWitness","","Witness for the validity of a chunking instance.",null,null],[12,"scalars_r","","",14,null],[12,"scalars_s","","",14,null],[3,"ProofChunking","","Zero-knowledge proof of chunking.",null,null],[12,"y0","","",15,null],[12,"bb","","",15,null],[12,"cc","","",15,null],[12,"dd","","",15,null],[12,"yy","","",15,null],[12,"z_r","","",15,null],[12,"z_s","","",15,null],[12,"z_beta","","",15,null],[4,"ZkProofChunkingError","","Creating or verifying a proof of correct chunking failed.",null,null],[13,"InvalidProof","","",16,null],[13,"InvalidInstance","","",16,null],[5,"prove_chunking","","Create a proof of correct chunking",null,[[["chunkinginstance",3],["chunkingwitness",3]],["proofchunking",3]]],[5,"verify_chunking","","Verify a proof of correct chunking",null,[[["proofchunking",3],["chunkinginstance",3]],[["result",4],["zkproofchunkingerror",4]]]],[17,"NUM_ZK_REPETITIONS","","The number of parallel proofs handled by one challenge",null,null],[17,"CHALLENGE_BITS","","Defined as ceil(SECURITY_LEVEL/NUM_ZK_REPETITIONS)",null,null],[11,"check_instance","","",13,[[],[["result",4],["zkproofchunkingerror",4]]]],[0,"nizk_sharing","ic_crypto_internal_fs_ni_dkg","Proofs of correct sharing",null,null],[3,"SharingInstance","ic_crypto_internal_fs_ni_dkg::nizk_sharing","Instance for a sharing relation.",null,null],[12,"g1_gen","","",17,null],[12,"g2_gen","","",17,null],[12,"public_keys","","",17,null],[12,"public_coefficients","","",17,null],[12,"combined_randomizer","","",17,null],[12,"combined_ciphertexts","","",17,null],[3,"SharingWitness","","Witness for the validity of a sharing instance.",null,null],[12,"scalar_r","","",18,null],[12,"scalars_s","","",18,null],[3,"ProofSharing","","Zero-knowledge proof of sharing.",null,null],[12,"ff","","",19,null],[12,"aa","","",19,null],[12,"yy","","",19,null],[12,"z_r","","",19,null],[12,"z_alpha","","",19,null],[4,"ZkProofSharingError","","Creating or verifying a proof of sharing failed.",null,null],[13,"InvalidProof","","",20,null],[13,"InvalidInstance","","",20,null],[5,"prove_sharing","","Create a proof of correct sharing",null,[[["sharingwitness",3],["sharinginstance",3]],["proofsharing",3]]],[5,"verify_sharing","","Verify a proof of correct sharing",null,[[["proofsharing",3],["sharinginstance",3]],[["zkproofsharingerror",4],["result",4]]]],[11,"hash_to_scalar","","",17,[[],["big",3]]],[11,"check_instance","","",17,[[],[["zkproofsharingerror",4],["result",4]]]],[0,"random_oracles","ic_crypto_internal_fs_ni_dkg","Hashing to group elements (fields, curves)",null,null],[3,"HashedMap","ic_crypto_internal_fs_ni_dkg::random_oracles","Ordered map storing the unique digests of values using…",null,null],[12,"0","","",21,null],[5,"random_oracle","","Computes the hash of a struct using an hash function that…",null,[[["uniquehash",8]]]],[5,"random_oracle_to_scalar","","Computes the hash of a struct using an hash function that…",null,[[["uniquehash",8]],["big",3]]],[5,"random_oracle_to_miracl_g1","","Computes the hash of a struct using an hash function that…",null,[[["uniquehash",8]],["miraclg1",6]]],[6,"HashableMap","","Ordered map with elements that can be uniquely hashed.",null,null],[8,"UniqueHash","","Hashes the unique encoding of some structured data. Each…",null,null],[10,"unique_hash","","",22,[[]]],[11,"new","","",21,[[]]],[11,"insert_hashed","","Inserts the digest of `value` using the digest of `key` as…",21,[[["tostring",8]],["option",4]]],[0,"utils","ic_crypto_internal_fs_ni_dkg","Utility functions for the NI-DKG code",null,null],[3,"RAND_ChaCha20","ic_crypto_internal_fs_ni_dkg::utils","A random number generator based on the ChaCha20 stream…",null,null],[5,"curve_order","","Order of the prime order subgroup of curve BLS12_381.",null,[[],["big",3]]],[5,"ecp_inf","","Point at infinity on G1 of curve BLS12_381.",null,[[],["ecp",3]]],[5,"ecp2_inf","","Point at infinity on G2 of curve BLS12_381.",null,[[],["ecp2",3]]],[5,"big_zero","","Zero element in the scalar field of curve BLS12_381.",null,[[],["big",3]]],[5,"big_one","","Identity element in the scalar field of curve BLS12_381.",null,[[],["big",3]]],[5,"field_add","","Addition of two field elements modulo the prime order of…",null,[[["big",3]],["big",3]]],[5,"field_mul","","Multiplication of two field elements modulo the prime…",null,[[["big",3]],["big",3]]],[5,"process_fr","","Feeds an element of Z_p BIG to a hash.",null,[[["hash256",3],["big",3]]]],[5,"process_ecp","","Feeds the standard serialisation of an element of G1==ECP…",null,[[["hash256",3],["ecp",3]]]],[5,"process_ecp2","","Feeds the standard serialisation of an element of G2==ECP2…",null,[[["hash256",3],["ecp2",3]]]],[5,"oracle_p","","Hash a message to a random integer modulo the BLS12-381…",null,[[["big",3]],["big",3]]],[5,"htp2_bls12381","","Hash a message onto the BLS12-381 G2 curve",null,[[],["ecp2",3]]],[11,"new","","",23,[[]]],[11,"from","ic_crypto_internal_fs_ni_dkg::encryption_key_pop","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","ic_crypto_internal_fs_ni_dkg::forward_secure","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"zeroize","","",3,[[]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"zeroize","","",4,[[]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"zeroize","","",10,[[]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","ic_crypto_internal_fs_ni_dkg::nizk_chunking","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","ic_crypto_internal_fs_ni_dkg::nizk_sharing","",17,[[]]],[11,"into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","ic_crypto_internal_fs_ni_dkg::random_oracles","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","ic_crypto_internal_fs_ni_dkg::utils","",23,[[]]],[11,"into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"unique_hash","ic_crypto_internal_fs_ni_dkg::encryption_key_pop","",1,[[]]],[11,"unique_hash","ic_crypto_internal_fs_ni_dkg::nizk_chunking","",13,[[]]],[11,"unique_hash","ic_crypto_internal_fs_ni_dkg::nizk_sharing","",17,[[]]],[11,"unique_hash","ic_crypto_internal_fs_ni_dkg","",24,[[]]],[11,"unique_hash","ic_crypto_internal_fs_ni_dkg::random_oracles","",21,[[]]],[11,"from","ic_crypto_internal_fs_ni_dkg::forward_secure","",11,[[]]],[11,"from","ic_crypto_internal_fs_ni_dkg::random_oracles","Computes the hash of the key-value pairs in an HashableMap…",21,[[["hashablemap",6]],["hashedmap",3]]],[11,"clone","ic_crypto_internal_fs_ni_dkg::encryption_key_pop","",0,[[],["encryptionkeypop",3]]],[11,"clone","","",2,[[],["encryptionkeypoperror",4]]],[11,"clone","ic_crypto_internal_fs_ni_dkg::forward_secure","",11,[[],["bit",4]]],[11,"clone","","",6,[[],["publickeywithpop",3]]],[11,"clone","ic_crypto_internal_fs_ni_dkg::nizk_chunking","",16,[[],["zkproofchunkingerror",4]]],[11,"clone","ic_crypto_internal_fs_ni_dkg::nizk_sharing","",20,[[],["zkproofsharingerror",4]]],[11,"default","ic_crypto_internal_fs_ni_dkg::random_oracles","",21,[[]]],[11,"eq","ic_crypto_internal_fs_ni_dkg::encryption_key_pop","",2,[[["encryptionkeypoperror",4]]]],[11,"eq","ic_crypto_internal_fs_ni_dkg::forward_secure","",11,[[["bit",4]]]],[11,"eq","ic_crypto_internal_fs_ni_dkg::nizk_chunking","",16,[[["zkproofchunkingerror",4]]]],[11,"eq","ic_crypto_internal_fs_ni_dkg::nizk_sharing","",20,[[["zkproofsharingerror",4]]]],[11,"fmt","ic_crypto_internal_fs_ni_dkg::encryption_key_pop","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_fs_ni_dkg::forward_secure","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_fs_ni_dkg::nizk_chunking","",16,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_fs_ni_dkg::nizk_sharing","",20,[[["formatter",3]],["result",6]]],[11,"seed","ic_crypto_internal_fs_ni_dkg::utils","",23,[[]]],[11,"getbyte","","",23,[[]]],[11,"zeroize","ic_crypto_internal_fs_ni_dkg::forward_secure","",3,[[]]],[11,"zeroize","","",4,[[]]],[11,"zeroize","","",10,[[]]]],"p":[[3,"EncryptionKeyPop"],[3,"EncryptionKeyInstance"],[4,"EncryptionKeyPopError"],[3,"BTENode"],[3,"ZeroizedBIG"],[3,"SecretKey"],[3,"PublicKeyWithPop"],[3,"SysParam"],[3,"SingleCiphertext"],[3,"CRSZ"],[3,"ToxicWaste"],[4,"Bit"],[4,"DecErr"],[3,"ChunkingInstance"],[3,"ChunkingWitness"],[3,"ProofChunking"],[4,"ZkProofChunkingError"],[3,"SharingInstance"],[3,"SharingWitness"],[3,"ProofSharing"],[4,"ZkProofSharingError"],[3,"HashedMap"],[8,"UniqueHash"],[3,"RAND_ChaCha20"],[6,"HashableMap"]]},\
"ic_crypto_internal_logmon":{"doc":"Utilities for logging and monitoring for the crypto…","i":[[0,"metrics","ic_crypto_internal_logmon","Metrics exported by crypto",null,null],[3,"Metrics","ic_crypto_internal_logmon::metrics","Metrics exported by crypto.",null,null],[12,"ic_crypto_lock_acquisition_duration_seconds","","Histogram of crypto lock acquisition times. The \'access\'…",0,null],[11,"new","","",0,[[["metricsregistry",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]]],"p":[[3,"Metrics"]]},\
"ic_crypto_internal_multi_sig_bls12381":{"doc":"Multisignatures using BLS12-381.","i":[[5,"keypair_from_rng","ic_crypto_internal_multi_sig_bls12381","Generates a keypair using the given `rng`.",null,[[]]],[5,"sign","","Generates a multisignature on the given `message` using…",null,[[["secretkeybytes",3]],[["cryptoerror",4],["individualsignaturebytes",3],["result",4]]]],[5,"create_pop","","Creates a proof of possession (PoP) of `secret_key_bytes`.",null,[[["publickeybytes",3],["secretkeybytes",3]],[["result",4],["cryptoerror",4],["popbytes",3]]]],[5,"verify_pop","","Verifies a public key\'s proof of possession (PoP).",null,[[["publickeybytes",3],["popbytes",3]],[["cryptoerror",4],["result",4]]]],[5,"combine","","Combines individual signatures into a multisignature.",null,[[],[["cryptoerror",4],["result",4],["combinedsignaturebytes",3]]]],[5,"verify_individual","","Verifies an individual signature over the given `message`…",null,[[["individualsignaturebytes",3],["publickeybytes",3]],[["cryptoerror",4],["result",4]]]],[5,"verify_combined","","Verifies a combined multisignature over the given…",null,[[["combinedsignaturebytes",3]],[["cryptoerror",4],["result",4]]]],[0,"types","","BLS12-381 multisignature types.",null,null],[3,"SecretKeyBytes","ic_crypto_internal_multi_sig_bls12381::types","Wrapper for a serialized secret key.",null,null],[12,"0","","",0,null],[3,"IndividualSignatureBytes","","Wrapper for a serialized individual signature.",null,null],[12,"0","","",1,null],[3,"PopBytes","","Wrapper for a serialized proof of possession.",null,null],[12,"0","","",2,null],[3,"CombinedSignatureBytes","","Wrapper for a serialized combined signature.",null,null],[12,"0","","",3,null],[3,"PublicKeyBytes","","Wrapper for a serialized public key.",null,null],[12,"0","","",4,null],[0,"conversions","","Type conversions for BLS12-381 multisignatures.",null,null],[0,"protobuf","ic_crypto_internal_multi_sig_bls12381::types::conversions","Conversions to/from protobuf for BLS12-381 multisignature…",null,null],[3,"PublicKeyBytesFromProtoError","ic_crypto_internal_multi_sig_bls12381::types::conversions::protobuf","Parsing a public key from protobuf failed.",null,null],[12,"key_bytes","","",5,null],[12,"internal_error","","",5,null],[4,"PopBytesFromProtoError","","Parsing a PoP from protobuf failed.",null,null],[13,"UnknownAlgorithm","","",6,null],[12,"algorithm","ic_crypto_internal_multi_sig_bls12381::types::conversions::protobuf::PopBytesFromProtoError","",7,null],[13,"MissingProofData","ic_crypto_internal_multi_sig_bls12381::types::conversions::protobuf","",6,null],[13,"InvalidLength","","",6,null],[12,"pop_bytes","ic_crypto_internal_multi_sig_bls12381::types::conversions::protobuf::PopBytesFromProtoError","",8,null],[12,"internal_error","","",8,null],[6,"SecretKey","ic_crypto_internal_multi_sig_bls12381::types","A BLS secret key is a field element.",null,null],[6,"PublicKey","","A BLS public key is a curve point in the G2 group.",null,null],[6,"CombinedPublicKey","","A BLS combined public key is a curve point in the G2 group.",null,null],[6,"IndividualSignature","","A BLS signature is a curve point in the G1 group.",null,null],[6,"Pop","","A BLS Proof of Possession is a curve point in the G1 group…",null,null],[6,"CombinedSignature","","A BLS multisignature is a curve point in the G1 group.",null,null],[18,"SIZE","","",0,null],[18,"SIZE","","",1,null],[18,"SIZE","","",2,null],[18,"SIZE","","",3,null],[18,"SIZE","","",4,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",0,[[]]],[11,"zeroize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",4,[[]]],[11,"from","ic_crypto_internal_multi_sig_bls12381::types::conversions::protobuf","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","ic_crypto_internal_multi_sig_bls12381::types","",0,[[["secretkey",6]],["secretkeybytes",3]]],[11,"from","","",4,[[["publickey",6]],["publickeybytes",3]]],[11,"from","","",1,[[["individualsignature",6]],["individualsignaturebytes",3]]],[11,"from","","",2,[[["pop",6]],["popbytes",3]]],[11,"from","","",3,[[["combinedsignature",6]],["combinedsignaturebytes",3]]],[11,"into","","",0,[[],["secretkey",6]]],[11,"into","","",1,[[],["string",3]]],[11,"into","","",3,[[],["string",3]]],[11,"into","","",4,[[],["string",3]]],[11,"into","","",0,[[],["string",3]]],[11,"clone","ic_crypto_internal_multi_sig_bls12381::types::conversions::protobuf","",5,[[],["publickeybytesfromprotoerror",3]]],[11,"clone","","",6,[[],["popbytesfromprotoerror",4]]],[11,"clone","ic_crypto_internal_multi_sig_bls12381::types","",0,[[],["secretkeybytes",3]]],[11,"clone","","",1,[[],["individualsignaturebytes",3]]],[11,"clone","","",2,[[],["popbytes",3]]],[11,"clone","","",3,[[],["combinedsignaturebytes",3]]],[11,"clone","","",4,[[],["publickeybytes",3]]],[11,"eq","ic_crypto_internal_multi_sig_bls12381::types::conversions::protobuf","",5,[[["publickeybytesfromprotoerror",3]]]],[11,"ne","","",5,[[["publickeybytesfromprotoerror",3]]]],[11,"eq","","",6,[[["popbytesfromprotoerror",4]]]],[11,"ne","","",6,[[["popbytesfromprotoerror",4]]]],[11,"eq","ic_crypto_internal_multi_sig_bls12381::types","",4,[[]]],[11,"eq","","",1,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",3,[[]]],[11,"eq","","",0,[[["secretkeybytes",3]]]],[11,"ne","","",0,[[["secretkeybytes",3]]]],[11,"fmt","ic_crypto_internal_multi_sig_bls12381::types::conversions::protobuf","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_multi_sig_bls12381::types","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_multi_sig_bls12381::types::conversions::protobuf","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"try_from","ic_crypto_internal_multi_sig_bls12381::types","",4,[[["publickeyproto",3]],["result",4]]],[11,"try_from","","",2,[[["publickeyproto",3]],["result",4]]],[11,"try_from","ic_crypto_internal_multi_sig_bls12381","",9,[[["publickeybytes",3]],["result",4]]],[11,"try_from","","",10,[[["popbytes",3]],["result",4]]],[11,"try_from","ic_crypto_internal_multi_sig_bls12381::types","",1,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",1,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",2,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",2,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",3,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",3,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",4,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",4,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",0,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",0,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"try_into","","",1,[[],[["result",4],["cryptoerror",4],["individualsignature",6]]]],[11,"try_into","","",3,[[],[["combinedsignature",6],["cryptoerror",4],["result",4]]]],[11,"deserialize","","",0,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",1,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",2,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",3,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",4,[[["deserializer",8]],["result",4]]],[11,"serialize","","",0,[[["serializer",8]],["result",4]]],[11,"serialize","","",1,[[["serializer",8]],["result",4]]],[11,"serialize","","",2,[[["serializer",8]],["result",4]]],[11,"serialize","","",3,[[["serializer",8]],["result",4]]],[11,"serialize","","",4,[[["serializer",8]],["result",4]]],[11,"zeroize","","",0,[[]]]],"p":[[3,"SecretKeyBytes"],[3,"IndividualSignatureBytes"],[3,"PopBytes"],[3,"CombinedSignatureBytes"],[3,"PublicKeyBytes"],[3,"PublicKeyBytesFromProtoError"],[4,"PopBytesFromProtoError"],[13,"UnknownAlgorithm"],[13,"InvalidLength"],[6,"PublicKey"],[6,"Pop"]]},\
"ic_crypto_internal_test_vectors":{"doc":"Test vectors for internal crypto-component implementations.","i":[[0,"basic_sig","ic_crypto_internal_test_vectors","Test vectors for basic signatures.",null,null],[17,"TESTVEC_ED25519_STABILITY_1_SIG","ic_crypto_internal_test_vectors::basic_sig","",null,null],[17,"TESTVEC_ED25519_STABILITY_2_SIG","","",null,null],[0,"ecdsa_p256","ic_crypto_internal_test_vectors","Test vectors for ECDSA signatures using curve P-256.",null,null],[3,"SigVerTestVector","ic_crypto_internal_test_vectors::ecdsa_p256","ECDSA P-256 verification test vectors from the FIPS 186-4…",null,null],[12,"msg","","",0,null],[12,"q_x","","",0,null],[12,"q_y","","",0,null],[12,"r","","",0,null],[12,"s","","",0,null],[12,"is_valid","","",0,null],[3,"EcdsaP256Sha256SigVerTestVectorIter","","",null,null],[4,"EcdsaP256Sha256SigVerTestVector","","",null,null],[13,"FIPS_186_4_1","","",1,null],[13,"FIPS_186_4_2","","",1,null],[13,"FIPS_186_4_3","","",1,null],[13,"FIPS_186_4_4","","",1,null],[13,"FIPS_186_4_5","","",1,null],[13,"FIPS_186_4_6","","",1,null],[13,"FIPS_186_4_7","","",1,null],[13,"FIPS_186_4_8","","",1,null],[13,"FIPS_186_4_9","","",1,null],[13,"FIPS_186_4_10","","",1,null],[13,"FIPS_186_4_11","","",1,null],[13,"FIPS_186_4_12","","",1,null],[13,"FIPS_186_4_13","","",1,null],[13,"FIPS_186_4_14","","",1,null],[13,"FIPS_186_4_15","","",1,null],[5,"crypto_lib_sig_ver_testvec","","",null,[[["ecdsap256sha256sigvertestvector",4]],["sigvertestvector",3]]],[0,"ecdsa_secp256k1","ic_crypto_internal_test_vectors","Test vectors for ECDSA signatures using curve secp256k1.",null,null],[3,"SigVerTestVector","ic_crypto_internal_test_vectors::ecdsa_secp256k1","",null,null],[12,"msg","","",2,null],[12,"q_x","","",2,null],[12,"q_y","","",2,null],[12,"r","","",2,null],[12,"s","","",2,null],[12,"is_valid","","",2,null],[3,"Secp256k1Sha256SigVerTestVectorIter","","",null,null],[4,"Secp256k1Sha256SigVerTestVector","","",null,null],[13,"STACK_OVERFLOW_41316","","",3,null],[13,"MESSAGE_SIGNATURE_MISMATCH","","",3,null],[13,"R_S_SWAPPED","","",3,null],[5,"crypto_lib_sig_ver_testvec","","",null,[[["secp256k1sha256sigvertestvector",4]],["sigvertestvector",3]]],[0,"ed25519","ic_crypto_internal_test_vectors","Test vectors for Ed25519 signatures.",null,null],[3,"Ed25519TestVectorIter","ic_crypto_internal_test_vectors::ed25519","",null,null],[4,"Ed25519TestVector","","",null,null],[13,"RFC8032_ED25519_1","","",4,null],[13,"RFC8032_ED25519_2","","",4,null],[13,"RFC8032_ED25519_3","","",4,null],[13,"RFC8032_ED25519_1024","","",4,null],[13,"RFC8032_ED25519_SHA_ABC","","",4,null],[13,"MESSAGE_LEN_256_BIT_STABILITY_1","","",4,null],[13,"MESSAGE_LEN_256_BIT_STABILITY_2","","",4,null],[5,"crypto_lib_testvec","","",null,[[["ed25519testvector",4]]]],[17,"TESTVEC_RFC8032_ED25519_1_SK","","",null,null],[17,"TESTVEC_RFC8032_ED25519_1_PK","","",null,null],[17,"TESTVEC_RFC8032_ED25519_1_MSG","","",null,null],[17,"TESTVEC_RFC8032_ED25519_1_SIG","","",null,null],[17,"TESTVEC_RFC8032_ED25519_2_SK","","",null,null],[17,"TESTVEC_RFC8032_ED25519_2_PK","","",null,null],[17,"TESTVEC_RFC8032_ED25519_2_MSG","","",null,null],[17,"TESTVEC_RFC8032_ED25519_2_SIG","","",null,null],[17,"TESTVEC_RFC8032_ED25519_3_SK","","",null,null],[17,"TESTVEC_RFC8032_ED25519_3_PK","","",null,null],[17,"TESTVEC_RFC8032_ED25519_3_MSG","","",null,null],[17,"TESTVEC_RFC8032_ED25519_3_SIG","","",null,null],[17,"TESTVEC_RFC8032_ED25519_1024_SK","","",null,null],[17,"TESTVEC_RFC8032_ED25519_1024_PK","","",null,null],[17,"TESTVEC_RFC8032_ED25519_1024_MSG","","",null,null],[17,"TESTVEC_RFC8032_ED25519_1024_SIG","","",null,null],[17,"TESTVEC_RFC8032_ED25519_SHA_ABC_SK","","",null,null],[17,"TESTVEC_RFC8032_ED25519_SHA_ABC_PK","","",null,null],[17,"TESTVEC_RFC8032_ED25519_SHA_ABC_MSG","","",null,null],[17,"TESTVEC_RFC8032_ED25519_SHA_ABC_SIG","","",null,null],[17,"TESTVEC_MESSAGE_LEN_256_BIT_STABILITY_1_SK","","",null,null],[17,"TESTVEC_MESSAGE_LEN_256_BIT_STABILITY_1_PK","","",null,null],[17,"TESTVEC_MESSAGE_LEN_256_BIT_STABILITY_1_MSG","","",null,null],[17,"TESTVEC_MESSAGE_LEN_256_BIT_STABILITY_1_SIG","","",null,null],[17,"TESTVEC_MESSAGE_LEN_256_BIT_STABILITY_2_SK","","",null,null],[17,"TESTVEC_MESSAGE_LEN_256_BIT_STABILITY_2_PK","","",null,null],[17,"TESTVEC_MESSAGE_LEN_256_BIT_STABILITY_2_MSG","","",null,null],[17,"TESTVEC_MESSAGE_LEN_256_BIT_STABILITY_2_SIG","","",null,null],[0,"iccsa","ic_crypto_internal_test_vectors","Test vectors for ICCSA signatures.",null,null],[3,"TestVectorIdIter","ic_crypto_internal_test_vectors::iccsa","",null,null],[3,"TestVector","","",null,null],[12,"signature","","",5,null],[12,"canister_id","","",5,null],[12,"seed","","",5,null],[12,"delegation_pubkey","","",5,null],[12,"delegation_exp","","",5,null],[12,"root_pubkey_der","","",5,null],[4,"TestVectorId","","",null,null],[13,"STABILITY_1","","",6,null],[5,"test_vec","","",null,[[["testvectorid",4]],["testvector",3]]],[0,"multi_bls12_381","ic_crypto_internal_test_vectors","Test vectors for multisignatures using BLS12-381.",null,null],[17,"TESTVEC_MULTI_BLS12_381_1_SK","ic_crypto_internal_test_vectors::multi_bls12_381","",null,null],[17,"TESTVEC_MULTI_BLS12_381_1_PK","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_1_POP","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_1_MSG","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_1_SIG","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_2_SK","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_2_PK","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_2_POP","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_2_MSG","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_2_SIG","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_3_SK","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_3_PK","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_3_POP","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_3_MSG","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_3_SIG","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_4_SK","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_4_PK","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_4_POP","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_4_MSG","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_4_SIG","","",null,null],[17,"TESTVEC_MULTI_BLS12_381_COMB_SIG_1_2","","",null,null],[0,"test_data","ic_crypto_internal_test_vectors","Various data for testing.",null,null],[17,"ED25519_SK_1_RFC8032_HEX","ic_crypto_internal_test_vectors::test_data","",null,null],[17,"ED25519_PK_1_RFC8032_HEX","","",null,null],[17,"ED25519_MSG_1_RFC8032_HEX","","",null,null],[17,"ED25519_SIG_1_RFC8032_HEX","","",null,null],[17,"ED25519_PK_1_HEX","","",null,null],[17,"ED25519_PK_1_DER_HEX","","",null,null],[17,"ED25519_MSG_1_HEX","","",null,null],[17,"ED25519_SIG_1_HEX","","",null,null],[17,"ED25519_PK_2_HEX","","",null,null],[17,"ED25519_PK_2_DER_HEX","","",null,null],[17,"ED25519_MSG_2_HEX","","",null,null],[17,"ED25519_SIG_2_HEX","","",null,null],[17,"ED25519_PK_3_HEX","","",null,null],[17,"ED25519_PK_3_DER_HEX","","",null,null],[17,"ED25519_MSG_3_HEX","","",null,null],[17,"ED25519_SIG_3_HEX","","",null,null],[17,"WEBAUTHN_ECDSA_P256_PK_COSE_HEX","","",null,null],[17,"ECDSA_P256_PK_1_COSE_HEX","","",null,null],[17,"ECDSA_P256_PK_1_COSE_DER_WRAPPED_HEX","","",null,null],[17,"ECDSA_P256_SIG_1_DER_HEX","","",null,null],[17,"WEBAUTHN_MSG_1_HEX","","",null,null],[17,"ECDSA_P256_PK_2_COSE_HEX","","",null,null],[17,"ECDSA_P256_PK_2_COSE_DER_WRAPPED_HEX","","",null,null],[17,"ECDSA_P256_SIG_2_DER_HEX","","",null,null],[17,"WEBAUTHN_MSG_2_HEX","","",null,null],[17,"ECDSA_P256_PK_3_COSE_DER_WRAPPED_HEX","","",null,null],[17,"ECDSA_P256_PK_DER_HEX","","",null,null],[17,"SAFARI_ECDSA_P256_PK_DER_HEX","","ECDSA-P256 public keys and signatures generated by…",null,null],[17,"CHROME_ECDSA_P256_PK_DER_HEX","","",null,null],[17,"FIREFOX_ECDSA_P256_PK_DER_HEX","","",null,null],[17,"SAFARI_ECDSA_P256_SIG_RAW_HEX","","",null,null],[17,"CHROME_ECDSA_P256_SIG_RAW_HEX","","",null,null],[17,"FIREFOX_ECDSA_P256_SIG_RAW_HEX","","",null,null],[17,"ECDSA_SECP256K1_PK_DER_HEX","","",null,null],[17,"ECDSA_SECP256K1_SIG_RAW_HEX","","",null,null],[0,"unhex","ic_crypto_internal_test_vectors","Hexadecimal conversion utilities.",null,null],[5,"hex_to_32_bytes","ic_crypto_internal_test_vectors::unhex","",null,[[["asref",8]]]],[5,"hex_to_48_bytes","","",null,[[["asref",8]]]],[5,"hex_to_64_bytes","","",null,[[["asref",8]]]],[5,"hex_to_96_bytes","","",null,[[["asref",8]]]],[5,"hex_to_byte_vec","","",null,[[["asref",8]],["vec",3]]],[11,"from","ic_crypto_internal_test_vectors::ecdsa_p256","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","ic_crypto_internal_test_vectors::ecdsa_secp256k1","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","ic_crypto_internal_test_vectors::ed25519","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","ic_crypto_internal_test_vectors::iccsa","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"next_back","ic_crypto_internal_test_vectors::ecdsa_p256","",7,[[],["option",4]]],[11,"next_back","ic_crypto_internal_test_vectors::ecdsa_secp256k1","",8,[[],["option",4]]],[11,"next_back","ic_crypto_internal_test_vectors::ed25519","",9,[[],["option",4]]],[11,"next_back","ic_crypto_internal_test_vectors::iccsa","",10,[[],["option",4]]],[11,"len","ic_crypto_internal_test_vectors::ecdsa_p256","",7,[[]]],[11,"len","ic_crypto_internal_test_vectors::ecdsa_secp256k1","",8,[[]]],[11,"len","ic_crypto_internal_test_vectors::ed25519","",9,[[]]],[11,"len","ic_crypto_internal_test_vectors::iccsa","",10,[[]]],[11,"next","ic_crypto_internal_test_vectors::ecdsa_p256","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"nth","","",7,[[],["option",4]]],[11,"next","ic_crypto_internal_test_vectors::ecdsa_secp256k1","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"nth","","",8,[[],["option",4]]],[11,"next","ic_crypto_internal_test_vectors::ed25519","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"nth","","",9,[[],["option",4]]],[11,"next","ic_crypto_internal_test_vectors::iccsa","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"nth","","",10,[[],["option",4]]],[11,"clone","ic_crypto_internal_test_vectors::ecdsa_p256","",1,[[],["ecdsap256sha256sigvertestvector",4]]],[11,"clone","","",7,[[],["ecdsap256sha256sigvertestvectoriter",3]]],[11,"clone","ic_crypto_internal_test_vectors::ecdsa_secp256k1","",3,[[],["secp256k1sha256sigvertestvector",4]]],[11,"clone","","",8,[[],["secp256k1sha256sigvertestvectoriter",3]]],[11,"clone","ic_crypto_internal_test_vectors::ed25519","",4,[[],["ed25519testvector",4]]],[11,"clone","","",9,[[],["ed25519testvectoriter",3]]],[11,"clone","ic_crypto_internal_test_vectors::iccsa","",6,[[],["testvectorid",4]]],[11,"clone","","",10,[[],["testvectoriditer",3]]],[11,"eq","ic_crypto_internal_test_vectors::ecdsa_p256","",1,[[["ecdsap256sha256sigvertestvector",4]]]],[11,"eq","ic_crypto_internal_test_vectors::ecdsa_secp256k1","",3,[[["secp256k1sha256sigvertestvector",4]]]],[11,"eq","ic_crypto_internal_test_vectors::ed25519","",4,[[["ed25519testvector",4]]]],[11,"eq","ic_crypto_internal_test_vectors::iccsa","",6,[[["testvectorid",4]]]],[11,"fmt","ic_crypto_internal_test_vectors::ecdsa_p256","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_test_vectors::ecdsa_secp256k1","",3,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_test_vectors::ed25519","",4,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_test_vectors::iccsa","",6,[[["formatter",3]],["result",6]]],[11,"iter","ic_crypto_internal_test_vectors::ecdsa_p256","",1,[[],["ecdsap256sha256sigvertestvectoriter",3]]],[11,"iter","ic_crypto_internal_test_vectors::ecdsa_secp256k1","",3,[[],["secp256k1sha256sigvertestvectoriter",3]]],[11,"iter","ic_crypto_internal_test_vectors::ed25519","",4,[[],["ed25519testvectoriter",3]]],[11,"iter","ic_crypto_internal_test_vectors::iccsa","",6,[[],["testvectoriditer",3]]]],"p":[[3,"SigVerTestVector"],[4,"EcdsaP256Sha256SigVerTestVector"],[3,"SigVerTestVector"],[4,"Secp256k1Sha256SigVerTestVector"],[4,"Ed25519TestVector"],[3,"TestVector"],[4,"TestVectorId"],[3,"EcdsaP256Sha256SigVerTestVectorIter"],[3,"Secp256k1Sha256SigVerTestVectorIter"],[3,"Ed25519TestVectorIter"],[3,"TestVectorIdIter"]]},\
"ic_crypto_internal_threshold_sig_bls12381":{"doc":"Threshold signatures using BLS12-381.","i":[[0,"api","ic_crypto_internal_threshold_sig_bls12381","External API for Threshold Signatures",null,null],[5,"keygen","ic_crypto_internal_threshold_sig_bls12381::api","Generates keys for threshold signatories.",null,[[["randomness",6],["numberofnodes",6]],["cryptoresult",6]]],[5,"individual_public_key","","Derives the public key of one signatory from the…",null,[[["publiccoefficientsbytes",3],["nodeindex",6]],[["publickeybytes",3],["cryptoresult",6]]]],[5,"combined_public_key","","Extracts the combined public key from the…",null,[[["publiccoefficientsbytes",3]],[["publickeybytes",3],["cryptoresult",6]]]],[5,"sign_message","","Creates an individual signature.",null,[[["secretkeybytes",3]],[["individualsignaturebytes",3],["result",4],["clibthresholdsignerror",4]]]],[5,"combine_signatures","","Combines individual signatures.",null,[[["numberofnodes",6]],[["cryptoresult",6],["combinedsignaturebytes",3]]]],[5,"verify_individual_signature","","Verifies that an individual signature is valid.",null,[[["individualsignaturebytes",3],["publickeybytes",3]],["cryptoresult",6]]],[5,"verify_combined_signature","","Verifies that a combined signature is valid.",null,[[["publickeybytes",3],["combinedsignaturebytes",3]],["cryptoresult",6]]],[5,"public_key_to_der","","Converts public key bytes into its DER-encoded form.",null,[[["publickeybytes",3]],[["vec",3],["cryptoresult",6]]]],[5,"public_key_from_der","","Parses a `PublicKeyBytes` from its DER-encoded form.",null,[[],[["publickeybytes",3],["cryptoresult",6]]]],[5,"combined_signature_and_public_key","","Generates new keys for threshold signatories and a…",null,[[["randomness",6],["numberofnodes",6]]]],[0,"dkg_errors","","Error types used in the public DKG API.",null,null],[3,"InvalidArgumentError","ic_crypto_internal_threshold_sig_bls12381::api::dkg_errors","Occurs if an argument is invalid.",null,null],[12,"message","","",0,null],[3,"KeyNotFoundError","","The secret key was not found in the secret key store.",null,null],[12,"internal_error","","",1,null],[12,"key_id","","",1,null],[3,"MalformedDataError","","Malformed X for other types of X.",null,null],[12,"algorithm","","",2,null],[12,"internal_error","","",2,null],[12,"data","","",2,null],[3,"MalformedPublicKeyError","","Occurs if a public key is malformed.",null,null],[12,"algorithm","","",3,null],[12,"key_bytes","","",3,null],[12,"internal_error","","",3,null],[3,"MalformedSecretKeyError","","Cognate to CryptoError::MalformedSecretKey",null,null],[12,"algorithm","","",4,null],[12,"internal_error","","",4,null],[3,"MalformedPopError","","Proof of possession could not be parsed.",null,null],[12,"algorithm","","",5,null],[12,"internal_error","","",5,null],[12,"bytes","","",5,null],[3,"SizeError","","A size is unsupported by this machine; this is not a…",null,null],[12,"message","","",6,null],[4,"DkgCreateEphemeralError","","Creation of an ephemeral key failed.",null,null],[13,"MalformedSecretKeyError","","There is an incompatible preexisting key for this DKG.",7,null],[4,"DkgVerifyEphemeralError","","Verification of an ephemeral key failed.",null,null],[13,"MalformedPublicKeyError","","The public key could not be parsed.",8,null],[13,"MalformedPopError","","The PoP could not be parsed.",8,null],[13,"InvalidPopError","","The proof in the \\\"proof of possession\\\" failed.",8,null],[4,"DkgCreateDealingError","","Dealing of shares during DKG failed.",null,null],[13,"KeyNotFoundError","","Precondition error: The ephemeral secret key was not in…",9,null],[13,"MalformedSecretKeyError","","Precondition error: The ephemeral secret key is malformed.…",9,null],[13,"UnsupportedThresholdParameters","","The threshold scheme does not support the supplied…",9,null],[13,"MalformedPublicKeyError","","One of the receiver public keys is invalid.",9,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",9,null],[4,"DkgVerifyDealingError","","Verification of a dealing during DKG failed.",null,null],[13,"MalformedPublicKeyError","","Precondition error: One of the receiver public keys is…",10,null],[13,"MalformedDealingError","","The dealing could not be parsed.",10,null],[13,"InvalidDealingError","","The dealing is invalid.",10,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",10,null],[4,"DkgCreateResponseError","","Creation of a DKG response failed.",null,null],[13,"KeyNotFoundError","","Precondition error: The ephemeral secret key was not in…",11,null],[13,"MalformedSecretKeyError","","Precondition error: The ephemeral secret key is malformed.…",11,null],[13,"MalformedPublicKeyError","","Precondition error: This node\'s public key is malformed.",11,null],[13,"MalformedPopError","","Precondition error: error: This node\'s PoP is malformed.",11,null],[13,"MalformedDealingError","","Precondition error: A dealing should not have passed…",11,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",11,null],[4,"DkgVerifyResponseError","","Verification of a DKG response failed.",null,null],[13,"MalformedPublicKeyError","","Precondition error: One of the public keys is malformed.",12,null],[13,"MalformedPopError","","Precondition error: One of the pops is malformed.",12,null],[13,"MalformedDealingError","","Precondition error: The dealing should not have passed…",12,null],[13,"InvalidReceiverIndexError","","The receiver index for the response is out of bounds; the…",12,null],[13,"MalformedResponseError","","This response cannot be parsed and may be discarded.",12,null],[13,"InvalidResponseError","","This response is invalid and may be discarded.",12,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",12,null],[4,"DkgCreateTranscriptError","","Creation of a DKG transcript failed.",null,null],[13,"MalformedPublicKeyError","","Precondition error: One of the public keys is malformed.",13,null],[13,"MalformedDealingError","","Precondition error: One of the dealings is invalid. Only…",13,null],[13,"MalformedResponseError","","Precondition error: One of the responses is invalid.",13,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",13,null],[13,"InvalidThresholdError","","The threshold is so large that it is impossible to have…",13,null],[13,"InsufficientDataError","","There were insufficient valid dealings or responses to…",13,null],[4,"DkgLoadPrivateKeyError","","Loading of a private key from a DKG transcript failed.",null,null],[13,"KeyNotFoundError","","Precondition error: The ephemeral key was not found.",14,null],[13,"MalformedSecretKeyError","","Precondition error: The ephemeral key could not be parsed.…",14,null],[13,"MalformedTranscriptError","","The transcript could not be parsed.",14,null],[13,"InvalidTranscriptError","","The transcript cannot be used to generate the desired…",14,null],[4,"DkgCreateReshareDealingError","","Creation of a DKG resharing failed.",null,null],[13,"KeyNotFoundError","","Precondition error: The ephemeral secret key was not in…",15,null],[13,"MalformedSecretKeyError","","Precondition error: The ephemeral secret key is malformed.…",15,null],[13,"UnsupportedThresholdParameters","","The threshold scheme does not support the supplied…",15,null],[13,"MalformedPublicKeyError","","One of the receiver public keys is invalid.",15,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",15,null],[4,"DkgVerifyReshareDealingError","","Verification of a DKG resharing failed.",null,null],[13,"MalformedPublicKeyError","","Precondition error: One of the receiver public keys is…",16,null],[13,"MalformedDealingError","","The dealing could not be parsed.",16,null],[13,"InvalidDealingError","","The dealing is invalid.",16,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",16,null],[13,"MalformedPublicCoefficientsError","","The public coefficients could not be parsed",16,null],[4,"DkgCreateReshareTranscriptError","","Creation of a DKG transcript from a resharing failed.",null,null],[13,"MalformedPublicKeyError","","Precondition error: One of the public keys is malformed.",17,null],[13,"MalformedDealingError","","Precondition error: One of the dealings is invalid. Only…",17,null],[13,"MalformedResponseError","","Precondition error: One of the responses is invalid.",17,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",17,null],[13,"InvalidThresholdError","","The threshold is so large that it is impossible to have…",17,null],[13,"InsufficientDataError","","There were insufficient valid dealings or responses to…",17,null],[0,"ni_dkg_errors","ic_crypto_internal_threshold_sig_bls12381::api","Error types used by non-interactive DKG.",null,null],[3,"InvalidArgumentError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","Occurs if an argument is invalid.",null,null],[12,"message","","",0,null],[3,"KeyNotFoundError","","The secret key was not found in the secret key store.",null,null],[12,"internal_error","","",1,null],[12,"key_id","","",1,null],[3,"MalformedDataError","","Malformed X for other types of X.",null,null],[12,"algorithm","","",2,null],[12,"internal_error","","",2,null],[12,"data","","",2,null],[3,"MalformedPublicKeyError","","Occurs if a public key is malformed.",null,null],[12,"algorithm","","",3,null],[12,"key_bytes","","",3,null],[12,"internal_error","","",3,null],[3,"MisnumberedReceiverError","","The receiver set isn\'t properly indexed.",null,null],[12,"receiver_index","","",18,null],[12,"number_of_receivers","","",18,null],[4,"CspDkgCreateFsKeyError","","Creation of a forward-secure keypair during DKG failed.",null,null],[13,"UnsupportedAlgorithmId","","Precondition error: The AlgorithmId does not correspond to…",19,null],[4,"CspDkgVerifyFsKeyError","","Verification of a DKG forward-secure key failed.",null,null],[13,"UnsupportedAlgorithmId","","Precondition error: The AlgorithmId does not correspond to…",20,null],[13,"MalformedPublicKeyError","","",20,null],[13,"MalformedPopError","","",20,null],[13,"InvalidPop","","",20,null],[4,"CspDkgUpdateFsEpochError","","Updating the forward-secure epoch for DKG failed.",null,null],[13,"UnsupportedAlgorithmId","","Precondition error: The AlgorithmId does not correspond to…",21,null],[13,"FsKeyNotInSecretKeyStoreError","","",21,null],[4,"EncryptAndZKProveError","","Encrypting or zero-knowledge proving during DKG failed.",null,null],[13,"MalformedFsPublicKeyError","","One of the receiver public keys is invalid.",22,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::EncryptAndZKProveError","",23,null],[12,"error","","",23,null],[13,"MalformedPublicCoefficients","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","The public coefficients are invalid",22,null],[4,"DecryptError","","Forward-secure decryption during DKG failed.",null,null],[13,"MalformedCiphertext","","The ciphertext was malformed",24,null],[13,"InvalidReceiverIndex","","Receiver index was too large",24,null],[12,"num_receivers","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::DecryptError","",25,null],[12,"node_index","","",25,null],[13,"EpochTooOld","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","The message was encrypted under an epoch older than the…",24,null],[12,"ciphertext_epoch","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::DecryptError","",26,null],[12,"secret_key_epoch","","",26,null],[13,"InvalidChunk","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","One of the forward-secure-encryption chunks failed to…",24,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",24,null],[4,"CspDkgCreateDealingError","","Creation of a DKG dealing failed.",null,null],[13,"UnsupportedAlgorithmId","","Precondition error: The AlgorithmId does not correspond to…",27,null],[13,"InvalidThresholdError","","The threshold scheme does not support the supplied…",27,null],[13,"MisnumberedReceiverError","","Precondition error: The receiver indices are invalid. The…",27,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::CspDkgCreateDealingError","",28,null],[12,"number_of_receivers","","",28,null],[13,"MalformedFsPublicKeyError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","One of the receiver public keys is invalid.",27,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::CspDkgCreateDealingError","",29,null],[12,"error","","",29,null],[13,"SizeError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","Hardware error: This machine cannot handle this request…",27,null],[4,"CspDkgCreateReshareDealingError","","Creation of a DKG resharing dealing failed.",null,null],[13,"UnsupportedAlgorithmId","","Precondition error: The AlgorithmId does not correspond to…",30,null],[13,"InvalidThresholdError","","The threshold scheme does not support the supplied…",30,null],[13,"MisnumberedReceiverError","","Precondition error: The receiver indices are invalid. The…",30,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::CspDkgCreateReshareDealingError","",31,null],[12,"number_of_receivers","","",31,null],[13,"MalformedFsPublicKeyError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","One of the receiver public keys is invalid.",30,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::CspDkgCreateReshareDealingError","",32,null],[12,"error","","",32,null],[13,"ReshareKeyNotInSecretKeyStoreError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","Precondition error: The key encryption key was not in the…",30,null],[13,"MalformedReshareSecretKeyError","","Precondition error: The key encryption key key is…",30,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",30,null],[4,"CspDkgVerifyDealingError","","Verification of a DKG dealing failed.",null,null],[13,"UnsupportedAlgorithmId","","Precondition error: The AlgorithmId does not correspond to…",33,null],[13,"InvalidThresholdError","","Precondition error: The threshold is less than 1 or…",33,null],[13,"MisnumberedReceiverError","","Precondition error: The receiver indices are invalid. The…",33,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::CspDkgVerifyDealingError","",34,null],[12,"number_of_receivers","","",34,null],[13,"MalformedFsPublicKeyError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","Precondition error: One of the receiver public keys is…",33,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::CspDkgVerifyDealingError","",35,null],[12,"error","","",35,null],[13,"MalformedDealingError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","The dealing could not be parsed.",33,null],[13,"InvalidDealingError","","The dealing is invalid.",33,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",33,null],[4,"CspDkgVerifyReshareDealingError","","Verification of a DKG resharing dealing failed.",null,null],[13,"UnsupportedAlgorithmId","","Precondition error: The AlgorithmId does not correspond to…",36,null],[13,"InvalidThresholdError","","Precondition error: The threshold is less than 1 or…",36,null],[13,"MisnumberedReceiverError","","Precondition error: The receiver indices are invalid. The…",36,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::CspDkgVerifyReshareDealingError","",37,null],[12,"number_of_receivers","","",37,null],[13,"MalformedFsPublicKeyError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","Precondition error: One of the receiver public keys is…",36,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::CspDkgVerifyReshareDealingError","",38,null],[12,"error","","",38,null],[13,"MalformedResharePublicCoefficientsError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","Precondition error: The resharing public coefficients are…",36,null],[13,"MalformedDealingError","","The dealing could not be parsed.",36,null],[13,"InvalidDealingError","","The dealing is invalid.",36,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",36,null],[4,"CspDkgCreateTranscriptError","","Creation of a DKG transcript failed.",null,null],[13,"UnsupportedAlgorithmId","","Precondition error: The AlgorithmId does not correspond to…",39,null],[13,"InvalidThresholdError","","Precondition error: The threshold is so large that it is…",39,null],[13,"InvalidDealingError","","Precondition error: One of the dealings is invalid. Only…",39,null],[12,"dealer_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::CspDkgCreateTranscriptError","",40,null],[12,"error","","",40,null],[13,"InsufficientDealingsError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","There were insufficient valid dealings to proceed safely.",39,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",39,null],[4,"CspDkgCreateReshareTranscriptError","","Creation of a DKG transcript after resharing failed.",null,null],[13,"UnsupportedAlgorithmId","","Precondition error: The AlgorithmId does not correspond to…",41,null],[13,"InvalidThresholdError","","Precondition error: The threshold is so large that it is…",41,null],[13,"MalformedResharePublicCoefficientsError","","Precondition error: The reshare public coefficients are…",41,null],[13,"InvalidDealingError","","Precondition error: One of the dealings is invalid. Only…",41,null],[12,"dealer_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::CspDkgCreateReshareTranscriptError","",42,null],[12,"error","","",42,null],[13,"InsufficientDealingsError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","There were insufficient valid dealings to proceed safely.",41,null],[13,"ResharingFailed","","Precondition error: Resharing failed. This is impossible…",41,null],[13,"SizeError","","Hardware error: This machine cannot handle this request…",41,null],[4,"CspDkgLoadPrivateKeyError","","Loading a private key from a DKG transcript failed.",null,null],[13,"UnsupportedAlgorithmId","","The AlgorithmId does not correspond to a NiDkg variant",43,null],[13,"KeyNotFoundError","","Precondition error: The key encryption key was not found.",43,null],[13,"MalformedSecretKeyError","","Precondition error: The key encryption key could not be…",43,null],[13,"MalformedTranscriptError","","The transcript could not be parsed.",43,null],[13,"InvalidTranscriptError","","The transcript cannot be used to generate the desired…",43,null],[0,"dealing","","Errors encountered during the NI-DKG dealing phase.",null,null],[4,"InvalidDealingError","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing","A dealing is invalid",null,null],[13,"UnexpectedShare","","",44,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing::InvalidDealingError","",45,null],[12,"number_of_receivers","","",45,null],[13,"MissingShare","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing","",44,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing::InvalidDealingError","",46,null],[13,"MalformedShare","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing","",44,null],[12,"receiver_index","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing::InvalidDealingError","",47,null],[13,"ThresholdMismatch","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing","",44,null],[12,"threshold","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing::InvalidDealingError","",48,null],[12,"public_coefficients_len","","",48,null],[13,"ReshareMismatch","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing","",44,null],[12,"old","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing::InvalidDealingError","",49,null],[12,"new","","",49,null],[0,"threshold_sign_error","ic_crypto_internal_threshold_sig_bls12381::api","Error encountered during threshold signing.",null,null],[4,"ClibThresholdSignError","ic_crypto_internal_threshold_sig_bls12381::api::threshold_sign_error","Error encountered during threshold signing in the crypto…",null,null],[13,"MalformedSecretKey","","The threshold signing secret key is malformed.",50,null],[12,"algorithm","ic_crypto_internal_threshold_sig_bls12381::api::threshold_sign_error::ClibThresholdSignError","",51,null],[0,"crypto","ic_crypto_internal_threshold_sig_bls12381","Threshold signatures with a simple dealing mechanism.",null,null],[5,"hash_message_to_g1","ic_crypto_internal_threshold_sig_bls12381::crypto","Hashes `msg` to a point in `G1`.",null,[[],["g1",3]]],[5,"public_key_from_secret_key","","Computes the public equivalent of a secret key.",null,[[["fr",3]],["publickey",3]]],[5,"x_for_index","","Yields the polynomial-evaluation point `x` given the…",null,[[["nodeindex",6]],["fr",3]]],[5,"keygen","","Generates keys for a (t,n)-threshold signature scheme.",null,[[["randomness",6],["numberofnodes",6]],[["invalidargumenterror",3],["result",4]]]],[5,"keygen_with_secret","","Generates keys for a (t,n)-threshold signature scheme,…",null,[[["fr",3],["randomness",6],["numberofnodes",6]],[["invalidargumenterror",3],["result",4]]]],[5,"individual_public_key","","Computes the public key of the `index`\'th share from the…",null,[[["nodeindex",6],["publiccoefficients",3]],["publickey",3]]],[5,"combined_public_key","","Computes the public key used to verify combined signatures.",null,[[["publiccoefficients",3]],["publickey",3]]],[5,"sign_message","","Signs a message with the given secret key.",null,[[["fr",3]],["g1",3]]],[5,"combine_signatures","","Combines signature shares (i.e. evaluates the signature at…",null,[[["numberofnodes",6]],[["cryptoresult",6],["g1",3]]]],[5,"verify_individual_sig","","Verifies an individual signature against the provided…",null,[[["publickey",3],["g1",3]],["cryptoresult",6]]],[5,"verify_combined_sig","","Verifies a combined signature against the provided public…",null,[[["publickey",3],["g1",3]],["cryptoresult",6]]],[5,"secret_key_is_consistent","","Verifies that a threshold secret key is consistent with…",null,[[["publiccoefficients",3],["nodeindex",6],["fr",3]]]],[0,"dkg","ic_crypto_internal_threshold_sig_bls12381","(deprecated) Interactive distributed key generation…",null,null],[0,"secp256k1","ic_crypto_internal_threshold_sig_bls12381::dkg","(deprecated) Distributed Key Generation using secp256k1.",null,null],[5,"create_dealing","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1","Creates a new dealing: Generates threshold keys, encrypts…",null,[[["numberofnodes",6],["idkgid",3],["randomness",6],["ephemeralsecretkeybytes",3]],[["result",4],["clibdealingbytes",3],["dkgcreatedealingerror",4]]]],[5,"create_resharing_dealing","","Creates a resharing dealing.",null,[[["numberofnodes",6],["thresholdsecretkeybytes",3],["idkgid",3],["randomness",6],["ephemeralsecretkeybytes",3]],[["clibdealingbytes",3],["dkgcreateresharedealingerror",4],["result",4]]]],[5,"verify_dealing","","Verifies the public parameters of the dealing (degree and…",null,[[["clibdealingbytes",3],["numberofnodes",6]],[["result",4],["dkgverifydealingerror",4]]]],[5,"verify_resharing_dealing","","Verifies the public parameters of the dealing.",null,[[["publiccoefficientsbytes",3],["nodeindex",6],["clibdealingbytes",3],["numberofnodes",6]],[["result",4],["dkgverifyresharedealingerror",4]]]],[5,"create_ephemeral","","Generates an ephemeral key pair, with pop.",null,[[["idkgid",3]]]],[5,"verify_ephemeral","","Verifies an ephemeral key (e.g. for cases where subgroup…",null,[[["idkgid",3]],[["dkgverifyephemeralerror",4],["result",4]]]],[5,"create_response","","Checks whether my share is correct in all dealings and…",null,[[["btreemap",3],["nodeindex",6],["idkgid",3],["randomness",6],["ephemeralsecretkeybytes",3]],[["dkgcreateresponseerror",4],["result",4],["clibresponsebytes",3]]]],[5,"verify_response","","Verifies the response against all dealings. This is used…",null,[[["nodeindex",6],["ephemeralpublickeybytes",3],["clibresponsebytes",3],["idkgid",3],["btreemap",3]],[["result",4],["dkgverifyresponseerror",4]]]],[5,"compute_private_key","","Computes a receiver\'s threshold secret key.",null,[[["clibtranscriptbytes",3],["idkgid",3],["ephemeralsecretkeybytes",3]],[["result",4],["dkgloadprivatekeyerror",4],["option",4]]]],[5,"create_resharing_transcript","","Combines all valid resharing dealings into a short…",null,[[["btreemap",3],["publiccoefficientsbytes",3],["numberofnodes",6]],[["result",4],["clibtranscriptbytes",3],["dkgcreateresharetranscripterror",4]]]],[5,"create_transcript","","Combines all valid dealings into a short transcript.",null,[[["btreemap",3],["numberofnodes",6]],[["clibtranscriptbytes",3],["result",4],["dkgcreatetranscripterror",4]]]],[0,"types","","(deprecated) Interactive Distributed Key Generation (DKG)…",null,null],[3,"EphemeralPublicKeyBytes","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","The public key as byte array.",null,null],[12,"0","","",52,null],[3,"EphemeralSecretKey","","",null,null],[3,"EphemeralSecretKeyBytes","","",null,null],[12,"0","","",53,null],[3,"EphemeralPublicKey","","",null,null],[3,"EphemeralPopBytes","","",null,null],[12,"0","","",54,null],[3,"EphemeralPop","","",null,null],[12,"spec_ext","","",55,null],[12,"spec_c","","",55,null],[12,"spec_s","","",55,null],[3,"EphemeralKeySetBytes","","",null,null],[12,"secret_key_bytes","","",56,null],[12,"public_key_bytes","","",56,null],[12,"pop_bytes","","",56,null],[3,"CLibDealing","","",null,null],[12,"public_coefficients","","",57,null],[12,"receiver_data","","",57,null],[3,"CLibDealingBytes","","",null,null],[12,"public_coefficients","","",58,null],[12,"receiver_data","","",58,null],[3,"CLibVerifiedDealing","","",null,null],[12,"dealer_public_key","","",59,null],[12,"public_coefficients","","",59,null],[12,"receiver_data","","",59,null],[3,"CLibVerifiedDealingBytes","","",null,null],[12,"dealer_public_key","","",60,null],[12,"public_coefficients","","",60,null],[12,"receiver_data","","",60,null],[3,"EncryptedShareBytes","","",null,null],[12,"0","","",61,null],[3,"CLibComplaint","","",null,null],[12,"diffie_hellman","","",62,null],[12,"pok_challenge","","",62,null],[12,"pok_response","","",62,null],[3,"CLibComplaintBytes","","",null,null],[12,"diffie_hellman","","",63,null],[12,"pok_challenge","","",63,null],[12,"pok_response","","",63,null],[3,"CLibResponseBytes","","",null,null],[12,"complaints","","",64,null],[3,"CLibVerifiedResponseBytes","","",null,null],[12,"receiver_public_key","","",65,null],[12,"complaints","","",65,null],[3,"CLibTranscriptBytes","","This is the long term public record of a DKG.",null,null],[12,"dealer_public_keys","","",66,null],[12,"dealer_reshare_indices","","",66,null],[12,"public_coefficients","","",66,null],[12,"receiver_data","","",66,null],[11,"get_receiver_data","","Given a receiver\'s public key, get their index and…",66,[[["ephemeralpublickeybytes",3]],["option",4]]],[11,"one","","Returns the public key corresponding to the secret key 1.",67,[[]]],[11,"infinity","","Returns the point at infinity.",67,[[]]],[11,"is_infinity","","Checks whether this is the point at infinity.",67,[[]]],[11,"random","","Random-oracle map to finite points on the curve such that…",67,[[],["ephemeralpublickey",3]]],[11,"zero","","Returns the additive identity",68,[[]]],[11,"one","","Returns the multiplicative identity",68,[[]]],[11,"random","","",68,[[],["ephemeralsecretkey",3]]],[11,"inv","","",68,[[]]],[0,"serialisation","","",null,null],[17,"TAG_PUBKEY_INFINITE","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types::serialisation","",null,null],[17,"TAG_PUBKEY_EVEN","","",null,null],[17,"TAG_PUBKEY_ODD","","",null,null],[6,"EncryptedShare","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",null,null],[17,"SECP256K1_SECRET_KEY_ONE","","",null,null],[17,"SECP256K1_PUBLIC_KEY_ONE","","",null,null],[18,"SIZE","","",53,null],[18,"SIZE","","",54,null],[18,"SIZE","","",61,null],[0,"ni_dkg","ic_crypto_internal_threshold_sig_bls12381","Non-interactive distributed key generation implementations.",null,null],[0,"groth20_bls12_381","ic_crypto_internal_threshold_sig_bls12381::ni_dkg","Non-interactive Distributed Key Generation using Groth20…",null,null],[5,"create_dealing","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::groth20_bls12_381","Creates a new dealing, i.e. generates threshold keys.",null,[[["btreemap",3],["nodeindex",6],["option",4],["epoch",6],["thresholdsecretkeybytes",3],["randomness",6],["numberofnodes",6]],[["result",4],["dealing",3],["cspdkgcreateresharedealingerror",4]]]],[5,"verify_dealing","","Verifies a dealing.",null,[[["btreemap",3],["nodeindex",6],["nidkgid",3],["epoch",6],["dealing",3],["numberofnodes",6]],[["cspdkgverifydealingerror",4],["result",4]]]],[5,"verify_resharing_dealing","","Verifies a dealing created to reshare an existing secret.",null,[[["btreemap",3],["nodeindex",6],["nidkgid",3],["epoch",6],["publiccoefficientsbytes",3],["dealing",3],["numberofnodes",6]],[["cspdkgverifydealingerror",4],["result",4]]]],[5,"public_key_into_miracl","","Parses a standard form public key into the miracl-based…",null,[[],[["result",4],["publickeywithpop",3]]]],[5,"create_forward_secure_key_pair","","Generates a forward secure key pair.",null,[[["randomness",6]],["fsencryptionkeysetwithpop",3]]],[5,"update_forward_secure_epoch","","Forgets keys before the given epoch.",null,[[["epoch",6],["randomness",6],["fsencryptionsecretkey",3]],["fsencryptionsecretkey",3]]],[5,"verify_forward_secure_key","","Verifies that a public key is a point on the curve and…",null,[[["fsencryptionpublickey",3],["fsencryptionpop",3]],["result",4]]],[5,"compute_threshold_signing_key","","Computes a participant\'s threshold signing key from the…",null,[[["nodeindex",6],["transcript",3],["epoch",6],["fsencryptionsecretkey",3]],[["secretkeybytes",3],["cspdkgloadprivatekeyerror",4],["result",4]]]],[5,"create_resharing_transcript","","Creates an NiDKG transcript with the same public key as an…",null,[[["btreemap",3],["publiccoefficientsbytes",3],["numberofnodes",6]],[["cspdkgcreateresharetranscripterror",4],["transcript",3],["result",4]]]],[5,"create_transcript","","Creates an NiDKG transcript.",null,[[["btreemap",3],["numberofnodes",6]],[["cspdkgcreatetranscripterror",4],["transcript",3],["result",4]]]],[0,"types","","Types for the Groth20-BLS12-381 implementation of…",null,null],[3,"FsEncryptionSecretKey","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::groth20_bls12_381::types","Forward secure encryption secret key used in Groth20.",null,null],[12,"bte_nodes","","",69,null],[3,"BTENode","","Library-independent representation of binary tree…",null,null],[12,"tau","","",70,null],[12,"a","","",70,null],[12,"b","","",70,null],[12,"d_t","","",70,null],[12,"d_h","","",70,null],[12,"e","","",70,null],[3,"FsEncryptionKeySet","","(deprecated) Forward-secure encryption public key, secret…",null,null],[12,"public_key","","",71,null],[12,"pok","","",71,null],[12,"secret_key","","",71,null],[3,"FsEncryptionKeySetWithPop","","Forward-secure encryption public key, secret key, and…",null,null],[12,"public_key","","",72,null],[12,"pop","","",72,null],[12,"secret_key","","",72,null],[5,"convert_keyset_to_keyset_with_pop","","Converts an old `FsEncryptionKeySet` to a…",null,[[["fsencryptionkeyset",3]],["fsencryptionkeysetwithpop",3]]],[0,"types","ic_crypto_internal_threshold_sig_bls12381::ni_dkg","Types used by all implementations of NiDKG methods.",null,null],[4,"CspFsEncryptionSecretKey","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::types","Forward secure encryption secret key.",null,null],[13,"Groth20_Bls12_381","","",73,null],[4,"CspFsEncryptionKeySet","","Forward secure encryption keys (secret and public keys,…",null,null],[13,"Groth20_Bls12_381","","",74,null],[13,"Groth20WithPop_Bls12_381","","",74,null],[0,"types","ic_crypto_internal_threshold_sig_bls12381","Threshold signature and DKG types.",null,null],[3,"IndividualSignatureBytes","ic_crypto_internal_threshold_sig_bls12381::types","A serialized individual BLS signature.",null,null],[12,"0","","",75,null],[3,"CombinedSignatureBytes","","A serialized combined (threshold-signed) BLS signature.",null,null],[12,"0","","",76,null],[3,"SecretKeyBytes","","A serialized BLS secret key.",null,null],[12,"0","","",77,null],[3,"PublicKey","","A wrapped BLS public key.",null,null],[12,"0","","",78,null],[4,"ThresholdError","","Interpolation failed because of duplicate x-coordinates.",null,null],[13,"DuplicateX","","",79,null],[0,"polynomial","","Polynomials over `Fr`.",null,null],[3,"Polynomial","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","A univariate polynomial Note: The polynomial terms are:…",null,null],[12,"coefficients","","",80,null],[11,"evaluate_at","","Evaluate the polynomial at x Note: This uses Horner\'s…",80,[[["fr",3]],["fr",3]]],[11,"interpolate","","",80,[[]]],[11,"zero","","Returns the polynomial with constant value `0`.",80,[[]]],[11,"is_zero","","Returns `true` if the polynomial is the constant value `0`.",80,[[]]],[11,"constant","","",80,[[["fr",3]]]],[11,"random","","Creates a random polynomial.",80,[[]]],[0,"public_coefficients","ic_crypto_internal_threshold_sig_bls12381::types","Public counterpart to a polynomial.",null,null],[3,"PublicCoefficients","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","Given a polynomial with secret coefficients <a0, ..., ak>…",null,null],[12,"coefficients","","",81,null],[11,"evaluate_at","","Evaluate the public coefficients at x",81,[[["fr",3]],["g2",3]]],[11,"interpolate","","Given a list of samples `(x, f(x) * g)` for a polynomial…",81,[[],[["thresholderror",4],["result",4]]]],[11,"lagrange_coefficients_at_zero","","Compute the Lagrange coefficients at x=0.",81,[[],[["result",4],["vec",3],["thresholderror",4]]]],[11,"zero","","Returns the empty vector",81,[[]]],[0,"conversions","","Reasonably simple type conversions.",null,null],[3,"InternalPublicCoefficients","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients::conversions","The public coefficients of a threshold public key.",null,null],[12,"coefficients","","",82,null],[5,"try_number_of_nodes_from_pub_coeff_bytes","","Returns the length of the given `public_coefficients` as a…",null,[[["publiccoefficientsbytes",3]],[["cryptoresult",6],["numberofnodes",6]]]],[5,"try_number_of_nodes_from_csp_pub_coeffs","","Returns the length of the given `CspPublicCoefficients` as…",null,[[["csppubliccoefficients",6]],[["cryptoresult",6],["numberofnodes",6]]]],[5,"pub_key_bytes_from_pub_coeff_bytes","","Returns the public key associated to the given…",null,[[["publiccoefficientsbytes",3]],["publickeybytes",3]]],[18,"SIZE","ic_crypto_internal_threshold_sig_bls12381::types","",75,null],[18,"SIZE","","",76,null],[18,"SIZE","","",77,null],[0,"test_utils","ic_crypto_internal_threshold_sig_bls12381","Utilities for testing BLS12-381 threshold signing and key…",null,null],[5,"select_n","ic_crypto_internal_threshold_sig_bls12381::test_utils","Select `n` entries from a `list` in a randomized way, as…",null,[[["randomness",6],["numberofnodes",6]],[["option",4],["vec",3]]]],[5,"malformed_secret_threshold_key_test_vectors","","Secret key serialisations, some malformed, some well formed.",null,[[],["vec",3]]],[5,"assert_bte_node_components_are_redacted","","Check that components of a BTENode struct aren\'t logged in…",null,[[["btenode",3]]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::api::dkg_errors","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing","",44,[[]]],[11,"into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::api::threshold_sign_error","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"erased_serialize","","",52,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",52,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"zeroize","","",68,[[]]],[11,"vzip","","",68,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"zeroize","","",53,[[]]],[11,"erased_serialize","","",53,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",53,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"vzip","","",67,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"erased_serialize","","",54,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"zeroize","","",56,[[]]],[11,"erased_serialize","","",56,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"erased_serialize","","",58,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"erased_serialize","","",60,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",60,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"erased_serialize","","",61,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",61,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"erased_serialize","","",63,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",63,[[]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"erased_serialize","","",64,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"erased_serialize","","",65,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",65,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"erased_serialize","","",66,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",66,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::groth20_bls12_381::types","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"zeroize","","",69,[[]]],[11,"erased_serialize","","",69,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"zeroize","","",70,[[]]],[11,"erased_serialize","","",70,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"zeroize","","",71,[[]]],[11,"erased_serialize","","",71,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",71,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"zeroize","","",72,[[]]],[11,"erased_serialize","","",72,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",72,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::types","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"zeroize","","",73,[[]]],[11,"erased_serialize","","",73,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",73,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"zeroize","","",74,[[]]],[11,"erased_serialize","","",74,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",74,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::types","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"erased_serialize","","",75,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",75,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"erased_serialize","","",76,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",76,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"zeroize","","",77,[[]]],[11,"erased_serialize","","",77,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",77,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"zeroize","","",80,[[]]],[11,"vzip","","",80,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients::conversions","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"erased_serialize","","",82,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",82,[[]]],[11,"serialize","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",52,[[],["result",4]]],[11,"serialize","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients::conversions","",82,[[],["result",4]]],[11,"eq","","",82,[[["publiccoefficientsbytes",3]]]],[11,"ne","","",82,[[["publiccoefficientsbytes",3]]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",52,[[["ephemeralpublickeybytes",3]]]],[11,"partial_cmp","","",52,[[["ephemeralpublickeybytes",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients::conversions","",82,[[["publiccoefficientsbytes",3]],[["option",4],["ordering",4]]]],[11,"lt","","",82,[[["publiccoefficientsbytes",3]]]],[11,"le","","",82,[[["publiccoefficientsbytes",3]]]],[11,"gt","","",82,[[["publiccoefficientsbytes",3]]]],[11,"ge","","",82,[[["publiccoefficientsbytes",3]]]],[11,"from","","",82,[[["publiccoefficients",4]],["publiccoefficientsbytes",3]]],[11,"cmp","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",52,[[["ephemeralpublickeybytes",3]],["ordering",4]]],[11,"cmp","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients::conversions","",82,[[["publiccoefficientsbytes",3]],["ordering",4]]],[11,"hash","","",82,[[]]],[11,"hash","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",52,[[]]],[11,"fmt","","",52,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients::conversions","",82,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",82,[[],["publiccoefficientsbytes",3]]],[11,"clone","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",52,[[],["ephemeralpublickeybytes",3]]],[11,"deserialize","","",52,[[],[["result",4],["ephemeralpublickeybytes",3]]]],[11,"deserialize","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients::conversions","",82,[[],[["result",4],["publiccoefficientsbytes",3]]]],[11,"try_from","","",82,[[],[["result",4],["publiccoefficientsbytes",3],["thresholdsigpublickeybytesconversionerror",4]]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","",3,[[["malformedpublickeyerror",3]]]],[11,"ne","","",3,[[["malformedpublickeyerror",3]]]],[11,"eq","","",2,[[["malformeddataerror",3]]]],[11,"ne","","",2,[[["malformeddataerror",3]]]],[11,"eq","","",1,[[["keynotfounderror",3]]]],[11,"ne","","",1,[[["keynotfounderror",3]]]],[11,"eq","","",0,[[["invalidargumenterror",3]]]],[11,"ne","","",0,[[["invalidargumenterror",3]]]],[11,"fmt","","",2,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",2,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",0,[[],["invalidargumenterror",3]]],[11,"clone","","",3,[[],["malformedpublickeyerror",3]]],[11,"clone","","",2,[[],["malformeddataerror",3]]],[11,"clone","","",1,[[],["keynotfounderror",3]]],[11,"from","","",2,[[["malformedpublickeyerror",3]],["malformeddataerror",3]]],[11,"hash","","",0,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",1,[[]]],[11,"drop","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::api::dkg_errors","",15,[[["dkgcreatedealingerror",4]]]],[11,"from","","",16,[[["dkgverifydealingerror",4]]]],[11,"from","","",17,[[["dkgcreatetranscripterror",4]]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","",30,[[["misnumberedreceivererror",3]]]],[11,"from","","",33,[[["misnumberedreceivererror",3]]]],[11,"from","","",27,[[["encryptandzkproveerror",4]],["cspdkgcreatedealingerror",4]]],[11,"from","","",30,[[["encryptandzkproveerror",4]],["cspdkgcreateresharedealingerror",4]]],[11,"from","","",30,[[["cspdkgcreatedealingerror",4]]]],[11,"from","","",27,[[["cspdkgcreateresharedealingerror",4]]]],[11,"from","","",36,[[["cspdkgverifydealingerror",4]]]],[11,"from","","",41,[[["cspdkgcreatetranscripterror",4]]]],[11,"from","","",0,[[["invaliddealingerror",4]],["invalidargumenterror",3]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",53,[[["ephemeralsecretkey",3]]]],[11,"from","","",53,[[["ephemeralsecretkey",3]]]],[11,"from","","",68,[[["randomness",6]]]],[11,"from","","",52,[[["ephemeralpublickey",3]]]],[11,"from","","",52,[[["ephemeralpublickey",3]]]],[11,"from","","",67,[[["randomness",6]]]],[11,"from","","",67,[[["ephemeralsecretkey",3]]]],[11,"from","","",54,[[["ephemeralpop",3]]]],[11,"from","","",54,[[["ephemeralpop",3]]]],[11,"from","","",61,[[["encryptedshare",6]]]],[11,"from","","",61,[[["encryptedshare",6]]]],[11,"from","","",63,[[["clibcomplaint",3]]]],[11,"from","","",63,[[["clibcomplaint",3]]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[["vec",3],["fr",3]]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[["polynomial",3]]]],[11,"from","","",81,[[["polynomial",3]]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::types","",78,[[["publiccoefficients",3]]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients::conversions","",82,[[["publiccoefficients",3]]]],[11,"from","","",82,[[["publiccoefficients",3]]]],[11,"from","ic_crypto_internal_threshold_sig_bls12381::types","",77,[[["fr",3]]]],[11,"from","","",77,[[["fr",3]]]],[11,"from","","",75,[[["g1",3]]]],[11,"from","","",75,[[["g1",3]]]],[11,"from","","",76,[[["g1",3]]]],[11,"from","","",76,[[["g1",3]]]],[11,"clone","ic_crypto_internal_threshold_sig_bls12381::api::dkg_errors","",4,[[],["malformedsecretkeyerror",3]]],[11,"clone","","",5,[[],["malformedpoperror",3]]],[11,"clone","","",6,[[],["sizeerror",3]]],[11,"clone","","",7,[[],["dkgcreateephemeralerror",4]]],[11,"clone","","",8,[[],["dkgverifyephemeralerror",4]]],[11,"clone","","",9,[[],["dkgcreatedealingerror",4]]],[11,"clone","","",10,[[],["dkgverifydealingerror",4]]],[11,"clone","","",11,[[],["dkgcreateresponseerror",4]]],[11,"clone","","",12,[[],["dkgverifyresponseerror",4]]],[11,"clone","","",13,[[],["dkgcreatetranscripterror",4]]],[11,"clone","","",14,[[],["dkgloadprivatekeyerror",4]]],[11,"clone","","",15,[[],["dkgcreateresharedealingerror",4]]],[11,"clone","","",16,[[],["dkgverifyresharedealingerror",4]]],[11,"clone","","",17,[[],["dkgcreateresharetranscripterror",4]]],[11,"clone","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","",18,[[],["misnumberedreceivererror",3]]],[11,"clone","","",19,[[],["cspdkgcreatefskeyerror",4]]],[11,"clone","","",20,[[],["cspdkgverifyfskeyerror",4]]],[11,"clone","","",21,[[],["cspdkgupdatefsepocherror",4]]],[11,"clone","","",22,[[],["encryptandzkproveerror",4]]],[11,"clone","","",24,[[],["decrypterror",4]]],[11,"clone","","",27,[[],["cspdkgcreatedealingerror",4]]],[11,"clone","","",30,[[],["cspdkgcreateresharedealingerror",4]]],[11,"clone","","",33,[[],["cspdkgverifydealingerror",4]]],[11,"clone","","",36,[[],["cspdkgverifyresharedealingerror",4]]],[11,"clone","","",39,[[],["cspdkgcreatetranscripterror",4]]],[11,"clone","","",41,[[],["cspdkgcreateresharetranscripterror",4]]],[11,"clone","","",43,[[],["cspdkgloadprivatekeyerror",4]]],[11,"clone","ic_crypto_internal_threshold_sig_bls12381::api::threshold_sign_error","",50,[[],["clibthresholdsignerror",4]]],[11,"clone","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",68,[[],["ephemeralsecretkey",3]]],[11,"clone","","",53,[[],["ephemeralsecretkeybytes",3]]],[11,"clone","","",67,[[],["ephemeralpublickey",3]]],[11,"clone","","",54,[[],["ephemeralpopbytes",3]]],[11,"clone","","",55,[[],["ephemeralpop",3]]],[11,"clone","","",56,[[],["ephemeralkeysetbytes",3]]],[11,"clone","","",57,[[],["clibdealing",3]]],[11,"clone","","",58,[[],["clibdealingbytes",3]]],[11,"clone","","",59,[[],["clibverifieddealing",3]]],[11,"clone","","",60,[[],["clibverifieddealingbytes",3]]],[11,"clone","","",61,[[],["encryptedsharebytes",3]]],[11,"clone","","",62,[[],["clibcomplaint",3]]],[11,"clone","","",63,[[],["clibcomplaintbytes",3]]],[11,"clone","","",64,[[],["clibresponsebytes",3]]],[11,"clone","","",65,[[],["clibverifiedresponsebytes",3]]],[11,"clone","","",66,[[],["clibtranscriptbytes",3]]],[11,"clone","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::groth20_bls12_381::types","",69,[[],["fsencryptionsecretkey",3]]],[11,"clone","","",70,[[],["btenode",3]]],[11,"clone","","",71,[[],["fsencryptionkeyset",3]]],[11,"clone","","",72,[[],["fsencryptionkeysetwithpop",3]]],[11,"clone","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::types","",73,[[],["cspfsencryptionsecretkey",4]]],[11,"clone","","",74,[[],["cspfsencryptionkeyset",4]]],[11,"clone","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[],["polynomial",3]]],[11,"clone","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[],["publiccoefficients",3]]],[11,"clone","ic_crypto_internal_threshold_sig_bls12381::types","",75,[[],["individualsignaturebytes",3]]],[11,"clone","","",76,[[],["combinedsignaturebytes",3]]],[11,"clone","","",77,[[],["secretkeybytes",3]]],[11,"clone","","",78,[[],["publickey",3]]],[11,"clone","","",79,[[],["thresholderror",4]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::api::dkg_errors","",4,[[["malformedsecretkeyerror",3]]]],[11,"ne","","",4,[[["malformedsecretkeyerror",3]]]],[11,"eq","","",5,[[["malformedpoperror",3]]]],[11,"ne","","",5,[[["malformedpoperror",3]]]],[11,"eq","","",6,[[["sizeerror",3]]]],[11,"ne","","",6,[[["sizeerror",3]]]],[11,"eq","","",7,[[["dkgcreateephemeralerror",4]]]],[11,"ne","","",7,[[["dkgcreateephemeralerror",4]]]],[11,"eq","","",8,[[["dkgverifyephemeralerror",4]]]],[11,"ne","","",8,[[["dkgverifyephemeralerror",4]]]],[11,"eq","","",9,[[["dkgcreatedealingerror",4]]]],[11,"ne","","",9,[[["dkgcreatedealingerror",4]]]],[11,"eq","","",10,[[["dkgverifydealingerror",4]]]],[11,"ne","","",10,[[["dkgverifydealingerror",4]]]],[11,"eq","","",11,[[["dkgcreateresponseerror",4]]]],[11,"ne","","",11,[[["dkgcreateresponseerror",4]]]],[11,"eq","","",12,[[["dkgverifyresponseerror",4]]]],[11,"ne","","",12,[[["dkgverifyresponseerror",4]]]],[11,"eq","","",13,[[["dkgcreatetranscripterror",4]]]],[11,"ne","","",13,[[["dkgcreatetranscripterror",4]]]],[11,"eq","","",14,[[["dkgloadprivatekeyerror",4]]]],[11,"ne","","",14,[[["dkgloadprivatekeyerror",4]]]],[11,"eq","","",15,[[["dkgcreateresharedealingerror",4]]]],[11,"ne","","",15,[[["dkgcreateresharedealingerror",4]]]],[11,"eq","","",16,[[["dkgverifyresharedealingerror",4]]]],[11,"ne","","",16,[[["dkgverifyresharedealingerror",4]]]],[11,"eq","","",17,[[["dkgcreateresharetranscripterror",4]]]],[11,"ne","","",17,[[["dkgcreateresharetranscripterror",4]]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","",18,[[["misnumberedreceivererror",3]]]],[11,"ne","","",18,[[["misnumberedreceivererror",3]]]],[11,"eq","","",19,[[["cspdkgcreatefskeyerror",4]]]],[11,"ne","","",19,[[["cspdkgcreatefskeyerror",4]]]],[11,"eq","","",20,[[["cspdkgverifyfskeyerror",4]]]],[11,"ne","","",20,[[["cspdkgverifyfskeyerror",4]]]],[11,"eq","","",21,[[["cspdkgupdatefsepocherror",4]]]],[11,"ne","","",21,[[["cspdkgupdatefsepocherror",4]]]],[11,"eq","","",22,[[["encryptandzkproveerror",4]]]],[11,"ne","","",22,[[["encryptandzkproveerror",4]]]],[11,"eq","","",24,[[["decrypterror",4]]]],[11,"ne","","",24,[[["decrypterror",4]]]],[11,"eq","","",27,[[["cspdkgcreatedealingerror",4]]]],[11,"ne","","",27,[[["cspdkgcreatedealingerror",4]]]],[11,"eq","","",30,[[["cspdkgcreateresharedealingerror",4]]]],[11,"ne","","",30,[[["cspdkgcreateresharedealingerror",4]]]],[11,"eq","","",33,[[["cspdkgverifydealingerror",4]]]],[11,"ne","","",33,[[["cspdkgverifydealingerror",4]]]],[11,"eq","","",36,[[["cspdkgverifyresharedealingerror",4]]]],[11,"ne","","",36,[[["cspdkgverifyresharedealingerror",4]]]],[11,"eq","","",39,[[["cspdkgcreatetranscripterror",4]]]],[11,"ne","","",39,[[["cspdkgcreatetranscripterror",4]]]],[11,"eq","","",41,[[["cspdkgcreateresharetranscripterror",4]]]],[11,"ne","","",41,[[["cspdkgcreateresharetranscripterror",4]]]],[11,"eq","","",43,[[["cspdkgloadprivatekeyerror",4]]]],[11,"ne","","",43,[[["cspdkgloadprivatekeyerror",4]]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::api::threshold_sign_error","",50,[[["clibthresholdsignerror",4]]]],[11,"ne","","",50,[[["clibthresholdsignerror",4]]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",54,[[]]],[11,"eq","","",67,[[]]],[11,"eq","","",68,[[["ephemeralsecretkey",3]]]],[11,"ne","","",68,[[["ephemeralsecretkey",3]]]],[11,"eq","","",53,[[["ephemeralsecretkeybytes",3]]]],[11,"ne","","",53,[[["ephemeralsecretkeybytes",3]]]],[11,"eq","","",55,[[["ephemeralpop",3]]]],[11,"ne","","",55,[[["ephemeralpop",3]]]],[11,"eq","","",56,[[["ephemeralkeysetbytes",3]]]],[11,"ne","","",56,[[["ephemeralkeysetbytes",3]]]],[11,"eq","","",57,[[["clibdealing",3]]]],[11,"ne","","",57,[[["clibdealing",3]]]],[11,"eq","","",58,[[["clibdealingbytes",3]]]],[11,"ne","","",58,[[["clibdealingbytes",3]]]],[11,"eq","","",59,[[["clibverifieddealing",3]]]],[11,"ne","","",59,[[["clibverifieddealing",3]]]],[11,"eq","","",60,[[["clibverifieddealingbytes",3]]]],[11,"ne","","",60,[[["clibverifieddealingbytes",3]]]],[11,"eq","","",61,[[["encryptedsharebytes",3]]]],[11,"ne","","",61,[[["encryptedsharebytes",3]]]],[11,"eq","","",62,[[["clibcomplaint",3]]]],[11,"ne","","",62,[[["clibcomplaint",3]]]],[11,"eq","","",63,[[["clibcomplaintbytes",3]]]],[11,"ne","","",63,[[["clibcomplaintbytes",3]]]],[11,"eq","","",64,[[["clibresponsebytes",3]]]],[11,"ne","","",64,[[["clibresponsebytes",3]]]],[11,"eq","","",65,[[["clibverifiedresponsebytes",3]]]],[11,"ne","","",65,[[["clibverifiedresponsebytes",3]]]],[11,"eq","","",66,[[["clibtranscriptbytes",3]]]],[11,"ne","","",66,[[["clibtranscriptbytes",3]]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::groth20_bls12_381::types","",69,[[["fsencryptionsecretkey",3]]]],[11,"ne","","",69,[[["fsencryptionsecretkey",3]]]],[11,"eq","","",70,[[["btenode",3]]]],[11,"ne","","",70,[[["btenode",3]]]],[11,"eq","","",71,[[["fsencryptionkeyset",3]]]],[11,"ne","","",71,[[["fsencryptionkeyset",3]]]],[11,"eq","","",72,[[["fsencryptionkeysetwithpop",3]]]],[11,"ne","","",72,[[["fsencryptionkeysetwithpop",3]]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::types","",73,[[["cspfsencryptionsecretkey",4]]]],[11,"ne","","",73,[[["cspfsencryptionsecretkey",4]]]],[11,"eq","","",74,[[["cspfsencryptionkeyset",4]]]],[11,"ne","","",74,[[["cspfsencryptionkeyset",4]]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[["polynomial",3]]]],[11,"ne","","",80,[[["polynomial",3]]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[["publiccoefficients",3]]]],[11,"ne","","",81,[[["publiccoefficients",3]]]],[11,"eq","ic_crypto_internal_threshold_sig_bls12381::types","",75,[[]]],[11,"eq","","",76,[[]]],[11,"eq","","",77,[[["secretkeybytes",3]]]],[11,"ne","","",77,[[["secretkeybytes",3]]]],[11,"eq","","",78,[[["publickey",3]]]],[11,"ne","","",78,[[["publickey",3]]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::api::dkg_errors","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::api::ni_dkg_errors::dealing","",44,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::api::threshold_sign_error","",50,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::groth20_bls12_381::types","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::types","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_threshold_sig_bls12381::types","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"sub","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[],["polynomial",3]]],[11,"sub","","",80,[[["fr",3]]]],[11,"add","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",67,[[["ephemeralsecretkey",3]],["ephemeralpublickey",3]]],[11,"add","","",67,[[["ephemeralsecretkey",3]],["ephemeralpublickey",3]]],[11,"add","","",67,[[["ephemeralpublickey",3]],["ephemeralpublickey",3]]],[11,"add","","",67,[[["ephemeralpublickey",3]],["ephemeralpublickey",3]]],[11,"add","","",68,[[["ephemeralsecretkey",3]],["ephemeralsecretkey",3]]],[11,"add","","",68,[[["ephemeralsecretkey",3]],["ephemeralsecretkey",3]]],[11,"add","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[],["polynomial",3]]],[11,"add","","",80,[[["fr",3]]]],[11,"add","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[]]],[11,"mul","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",67,[[["ephemeralsecretkey",3]],["ephemeralpublickey",3]]],[11,"mul","","",67,[[["ephemeralsecretkey",3]],["ephemeralpublickey",3]]],[11,"mul","","",68,[[["ephemeralsecretkey",3]],["ephemeralsecretkey",3]]],[11,"mul","","",68,[[["ephemeralsecretkey",3]],["ephemeralsecretkey",3]]],[11,"mul","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[]]],[11,"mul","","",80,[[["fr",3]]]],[11,"mul","","",80,[[["fr",3]]]],[11,"mul","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[["fr",3]]]],[11,"neg","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",68,[[],["ephemeralsecretkey",3]]],[11,"add_assign","","",67,[[["ephemeralsecretkey",3]]]],[11,"add_assign","","",67,[[["ephemeralpublickey",3]]]],[11,"add_assign","","",68,[[["ephemeralsecretkey",3]]]],[11,"add_assign","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[]]],[11,"add_assign","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[]]],[11,"sub_assign","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[]]],[11,"mul_assign","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",67,[[["ephemeralsecretkey",3]]]],[11,"mul_assign","","",68,[[["ephemeralsecretkey",3]]]],[11,"mul_assign","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[]]],[11,"mul_assign","","",80,[[["fr",3]]]],[11,"mul_assign","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[["fr",3]]]],[11,"sum","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[]]],[11,"sum","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[]]],[11,"try_from","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",68,[[["ephemeralsecretkeybytes",3]],[["result",4],["ephemeralsecretkey",3]]]],[11,"try_from","","",68,[[["ephemeralsecretkeybytes",3]],[["result",4],["ephemeralsecretkey",3]]]],[11,"try_from","","",67,[[["ephemeralpublickeybytes",3]],[["ephemeralpublickey",3],["result",4]]]],[11,"try_from","","",67,[[["ephemeralpublickeybytes",3]],[["ephemeralpublickey",3],["result",4]]]],[11,"try_from","","",55,[[["ephemeralpopbytes",3]],[["result",4],["ephemeralpop",3]]]],[11,"try_from","","",55,[[["ephemeralpopbytes",3]],[["result",4],["ephemeralpop",3]]]],[11,"try_from","ic_crypto_internal_threshold_sig_bls12381","",83,[[["encryptedsharebytes",3]],[["result",4],["encryptedshare",6]]]],[11,"try_from","","",83,[[["encryptedsharebytes",3]],[["result",4],["encryptedshare",6]]]],[11,"try_from","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",62,[[["clibcomplaintbytes",3]],[["result",4],["clibcomplaint",3]]]],[11,"try_from","","",62,[[["clibcomplaintbytes",3]],[["result",4],["clibcomplaint",3]]]],[11,"try_from","","",57,[[["clibdealingbytes",3]],[["result",4],["clibdealing",3]]]],[11,"try_from","ic_crypto_internal_threshold_sig_bls12381::types","",78,[[["publiccoefficientsbytes",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","ic_crypto_internal_threshold_sig_bls12381::types::public_coefficients","",81,[[["internalpubliccoefficients",3]],[["publiccoefficients",3],["cryptoerror",4],["result",4]]]],[11,"try_from","ic_crypto_internal_threshold_sig_bls12381::types","",78,[[["publickeybytes",3]],["result",4]]],[11,"try_from","","",77,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",77,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",75,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",75,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",76,[[],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",76,[[["vec",3]],[["cryptoerror",4],["result",4]]]],[11,"try_from","","",76,[[["string",3]],[["cryptoerror",4],["result",4]]]],[11,"deserialize","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",53,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",54,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",56,[[],["result",4]]],[11,"deserialize","","",58,[[],["result",4]]],[11,"deserialize","","",60,[[],["result",4]]],[11,"deserialize","","",61,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",63,[[],["result",4]]],[11,"deserialize","","",64,[[],["result",4]]],[11,"deserialize","","",65,[[],["result",4]]],[11,"deserialize","","",66,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::groth20_bls12_381::types","",69,[[],["result",4]]],[11,"deserialize","","",70,[[],["result",4]]],[11,"deserialize","","",71,[[],["result",4]]],[11,"deserialize","","",72,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::types","",73,[[],["result",4]]],[11,"deserialize","","",74,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_threshold_sig_bls12381::types","",75,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",76,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",77,[[["deserializer",8]],["result",4]]],[11,"serialize","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",53,[[["serializer",8]],["result",4]]],[11,"serialize","","",54,[[["serializer",8]],["result",4]]],[11,"serialize","","",56,[[],["result",4]]],[11,"serialize","","",58,[[],["result",4]]],[11,"serialize","","",60,[[],["result",4]]],[11,"serialize","","",61,[[["serializer",8]],["result",4]]],[11,"serialize","","",63,[[],["result",4]]],[11,"serialize","","",64,[[],["result",4]]],[11,"serialize","","",65,[[],["result",4]]],[11,"serialize","","",66,[[],["result",4]]],[11,"serialize","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::groth20_bls12_381::types","",69,[[],["result",4]]],[11,"serialize","","",70,[[],["result",4]]],[11,"serialize","","",71,[[],["result",4]]],[11,"serialize","","",72,[[],["result",4]]],[11,"serialize","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::types","",73,[[],["result",4]]],[11,"serialize","","",74,[[],["result",4]]],[11,"serialize","ic_crypto_internal_threshold_sig_bls12381::types","",75,[[["serializer",8]],["result",4]]],[11,"serialize","","",76,[[["serializer",8]],["result",4]]],[11,"serialize","","",77,[[["serializer",8]],["result",4]]],[11,"zeroize","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",68,[[]]],[11,"zeroize","","",56,[[]]],[11,"zeroize","","",53,[[]]],[11,"zeroize","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::groth20_bls12_381::types","",69,[[]]],[11,"zeroize","","",70,[[]]],[11,"zeroize","","",71,[[]]],[11,"zeroize","","",72,[[]]],[11,"zeroize","ic_crypto_internal_threshold_sig_bls12381::ni_dkg::types","",73,[[]]],[11,"zeroize","","",74,[[]]],[11,"zeroize","ic_crypto_internal_threshold_sig_bls12381::types::polynomial","",80,[[]]],[11,"zeroize","ic_crypto_internal_threshold_sig_bls12381::types","",77,[[]]],[18,"SIZE","ic_crypto_internal_threshold_sig_bls12381::dkg::secp256k1::types","",52,null]],"p":[[3,"InvalidArgumentError"],[3,"KeyNotFoundError"],[3,"MalformedDataError"],[3,"MalformedPublicKeyError"],[3,"MalformedSecretKeyError"],[3,"MalformedPopError"],[3,"SizeError"],[4,"DkgCreateEphemeralError"],[4,"DkgVerifyEphemeralError"],[4,"DkgCreateDealingError"],[4,"DkgVerifyDealingError"],[4,"DkgCreateResponseError"],[4,"DkgVerifyResponseError"],[4,"DkgCreateTranscriptError"],[4,"DkgLoadPrivateKeyError"],[4,"DkgCreateReshareDealingError"],[4,"DkgVerifyReshareDealingError"],[4,"DkgCreateReshareTranscriptError"],[3,"MisnumberedReceiverError"],[4,"CspDkgCreateFsKeyError"],[4,"CspDkgVerifyFsKeyError"],[4,"CspDkgUpdateFsEpochError"],[4,"EncryptAndZKProveError"],[13,"MalformedFsPublicKeyError"],[4,"DecryptError"],[13,"InvalidReceiverIndex"],[13,"EpochTooOld"],[4,"CspDkgCreateDealingError"],[13,"MisnumberedReceiverError"],[13,"MalformedFsPublicKeyError"],[4,"CspDkgCreateReshareDealingError"],[13,"MisnumberedReceiverError"],[13,"MalformedFsPublicKeyError"],[4,"CspDkgVerifyDealingError"],[13,"MisnumberedReceiverError"],[13,"MalformedFsPublicKeyError"],[4,"CspDkgVerifyReshareDealingError"],[13,"MisnumberedReceiverError"],[13,"MalformedFsPublicKeyError"],[4,"CspDkgCreateTranscriptError"],[13,"InvalidDealingError"],[4,"CspDkgCreateReshareTranscriptError"],[13,"InvalidDealingError"],[4,"CspDkgLoadPrivateKeyError"],[4,"InvalidDealingError"],[13,"UnexpectedShare"],[13,"MissingShare"],[13,"MalformedShare"],[13,"ThresholdMismatch"],[13,"ReshareMismatch"],[4,"ClibThresholdSignError"],[13,"MalformedSecretKey"],[3,"EphemeralPublicKeyBytes"],[3,"EphemeralSecretKeyBytes"],[3,"EphemeralPopBytes"],[3,"EphemeralPop"],[3,"EphemeralKeySetBytes"],[3,"CLibDealing"],[3,"CLibDealingBytes"],[3,"CLibVerifiedDealing"],[3,"CLibVerifiedDealingBytes"],[3,"EncryptedShareBytes"],[3,"CLibComplaint"],[3,"CLibComplaintBytes"],[3,"CLibResponseBytes"],[3,"CLibVerifiedResponseBytes"],[3,"CLibTranscriptBytes"],[3,"EphemeralPublicKey"],[3,"EphemeralSecretKey"],[3,"FsEncryptionSecretKey"],[3,"BTENode"],[3,"FsEncryptionKeySet"],[3,"FsEncryptionKeySetWithPop"],[4,"CspFsEncryptionSecretKey"],[4,"CspFsEncryptionKeySet"],[3,"IndividualSignatureBytes"],[3,"CombinedSignatureBytes"],[3,"SecretKeyBytes"],[3,"PublicKey"],[4,"ThresholdError"],[3,"Polynomial"],[3,"PublicCoefficients"],[3,"InternalPublicCoefficients"],[6,"EncryptedShare"]]},\
"ic_crypto_internal_tls":{"doc":"Library crate that provides low-level functionality needed…","i":[[3,"CreateTlsAcceptorError","ic_crypto_internal_tls","A TLS acceptor couldn\'t be created.",null,null],[12,"description","","",0,null],[12,"cert_der","","",0,null],[12,"internal_error","","",0,null],[3,"CreateTlsConnectorError","","A TLS connector couldn\'t be created.",null,null],[12,"description","","",1,null],[12,"client_cert_der","","",1,null],[12,"server_cert_der","","",1,null],[12,"internal_error","","",1,null],[5,"tls_acceptor","","Builds a TLS acceptor to establish TLS connections on the…",null,[[["x509",3],["vec",3],["pkey",3],["x509",3]],[["createtlsacceptorerror",3],["result",4],["sslacceptor",3]]]],[5,"tls_connector","","Builds a TLS connector to establish TLS connections on the…",null,[[["pkey",3],["x509",3]],[["result",4],["connectconfiguration",3],["createtlsconnectorerror",3]]]],[0,"keygen","","Functionality to generate key material to be used for TLS…",null,null],[3,"TlsEd25519CertificateDerBytes","ic_crypto_internal_tls::keygen","The raw bytes of a DER-encoded X.509 certificate…",null,null],[12,"bytes","","",2,null],[3,"TlsEd25519SecretKeyDerBytes","","The raw bytes of a DER-encoded Ed25519 secret key.",null,null],[12,"bytes","","",3,null],[4,"TlsEd25519CertificateDerBytesParseError","","The parsing of the DER representation of an X.509…",null,null],[13,"CertificateParsingError","","",4,null],[5,"generate_tls_key_pair_der","","Generate a key pair and return the certificate and private…",null,[[["asn1time",3]]]],[5,"generate_tls_key_pair","","Generate a key pair and return the certificate and private…",null,[[["asn1time",3]]]],[11,"from","ic_crypto_internal_tls","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","ic_crypto_internal_tls::keygen","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"zeroize","","",3,[[]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",4,[[]]],[11,"clone","","",4,[[],["tlsed25519certificatederbytesparseerror",4]]],[11,"clone","","",3,[[],["tlsed25519secretkeyderbytes",3]]],[11,"clone","ic_crypto_internal_tls","",0,[[],["createtlsacceptorerror",3]]],[11,"clone","","",1,[[],["createtlsconnectorerror",3]]],[11,"eq","ic_crypto_internal_tls::keygen","",4,[[["tlsed25519certificatederbytesparseerror",4]]]],[11,"eq","","",3,[[["tlsed25519secretkeyderbytes",3]]]],[11,"ne","","",3,[[["tlsed25519secretkeyderbytes",3]]]],[11,"eq","ic_crypto_internal_tls","",0,[[["createtlsacceptorerror",3]]]],[11,"ne","","",0,[[["createtlsacceptorerror",3]]]],[11,"eq","","",1,[[["createtlsconnectorerror",3]]]],[11,"ne","","",1,[[["createtlsconnectorerror",3]]]],[11,"fmt","ic_crypto_internal_tls::keygen","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_tls","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"serialize","ic_crypto_internal_tls::keygen","",4,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"zeroize","","",3,[[]]]],"p":[[3,"CreateTlsAcceptorError"],[3,"CreateTlsConnectorError"],[3,"TlsEd25519CertificateDerBytes"],[3,"TlsEd25519SecretKeyDerBytes"],[4,"TlsEd25519CertificateDerBytesParseError"]]},\
"ic_crypto_internal_types":{"doc":"Types that are used internally in the crypto component.","i":[[0,"context","ic_crypto_internal_types","Domain separation context types for hashing.",null,null],[3,"DomainSeparationContext","ic_crypto_internal_types::context","A domain separation context based on a `String` to…",null,null],[8,"Context","","A domain separation context that can be represented as…",null,null],[10,"as_bytes","","",0,[[]]],[11,"new","","Returns a new domain separation context.",1,[[["into",8],["string",3]],["domainseparationcontext",3]]],[11,"domain","","Returns the domain as string.",1,[[],["string",3]]],[0,"curves","ic_crypto_internal_types","Elliptic curve data types.",null,null],[0,"test_vectors","ic_crypto_internal_types::curves","Test vectors for curve serial representations.",null,null],[0,"bls12_381","ic_crypto_internal_types::curves::test_vectors","Test vectors for the serial representation of BLS12-381…",null,null],[0,"fr","ic_crypto_internal_types::curves::test_vectors::bls12_381","Test vectors for the serial representation of BLS12-381 Fr",null,null],[17,"ZERO","ic_crypto_internal_types::curves::test_vectors::bls12_381::fr","",null,null],[17,"ONE","","",null,null],[17,"MODULUS_MINUS_ONE","","",null,null],[17,"MODULUS","","",null,null],[17,"MODULUS_PLUS_ONE","","",null,null],[17,"MINUS_ONE","","",null,null],[17,"POWERS_OF_2","","Positive numbers: `1,2,4,8,16,...`",null,null],[17,"POSITIVE_NUMBERS","","Positive numbers: `1,2,3,4,...`",null,null],[0,"g1","ic_crypto_internal_types::curves::test_vectors::bls12_381","Test vectors for the serial representation of BLS12-381 G1",null,null],[17,"GENERATOR","ic_crypto_internal_types::curves::test_vectors::bls12_381::g1","The chosen generator for the G1 group.",null,null],[17,"INFINITY","","The additive identity, also known as zero.",null,null],[17,"POWERS_OF_2","","Powers of 2: `g1_generator * {1, 2, 4, 8, ...}`",null,null],[17,"POSITIVE_NUMBERS","","Positive numbers: `g1_generator * {1,2,3,4,...}`",null,null],[17,"NEGATIVE_NUMBERS","","Negative numbers: `g1_generator * {-1, -2, -3, -4, ...}`",null,null],[0,"g2","ic_crypto_internal_types::curves::test_vectors::bls12_381","Test vectors for the serial representation of BLS12-381 G2",null,null],[17,"GENERATOR","ic_crypto_internal_types::curves::test_vectors::bls12_381::g2","The chosen generator for the G2 group.",null,null],[17,"INFINITY","","The additive identity, also known as zero.",null,null],[17,"POWERS_OF_2","","Powers of 2: `g2_generator * [1, 2, 4, 8, ..., 256]`",null,null],[17,"POSITIVE_NUMBERS","","Positive numbers: `g2_generator * [1, 2, 3, ..., 9]`",null,null],[17,"NEGATIVE_NUMBERS","","Negative numbers: `g2_generator * [-1, -2, -3, ..., -9]`",null,null],[0,"bls12_381","ic_crypto_internal_types::curves","Data types for the BLS12_381 elliptic curve.",null,null],[3,"Fr","ic_crypto_internal_types::curves::bls12_381","A field representative in serialised, library independent…",null,null],[12,"0","","",2,null],[3,"G1","","A point in the group \\\"G1\\\" in serialised, library…",null,null],[12,"0","","",3,null],[3,"G2","","A point in the group \\\"G2\\\".",null,null],[12,"0","","",4,null],[0,"conversions","","Variable to fixed size byte array conversions.",null,null],[5,"fr_bytes_from_vec","ic_crypto_internal_types::curves::bls12_381::conversions","Converts a vec into the correct number of bytes for a Fr",null,[[]]],[5,"g1_bytes_from_vec","","Converts a vec into the correct number of bytes for a G1",null,[[]]],[5,"g2_bytes_from_vec","","Converts a vec into the correct number of bytes for a G2",null,[[]]],[18,"SIZE","ic_crypto_internal_types::curves::bls12_381","",2,null],[11,"as_bytes","","",2,[[]]],[18,"SIZE","","",3,null],[18,"COMPRESSED_FLAG","","",3,null],[18,"INFINITY_FLAG","","",3,null],[18,"SIGN_FLAG","","",3,null],[18,"NON_FLAG_BITS","","",3,null],[18,"FLAG_BYTE_OFFSET","","",3,null],[18,"X_BYTES_OFFSET","","",3,null],[11,"as_bytes","","",3,[[]]],[18,"SIZE","","",4,null],[18,"COMPRESSED_FLAG","","",4,null],[18,"INFINITY_FLAG","","",4,null],[18,"SIGN_FLAG","","",4,null],[18,"NON_FLAG_BITS","","",4,null],[18,"FLAG_BYTE_OFFSET","","",4,null],[18,"X1_BYTES_OFFSET","","",4,null],[18,"X0_BYTES_OFFSET","","",4,null],[11,"as_bytes","","",4,[[]]],[0,"encrypt","ic_crypto_internal_types","Encryption scheme types.",null,null],[0,"forward_secure","ic_crypto_internal_types::encrypt","Types for forward-secure encryption used for distributed…",null,null],[3,"MalformedFsEncryptionPublicKeyError","ic_crypto_internal_types::encrypt::forward_secure","A forward secure encryption public key is malformed.",null,null],[12,"key_bytes","","",5,null],[12,"internal_error","","",5,null],[4,"CspFsEncryptionPublicKey","","Forward secure encryption public key",null,null],[13,"Groth20_Bls12_381","","",6,null],[4,"CspFsEncryptionPop","","Forward secure encryption proof of possession.",null,null],[13,"Groth20_Bls12_381","","",7,null],[13,"Groth20WithPop_Bls12_381","","",7,null],[4,"CspFsEncryptionPopFromPublicKeyProtoError","","The forward secure encryption proof of possession (PoP)…",null,null],[13,"UnknownAlgorithm","","",8,null],[12,"algorithm","ic_crypto_internal_types::encrypt::forward_secure::CspFsEncryptionPopFromPublicKeyProtoError","",9,null],[13,"MissingProofData","ic_crypto_internal_types::encrypt::forward_secure","",8,null],[13,"MalformedPop","","",8,null],[12,"pop_bytes","ic_crypto_internal_types::encrypt::forward_secure::CspFsEncryptionPopFromPublicKeyProtoError","",10,null],[12,"internal_error","","",10,null],[0,"groth20_bls12_381","ic_crypto_internal_types::encrypt::forward_secure","The forward secure encryption keys used in Groth20.",null,null],[3,"FsEncryptionPublicKey","ic_crypto_internal_types::encrypt::forward_secure::groth20_bls12_381","Forward secure encryption public key used in Groth20.",null,null],[12,"0","","",11,null],[3,"FsEncryptionPok","","Old proof of knowledge",null,null],[12,"blinder","","",12,null],[12,"response","","",12,null],[3,"FsEncryptionPop","","Forward secure encryption proof of possession.",null,null],[12,"pop_key","","",13,null],[12,"challenge","","",13,null],[12,"response","","",13,null],[3,"FsEncryptionPlaintext","","",null,null],[12,"chunks","","",14,null],[3,"FsEncryptionCiphertext","","",null,null],[12,"rand_r","","",15,null],[12,"rand_s","","",15,null],[12,"rand_z","","",15,null],[12,"ciphertext_chunks","","",15,null],[6,"Chunk","","Plaintext and ciphertext types.",null,null],[17,"CHUNK_BYTES","","",null,null],[17,"NUM_CHUNKS","","",null,null],[18,"SIZE","","",11,null],[11,"as_bytes","","",11,[[]]],[11,"len","","",15,[[]]],[11,"is_empty","","",15,[[]]],[11,"iter","","",15,[[]]],[11,"get","","",15,[[["nodeindex",6]],["option",4]]],[0,"scope","ic_crypto_internal_types","Defines scopes for grouping keys.",null,null],[3,"ConstScopeIter","ic_crypto_internal_types::scope","",null,null],[4,"Scope","","A scope is a label for grouping keys.",null,null],[13,"Const","","Simple scheme with no hierarchy.",16,null],[4,"ScopeSchemeNames","","Auto-generated discriminant enum variants",null,null],[13,"Const","","Simple scheme with no hierarchy.",17,null],[4,"ConstScope","","Simple, fixed labels.",null,null],[13,"Test0","","Placeholders, used for testing.",18,null],[13,"Test1","","",18,null],[13,"NiDkgThresholdKeys","","Threshold keys generated by NiDKG for the IC consensus…",18,null],[13,"NiDkgFsEncryptionKeys","","",18,null],[0,"serde_macro","ic_crypto_internal_types","Macros for serialization and deserialization.",null,null],[0,"sign","","Data types used for signing, verification and key…",null,null],[0,"eddsa","ic_crypto_internal_types::sign","Data types for the Edwards-curve Digital Signature…",null,null],[0,"ed25519","ic_crypto_internal_types::sign::eddsa","Data types for Ed25519.",null,null],[3,"PublicKey","ic_crypto_internal_types::sign::eddsa::ed25519","An Ed25519 public key.",null,null],[12,"0","","",19,null],[3,"SecretKey","","An Ed25519 secret key.",null,null],[12,"0","","",20,null],[3,"Signature","","An Ed25519 signature.",null,null],[12,"0","","",21,null],[3,"PublicKeyByteConversionError","","The conversion from Ed25519 public key bytes failed.",null,null],[12,"length","","",22,null],[3,"SecretKeyByteConversionError","","The conversion from Ed25519 secret key bytes failed.",null,null],[12,"length","","",23,null],[18,"SIZE","","",19,null],[11,"as_bytes","","The bytes of a public key, in raw encoding.",19,[[]]],[18,"SIZE","","",20,null],[11,"as_bytes","","The bytes of a secret key, in raw encoding.",20,[[]]],[18,"SIZE","","",21,null],[0,"threshold_sig","ic_crypto_internal_types::sign","Data types for threshold signatures.",null,null],[0,"dkg","ic_crypto_internal_types::sign::threshold_sig","Data types for interactive distributed key generation (DKG).",null,null],[0,"encryption_public_key","ic_crypto_internal_types::sign::threshold_sig::dkg","Data types for DKG encryption public keys.",null,null],[3,"CspEncryptionPublicKey","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","An encryption public key.",null,null],[12,"internal","","",24,null],[4,"InternalCspEncryptionPublicKey","","An internal encryption public key.",null,null],[13,"Secp256k1","","",25,null],[0,"secp256k1","","Secp256k1 encryption public keys.",null,null],[3,"EphemeralPublicKeyBytes","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key::secp256k1","The public key as byte array.",null,null],[12,"0","","",26,null],[18,"SIZE","","",26,null],[0,"ni_dkg","ic_crypto_internal_types::sign::threshold_sig","Data types for non-interactive distributed key generation…",null,null],[3,"EpochTag","ic_crypto_internal_types::sign::threshold_sig::ni_dkg","A tag for defining the `Epoch` as `AmountOf`.",null,null],[4,"CspNiDkgDealing","","Input for threshold signature key material",null,null],[13,"Groth20_Bls12_381","","",27,null],[4,"CspNiDkgTranscript","","All the public data needed for threshold key derivation.",null,null],[13,"Groth20_Bls12_381","","",28,null],[0,"ni_dkg_groth20_bls12_381","","Data types for the Groth20 non-interactive distributed key…",null,null],[3,"Dealing","ic_crypto_internal_types::sign::threshold_sig::ni_dkg::ni_dkg_groth20_bls12_381","Threshold signature key material with proofs of correctness.",null,null],[12,"public_coefficients","","",29,null],[12,"ciphertexts","","",29,null],[12,"zk_proof_decryptability","","",29,null],[12,"zk_proof_correct_sharing","","",29,null],[3,"ZKProofDec","","A zero knowledge proof that the encrypted shares can be…",null,null],[12,"first_move_y0","","",30,null],[12,"first_move_b","","",30,null],[12,"first_move_c","","",30,null],[12,"second_move_d","","",30,null],[12,"second_move_y","","",30,null],[12,"response_z_r","","",30,null],[12,"response_z_s","","",30,null],[12,"response_z_b","","",30,null],[3,"ZKProofShare","","A zero knowledge proof that the shares are indeed valid…",null,null],[12,"first_move_f","","",31,null],[12,"first_move_a","","",31,null],[12,"first_move_y","","",31,null],[12,"response_z_r","","",31,null],[12,"response_z_a","","",31,null],[3,"Transcript","","All the public data needed for threshold key derivation.",null,null],[12,"public_coefficients","","",32,null],[12,"receiver_data","","NodeIndex is for the dealer who computed the encrypted…",32,null],[17,"NUM_ZK_REPETITIONS","","The number of repetitions for zero-knowledge proofs.",null,null],[6,"Epoch","ic_crypto_internal_types::sign::threshold_sig::ni_dkg","A unit of DKG time.",null,null],[11,"placeholder_to_delete","","Generates an instance of a dealing, for use in stub…",27,[[]]],[11,"placeholder_to_delete","","Generates an instance of a transcript, for use in stub…",28,[[]]],[11,"public_coefficients","","From a general transcript to general public coefficients.",28,[[],["csppubliccoefficients",6]]],[0,"public_coefficients","ic_crypto_internal_types::sign::threshold_sig","Data types for public coefficients.",null,null],[4,"PublicCoefficients","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","Public coefficients for threshold signatures. This is a…",null,null],[13,"Bls12_381","","",33,null],[0,"bls12_381","","Data types for BLS12-381 public coefficients.",null,null],[3,"PublicCoefficientsBytes","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","The public coefficients of a threshold public key.",null,null],[12,"coefficients","","",34,null],[6,"CspPublicCoefficients","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","A type alias for `PublicCoefficients`.",null,null],[0,"public_key","ic_crypto_internal_types::sign::threshold_sig","Data types for threshold public keys.",null,null],[4,"CspThresholdSigPublicKey","ic_crypto_internal_types::sign::threshold_sig::public_key","A threshold signature public key.",null,null],[13,"ThresBls12_381","","",35,null],[0,"bls12_381","","Data types for BLS12-381 threshold signature public keys.",null,null],[3,"PublicKeyBytes","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","A BLS12-381 public key as bytes.",null,null],[12,"0","","",36,null],[4,"ThresholdSigPublicKeyBytesConversionError","","Converting a threshold signature public key to bytes failed.",null,null],[13,"Malformed","","",37,null],[12,"key_bytes","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381::ThresholdSigPublicKeyBytesConversionError","",38,null],[12,"internal_error","","",38,null],[18,"SIZE","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",36,null],[11,"as_bytes","","",36,[[]]],[6,"NodeIndex","ic_crypto_internal_types","The index of a node.",null,null],[14,"derive_serde","","A custom macro to serialize from and to bytes.",null,null],[11,"from","ic_crypto_internal_types::context","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","ic_crypto_internal_types::curves::bls12_381","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"zeroize","","",2,[[]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"zeroize","","",3,[[]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",3,[[]]],[11,"encode_hex","","",3,[[]]],[11,"encode_hex_upper","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"zeroize","","",4,[[]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",4,[[]]],[11,"encode_hex","","",4,[[]]],[11,"encode_hex_upper","","",4,[[]]],[11,"from","ic_crypto_internal_types::encrypt::forward_secure","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"erased_serialize","","",7,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","ic_crypto_internal_types::encrypt::forward_secure::groth20_bls12_381","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"erased_serialize","","",11,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"erased_serialize","","",12,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"erased_serialize","","",13,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"erased_serialize","","",14,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"erased_serialize","","",15,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",15,[[]]],[11,"from","ic_crypto_internal_types::scope","",39,[[]]],[11,"into","","",39,[[]]],[11,"into_iter","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"erased_serialize","","",16,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"erased_serialize","","",18,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",18,[[]]],[11,"from","ic_crypto_internal_types::sign::eddsa::ed25519","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"erased_serialize","","",19,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"erased_serialize","","",20,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"erased_serialize","","",21,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"erased_serialize","","",24,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"erased_serialize","","",25,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",25,[[]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key::secp256k1","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"erased_serialize","","",26,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",26,[[]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::ni_dkg","",40,[[]]],[11,"into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"erased_serialize","","",27,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"erased_serialize","","",28,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",28,[[]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::ni_dkg::ni_dkg_groth20_bls12_381","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"erased_serialize","","",29,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"erased_serialize","","",30,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"erased_serialize","","",31,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"erased_serialize","","",32,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",32,[[]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"erased_serialize","","",33,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",33,[[]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"erased_serialize","","",34,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",34,[[]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::public_key","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"erased_serialize","","",35,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",35,[[]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"erased_serialize","","",36,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"to_string","","",37,[[],["string",3]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"as_bytes","ic_crypto_internal_types::context","",1,[[]]],[11,"as_ref","ic_crypto_internal_types::curves::bls12_381","",3,[[]]],[11,"as_ref","","",4,[[]]],[11,"from","ic_crypto_internal_types::encrypt::forward_secure::groth20_bls12_381","",14,[[["frbytes",3]],["fsencryptionplaintext",3]]],[11,"from","ic_crypto_internal_types::curves::bls12_381","",2,[[["fsencryptionplaintext",3]],["frbytes",3]]],[11,"from","ic_crypto_internal_types::scope","",17,[[["scope",4]],["scopeschemenames",4]]],[11,"from","","",17,[[["scope",4]],["scopeschemenames",4]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","",24,[[["internalcspencryptionpublickey",4]]]],[11,"from","","",25,[[["cspencryptionpublickey",3]]]],[11,"from","ic_crypto_internal_types","",41,[[["cspnidkgtranscript",4]]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[["csppubliccoefficients",6]],["publiccoefficientsbytes",3]]],[11,"from","ic_crypto_internal_types","",41,[[["publiccoefficientsbytes",3]]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",36,[[["cspthresholdsigpublickey",4]]]],[11,"from","ic_crypto_internal_types::sign::threshold_sig::public_key","",35,[[["cspnidkgtranscript",4]]]],[11,"from","","",35,[[["publickeybytes",3]]]],[11,"next_back","ic_crypto_internal_types::scope","",39,[[],["option",4]]],[11,"len","","",39,[[]]],[11,"next","","",39,[[],["option",4]]],[11,"size_hint","","",39,[[]]],[11,"nth","","",39,[[],["option",4]]],[11,"clone","ic_crypto_internal_types::curves::bls12_381","",2,[[],["fr",3]]],[11,"clone","","",3,[[],["g1",3]]],[11,"clone","","",4,[[],["g2",3]]],[11,"clone","ic_crypto_internal_types::encrypt::forward_secure","",6,[[],["cspfsencryptionpublickey",4]]],[11,"clone","","",7,[[],["cspfsencryptionpop",4]]],[11,"clone","","",5,[[],["malformedfsencryptionpublickeyerror",3]]],[11,"clone","","",8,[[],["cspfsencryptionpopfrompublickeyprotoerror",4]]],[11,"clone","ic_crypto_internal_types::encrypt::forward_secure::groth20_bls12_381","",11,[[],["fsencryptionpublickey",3]]],[11,"clone","","",12,[[],["fsencryptionpok",3]]],[11,"clone","","",13,[[],["fsencryptionpop",3]]],[11,"clone","","",14,[[],["fsencryptionplaintext",3]]],[11,"clone","","",15,[[],["fsencryptionciphertext",3]]],[11,"clone","ic_crypto_internal_types::scope","",16,[[],["scope",4]]],[11,"clone","","",17,[[],["scopeschemenames",4]]],[11,"clone","","",18,[[],["constscope",4]]],[11,"clone","","",39,[[],["constscopeiter",3]]],[11,"clone","ic_crypto_internal_types::sign::eddsa::ed25519","",19,[[],["publickey",3]]],[11,"clone","","",20,[[],["secretkey",3]]],[11,"clone","","",21,[[],["signature",3]]],[11,"clone","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","",24,[[],["cspencryptionpublickey",3]]],[11,"clone","","",25,[[],["internalcspencryptionpublickey",4]]],[11,"clone","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key::secp256k1","",26,[[],["ephemeralpublickeybytes",3]]],[11,"clone","ic_crypto_internal_types::sign::threshold_sig::ni_dkg","",27,[[],["cspnidkgdealing",4]]],[11,"clone","","",28,[[],["cspnidkgtranscript",4]]],[11,"clone","ic_crypto_internal_types::sign::threshold_sig::ni_dkg::ni_dkg_groth20_bls12_381","",29,[[],["dealing",3]]],[11,"clone","","",30,[[],["zkproofdec",3]]],[11,"clone","","",31,[[],["zkproofshare",3]]],[11,"clone","","",32,[[],["transcript",3]]],[11,"clone","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","",33,[[],["publiccoefficients",4]]],[11,"clone","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[],["publiccoefficientsbytes",3]]],[11,"clone","ic_crypto_internal_types::sign::threshold_sig::public_key","",35,[[],["cspthresholdsigpublickey",4]]],[11,"clone","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",36,[[],["publickeybytes",3]]],[11,"clone","","",37,[[],["thresholdsigpublickeybytesconversionerror",4]]],[11,"default","ic_crypto_internal_types::curves::bls12_381","",2,[[]]],[11,"default","","",3,[[]]],[11,"default","","",4,[[]]],[11,"default","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","",24,[[]]],[11,"cmp","","",24,[[["cspencryptionpublickey",3]],["ordering",4]]],[11,"cmp","","",25,[[["internalcspencryptionpublickey",4]],["ordering",4]]],[11,"cmp","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key::secp256k1","",26,[[],["ordering",4]]],[11,"cmp","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","",33,[[["publiccoefficients",4]],["ordering",4]]],[11,"cmp","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[["publiccoefficientsbytes",3]],["ordering",4]]],[11,"cmp","ic_crypto_internal_types::sign::threshold_sig::public_key","",35,[[["cspthresholdsigpublickey",4]],["ordering",4]]],[11,"cmp","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",36,[[],["ordering",4]]],[11,"eq","ic_crypto_internal_types::curves::bls12_381","",2,[[["fr",3]]]],[11,"ne","","",2,[[["fr",3]]]],[11,"eq","","",3,[[]]],[11,"eq","","",4,[[]]],[11,"eq","ic_crypto_internal_types::encrypt::forward_secure","",6,[[["cspfsencryptionpublickey",4]]]],[11,"ne","","",6,[[["cspfsencryptionpublickey",4]]]],[11,"eq","","",7,[[["cspfsencryptionpop",4]]]],[11,"ne","","",7,[[["cspfsencryptionpop",4]]]],[11,"eq","","",5,[[["malformedfsencryptionpublickeyerror",3]]]],[11,"ne","","",5,[[["malformedfsencryptionpublickeyerror",3]]]],[11,"eq","","",8,[[["cspfsencryptionpopfrompublickeyprotoerror",4]]]],[11,"ne","","",8,[[["cspfsencryptionpopfrompublickeyprotoerror",4]]]],[11,"eq","ic_crypto_internal_types::encrypt::forward_secure::groth20_bls12_381","",11,[[["fsencryptionpublickey",3]]]],[11,"ne","","",11,[[["fsencryptionpublickey",3]]]],[11,"eq","","",12,[[["fsencryptionpok",3]]]],[11,"ne","","",12,[[["fsencryptionpok",3]]]],[11,"eq","","",13,[[["fsencryptionpop",3]]]],[11,"ne","","",13,[[["fsencryptionpop",3]]]],[11,"eq","","",14,[[["fsencryptionplaintext",3]]]],[11,"ne","","",14,[[["fsencryptionplaintext",3]]]],[11,"eq","","",15,[[["fsencryptionciphertext",3]]]],[11,"ne","","",15,[[["fsencryptionciphertext",3]]]],[11,"eq","ic_crypto_internal_types::scope","",16,[[["scope",4]]]],[11,"ne","","",16,[[["scope",4]]]],[11,"eq","","",17,[[["scopeschemenames",4]]]],[11,"eq","","",18,[[["constscope",4]]]],[11,"eq","ic_crypto_internal_types::sign::eddsa::ed25519","",19,[[["publickey",3]]]],[11,"ne","","",19,[[["publickey",3]]]],[11,"eq","","",20,[[["secretkey",3]]]],[11,"ne","","",20,[[["secretkey",3]]]],[11,"eq","","",21,[[]]],[11,"eq","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","",24,[[["cspencryptionpublickey",3]]]],[11,"ne","","",24,[[["cspencryptionpublickey",3]]]],[11,"eq","","",25,[[["internalcspencryptionpublickey",4]]]],[11,"ne","","",25,[[["internalcspencryptionpublickey",4]]]],[11,"eq","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key::secp256k1","",26,[[]]],[11,"eq","ic_crypto_internal_types::sign::threshold_sig::ni_dkg","",27,[[["cspnidkgdealing",4]]]],[11,"ne","","",27,[[["cspnidkgdealing",4]]]],[11,"eq","","",28,[[["cspnidkgtranscript",4]]]],[11,"ne","","",28,[[["cspnidkgtranscript",4]]]],[11,"eq","ic_crypto_internal_types::sign::threshold_sig::ni_dkg::ni_dkg_groth20_bls12_381","",29,[[["dealing",3]]]],[11,"ne","","",29,[[["dealing",3]]]],[11,"eq","","",30,[[]]],[11,"eq","","",31,[[["zkproofshare",3]]]],[11,"ne","","",31,[[["zkproofshare",3]]]],[11,"eq","","",32,[[["transcript",3]]]],[11,"ne","","",32,[[["transcript",3]]]],[11,"eq","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","",33,[[["publiccoefficients",4]]]],[11,"ne","","",33,[[["publiccoefficients",4]]]],[11,"eq","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[["publiccoefficientsbytes",3]]]],[11,"ne","","",34,[[["publiccoefficientsbytes",3]]]],[11,"eq","ic_crypto_internal_types::sign::threshold_sig::public_key","",35,[[["cspthresholdsigpublickey",4]]]],[11,"ne","","",35,[[["cspthresholdsigpublickey",4]]]],[11,"eq","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",37,[[["thresholdsigpublickeybytesconversionerror",4]]]],[11,"ne","","",37,[[["thresholdsigpublickeybytesconversionerror",4]]]],[11,"eq","","",36,[[]]],[11,"partial_cmp","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","",24,[[["cspencryptionpublickey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",24,[[["cspencryptionpublickey",3]]]],[11,"le","","",24,[[["cspencryptionpublickey",3]]]],[11,"gt","","",24,[[["cspencryptionpublickey",3]]]],[11,"ge","","",24,[[["cspencryptionpublickey",3]]]],[11,"partial_cmp","","",25,[[["internalcspencryptionpublickey",4]],[["option",4],["ordering",4]]]],[11,"lt","","",25,[[["internalcspencryptionpublickey",4]]]],[11,"le","","",25,[[["internalcspencryptionpublickey",4]]]],[11,"gt","","",25,[[["internalcspencryptionpublickey",4]]]],[11,"ge","","",25,[[["internalcspencryptionpublickey",4]]]],[11,"partial_cmp","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key::secp256k1","",26,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","",33,[[["publiccoefficients",4]],[["option",4],["ordering",4]]]],[11,"lt","","",33,[[["publiccoefficients",4]]]],[11,"le","","",33,[[["publiccoefficients",4]]]],[11,"gt","","",33,[[["publiccoefficients",4]]]],[11,"ge","","",33,[[["publiccoefficients",4]]]],[11,"partial_cmp","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[["publiccoefficientsbytes",3]],[["option",4],["ordering",4]]]],[11,"lt","","",34,[[["publiccoefficientsbytes",3]]]],[11,"le","","",34,[[["publiccoefficientsbytes",3]]]],[11,"gt","","",34,[[["publiccoefficientsbytes",3]]]],[11,"ge","","",34,[[["publiccoefficientsbytes",3]]]],[11,"partial_cmp","ic_crypto_internal_types::sign::threshold_sig::public_key","",35,[[["cspthresholdsigpublickey",4]],[["option",4],["ordering",4]]]],[11,"lt","","",35,[[["cspthresholdsigpublickey",4]]]],[11,"le","","",35,[[["cspthresholdsigpublickey",4]]]],[11,"gt","","",35,[[["cspthresholdsigpublickey",4]]]],[11,"ge","","",35,[[["cspthresholdsigpublickey",4]]]],[11,"partial_cmp","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",36,[[],[["ordering",4],["option",4]]]],[11,"fmt","ic_crypto_internal_types::context","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::curves::bls12_381","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::encrypt::forward_secure","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::encrypt::forward_secure::groth20_bls12_381","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::scope","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::sign::eddsa::ed25519","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key::secp256k1","",26,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::sign::threshold_sig::ni_dkg","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::sign::threshold_sig::ni_dkg::ni_dkg_groth20_bls12_381","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","",33,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::sign::threshold_sig::public_key","",35,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::encrypt::forward_secure","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::scope","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",37,[[["formatter",3]],["result",6]]],[11,"hash","ic_crypto_internal_types::curves::bls12_381","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","ic_crypto_internal_types::encrypt::forward_secure::groth20_bls12_381","",15,[[]]],[11,"hash","ic_crypto_internal_types::sign::eddsa::ed25519","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",21,[[]]],[11,"hash","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","",24,[[]]],[11,"hash","","",25,[[]]],[11,"hash","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key::secp256k1","",26,[[]]],[11,"hash","ic_crypto_internal_types::sign::threshold_sig::ni_dkg","",27,[[]]],[11,"hash","","",28,[[]]],[11,"hash","ic_crypto_internal_types::sign::threshold_sig::ni_dkg::ni_dkg_groth20_bls12_381","",29,[[]]],[11,"hash","","",30,[[]]],[11,"hash","","",31,[[]]],[11,"hash","","",32,[[]]],[11,"hash","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","",33,[[]]],[11,"hash","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[]]],[11,"hash","ic_crypto_internal_types::sign::threshold_sig::public_key","",35,[[]]],[11,"hash","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",37,[[]]],[11,"hash","","",36,[[]]],[11,"try_from","ic_crypto_internal_types::encrypt::forward_secure","",6,[[["publickeyproto",3]],[["malformedfsencryptionpublickeyerror",3],["result",4]]]],[11,"try_from","","",7,[[["publickeyproto",3]],["result",4]]],[11,"try_from","ic_crypto_internal_types::sign::eddsa::ed25519","",19,[[],[["result",4],["publickeybyteconversionerror",3]]]],[11,"try_from","","",20,[[],[["secretkeybyteconversionerror",3],["result",4]]]],[11,"try_from","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","",33,[[],["result",4]]],[11,"try_from","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[],[["thresholdsigpublickeybytesconversionerror",4],["result",4]]]],[11,"try_from","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",36,[[],["result",4]]],[11,"try_from","","",36,[[["string",3]],["result",4]]],[11,"from_str","ic_crypto_internal_types::scope","",17,[[],[["result",4],["scopeschemenames",4]]]],[11,"from_str","","",16,[[],[["scope",4],["result",4]]]],[11,"from_str","","",18,[[],[["constscope",4],["result",4]]]],[11,"serialize","ic_crypto_internal_types::curves::bls12_381","",2,[[["serializer",8]],["result",4]]],[11,"serialize","","",3,[[["serializer",8]],["result",4]]],[11,"serialize","","",4,[[["serializer",8]],["result",4]]],[11,"serialize","ic_crypto_internal_types::encrypt::forward_secure","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","ic_crypto_internal_types::encrypt::forward_secure::groth20_bls12_381","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","ic_crypto_internal_types::scope","",16,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","ic_crypto_internal_types::sign::eddsa::ed25519","",19,[[["serializer",8]],["result",4]]],[11,"serialize","","",20,[[["serializer",8]],["result",4]]],[11,"serialize","","",21,[[["serializer",8]],["result",4]]],[11,"serialize","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key::secp256k1","",26,[[["serializer",8]],["result",4]]],[11,"serialize","ic_crypto_internal_types::sign::threshold_sig::ni_dkg","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","ic_crypto_internal_types::sign::threshold_sig::ni_dkg::ni_dkg_groth20_bls12_381","",29,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"serialize","","",32,[[],["result",4]]],[11,"serialize","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","",33,[[],["result",4]]],[11,"serialize","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[],["result",4]]],[11,"serialize","ic_crypto_internal_types::sign::threshold_sig::public_key","",35,[[],["result",4]]],[11,"serialize","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",36,[[["serializer",8]],["result",4]]],[11,"deserialize","ic_crypto_internal_types::curves::bls12_381","",2,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",3,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",4,[[["deserializer",8]],["result",4]]],[11,"deserialize","ic_crypto_internal_types::encrypt::forward_secure","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_types::encrypt::forward_secure::groth20_bls12_381","",11,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_types::scope","",16,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_types::sign::eddsa::ed25519","",19,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",20,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",21,[[["deserializer",8]],["result",4]]],[11,"deserialize","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_types::sign::threshold_sig::dkg::encryption_public_key::secp256k1","",26,[[["deserializer",8]],["result",4]]],[11,"deserialize","ic_crypto_internal_types::sign::threshold_sig::ni_dkg","",27,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_types::sign::threshold_sig::ni_dkg::ni_dkg_groth20_bls12_381","",29,[[],["result",4]]],[11,"deserialize","","",30,[[],["result",4]]],[11,"deserialize","","",31,[[],["result",4]]],[11,"deserialize","","",32,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_types::sign::threshold_sig::public_coefficients","",33,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_types::sign::threshold_sig::public_coefficients::bls12_381","",34,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_types::sign::threshold_sig::public_key","",35,[[],["result",4]]],[11,"deserialize","ic_crypto_internal_types::sign::threshold_sig::public_key::bls12_381","",36,[[["deserializer",8]],["result",4]]],[11,"iter","ic_crypto_internal_types::scope","",18,[[],["constscopeiter",3]]]],"p":[[8,"Context"],[3,"DomainSeparationContext"],[3,"Fr"],[3,"G1"],[3,"G2"],[3,"MalformedFsEncryptionPublicKeyError"],[4,"CspFsEncryptionPublicKey"],[4,"CspFsEncryptionPop"],[4,"CspFsEncryptionPopFromPublicKeyProtoError"],[13,"UnknownAlgorithm"],[13,"MalformedPop"],[3,"FsEncryptionPublicKey"],[3,"FsEncryptionPok"],[3,"FsEncryptionPop"],[3,"FsEncryptionPlaintext"],[3,"FsEncryptionCiphertext"],[4,"Scope"],[4,"ScopeSchemeNames"],[4,"ConstScope"],[3,"PublicKey"],[3,"SecretKey"],[3,"Signature"],[3,"PublicKeyByteConversionError"],[3,"SecretKeyByteConversionError"],[3,"CspEncryptionPublicKey"],[4,"InternalCspEncryptionPublicKey"],[3,"EphemeralPublicKeyBytes"],[4,"CspNiDkgDealing"],[4,"CspNiDkgTranscript"],[3,"Dealing"],[3,"ZKProofDec"],[3,"ZKProofShare"],[3,"Transcript"],[4,"PublicCoefficients"],[3,"PublicCoefficientsBytes"],[4,"CspThresholdSigPublicKey"],[3,"PublicKeyBytes"],[4,"ThresholdSigPublicKeyBytesConversionError"],[13,"Malformed"],[3,"ConstScopeIter"],[3,"EpochTag"],[6,"CspPublicCoefficients"]]},\
"ic_crypto_key_validation":{"doc":"Library crate for verifying the validity of a node\'s…","i":[[3,"ValidNodePublicKeys","ic_crypto_key_validation","Validated public key material of a node.",null,null],[3,"KeyValidationError","","A key validation error.",null,null],[12,"error","","",0,null],[11,"try_from","","Determines if the given node public key material is valid.",1,[[["nodeid",6],["nodepublickeys",3]],[["result",4],["keyvalidationerror",3]]]],[11,"node_id","","Returns the node ID for which the public key material\'s…",1,[[],["nodeid",6]]],[11,"node_signing_key","","Returns the validated node signing key.",1,[[],["publickey",3]]],[11,"committee_signing_key","","Returns the validated committee signing key.",1,[[],["publickey",3]]],[11,"dkg_dealing_encryption_key","","Returns the validated DKG dealing encryption key.",1,[[],["publickey",3]]],[11,"tls_certificate","","Returns the validated TLS certificate.",1,[[],["x509publickeycert",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",1,[[],["validnodepublickeys",3]]],[11,"clone","","",0,[[],["keyvalidationerror",3]]],[11,"eq","","",1,[[["validnodepublickeys",3]]]],[11,"ne","","",1,[[["validnodepublickeys",3]]]],[11,"eq","","",0,[[["keyvalidationerror",3]]]],[11,"ne","","",0,[[["keyvalidationerror",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"KeyValidationError"],[3,"ValidNodePublicKeys"]]},\
"ic_crypto_sha256":{"doc":"","i":[[3,"Sha256","ic_crypto_sha256","Hasher with fixed algorithm that is guaranteed not to…",null,null],[3,"Sha224","","Hasher with fixed algorithm that is guaranteed not to…",null,null],[11,"new","","Return a new Sha256 object",0,[[]]],[11,"hash","","Hashes some data and returns the digest",0,[[]]],[11,"write","","Incrementally update the current hash",0,[[]]],[11,"finish","","Finishes computing a hash, returning the digest",0,[[]]],[11,"new","","Return a new Sha224 object",1,[[]]],[11,"hash","","Hashes some data and returns the digest",1,[[]]],[11,"write","","Incrementally update the current hash",1,[[]]],[11,"finish","","Finishes computing a hash, returning the digest",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"default","","",0,[[],["sha256",3]]],[11,"default","","",1,[[],["sha224",3]]],[11,"finish","","This function will panic; use finish() -> [u8; 32] instead",0,[[]]],[11,"write","","Update an incremental hash",0,[[]]],[11,"finish","","This function will panic; use finish() -> [u8; 28] instead",1,[[]]],[11,"write","","Update an incremental hash",1,[[]]],[11,"write","","Update an incremental hash",0,[[],["result",6]]],[11,"flush","","This is a no-op",0,[[],["result",6]]],[11,"write","","Update an incremental hash",1,[[],["result",6]]],[11,"flush","","This is a no-op",1,[[],["result",6]]]],"p":[[3,"Sha256"],[3,"Sha224"]]},\
"ic_crypto_tls":{"doc":"Offers TLS functionality with self-managed keys.","i":[[3,"TlsPublicKeyCert","ic_crypto_tls","An X.509 certificate",null,null],[3,"TlsPrivateKey","","TLS private key",null,null],[3,"TlsPemParsingError","","A PEM string could not be parsed.",null,null],[12,"internal_error","","",0,null],[3,"TlsEncodingError","","A TLS struct couldn\'t be encoded (as PEM or DER).",null,null],[12,"internal_error","","",1,null],[4,"TlsClientHandshakeError","","The TLS client handshake failed.",null,null],[13,"CreateConnectorError","","",2,null],[12,"description","ic_crypto_tls::TlsClientHandshakeError","",3,null],[12,"client_cert_der","","",3,null],[12,"server_cert_der","","",3,null],[12,"internal_error","","",3,null],[13,"HandshakeError","ic_crypto_tls","",2,null],[12,"internal_error","ic_crypto_tls::TlsClientHandshakeError","",4,null],[5,"perform_tls_client_handshake","ic_crypto_tls","Transforms a TCP stream into a TLS stream by performing a…",null,[[["tlsprivatekey",3],["tcpstream",3],["tlspublickeycert",3]]]],[5,"generate_tls_keys","","Generates and returns a private key and a self-signed X509…",null,[[]]],[11,"new_from_pem","","Creates a certificate from PEM encoding",5,[[["vec",3]],[["result",4],["tlspemparsingerror",3]]]],[11,"new_from_x509","","Creates a certificate from an existing OpenSSL struct",5,[[["x509",3]]]],[11,"to_pem","","Returns the certificate in PEM format",5,[[],[["result",4],["vec",3],["tlsencodingerror",3]]]],[11,"to_der","","Returns the certificate in DER format",5,[[],[["result",4],["vec",3],["tlsencodingerror",3]]]],[11,"as_x509","","Returns the certificate as an OpenSSL struct",5,[[],["x509",3]]],[11,"new_from_pem","","Creates a private key from a PEM encoding",6,[[["vec",3]],[["result",4],["tlspemparsingerror",3]]]],[11,"to_pem","","Returns the private key in PEM encoding",6,[[],[["result",4],["vec",3],["tlsencodingerror",3]]]],[11,"as_pkey","","Returns the private key as an OpenSSL struct",6,[[],["pkey",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",2,[[["createtlsconnectorerror",3]]]],[11,"from","","",2,[[["handshakeerror",3],["tcpstream",3]]]],[11,"clone","","",2,[[],["tlsclienthandshakeerror",4]]],[11,"clone","","",5,[[],["tlspublickeycert",3]]],[11,"clone","","",6,[[],["tlsprivatekey",3]]],[11,"clone","","",0,[[],["tlspemparsingerror",3]]],[11,"clone","","",1,[[],["tlsencodingerror",3]]],[11,"eq","","",2,[[["tlsclienthandshakeerror",4]]]],[11,"ne","","",2,[[["tlsclienthandshakeerror",4]]]],[11,"eq","","",0,[[["tlspemparsingerror",3]]]],[11,"ne","","",0,[[["tlspemparsingerror",3]]]],[11,"eq","","",1,[[["tlsencodingerror",3]]]],[11,"ne","","",1,[[["tlsencodingerror",3]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]]],"p":[[3,"TlsPemParsingError"],[3,"TlsEncodingError"],[4,"TlsClientHandshakeError"],[13,"CreateConnectorError"],[13,"HandshakeError"],[3,"TlsPublicKeyCert"],[3,"TlsPrivateKey"]]},\
"ic_crypto_tls_interfaces":{"doc":"Public interface for a TLS-secured stream","i":[[3,"MalformedPeerCertificateError","ic_crypto_tls_interfaces","The certificate offered by the peer is malformed.",null,null],[12,"internal_error","","",0,null],[3,"TlsStream","","A stream over a secure connection protected by TLS.",null,null],[3,"TlsReadHalf","","The read half of a stream over a secure connection…",null,null],[3,"TlsWriteHalf","","The write half of a stream over a secure connection…",null,null],[3,"AllowedClients","","A list of allowed TLS peers (and their trusted…",null,null],[3,"ClientsEmptyError","","Attempted to create an `AllowedClients` with `Some`…",null,null],[4,"TlsServerHandshakeError","","Errors from a TLS handshake performed as the server.…",null,null],[13,"RegistryError","","",1,null],[13,"CertificateNotInRegistry","","",1,null],[12,"node_id","ic_crypto_tls_interfaces::TlsServerHandshakeError","",2,null],[12,"registry_version","","",2,null],[13,"MalformedSelfCertificate","ic_crypto_tls_interfaces","",1,null],[12,"internal_error","ic_crypto_tls_interfaces::TlsServerHandshakeError","",3,null],[13,"MalformedClientCertificate","ic_crypto_tls_interfaces","",1,null],[13,"CreateAcceptorError","","",1,null],[12,"description","ic_crypto_tls_interfaces::TlsServerHandshakeError","",4,null],[12,"cert_der","","",4,null],[12,"internal_error","","",4,null],[13,"HandshakeError","ic_crypto_tls_interfaces","",1,null],[12,"internal_error","ic_crypto_tls_interfaces::TlsServerHandshakeError","",5,null],[13,"ClientNotAllowed","ic_crypto_tls_interfaces","",1,null],[13,"UnauthenticatedClient","","",1,null],[4,"PeerNotAllowedError","","Errors from a TLS handshake due to an unauthorized peer",null,null],[13,"HandshakeCertificateNodeIdNotAllowed","","Validation of claimed identity against authorized…",6,null],[13,"CannotDerEncodePeerCertFromHandshake","","Failed to DER encode the peer\'s certificate offered during…",6,null],[12,"internal_error","ic_crypto_tls_interfaces::PeerNotAllowedError","",7,null],[13,"CertificatesDiffer","ic_crypto_tls_interfaces","Peer\'s certificate offered during the handshake doesn\'t…",6,null],[4,"TlsClientHandshakeError","","Errors from a TLS handshake performed as the client.…",null,null],[13,"RegistryError","","",8,null],[13,"CertificateNotInRegistry","","",8,null],[12,"node_id","ic_crypto_tls_interfaces::TlsClientHandshakeError","",9,null],[12,"registry_version","","",9,null],[13,"MalformedSelfCertificate","ic_crypto_tls_interfaces","",8,null],[12,"internal_error","ic_crypto_tls_interfaces::TlsClientHandshakeError","",10,null],[13,"MalformedServerCertificate","ic_crypto_tls_interfaces","",8,null],[13,"CreateConnectorError","","",8,null],[12,"description","ic_crypto_tls_interfaces::TlsClientHandshakeError","",11,null],[12,"client_cert_der","","",11,null],[12,"server_cert_der","","",11,null],[12,"internal_error","","",11,null],[13,"HandshakeError","ic_crypto_tls_interfaces","",8,null],[12,"internal_error","ic_crypto_tls_interfaces::TlsClientHandshakeError","",12,null],[13,"ServerNotAllowed","ic_crypto_tls_interfaces","",8,null],[4,"SomeOrAllNodes","","A list of node IDs, or \\\"all nodes\\\"",null,null],[13,"Some","","",13,null],[13,"All","","",13,null],[4,"Peer","","A TLS peer, with identification information (if…",null,null],[13,"Unauthenticated","","Peer hasn\'t been authenticated.",14,null],[13,"Authenticated","","Peer has been authenticated.",14,null],[4,"AuthenticatedPeer","","An authenticated Node ID, or an authenticated certificate",null,null],[13,"Node","","Authenticated Node ID",15,null],[13,"Cert","","Authenticated X.509 certificate",15,null],[8,"TlsHandshake","","Implementors provide methods for transforming TCP streams…",null,null],[10,"perform_tls_server_handshake","","Transforms a TCP stream into a TLS stream by first…",16,[[["tcpstream",3],["registryversion",6],["allowedclients",3]],[["box",3],["pin",3]]]],[10,"perform_tls_server_handshake_temp_with_optional_client_auth","","IMPORTANT NODE: This method is temporary. It will be…",16,[[["tcpstream",3],["registryversion",6],["allowedclients",3]],[["pin",3],["box",3]]]],[10,"perform_tls_client_handshake","","Transforms a TCP stream into a TLS stream by first…",16,[[["tcpstream",3],["registryversion",6],["nodeid",6]],[["pin",3],["box",3]]]],[11,"new","","",0,[[]]],[11,"new","","",17,[[["tcpstream",3],["sslstream",3]]]],[11,"split","","Use this method to split a `TlsStream`, as it returns…",17,[[]]],[11,"new","","",18,[[["readhalf",3],["sslstream",3]]]],[11,"new","","",19,[[["writehalf",3],["sslstream",3]]]],[11,"new","","",20,[[["vec",3],["x509publickeycert",3],["someorallnodes",4]],[["clientsemptyerror",3],["result",4]]]],[11,"new_with_nodes","","Create an `AllowedClients` with a set of nodes, but no…",20,[[["btreeset",3],["nodeid",6]],[["clientsemptyerror",3],["result",4]]]],[11,"nodes","","Access the allowed nodes.",20,[[],["someorallnodes",4]]],[11,"certs","","Access the allowed certificates.",20,[[],["vec",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",1,[[["malformedpeercertificateerror",3]]]],[11,"from","","",1,[[["peernotallowederror",4]]]],[11,"from","","",8,[[["malformedpeercertificateerror",3]]]],[11,"from","","",8,[[["peernotallowederror",4]]]],[11,"clone","","",1,[[],["tlsserverhandshakeerror",4]]],[11,"clone","","",0,[[],["malformedpeercertificateerror",3]]],[11,"clone","","",6,[[],["peernotallowederror",4]]],[11,"clone","","",8,[[],["tlsclienthandshakeerror",4]]],[11,"clone","","",20,[[],["allowedclients",3]]],[11,"clone","","",21,[[],["clientsemptyerror",3]]],[11,"clone","","",13,[[],["someorallnodes",4]]],[11,"clone","","",14,[[],["peer",4]]],[11,"clone","","",15,[[],["authenticatedpeer",4]]],[11,"eq","","",1,[[["tlsserverhandshakeerror",4]]]],[11,"ne","","",1,[[["tlsserverhandshakeerror",4]]]],[11,"eq","","",0,[[["malformedpeercertificateerror",3]]]],[11,"ne","","",0,[[["malformedpeercertificateerror",3]]]],[11,"eq","","",6,[[["peernotallowederror",4]]]],[11,"ne","","",6,[[["peernotallowederror",4]]]],[11,"eq","","",8,[[["tlsclienthandshakeerror",4]]]],[11,"ne","","",8,[[["tlsclienthandshakeerror",4]]]],[11,"eq","","",21,[[["clientsemptyerror",3]]]],[11,"eq","","",13,[[["someorallnodes",4]]]],[11,"ne","","",13,[[["someorallnodes",4]]]],[11,"eq","","",14,[[["peer",4]]]],[11,"ne","","",14,[[["peer",4]]]],[11,"eq","","",15,[[["authenticatedpeer",4]]]],[11,"ne","","",15,[[["authenticatedpeer",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"poll_read","","",17,[[["context",3],["pin",3]],[["poll",4],["result",6]]]],[11,"poll_read","","",18,[[["context",3],["pin",3]],[["poll",4],["result",6]]]],[11,"poll_write","","",17,[[["context",3],["pin",3]],[["poll",4],["result",4]]]],[11,"poll_flush","","",17,[[["context",3],["pin",3]],[["poll",4],["result",4]]]],[11,"poll_shutdown","","",17,[[["context",3],["pin",3]],[["poll",4],["result",4]]]],[11,"poll_write","","",19,[[["context",3],["pin",3]],[["poll",4],["result",4]]]],[11,"poll_flush","","",19,[[["context",3],["pin",3]],[["poll",4],["result",4]]]],[11,"poll_shutdown","","",19,[[["context",3],["pin",3]],[["poll",4],["result",4]]]]],"p":[[3,"MalformedPeerCertificateError"],[4,"TlsServerHandshakeError"],[13,"CertificateNotInRegistry"],[13,"MalformedSelfCertificate"],[13,"CreateAcceptorError"],[13,"HandshakeError"],[4,"PeerNotAllowedError"],[13,"CannotDerEncodePeerCertFromHandshake"],[4,"TlsClientHandshakeError"],[13,"CertificateNotInRegistry"],[13,"MalformedSelfCertificate"],[13,"CreateConnectorError"],[13,"HandshakeError"],[4,"SomeOrAllNodes"],[4,"Peer"],[4,"AuthenticatedPeer"],[8,"TlsHandshake"],[3,"TlsStream"],[3,"TlsReadHalf"],[3,"TlsWriteHalf"],[3,"AllowedClients"],[3,"ClientsEmptyError"]]},\
"ic_crypto_tree_hash":{"doc":"","i":[[3,"WitnessGeneratorImpl","ic_crypto_tree_hash","An implementation of the [`WitnessGenerator`]-trait.",null,null],[3,"HashTreeBuilderImpl","","An implementation of the [`HashTreeBuilder`]-trait.",null,null],[3,"Path","","Represents a path (a collection of [`Label`]) in a hash…",null,null],[3,"Label","","A blob used as a label in the tree.",null,null],[3,"Digest","","The computed hash of the data in a `Leaf`; or of a…",null,null],[12,"0","","",0,null],[4,"LabeledTree","","A sorted, labeled rose tree whose leaves contain values of…",null,null],[13,"Leaf","","A leaf node. Only `Leaf` nodes contain values.",1,null],[13,"SubTree","","Internal node with an arbitrary number of sorted, labeled…",1,null],[4,"HashTree","","A binary tree representation of a [`LabeledTree`], with…",null,null],[13,"Leaf","","An unlabeled leaf that is either the root or the child of…",2,null],[12,"digest","ic_crypto_tree_hash::HashTree","",3,null],[13,"Node","ic_crypto_tree_hash","The equivalent of a `LabeledTree` branch.",2,null],[12,"digest","ic_crypto_tree_hash::HashTree","",4,null],[12,"label","","",4,null],[12,"hash_tree","","",4,null],[13,"Fork","ic_crypto_tree_hash","Unlabeled binary fork, used to represent a…",2,null],[12,"digest","ic_crypto_tree_hash::HashTree","",5,null],[12,"left_tree","","",5,null],[12,"right_tree","","",5,null],[4,"MixedHashTree","ic_crypto_tree_hash","A hash tree that contains the data requested by the call…",null,null],[13,"Empty","","",6,null],[13,"Fork","","",6,null],[13,"Labeled","","",6,null],[13,"Leaf","","",6,null],[13,"Pruned","","",6,null],[4,"InvalidHashTreeError","","An error indicating that a hash tree doesn\'t correspond to…",null,null],[13,"UnlabeledLeaf","","The hash tree contains a non-root leaf that is not a…",7,null],[13,"LabelsNotSorted","","Labels in the hash tree are not sorted.",7,null],[4,"TreeHashError","","Errors occurring in `tree_hash` module.",null,null],[13,"InconsistentPartialTree","","",8,null],[12,"offending_path","ic_crypto_tree_hash::TreeHashError","",9,null],[13,"InvalidArgument","ic_crypto_tree_hash","",8,null],[12,"info","ic_crypto_tree_hash::TreeHashError","",10,null],[4,"Witness","ic_crypto_tree_hash","A subset of a [`HashTree`] that is sufficient to verify…",null,null],[13,"Fork","","",11,null],[12,"left_tree","ic_crypto_tree_hash::Witness","",12,null],[12,"right_tree","","",12,null],[13,"Node","ic_crypto_tree_hash","",11,null],[12,"label","ic_crypto_tree_hash::Witness","",13,null],[12,"sub_witness","","",13,null],[13,"Pruned","ic_crypto_tree_hash","",11,null],[12,"digest","ic_crypto_tree_hash::Witness","",14,null],[13,"Known","ic_crypto_tree_hash","",11,null],[5,"prune_witness","","Prunes from `witness` the nodes in `partial_tree`. If…",null,[[["labeledtree",4],["witness",4]],[["result",4],["witness",4],["treehasherror",4]]]],[5,"recompute_digest","","Computes and returns a digest for (partial) data given in…",null,[[["labeledtree",4],["witness",4]],[["treehasherror",4],["result",4],["digest",3]]]],[5,"sub_witness","","Returns the direct sub-witness with the given label, if…",null,[[["witness",4],["label",3]],[["option",4],["witness",4]]]],[5,"first_sub_witness","","Returns the leftmost direct labeled sub-witness, if any,…",null,[[["witness",4]],["option",4]]],[5,"sparse_labeled_tree_from_paths","","Converts a list of `Path`s into a sparse `LabeledTree`.",null,[[],["labeledtree",4]]],[5,"lookup_path","","Descends into the subtree of `t` following the given…",null,[[["labeledtree",4]],[["labeledtree",4],["option",4]]]],[0,"flat_map","","Introduces `FlatMap` structure, a sorted map with fast…",null,null],[3,"FlatMap","ic_crypto_tree_hash::flat_map","A [`FlatMap`] is a sorted map with fast lookups and appends.",null,null],[3,"IntoIter","","An auxiliary struct for an implementation of iterators…",null,null],[11,"new","","Creates a new, empty map.",15,[[]]],[11,"with_capacity","","Creates a new map of specified capacity.",15,[[]]],[11,"from_key_values","","Constructs a map from a list of (key, value) pairs.",15,[[["vec",3]]]],[11,"get","","Searches a value by key.",15,[[],["option",4]]],[11,"get_mut","","Like `get`, but returns a mutable reference.",15,[[],["option",4]]],[11,"remove","","Removes a value by key.",15,[[],["option",4]]],[11,"contains_key","","Checks if this map contains the specified key.",15,[[]]],[11,"last_key","","Returns a reference to the last key, if any.",15,[[],["option",4]]],[11,"try_append","","Tries to extend this map by adding a new (K, V) entry.…",15,[[],["result",4]]],[11,"iter","","Returns an iterator over key-value pairs.",15,[[]]],[11,"keys","","Returns a sorted slice of the keys contained in this map.",15,[[]]],[11,"values","","Returns a slice of values contained in this map.",15,[[]]],[11,"is_empty","","Returns true if this map is empty. Returns false otherwise.",15,[[]]],[11,"len","","Returns the number of entries in this map.",15,[[]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",15,[[]]],[0,"proto","ic_crypto_tree_hash","Protocol buffer equivalents to `LabeledTree<Vec<u8>>` and…",null,null],[11,"new","","",16,[[]]],[11,"as_hash_tree","","Like `into_hash_tree`, but returns a copy of the hash…",16,[[],[["hashtree",4],["option",4]]]],[11,"into_hash_tree","","Returns the HashTree corresponding to the traversed tree…",16,[[],[["hashtree",4],["option",4]]]],[11,"as_labeled_tree","","Returns the constructed LabeledTree if the construction is…",16,[[],[["option",4],["labeledtree",4]]]],[8,"WitnessGenerator","","`WitnessGenerator` is a container for a `HashTree` that…",null,null],[10,"hash_tree","","Returns the tree contained in this box.",17,[[],["hashtree",4]]],[10,"witness","","Computes and returns a witness for the paths specified…",17,[[["labeledtree",4]],[["result",4],["witness",4],["treehasherror",4]]]],[10,"mixed_hash_tree","","",17,[[["labeledtree",4]],[["treehasherror",4],["mixedhashtree",4],["result",4]]]],[8,"HashTreeBuilder","","`HashTreeBuilder` enables an iterative construction of a…",null,null],[16,"WitnessGenerator","","",18,null],[10,"start_leaf","","Starts a new leaf at the current position in the tree.…",18,[[]]],[10,"write_leaf","","Adds bytes to the content of the current leaf. Does not…",18,[[["asref",8]]]],[10,"finish_leaf","","Finishes the current leaf. Changes the current position in…",18,[[]]],[10,"start_subtree","","Starts a new subtree at the current position in the tree.…",18,[[]]],[10,"new_edge","","Adds a new edge to the current subtree, and creates a new…",18,[[["label",3],["into",8]]]],[10,"finish_subtree","","Finishes the current subtree. Changes the current position…",18,[[]]],[10,"witness_generator","","Returns a `WitnessGenerator` for the constructed tree if…",18,[[],["option",4]]],[11,"new","","",19,[[["label",3],["vec",3]]]],[11,"as_bytes","","",20,[[]]],[11,"to_vec","","",20,[[],["vec",3]]],[11,"as_bytes","","",0,[[]]],[11,"to_vec","","",0,[[],["vec",3]]],[11,"digest","","Returns the digest of the tree, i.e. the digest of the…",2,[[],["digest",3]]],[11,"left_tree","","Returns the left sub-tree of the tree, assuming the tree…",2,[[],["hashtree",4]]],[11,"right_tree","","Returns the right sub-tree of the tree, assuming the tree…",2,[[],["hashtree",4]]],[11,"node_tree","","Returns the contained `hash_tree` of the tree, assuming…",2,[[],["hashtree",4]]],[11,"label","","Returns the label of the tree, assuming the tree is…",2,[[],["label",3]]],[11,"digest","","Recomputes root hash of the full tree that this mixed tree…",6,[[],["digest",3]]],[14,"flatmap","","Creates a [`FlatMap`] from a list of key => value pairs.",null,null],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"erased_serialize","","",19,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"to_string","","",20,[[],["string",3]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"erased_serialize","","",20,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",20,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",0,[[]]],[11,"encode_hex","","",0,[[]]],[11,"encode_hex_upper","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",2,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"erased_serialize","","",8,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",8,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"erased_serialize","","",11,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",11,[[]]],[11,"from","ic_crypto_tree_hash::flat_map","",15,[[]]],[11,"into","","",15,[[]]],[11,"into_iter","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"erased_serialize","","",15,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",15,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"into_iter","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"hash_tree","ic_crypto_tree_hash","",21,[[],["hashtree",4]]],[11,"witness","","",21,[[["labeledtree",4]],[["result",4],["witness",4],["treehasherror",4]]]],[11,"mixed_hash_tree","","",21,[[["labeledtree",4]],[["treehasherror",4],["mixedhashtree",4],["result",4]]]],[11,"start_leaf","","",16,[[]]],[11,"write_leaf","","",16,[[["asref",8]]]],[11,"finish_leaf","","",16,[[]]],[11,"start_subtree","","",16,[[]]],[11,"new_edge","","",16,[[["label",3],["into",8]]]],[11,"finish_subtree","","",16,[[]]],[11,"witness_generator","","",16,[[],["option",4]]],[11,"as_ref","","",0,[[]]],[11,"from","","",19,[[["label",3],["vec",3]]]],[11,"from","","",19,[[["label",3]]]],[11,"from","","",20,[[],["label",3]]],[11,"from","","",0,[[]]],[11,"into","","",20,[[],["string",3]]],[11,"into","","",20,[[],["bytebuf",3]]],[11,"next_back","ic_crypto_tree_hash::flat_map","",22,[[],["option",4]]],[11,"into_iter","","",15,[[]]],[11,"next","","",22,[[],["option",4]]],[11,"clone","","",15,[[],["flatmap",3]]],[11,"clone","ic_crypto_tree_hash","",21,[[],["witnessgeneratorimpl",3]]],[11,"clone","","",19,[[],["path",3]]],[11,"clone","","",20,[[],["label",3]]],[11,"clone","","",0,[[],["digest",3]]],[11,"clone","","",1,[[],["labeledtree",4]]],[11,"clone","","",2,[[],["hashtree",4]]],[11,"clone","","",6,[[],["mixedhashtree",4]]],[11,"clone","","",7,[[],["invalidhashtreeerror",4]]],[11,"clone","","",8,[[],["treehasherror",4]]],[11,"clone","","",11,[[],["witness",4]]],[11,"default","ic_crypto_tree_hash::flat_map","",15,[[]]],[11,"default","ic_crypto_tree_hash","",16,[[]]],[11,"cmp","","",19,[[["path",3]],["ordering",4]]],[11,"cmp","","",20,[[],["ordering",4]]],[11,"eq","ic_crypto_tree_hash::flat_map","",15,[[["flatmap",3]]]],[11,"ne","","",15,[[["flatmap",3]]]],[11,"eq","ic_crypto_tree_hash","",21,[[["witnessgeneratorimpl",3]]]],[11,"ne","","",21,[[["witnessgeneratorimpl",3]]]],[11,"eq","","",19,[[["path",3]]]],[11,"ne","","",19,[[["path",3]]]],[11,"eq","","",20,[[]]],[11,"eq","","",0,[[["digest",3]]]],[11,"ne","","",0,[[["digest",3]]]],[11,"eq","","",1,[[["labeledtree",4]]]],[11,"ne","","",1,[[["labeledtree",4]]]],[11,"eq","","",2,[[["hashtree",4]]]],[11,"ne","","",2,[[["hashtree",4]]]],[11,"eq","","",6,[[["mixedhashtree",4]]]],[11,"ne","","",6,[[["mixedhashtree",4]]]],[11,"eq","","",7,[[["invalidhashtreeerror",4]]]],[11,"ne","","",7,[[["invalidhashtreeerror",4]]]],[11,"eq","","",8,[[["treehasherror",4]]]],[11,"ne","","",8,[[["treehasherror",4]]]],[11,"eq","","",11,[[["witness",4]]]],[11,"ne","","",11,[[["witness",4]]]],[11,"partial_cmp","","",19,[[["path",3]],[["option",4],["ordering",4]]]],[11,"lt","","",19,[[["path",3]]]],[11,"le","","",19,[[["path",3]]]],[11,"gt","","",19,[[["path",3]]]],[11,"ge","","",19,[[["path",3]]]],[11,"partial_cmp","","",20,[[],[["option",4],["ordering",4]]]],[11,"deref","","",19,[[]]],[11,"deref_mut","","",19,[[]]],[11,"fmt","ic_crypto_tree_hash::flat_map","",15,[[["formatter",3]],["result",6]]],[11,"fmt","ic_crypto_tree_hash","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"from_iter","","",19,[[["intoiterator",8]]]],[11,"from_iter","","",19,[[["intoiterator",8]]]],[11,"try_from","","",1,[[["labeledtree",3]],["result",4]]],[11,"try_from","","",11,[[["witness",3]],["result",4]]],[11,"try_from","","",6,[[["mixedhashtree",3]],["result",4]]],[11,"try_from","","Creates a `WitnessGenerator` from a `HashTree`, that must…",21,[[["hashtree",4]],["result",4]]],[11,"try_from","","",0,[[["vec",3]],["result",4]]],[11,"try_from","","",1,[[["mixedhashtree",4]],[["invalidhashtreeerror",4],["result",4]]]],[11,"serialize","ic_crypto_tree_hash::flat_map","",15,[[["serializer",8]],["result",4]]],[11,"serialize","ic_crypto_tree_hash","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",0,[[["serializer",8]],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"deserialize","ic_crypto_tree_hash::flat_map","",15,[[["deserializer",8]],[["flatmap",3],["result",4]]]],[11,"deserialize","ic_crypto_tree_hash","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",0,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",6,[[],[["result",4],["mixedhashtree",4]]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]]],"p":[[3,"Digest"],[4,"LabeledTree"],[4,"HashTree"],[13,"Leaf"],[13,"Node"],[13,"Fork"],[4,"MixedHashTree"],[4,"InvalidHashTreeError"],[4,"TreeHashError"],[13,"InconsistentPartialTree"],[13,"InvalidArgument"],[4,"Witness"],[13,"Fork"],[13,"Node"],[13,"Pruned"],[3,"FlatMap"],[3,"HashTreeBuilderImpl"],[8,"WitnessGenerator"],[8,"HashTreeBuilder"],[3,"Path"],[3,"Label"],[3,"WitnessGeneratorImpl"],[3,"IntoIter"]]},\
"ic_crypto_utils_basic_sig":{"doc":"","i":[[0,"conversions","ic_crypto_utils_basic_sig","Conversion of keys into various formats",null,null],[4,"Ed25519DerParseError","ic_crypto_utils_basic_sig::conversions","",null,null],[13,"IncorrectPublicKeyLength","","",0,null],[13,"IncorrectSecretKeyLength","","",0,null],[13,"OidExtractionError","","",0,null],[13,"OidValueError","","",0,null],[13,"MissingPublicKey","","",0,null],[4,"Ed25519PemParseError","","",null,null],[13,"InvalidPem","","",1,null],[13,"InvalidDer","","",1,null],[0,"pem","","PEM encoding",null,null],[5,"der_to_pem","ic_crypto_utils_basic_sig::conversions::pem","Converts DER encoded data to PEM.",null,[[],["string",3]]],[5,"pem_to_der","","Converts PEM encoded data to DER",null,[[],[["result",6],["vec",3]]]],[17,"PUBLIC_KEY","","",null,null],[17,"SECRET_KEY","","",null,null],[8,"Ed25519Conversions","ic_crypto_utils_basic_sig::conversions","Usage: * Import type - has no dependencies * or import…",null,null],[10,"to_der","","Encodes this key into a DER-encoded Ed25519 key.",2,[[],["vec",3]]],[10,"from_der","","Tries to parse `bytes` as a DER-encoded Ed25519 key",2,[[],[["ed25519derparseerror",4],["result",4]]]],[10,"to_pem","","Encodes this key into a PEM-encoded Ed25519 key.",2,[[],["string",3]]],[10,"from_pem","","Tries to parse `bytes` as a PEM-encoded Ed25519 key",2,[[],[["result",4],["ed25519pemparseerror",4]]]],[8,"Ed25519SecretKeyConversions","","Convenience methods for DER/PEM encoding and decoding of…",null,null],[16,"PublicKeyType","","",3,null],[10,"to_der","","Encodes this key into a DER-encoded Ed25519 key.",3,[[],["vec",3]]],[10,"from_der","","Tries to parse `bytes` as a DER-encoded Ed25519 key",3,[[],[["result",4],["ed25519derparseerror",4]]]],[10,"to_pem","","Encodes this key into a PEM-encoded Ed25519 key.",3,[[],["string",3]]],[10,"from_pem","","Tries to parse `bytes` as a PEM-encoded Ed25519 key",3,[[],[["result",4],["ed25519pemparseerror",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[4,"Ed25519DerParseError"],[4,"Ed25519PemParseError"],[8,"Ed25519Conversions"],[8,"Ed25519SecretKeyConversions"]]},\
"ic_crypto_utils_threshold_sig":{"doc":"Static IDKM-compatible functions for threshold signatures","i":[[5,"parse_threshold_sig_key","ic_crypto_utils_threshold_sig","Parse a PEM format threshold signature public key from a…",null,[[["path",3]],[["result",6],["thresholdsigpublickey",3]]]],[5,"verify_combined","","Verify a combined threshold signature.",null,[[["thresholdsigpublickey",3],["combinedthresholdsigof",6]],["cryptoresult",6]]]],"p":[]},\
"ic_cycles_account_manager":{"doc":"This module contains the `CyclesAccountManager` which is…","i":[[3,"CyclesAccountManager","ic_cycles_account_manager","Handles any operation related to cycles accounting, such…",null,null],[4,"CyclesAccountManagerError","","Errors returned by the [`CyclesAccountManager`].",null,null],[13,"ContractViolation","","One of the API contracts that the cycles account manager…",0,null],[4,"IngressInductionCost","","Encapsulates the payer and cost of inducting an ingress…",null,null],[13,"Free","","Induction is free.",1,null],[13,"Fee","","Induction cost and the canister to pay for it.",1,null],[12,"payer","ic_cycles_account_manager::IngressInductionCost","",2,null],[12,"cost","","",2,null],[4,"IngressInductionCostError","ic_cycles_account_manager","Errors returned when computing the cost of receiving an…",null,null],[13,"UnknownSubnetMethod","","",3,null],[13,"InvalidSubnetPayload","","",3,null],[11,"new","","",4,[[["numinstructions",6],["subnetid",6],["option",4],["cyclesaccountmanagerconfig",3],["cycles",3],["subnettype",4]]]],[11,"subnet_type","","Returns the subnet type of this [`CyclesAccountManager`].",4,[[],["subnettype",4]]],[11,"canister_creation_fee","","Returns the fee to create a canister in [`Cycles`].",4,[[],["cycles",3]]],[11,"ingress_message_received_fee","","Returns the fee for receiving an ingress message in…",4,[[],["cycles",3]]],[11,"ingress_byte_received_fee","","Returns the fee per byte of ingress message received in…",4,[[],["cycles",3]]],[11,"xnet_call_performed_fee","","Returns the fee for performing a xnet call in [`Cycles`].",4,[[],["cycles",3]]],[11,"xnet_call_bytes_transmitted_fee","","Returns the fee per byte of transmitted xnet call in…",4,[[["numbytes",6]],["cycles",3]]],[11,"withdraw_cycles","","Subtracts `cycles` worth of cycles from the canister\'s…",4,[[["numbytes",6],["systemstate",3],["computeallocation",3],["cycles",3]],[["result",4],["cyclesaccounterror",4]]]],[11,"withdraw_execution_cycles","","Subtracts the corresponding cycles worth of the provided…",4,[[["numbytes",6],["numinstructions",6],["systemstate",3],["computeallocation",3]],[["result",4],["cyclesaccounterror",4]]]],[11,"refund_execution_cycles","","Refunds the corresponding cycles worth of the provided…",4,[[["numinstructions",6],["systemstate",3]]]],[11,"charge_for_compute_allocation","","Charges the canister for its compute allocation",4,[[["computeallocation",3],["duration",3],["systemstate",3]],[["result",4],["cyclesaccounterror",4]]]],[11,"ingress_induction_cost","","Computes the cost of inducting an ingress message.",4,[[["signedingresscontent",3]],[["ingressinductioncosterror",4],["result",4],["ingressinductioncost",4]]]],[11,"charge_for_memory","","Subtracts the cycles cost of using a `bytes` amount of…",4,[[["numbytes",6],["duration",3],["systemstate",3]],[["result",4],["cyclesaccounterror",4]]]],[11,"withdraw_request_cycles","","When sending a request it\'s necessary to pay for: * The…",4,[[["numbytes",6],["systemstate",3],["computeallocation",3],["request",3]],[["result",4],["cyclesaccounterror",4]]]],[11,"response_cycles_refund","","Refunds the cycles from the response. In particular, adds…",4,[[["response",3],["systemstate",3]]]],[11,"cycles_balance_above_storage_reserve","","Amount of cycles above the level reserved for storage costs",4,[[["numbytes",6],["systemstate",3],["computeallocation",3]],["cycles",3]]],[11,"check_max_cycles_can_add","","Returns the maximum amount of `Cycles` that can be added…",4,[[["systemstate",3],["cycles",3]],["cycles",3]]],[11,"add_cycles","","Adds `cycles` worth of cycles to the canister\'s balance.…",4,[[["cycles",3],["systemstate",3]]]],[11,"mint_cycles","","Mints `amount_to_mint` [`Cycles`].",4,[[["cycles",3],["systemstate",3]],[["cyclesaccountmanagererror",4],["result",4]]]],[11,"charge_canister_for_resource_allocation_and_usage","","Charges a canister for its resource allocation and usage…",4,[[["canisterstate",3],["duration",3],["replicalogger",6]],[["canisterstate",3],["result",4]]]],[11,"cost","","Returns the cost of inducting an ingress message in…",1,[[],["cycles",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"equivalent","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"equivalent","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"clone","","",0,[[],["cyclesaccountmanagererror",4]]],[11,"clone","","",4,[[],["cyclesaccountmanager",3]]],[11,"eq","","",0,[[["cyclesaccountmanagererror",4]]]],[11,"ne","","",0,[[["cyclesaccountmanagererror",4]]]],[11,"eq","","",4,[[["cyclesaccountmanager",3]]]],[11,"ne","","",4,[[["cyclesaccountmanager",3]]]],[11,"eq","","",1,[[["ingressinductioncost",4]]]],[11,"ne","","",1,[[["ingressinductioncost",4]]]],[11,"eq","","",3,[[["ingressinductioncosterror",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[4,"CyclesAccountManagerError"],[4,"IngressInductionCost"],[13,"Fee"],[4,"IngressInductionCostError"],[3,"CyclesAccountManager"]]},\
"ic_embedders":{"doc":"","i":[[3,"ExtraWorkerHandle","ic_embedders","",null,null],[3,"ProcessingGroup","","",null,null],[3,"QueueConfig","","",null,null],[12,"max_num_runners","","",0,null],[12,"num_reusable_runners","","",0,null],[3,"ReturnToken","","",null,null],[12,"output_sender","","",1,null],[12,"output_receiver","","",1,null],[12,"extra_worker_handle","","",1,null],[12,"num_msgs","","",1,null],[3,"RunnerConfig","","",null,null],[12,"embedder_type","","",2,null],[12,"config","","",2,null],[12,"log","","",2,null],[3,"RunnerInput","","",null,null],[12,"input","","",3,null],[12,"return_token","","",3,null],[3,"RunnerOutput","","",null,null],[12,"output","","",4,null],[12,"extra_worker_handle","","",4,null],[3,"ResumeToken","","",null,null],[12,"resume_sender","","",5,null],[12,"output_receiver","","",5,null],[3,"ExecSelect","","",null,null],[3,"WasmExecutionResult","","",null,null],[12,"output_receiver","","",6,null],[3,"WasmExecutionInput","","",null,null],[12,"api_type","","",7,null],[12,"system_state","","",7,null],[12,"instructions_limit","","",7,null],[12,"canister_memory_limit","","",7,null],[12,"canister_current_memory_usage","","",7,null],[12,"subnet_available_memory","","",7,null],[12,"compute_allocation","","",7,null],[12,"func_ref","","",7,null],[12,"execution_state","","",7,null],[12,"cycles_account_manager","","",7,null],[3,"WasmExecutionOutput","","",null,null],[12,"wasm_result","","",8,null],[12,"num_instructions_left","","",8,null],[12,"system_state","","",8,null],[12,"execution_state","","",8,null],[12,"instance_stats","","",8,null],[3,"InstanceRunResult","","",null,null],[12,"dirty_pages","","",9,null],[12,"exported_globals","","",9,null],[4,"ExecutionResult","","",null,null],[13,"WasmExecutionOutput","","",10,null],[13,"ResumeToken","","",10,null],[5,"spawn_new_runner","","",null,[[["receiver",3],["runnerconfig",3],["runnerinput",3]],["joinhandle",3]]],[0,"cow_memory_creator","","",null,null],[3,"CowMemoryCreator","ic_embedders::cow_memory_creator","",null,null],[3,"MappedStateMemory","","",null,null],[11,"new","","",11,[[["mappedstateimpl",3]]]],[11,"new_uninitialized","","",11,[[]]],[11,"return_result","ic_embedders","",1,[[["wasmexecutionoutput",3]]]],[11,"new","","",12,[[["runnerconfig",3],["queueconfig",3]]]],[11,"execute","","",12,[[["arc",3],["wasmexecutioninput",3]],["wasmexecutionresult",3]]],[0,"wasmtime_embedder","","",null,null],[3,"WasmtimeEmbedder","ic_embedders::wasmtime_embedder","",null,null],[0,"host_memory","","",null,null],[3,"WasmtimeMemoryCreator","ic_embedders::wasmtime_embedder::host_memory","",null,null],[3,"MmapMemory","","",null,null],[3,"WasmtimeMemory","","",null,null],[12,"mem","","",13,null],[5,"round_up_to_page_size","","",null,[[]]],[11,"new","","",14,[[]]],[11,"new","","Safety It calls libc::mmap is if arguments don\'t make…",15,[[]]],[11,"from_raw","","",15,[[]]],[11,"new","ic_embedders::wasmtime_embedder","",16,[[["replicalogger",6],["config",3]]]],[8,"Instance","ic_embedders","Instance trait must be implemented by the wrapper of a…",null,null],[10,"run","","Executes first exported method on an embedder instance,…",17,[[["funcref",4],["systemapi",8]],[["hypervisorresult",6],["instancerunresult",3]]]],[10,"set_num_instructions","","Sets the amount of cycles for a method execution.",17,[[["numinstructions",6]]]],[10,"get_num_instructions","","Returns the amount of cycles left.",17,[[],["numinstructions",6]]],[10,"heap_size","","Return the heap size.",17,[[],["numwasmpages",6]]],[10,"get_exported_globals","","",17,[[],[["global",4],["vec",3]]]],[10,"heap_addr","","Return the heap address. If the Instance does not contain…",17,[[]]],[10,"get_stats","","Returns execution statistics for this instance. Note that…",17,[[],["instancestats",3]]],[8,"Embedder","","",null,null],[10,"compile","","",18,[[["persistencetype",4],["binaryencodedwasm",3]],[["embeddercache",3],["hypervisorresult",6]]]],[10,"new_instance","","",18,[[["option",4],["arc",3],["embeddercache",3],["option",4],["numwasmpages",6],["pagemap",3]],[["instance",8],["box",3]]]],[8,"LinearMemory","","",null,null],[10,"as_ptr","","",19,[[]]],[11,"grow_mem_to","","",19,[[]]],[8,"ICMemoryCreator","","",null,null],[16,"Mem","","",20,null],[10,"new_memory","","",20,[[["option",4]]]],[11,"resume","","",5,[[["numinstructions",6]],["wasmexecutionresult",3]]],[11,"cancel","","",5,[[],["wasmexecutionresult",3]]],[11,"new","","",21,[[["execresult",3],["vec",3]]]],[11,"add","","",21,[[["execresult",3]]]],[11,"select","","",21,[[],[["execresultvariant",4],["option",4]]]],[11,"get","","",6,[[],["executionresult",4]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"init","","",22,[[]]],[11,"deref","","",22,[[]]],[11,"deref_mut","","",22,[[]]],[11,"drop","","",22,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"init","","",12,[[]]],[11,"deref","","",12,[[]]],[11,"deref_mut","","",12,[[]]],[11,"drop","","",12,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"from","ic_embedders::cow_memory_creator","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"init","","",23,[[]]],[11,"deref","","",23,[[]]],[11,"deref_mut","","",23,[[]]],[11,"drop","","",23,[[]]],[11,"from","ic_embedders::wasmtime_embedder","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"init","","",16,[[]]],[11,"deref","","",16,[[]]],[11,"deref_mut","","",16,[[]]],[11,"drop","","",16,[[]]],[11,"from","ic_embedders::wasmtime_embedder::host_memory","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"init","","",15,[[]]],[11,"deref","","",15,[[]]],[11,"deref_mut","","",15,[[]]],[11,"drop","","",15,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"compile","ic_embedders::wasmtime_embedder","",16,[[["persistencetype",4],["binaryencodedwasm",3]],[["embeddercache",3],["hypervisorresult",6]]]],[11,"new_instance","","",16,[[["option",4],["arc",3],["embeddercache",3],["option",4],["numwasmpages",6],["pagemap",3]],[["instance",8],["box",3]]]],[11,"as_ptr","ic_embedders::cow_memory_creator","",23,[[]]],[11,"as_ptr","ic_embedders::wasmtime_embedder::host_memory","",15,[[]]],[11,"as_ptr","","",13,[[]]],[11,"new_memory","ic_embedders::cow_memory_creator","",11,[[["option",4]]]],[11,"drop","ic_embedders::wasmtime_embedder::host_memory","",15,[[]]],[11,"clone","ic_embedders","",2,[[],["runnerconfig",3]]],[11,"default","ic_embedders::wasmtime_embedder::host_memory","",14,[[],["wasmtimememorycreator",3]]],[11,"get","ic_embedders","",6,[[["box",3]],[["execresultvariant",4],["wasmexecutionoutput",3]]]],[11,"try_select","","",6,[[["box",3]],[["wasmexecutionoutput",3],["tryselect",4]]]],[11,"resume","","",5,[[["box",3],["numinstructions",6]],[["execresult",3],["wasmexecutionoutput",3]]]],[11,"cancel","","",5,[[["box",3]],[["execresult",3],["wasmexecutionoutput",3]]]],[11,"new_memory","ic_embedders::wasmtime_embedder::host_memory","",14,[[["option",4],["memorytype",3]],[["result",4],["box",3],["string",3]]]],[11,"size","","Returns the number of allocated wasm pages.",13,[[]]],[11,"grow","","",13,[[],["option",4]]],[11,"as_ptr","","",13,[[]]]],"p":[[3,"QueueConfig"],[3,"ReturnToken"],[3,"RunnerConfig"],[3,"RunnerInput"],[3,"RunnerOutput"],[3,"ResumeToken"],[3,"WasmExecutionResult"],[3,"WasmExecutionInput"],[3,"WasmExecutionOutput"],[3,"InstanceRunResult"],[4,"ExecutionResult"],[3,"CowMemoryCreator"],[3,"ProcessingGroup"],[3,"WasmtimeMemory"],[3,"WasmtimeMemoryCreator"],[3,"MmapMemory"],[3,"WasmtimeEmbedder"],[8,"Instance"],[8,"Embedder"],[8,"LinearMemory"],[8,"ICMemoryCreator"],[3,"ExecSelect"],[3,"ExtraWorkerHandle"],[3,"MappedStateMemory"]]},\
"ic_error_types":{"doc":"A crate that groups user-facing and internal error types…","i":[[3,"ErrorCodeIter","ic_error_types","",null,null],[3,"UserError","","The error that is sent back to users of IC if something…",null,null],[4,"RejectCode","","Reject codes are integers that canisters should pass to…",null,null],[13,"SysFatal","","",0,null],[13,"SysTransient","","",0,null],[13,"DestinationInvalid","","",0,null],[13,"CanisterReject","","",0,null],[13,"CanisterError","","",0,null],[4,"ErrorCode","","User-facing error codes.",null,null],[13,"SubnetOversubscribed","","",1,null],[13,"CanisterOutputQueueFull","","",1,null],[13,"IngressMessageTimeout","","",1,null],[13,"CanisterNotFound","","",1,null],[13,"CanisterMethodNotFound","","",1,null],[13,"CanisterAlreadyInstalled","","",1,null],[13,"CanisterWasmModuleNotFound","","",1,null],[13,"CanisterEmpty","","",1,null],[13,"InsufficientTransferFunds","","",1,null],[13,"InsufficientMemoryAllocation","","",1,null],[13,"InsufficientCyclesForCreateCanister","","",1,null],[13,"SubnetNotFound","","",1,null],[13,"CanisterOutOfCycles","","",1,null],[13,"CanisterTrapped","","",1,null],[13,"CanisterCalledTrap","","",1,null],[13,"CanisterContractViolation","","",1,null],[13,"CanisterInvalidWasm","","",1,null],[13,"CanisterDidNotReply","","",1,null],[13,"CanisterOutOfMemory","","",1,null],[13,"CanisterStopped","","",1,null],[13,"CanisterStopping","","",1,null],[13,"CanisterNotStopped","","",1,null],[13,"CanisterStoppingCancelled","","",1,null],[13,"CanisterInvalidController","","",1,null],[13,"CanisterFunctionNotFound","","",1,null],[13,"CanisterNonEmpty","","",1,null],[13,"CertifiedStateUnavailable","","",1,null],[13,"CanisterRejectedMessage","","",1,null],[13,"InterCanisterQueryLoopDetected","","",1,null],[13,"UnknownManagementMessage","","",1,null],[13,"InvalidManagementPayload","","",1,null],[13,"InsufficientCyclesInCall","","",1,null],[11,"new","","",2,[[["tostring",8],["errorcode",4]]]],[11,"code","","",2,[[],["errorcode",4]]],[11,"description","","",2,[[]]],[11,"reject_code","","",2,[[],["rejectcode",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"from","","",0,[[["errorcode",4]],["rejectcode",4]]],[11,"from","","",2,[[["error",4]]]],[11,"next_back","","",3,[[],["option",4]]],[11,"len","","",3,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"nth","","",3,[[],["option",4]]],[11,"clone","","",0,[[],["rejectcode",4]]],[11,"clone","","",1,[[],["errorcode",4]]],[11,"clone","","",3,[[],["errorcodeiter",3]]],[11,"clone","","",2,[[],["usererror",3]]],[11,"eq","","",0,[[["rejectcode",4]]]],[11,"eq","","",1,[[["errorcode",4]]]],[11,"eq","","",2,[[["usererror",3]]]],[11,"ne","","",2,[[["usererror",3]]]],[11,"to_string","","",0,[[],["string",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_from","","",1,[[],[["result",4],["errorcode",4]]]],[11,"source","","",2,[[],[["error",8],["option",4]]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"iter","","",1,[[],["errorcodeiter",3]]]],"p":[[4,"RejectCode"],[4,"ErrorCode"],[3,"UserError"],[3,"ErrorCodeIter"]]},\
"ic_execution_environment":{"doc":"","i":[[3,"ExecutionEnvironmentImpl","ic_execution_environment","Struct that is responsible for executing update type…",null,null],[3,"IngressHistoryReaderImpl","","Struct that implements the ingress history reader trait.…",null,null],[3,"IngressHistoryWriterImpl","","Struct that implements the ingress history writer trait.…",null,null],[3,"HttpQueryHandlerImpl","","Struct that is responsible for handling queries sent by…",null,null],[5,"setup_execution","","Helper function to constructs the public facing components…",null,[[["replicalogger",6],["subnettype",4],["config",3],["cyclesaccountmanager",3],["subnetid",6],["metricsregistry",3],["arc",3]]]],[11,"new","","",0,[[["replicalogger",6],["subnettype",4],["cyclesaccountmanager",3],["ingresshistorywriter",8],["subnetid",6],["metricsregistry",3],["arc",3],["arc",3],["arc",3],["executionconfig",3],["hypervisor",3]]]],[11,"new","","",1,[[["arc",3],["statereader",8]]]],[11,"new","","",2,[[["replicalogger",6],["metricsregistry",3]]]],[11,"new","","",3,[[["numbytes",6],["replicalogger",6],["subnettype",4],["arc",3],["subnetid",6],["hypervisor",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"subnet_available_memory","","",0,[[["replicatedstate",3]],["numbytes",6]]],[11,"execute_subnet_message","","",0,[[["provisionalwhitelist",4],["subnetavailablememory",3],["canisterinputmessage",4],["replicatedstate",3],["numinstructions",6],["rngcore",8]],["replicatedstate",3]]],[11,"execute_canister_message","","",0,[[["subnetavailablememory",3],["time",3],["arc",3],["arc",3],["canisterinputmessage",4],["numinstructions",6],["btreemap",3],["canisterstate",3],["routingtable",3]],[["executemessageresult",3],["execresult",3]]]],[11,"should_accept_ingress_message","","",0,[[["signedingresscontent",3],["provisionalwhitelist",4],["arc",3]],[["messageacceptanceerror",4],["result",4]]]],[11,"execute_canister_heartbeat","","",0,[[["subnetavailablememory",3],["arc",3],["btreemap",3],["arc",3],["numinstructions",6],["routingtable",3],["time",3]],["execresult",3]]],[11,"query","","",3,[[["vec",3],["arc",3],["userquery",3]],[["usererror",3],["result",4],["wasmresult",4]]]],[11,"get_latest_status","","",1,[[],[["fn",8],["box",3]]]],[11,"get_status_at_height","","",1,[[["height",6]],[["ingresshistoryerror",4],["result",4],["box",3]]]],[11,"set_status","","",2,[[["messageid",3],["ingressstatus",4]]]]],"p":[[3,"ExecutionEnvironmentImpl"],[3,"IngressHistoryReaderImpl"],[3,"IngressHistoryWriterImpl"],[3,"HttpQueryHandlerImpl"]]},\
"ic_http_handler":{"doc":"","i":[[3,"HttpHandler","ic_http_handler","The struct that handles incoming HTTP requests for the IC…",null,null],[5,"init_server_blocking","","",null,[[["arc",3],["registryclient",8],["executionenvironment",8],["arc",3],["arc",3],["arc",3],["arc",3],["ingresseventhandler",8],["subnetid",6],["config",3],["arc",3],["consensuspoolcache",8],["replicalogger",6],["arc",3],["arc",3],["statereader",8],["cryptocomponent",6],["arc",3],["subnettype",4],["queryhandler",8]],[["httphandler",3],["error",3],["result",4]]]],[5,"start_server","","Creates HTTP server, binds to HTTP port and handles HTTP…",null,[[["httphandler",3],["metricsregistry",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]]],"p":[[3,"HttpHandler"]]},\
"ic_http_utils":{"doc":"","i":[[0,"file_downloader","ic_http_utils","",null,null],[3,"FileDownloader","ic_http_utils::file_downloader","Streams HTTP response bodies to files",null,null],[4,"FileDownloadError","","Enumerates the possible errors that NodeManager may…",null,null],[13,"IoError","","An IO error occurred",0,null],[13,"HttpError","","An error occurred when making an HTTP request for a binary",0,null],[13,"FileHashMismatchError","","A file\'s computed hash did not match the expected hash",0,null],[12,"computed_hash","ic_http_utils::file_downloader::FileDownloadError","",1,null],[12,"expected_hash","","",1,null],[12,"file_path","","",1,null],[4,"HttpError","ic_http_utils::file_downloader","An HTTP error that File Downloader may encounter",null,null],[13,"MalformedUrl","","Failed to parse this String as a URL",2,null],[13,"HyperError","","A hyper HTTP client produced an error",2,null],[13,"NonSuccessResponse","","A non-success HTTP response was received from the given URI",2,null],[5,"compute_sha256_hex","","Compute the SHA256 of a file and return a hex-encoded…",null,[[["pathbuf",3]],[["string",3],["filedownloadresult",6]]]],[5,"check_file_hash","","Assert that the given file has the given hash",null,[[["pathbuf",3]],["filedownloadresult",6]]],[5,"extract_tar_gz_into_dir","","Extract the contents of a given .tar.gz file into…",null,[[["pathbuf",3]],["filedownloadresult",6]]],[6,"FileDownloadResult","","",null,null],[11,"new","","",3,[[["option",4],["replicalogger",6]]]],[11,"download_and_extract_tar_gz","","Download a .tar.gz file from `url`, verify its hash if…",3,[[["option",4],["pathbuf",3],["string",3]]]],[11,"download_file","","Make a GET HTTP request to `url`, stream the response body…",3,[[["option",4],["pathbuf",3],["string",3]]]],[11,"file_create_error","","",0,[[["error",3],["pathbuf",3]]]],[11,"file_write_error","","",0,[[["error",3],["pathbuf",3]]]],[11,"file_open_error","","",0,[[["error",3],["pathbuf",3]]]],[11,"file_remove_error","","",0,[[["error",3],["pathbuf",3]]]],[11,"file_copy_error","","",0,[[["error",3],["pathbuf",3]]]],[11,"file_set_permissions_error","","",0,[[["error",3],["pathbuf",3]]]],[11,"dir_create_error","","",0,[[["error",3],["pathbuf",3]]]],[11,"untar_error","","",0,[[["error",3],["pathbuf",3]]]],[11,"tar_gz_temp_dir_error","","",0,[[["error",3]]]],[11,"bad_url","","",0,[[["invaliduri",3]]]],[11,"compute_hash_error","","",0,[[["error",3],["pathbuf",3]]]],[11,"file_hash_mismatch_error","","",0,[[["pathbuf",3],["string",3]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",0,[[["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[4,"FileDownloadError"],[13,"FileHashMismatchError"],[4,"HttpError"],[3,"FileDownloader"]]},\
"ic_ic00_types":{"doc":"Data types used for encoding/decoding the Candid payloads…","i":[[3,"MethodIter","ic_ic00_types","",null,null],[3,"CanisterIdRecord","","Struct used for encoding/decoding `(record {canister_id})`.",null,null],[3,"DefiniteCanisterSettingsArgs","","Struct used for encoding/decoding `(record { controller :…",null,null],[3,"CanisterStatusResult","","The deprecated version of CanisterStatusResult that is…",null,null],[3,"CanisterStatusResultV2","","Struct used for encoding/decoding `(record { status :…",null,null],[3,"InstallCodeArgs","","Struct used for encoding/decoding `(record { mode :…",null,null],[12,"mode","","",0,null],[12,"canister_id","","",0,null],[12,"wasm_module","","",0,null],[12,"arg","","",0,null],[12,"compute_allocation","","",0,null],[12,"memory_allocation","","",0,null],[12,"query_allocation","","",0,null],[3,"EmptyBlob","","Represents the empty blob.",null,null],[3,"UpdateSettingsArgs","","Struct used for encoding/decoding `(record { canister_id :…",null,null],[12,"canister_id","","",1,null],[12,"settings","","",1,null],[3,"CanisterSettingsArgs","","Struct used for encoding/decoding `(record { controller :…",null,null],[12,"controller","","",2,null],[12,"compute_allocation","","",2,null],[12,"memory_allocation","","",2,null],[12,"freezing_threshold","","",2,null],[3,"CreateCanisterArgs","","Struct used for encoding/decoding `(record { settings :…",null,null],[12,"settings","","",3,null],[3,"SetControllerArgs","","Struct used for encoding/decoding `(record { canister_id :…",null,null],[3,"SetupInitialDKGArgs","","Struct used for encoding/decoding `(record { node_ids :…",null,null],[3,"SetupInitialDKGResponse","","Represents the response for a request to setup an initial…",null,null],[12,"low_threshold_transcript_record","","",4,null],[12,"high_threshold_transcript_record","","",4,null],[12,"fresh_subnet_id","","",4,null],[12,"subnet_threshold_public_key","","",4,null],[3,"ProvisionalCreateCanisterWithCyclesArgs","","Struct used for encoding/decoding `(record { amount : opt…",null,null],[12,"amount","","",5,null],[12,"settings","","",5,null],[3,"ProvisionalTopUpCanisterArgs","","Struct used for encoding/decoding `(record { canister_id :…",null,null],[4,"Method","","Methods exported by ic:00.",null,null],[13,"CanisterStatus","","",6,null],[13,"CreateCanister","","",6,null],[13,"DeleteCanister","","",6,null],[13,"DepositCycles","","",6,null],[13,"DepositFunds","","",6,null],[13,"InstallCode","","",6,null],[13,"RawRand","","",6,null],[13,"SetController","","",6,null],[13,"SetupInitialDKG","","",6,null],[13,"StartCanister","","",6,null],[13,"StopCanister","","",6,null],[13,"UninstallCode","","",6,null],[13,"UpdateSettings","","",6,null],[13,"ProvisionalCreateCanisterWithCycles","","",6,null],[13,"ProvisionalTopUpCanister","","",6,null],[17,"IC_00","","The id of the management canister.",null,null],[8,"Payload","","A trait to be implemented by all structs that are used as…",null,null],[11,"encode","","",7,[[],["vec",3]]],[11,"decode","","",7,[[],[["result",4],["error",4]]]],[11,"get_canister_id","","",8,[[],["canisterid",3]]],[11,"new","","",9,[[["option",4],["principalid",3]]]],[11,"new","","",10,[[["canisterstatustype",4],["option",4],["vec",3],["principalid",3],["numbytes",6]]]],[11,"status","","",10,[[],["canisterstatustype",4]]],[11,"module_hash","","",10,[[],[["vec",3],["option",4]]]],[11,"controller","","",10,[[],["principalid",3]]],[11,"memory_size","","",10,[[],["numbytes",6]]],[11,"cycles","","",10,[[]]],[11,"new","","",11,[[["option",4],["canisterstatustype",4],["option",4],["vec",3],["principalid",3],["numbytes",6]]]],[11,"status","","",11,[[],["canisterstatustype",4]]],[11,"module_hash","","",11,[[],[["vec",3],["option",4]]]],[11,"controller","","",11,[[],["principalid",3]]],[11,"memory_size","","",11,[[],["numbytes",6]]],[11,"cycles","","",11,[[]]],[11,"freezing_threshold","","",11,[[]]],[11,"new","","",0,[[["option",4],["canisterinstallmode",4],["canisterid",3],["vec",3]]]],[11,"get_canister_id","","",0,[[],["canisterid",3]]],[11,"encode","","",12,[[],["vec",3]]],[11,"decode","","",12,[[],[["error",4],["result",4]]]],[11,"get_canister_id","","",1,[[],["canisterid",3]]],[11,"encode","","",3,[[],["vec",3]]],[11,"decode","","",3,[[],[["result",4],["usererror",3]]]],[11,"new","","",13,[[["principalid",3],["canisterid",3]]]],[11,"get_canister_id","","",13,[[],["canisterid",3]]],[11,"get_new_controller","","",13,[[],["principalid",3]]],[11,"new","","",14,[[["nodeid",6],["registryversion",6],["vec",3]]]],[11,"get_set_of_node_ids","","",14,[[],[["result",4],["usererror",3],["btreeset",3]]]],[11,"get_registry_version","","",14,[[],["registryversion",6]]],[11,"encode","","",4,[[],["vec",3]]],[11,"decode","","",4,[[],[["result",4],["usererror",3]]]],[11,"new","","",5,[[["option",4]]]],[11,"to_u64","","",5,[[],["option",4]]],[11,"new","","",15,[[["canisterid",3]]]],[11,"to_u64","","",15,[[],["option",4]]],[11,"get_canister_id","","",15,[[],["canisterid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",8,[[["canisterid",3]]]],[11,"next_back","","",16,[[],["option",4]]],[11,"len","","",16,[[]]],[11,"next","","",16,[[],["option",4]]],[11,"size_hint","","",16,[[]]],[11,"nth","","",16,[[],["option",4]]],[11,"clone","","",16,[[],["methoditer",3]]],[11,"clone","","",6,[[],["method",4]]],[11,"clone","","",0,[[],["installcodeargs",3]]],[11,"clone","","",2,[[],["canistersettingsargs",3]]],[11,"clone","","",3,[[],["createcanisterargs",3]]],[11,"default","","",2,[[],["canistersettingsargs",3]]],[11,"default","","",3,[[],["createcanisterargs",3]]],[11,"eq","","",9,[[["definitecanistersettingsargs",3]]]],[11,"ne","","",9,[[["definitecanistersettingsargs",3]]]],[11,"eq","","",10,[[["canisterstatusresult",3]]]],[11,"ne","","",10,[[["canisterstatusresult",3]]]],[11,"eq","","",11,[[["canisterstatusresultv2",3]]]],[11,"ne","","",11,[[["canisterstatusresultv2",3]]]],[11,"to_string","","",6,[[],["string",3]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"from_str","","",6,[[],[["method",4],["result",4]]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"_ty","","",8,[[],["type",4]]],[11,"id","","",8,[[],["typeid",3]]],[11,"idl_serialize","","",8,[[],["result",4]]],[11,"_ty","","",9,[[],["type",4]]],[11,"id","","",9,[[],["typeid",3]]],[11,"idl_serialize","","",9,[[],["result",4]]],[11,"_ty","","",10,[[],["type",4]]],[11,"id","","",10,[[],["typeid",3]]],[11,"idl_serialize","","",10,[[],["result",4]]],[11,"_ty","","",11,[[],["type",4]]],[11,"id","","",11,[[],["typeid",3]]],[11,"idl_serialize","","",11,[[],["result",4]]],[11,"_ty","","",0,[[],["type",4]]],[11,"id","","",0,[[],["typeid",3]]],[11,"idl_serialize","","",0,[[],["result",4]]],[11,"_ty","","",12,[[],["type",4]]],[11,"id","","",12,[[],["typeid",3]]],[11,"idl_serialize","","",12,[[],["result",4]]],[11,"_ty","","",1,[[],["type",4]]],[11,"id","","",1,[[],["typeid",3]]],[11,"idl_serialize","","",1,[[],["result",4]]],[11,"_ty","","",2,[[],["type",4]]],[11,"id","","",2,[[],["typeid",3]]],[11,"idl_serialize","","",2,[[],["result",4]]],[11,"_ty","","",3,[[],["type",4]]],[11,"id","","",3,[[],["typeid",3]]],[11,"idl_serialize","","",3,[[],["result",4]]],[11,"_ty","","",13,[[],["type",4]]],[11,"id","","",13,[[],["typeid",3]]],[11,"idl_serialize","","",13,[[],["result",4]]],[11,"_ty","","",14,[[],["type",4]]],[11,"id","","",14,[[],["typeid",3]]],[11,"idl_serialize","","",14,[[],["result",4]]],[11,"_ty","","",5,[[],["type",4]]],[11,"id","","",5,[[],["typeid",3]]],[11,"idl_serialize","","",5,[[],["result",4]]],[11,"_ty","","",15,[[],["type",4]]],[11,"id","","",15,[[],["typeid",3]]],[11,"idl_serialize","","",15,[[],["result",4]]],[11,"iter","","",6,[[],["methoditer",3]]]],"p":[[3,"InstallCodeArgs"],[3,"UpdateSettingsArgs"],[3,"CanisterSettingsArgs"],[3,"CreateCanisterArgs"],[3,"SetupInitialDKGResponse"],[3,"ProvisionalCreateCanisterWithCyclesArgs"],[4,"Method"],[8,"Payload"],[3,"CanisterIdRecord"],[3,"DefiniteCanisterSettingsArgs"],[3,"CanisterStatusResult"],[3,"CanisterStatusResultV2"],[3,"EmptyBlob"],[3,"SetControllerArgs"],[3,"SetupInitialDKGArgs"],[3,"ProvisionalTopUpCanisterArgs"],[3,"MethodIter"]]},\
"ic_ingress_manager":{"doc":"The ingress manager crate implements the selection and…","i":[[3,"IngressManager","ic_ingress_manager","This struct is responsible for ingresses. It validates,…",null,null],[11,"new","","Constructs an IngressManager",0,[[["arc",3],["arc",3],["metricsregistry",3],["ingresshistoryreader",8],["ingresssigverifier",8],["replicalogger",6],["cyclesaccountmanager",3],["arc",3],["consensuspoolcache",8],["statemanager",8],["subnetid",6],["arc",3],["registryclient",8],["arc",3],["box",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"on_state_change","","",0,[[["ingresspool",8]],["changeset",6]]],[11,"get_ingress_payload","","",0,[[["validationcontext",3],["ingresssetquery",8],["ingresspoolselect",8]],["ingresspayload",3]]],[11,"validate_ingress_payload","","",0,[[["validationcontext",3],["ingresssetquery",8],["ingresspayload",3]],[["validationresult",6],["ingresspayloadvalidationerror",6]]]],[11,"request_purge_finalized_messages","","",0,[[["vec",3],["ingressmessageid",3]]]]],"p":[[3,"IngressManager"]]},\
"ic_interfaces":{"doc":"The public interfaces of the various components of the…","i":[[0,"artifact_manager","ic_interfaces","The artifact manager/client public interface.",null,null],[3,"AdvertMismatchError","ic_interfaces::artifact_manager","",null,null],[12,"received","","",0,null],[12,"expected","","",0,null],[4,"ArtifactAcceptance","","The result of a successful \'check_artifact_acceptance\'…",null,null],[13,"Processed","","",1,null],[13,"AcceptedForProcessing","","",1,null],[4,"OnArtifactError","","An error type that combines \'NotProcessed\' status with an…",null,null],[13,"NotProcessed","","",2,null],[13,"AdvertMismatch","","",2,null],[13,"ArtifactPoolError","","",2,null],[13,"MessageConversionfailed","","",2,null],[13,"Throttled","","",2,null],[4,"ProcessingResult","","The result of a single \'process_changes\' call can result…",null,null],[13,"StateChanged","","",3,null],[13,"StateUnchanged","","",3,null],[8,"ArtifactClient","","An abstraction of artifact processing for a sub-type of…",null,null],[10,"check_artifact_acceptance","","When a new artifact is received,…",4,[[["nodeid",6]],[["result",4],["artifactpoolerror",4],["artifactacceptance",4]]]],[10,"has_artifact","","Checks if the node already has the artifact in the pool by…",4,[[]]],[10,"get_validated_by_identifier","","Gets a validated artifact by its identifier. Return `None`…",4,[[],["option",4]]],[11,"get_filter","","Gets the filter that needs to be sent with re-transmission…",4,[[]]],[11,"get_all_validated_by_filter","","Get adverts of all validated artifacts by the filter. This…",4,[[],[["advert",3],["vec",3]]]],[11,"get_remaining_quota","","Return the remaining quota that this peer is allowed to…",4,[[["nodeid",6]]]],[10,"get_priority_function","","Return the priority function used by this client.",4,[[],[["priorityfn",6],["option",4]]]],[10,"get_chunk_tracker","","Get Chunk tracker for an advert. Download/Chunk trackers…",4,[[],[["box",3],["chunkable",8]]]],[8,"ArtifactProcessor","","An abstraction of processing changes for each artifact…",null,null],[10,"process_changes","","Process changes to the client\'s state, which includes but…",5,[[["timesource",8],["vec",3],["unvalidatedartifact",3]]]],[8,"ArtifactManager","","The Artifact Manager stores artifacts to be used by this…",null,null],[10,"on_artifact","","When a new artifact is received by Gossip, it is forwarded…",6,[[["nodeid",6],["artifact",4],["gossipadvert",3]],[["result",4],["onartifacterror",4]]]],[10,"has_artifact","","Checks if any of the ArtifactClient already has the…",6,[[["artifactid",4]]]],[10,"get_validated_by_identifier","","Return a validated artifact by its identifier, or `None`…",6,[[["artifactid",4]],[["box",3],["option",4]]]],[10,"get_filter","","Gets the filter that needs to be sent with re-transmission…",6,[[],["artifactfilter",3]]],[10,"get_all_validated_by_filter","","Get adverts of all validated artifacts by the filter from…",6,[[["artifactfilter",3]],[["vec",3],["gossipadvert",3]]]],[10,"get_remaining_quota","","Gets the remaining quota the given peer is allowed to…",6,[[["artifacttag",4],["nodeid",6]],["option",4]]],[10,"get_priority_function","","Return the priority function for a specific client that is…",6,[[["artifacttag",4]],[["option",4],["artifactpriorityfn",6]]]],[10,"get_chunk_tracker","","Get Chunk tracker for an advert.",6,[[["artifactid",4]],[["option",4],["box",3]]]],[0,"artifact_pool","ic_interfaces","The artifact pool public interface.",null,null],[3,"ReplicaVersionMismatch","ic_interfaces::artifact_pool","Describe expected version and artifact version when there…",null,null],[12,"expected","","",7,null],[12,"artifact","","",7,null],[3,"ValidatedArtifact","","Validated artifact",null,null],[12,"msg","","",8,null],[12,"timestamp","","",8,null],[3,"UnvalidatedArtifact","","Unvalidated artifact",null,null],[12,"message","","",9,null],[12,"peer_id","","",9,null],[12,"timestamp","","",9,null],[4,"ArtifactPoolError","","",null,null],[13,"InsufficientQuotaError","","Error if not enough quota for a peer in the unvalidated…",10,null],[13,"MessageExpired","","Message has expired.",10,null],[13,"MessageExpiryTooLong","","Message expiry is too far in the future.",10,null],[13,"ArtifactReplicaVersionError","","Error when artifact version is not accepted.",10,null],[13,"ArtifactRejected","","Error when artifact acceptance goes wrong.",10,null],[8,"IntoInner","","A trait similar to Into, but without its restrictions.",null,null],[10,"into_inner","","",11,[[]]],[8,"HasTimestamp","","A trait to get timestamp.",null,null],[10,"timestamp","","",12,[[],["time",3]]],[11,"map","","",8,[[],["validatedartifact",3]]],[0,"certification","ic_interfaces","The certification public interface.",null,null],[4,"ChangeAction","ic_interfaces::certification","Change actions applicable to the certification pool.",null,null],[13,"AddToValidated","","Adds the artifact to the validated pool.",13,null],[13,"MoveToValidated","","Moves an artifact from the unvalidated to the validated…",13,null],[13,"RemoveFromUnvalidated","","Removes an artifact from the unvalidated pool section.",13,null],[13,"RemoveAllBelow","","Removes all artifacts below the given height.",13,null],[13,"HandleInvalid","","This action marks an invalid artifact, e.g. if the…",13,null],[4,"CertificationPermanentError","","Enumeration of all permanent errors the verifier component…",null,null],[13,"CryptoError","","",14,null],[13,"UnexpectedCertificationHash","","",14,null],[13,"RejectedByRejectingVerifier","","",14,null],[4,"CertificationTransientError","","Enumeration of all transient errors the verifier component…",null,null],[13,"CryptoError","","",15,null],[6,"ChangeSet","","Contains all possible change actions applicable to the…",null,null],[6,"VerifierError","","",null,null],[8,"Certifier","","The certifier component is responsible for signing…",null,null],[10,"on_state_change","","Should be called on every change of the certification pool…",16,[[["consensuspoolcache",8],["arc",3],["rwlock",3]],["changeset",6]]],[8,"CertifierGossip","","Trait containing methods related to gossiping.",null,null],[10,"get_priority_function","","Return the priority function for the Gossip protocol to…",17,[[["consensuspoolcache",8],["certificationpool",8]],[["priorityfn",6],["certificationmessageid",3],["certificationmessageattribute",4]]]],[10,"get_filter","","Return a filter that represents what artifacts are needed.",17,[[],["certificationmessagefilter",3]]],[8,"CertificationPool","","Trait containing only immutable functions wrt.…",null,null],[10,"certification_at_height","","Returns the certification for the given height, if…",18,[[["height",6]],[["option",4],["certification",3]]]],[10,"shares_at_height","","Returns an iterator over all shares for the given height.",18,[[["height",6]],[["box",3],["iterator",8]]]],[10,"validated_shares","","Returns all validated certification shares.",18,[[],[["box",3],["iterator",8]]]],[10,"unvalidated_certifications_at_height","","Returns an iterator of all unvalidated full certification…",18,[[["height",6]],[["iterator",8],["box",3]]]],[10,"unvalidated_shares_at_height","","Returns an iterator of all unvalidated shares for the…",18,[[["height",6]],[["iterator",8],["box",3]]]],[10,"all_heights_with_artifacts","","Returns all heights (sorted, ascending), where at least a…",18,[[],[["vec",3],["height",6]]]],[10,"certified_heights","","Returns all heights which have a full validated…",18,[[],[["hashset",3],["height",6]]]],[8,"MutableCertificationPool","","Trait containing only mutable functions wrt. Certification…",null,null],[10,"insert","","Inserts a certification message into the unvalidated part…",19,[[["certificationmessage",4]]]],[10,"apply_changes","","Applies a set of change actions to the pool.",19,[[["changeset",6]]]],[8,"Verifier","","Verifier is used to verify state hash certifications. It…",null,null],[10,"validate","","This method verifies whether the given certification…",20,[[["certification",3],["subnetid",6],["registryversion",6]],[["verifiererror",6],["validationresult",6]]]],[0,"certified_stream_store","ic_interfaces","The certified stream store public interface.",null,null],[4,"EncodeStreamError","ic_interfaces::certified_stream_store","Describes errors that can happen when encoding a certified…",null,null],[13,"NoStreamForSubnet","","",21,null],[13,"InvalidSliceBegin","","",21,null],[12,"slice_begin","ic_interfaces::certified_stream_store::EncodeStreamError","",22,null],[12,"stream_begin","","",22,null],[12,"stream_end","","",22,null],[13,"InvalidSliceIndices","ic_interfaces::certified_stream_store","",21,null],[12,"witness_begin","ic_interfaces::certified_stream_store::EncodeStreamError","",23,null],[12,"msg_begin","","",23,null],[4,"DecodeStreamError","ic_interfaces::certified_stream_store","Describes errors that can happen when decoding a certified…",null,null],[13,"InvalidSignature","","",24,null],[13,"InvalidDestination","","",24,null],[12,"sender","ic_interfaces::certified_stream_store::DecodeStreamError","",25,null],[12,"receiver","","",25,null],[13,"SerializationError","ic_interfaces::certified_stream_store","",24,null],[8,"CertifiedStreamStore","","Responsible for fetching slices of certified streams and…",null,null],[10,"encode_certified_stream_slice","","Produces a certified slice of the stream for…",26,[[["subnetid",6],["streamindex",6],["option",4],["option",4]],[["certifiedstreamslice",3],["result",4],["encodestreamerror",4]]]],[10,"decode_certified_stream_slice","","Decode the certified stream slice of the stream coming…",26,[[["registryversion",6],["subnetid",6],["certifiedstreamslice",3]],[["decodestreamerror",4],["result",4],["streamslice",3]]]],[10,"decode_valid_certified_stream_slice","","Decodes the certified stream slice without performing any…",26,[[["certifiedstreamslice",3]],[["decodestreamerror",4],["result",4],["streamslice",3]]]],[10,"subnets_with_certified_streams","","Returns the list of subnet ids for which we have outgoing…",26,[[],[["subnetid",6],["vec",3]]]],[0,"consensus","ic_interfaces","The consensus public interface.",null,null],[4,"PayloadPermanentError","ic_interfaces::consensus","",null,null],[13,"XNetPayloadValidationError","","",27,null],[13,"IngressPayloadValidationError","","",27,null],[4,"PayloadTransientError","","",null,null],[13,"XNetPayloadValidationError","","",28,null],[13,"IngressPayloadValidationError","","",28,null],[6,"PayloadValidationError","","Payload validation error",null,null],[8,"Consensus","","Consensus artifact processing interface.",null,null],[10,"on_state_change","","Inspect the input [ConsensusPool] to build a [ChangeSet]…",29,[[["consensuspool",8],["ingresspoolselect",8]],["changeset",6]]],[8,"ConsensusGossip","","Consensus to gossip interface.",null,null],[10,"get_priority_function","","Return a priority function that matches the given…",30,[[["consensuspool",8]],[["consensusmessageid",3],["priorityfn",6],["consensusmessageattribute",4]]]],[10,"get_filter","","Return a filter that represents what artifacts are needed.",30,[[],["consensusmessagefilter",3]]],[0,"consensus_pool","ic_interfaces","The consensus pool public interface.",null,null],[3,"HeightRange","ic_interfaces::consensus_pool","",null,null],[12,"min","","",31,null],[12,"max","","",31,null],[3,"ChainIterator","","An iterator for block ancestors.",null,null],[4,"ChangeAction","","Change actions applicable to the consensus pool.",null,null],[13,"AddToValidated","","",32,null],[13,"MoveToValidated","","",32,null],[13,"RemoveFromValidated","","",32,null],[13,"RemoveFromUnvalidated","","",32,null],[13,"HandleInvalid","","",32,null],[13,"PurgeValidatedBelow","","",32,null],[13,"PurgeUnvalidatedBelow","","",32,null],[4,"OnlyError","","",null,null],[13,"NoneAvailable","","",33,null],[13,"MultipleValues","","",33,null],[6,"ChangeSet","","",null,null],[6,"ValidatedConsensusArtifact","","Validated consensus artifact.",null,null],[6,"UnvalidatedConsensusArtifact","","Unvalidated consensus artifact.",null,null],[8,"ChangeSetOperation","","A trait with common methods for change sets.",null,null],[10,"or_else","","Conditional composition when self is empty. Similar to…",34,[[["fnonce",8]]]],[10,"dedup_push","","Append a change action only when it is not a duplicate of…",34,[[["changeaction",4]],[["result",4],["changeaction",4]]]],[8,"PoolSection","","A Pool section is a part of the consensus pool which…",null,null],[10,"contains","","Checks if the artifact with the given Id is present in the…",35,[[["consensusmessageid",3]]]],[10,"get","","Lookup an artifact by ConsensusMessageId. Return the…",35,[[["consensusmessageid",3]],[["consensusmessage",4],["option",4]]]],[10,"get_timestamp","","Lookup the timestamp of an artifact by its…",35,[[["consensusmessageid",3]],[["time",3],["option",4]]]],[10,"random_beacon","","Return the HeightIndexedPool for RandomBeacon.",35,[[],["heightindexedpool",8]]],[10,"block_proposal","","Return the HeightIndexedPool for BlockProposal.",35,[[],["heightindexedpool",8]]],[10,"notarization","","Return the HeightIndexedPool for Notarization.",35,[[],["heightindexedpool",8]]],[10,"finalization","","Return the HeightIndexedPool for Finalization.",35,[[],["heightindexedpool",8]]],[10,"random_beacon_share","","Return the HeightIndexedPool for RandomBeaconShare.",35,[[],["heightindexedpool",8]]],[10,"notarization_share","","Return the HeightIndexedPool for NotarizationShare.",35,[[],["heightindexedpool",8]]],[10,"finalization_share","","Return the HeightIndexedPool for FinalizationShare.",35,[[],["heightindexedpool",8]]],[10,"random_tape","","Return the HeightIndexedPool for RandomTape.",35,[[],["heightindexedpool",8]]],[10,"random_tape_share","","Return the HeightIndexedPool for RandomTapeShare.",35,[[],["heightindexedpool",8]]],[10,"catch_up_package","","Return the HeightIndexedPool for CatchUpPackage.",35,[[],["heightindexedpool",8]]],[10,"catch_up_package_share","","Return the HeightIndexedPool for CatchUpPackageShare.",35,[[],["heightindexedpool",8]]],[11,"highest_catch_up_package_proto","","Return the HeightIndexedPool for CatchUpPackage in…",35,[[],["catchuppackage",3]]],[10,"size","","",35,[[]]],[8,"ConsensusPool","","The consensus pool contains all the artifacts received by…",null,null],[10,"validated","","Return a reference to the validated PoolSection.",36,[[],["poolsection",8]]],[10,"unvalidated","","Return a reference to the unvalidated PoolSection.",36,[[],["poolsection",8]]],[10,"as_cache","","Return a reference to the consensus cache…",36,[[],["consensuspoolcache",8]]],[8,"MutableConsensusPool","","Mutation operations on top of ConsensusPool.",null,null],[10,"insert","","Insert an unvalidated artifact.",37,[[["unvalidatedconsensusartifact",6]]]],[10,"apply_changes","","Apply the change set.",37,[[["timesource",8],["changeset",6]]]],[8,"HeightIndexedPool","","HeightIndexedPool provides a set of interfaces for the…",null,null],[10,"height_range","","Returns the height range of artifacts of type T currently…",38,[[],[["option",4],["heightrange",3]]]],[10,"max_height","","Returns the max height across all artifacts of type T…",38,[[],[["option",4],["height",6]]]],[10,"get_all","","Return an iterator over all of the artifacts of type T.",38,[[],[["box",3],["iterator",8]]]],[10,"get_by_height","","Return an iterator over the artifacts of type T at height…",38,[[["height",6]],[["box",3],["iterator",8]]]],[10,"get_by_height_range","","Return an iterator over the artifacts of type T in range…",38,[[["heightrange",3]],[["box",3],["iterator",8]]]],[10,"get_only_by_height","","Return a single instance of artifact of type T, at height…",38,[[["height",6]],[["onlyerror",4],["result",4]]]],[10,"get_highest","","Return a single instance of artifact of type T at the…",38,[[],[["onlyerror",4],["result",4]]]],[10,"get_highest_iter","","Return an iterator over instances of artifact of type T at…",38,[[],[["box",3],["iterator",8]]]],[8,"ConsensusPoolCache","","Reader of consensus related states.",null,null],[10,"finalized_block","","Return the latest/highest finalized block.",39,[[],["block",3]]],[10,"consensus_time","","Return the time as recorded in the latest/highest…",39,[[],[["time",3],["option",4]]]],[11,"catch_up_package","","Return the latest/highest CatchUpPackage.",39,[[],["catchuppackage",6]]],[10,"cup_with_protobuf","","Return the latest/highest CatchUpPackage together with its…",39,[[],["cupwithoriginalprotobuf",3]]],[10,"summary_block","","Return the latest/highest finalized block with DKG…",39,[[],["block",3]]],[11,"new","","",31,[[["height",6]],["heightrange",3]]],[11,"new","","Return an interator that iterates block acenstors, going…",40,[[["option",4],["consensuspool",8],["hashedblock",6],["block",3]]]],[0,"crypto","ic_interfaces","The crypto public interface.",null,null],[3,"CryptoHashableTestDummy","ic_interfaces::crypto","A helper struct for testing that implements…",null,null],[12,"0","","",41,null],[3,"SignableMock","","A helper struct for testing that implements `Signable`.",null,null],[12,"domain","","",42,null],[12,"signed_bytes_without_domain","","",42,null],[11,"new","","",42,[[["vec",3]]]],[17,"DOMAIN_IC_REQUEST","","The domain separator to be used when calculating the…",null,null],[8,"KeyManager","","Methods for checking and retrieving key material.",null,null],[10,"check_keys_with_registry","","Checks whether this crypto component is properly set up,…",43,[[["registryversion",6]],["cryptoresult",6]]],[10,"node_public_keys","","Returns node public keys that were read when this crypto…",43,[[],["nodepublickeys",3]]],[8,"Keygen","","Functions to generate key material.",null,null],[10,"generate_user_keys_ed25519","","Generates Ed25519 key material for an Internet Computer…",44,[[],[["result",4],["cryptoerror",4]]]],[10,"generate_committee_member_keys","","Generates key material for a member of a committee.",44,[[],[["result",4],["cryptoerror",4]]]],[8,"CryptoHashDomain","","A type that specifies a domain for a cryptographic hash.",null,null],[10,"domain","","Returns the domain separator used in cryptographic hashes.",45,[[],["string",3]]],[8,"CryptoHashable","","A cryptographically hashable type.",null,null],[8,"DkgAlgorithm","","The building blocks to perform distributed key generation…",null,null],[10,"generate_encryption_keys","","Generate an (ephemeral) encryption key pair, store the…",46,[[["nodeid",6],["config",3]],[["encryptionpublickeywithpop",3],["cryptoresult",6]]]],[10,"verify_encryption_public_key","","Verify an (ephemeral) public encryption key and its proof…",46,[[["encryptionpublickeywithpop",3],["nodeid",6],["config",3]],["cryptoresult",6]]],[10,"create_dealing","","Create a dealing.",46,[[["btreemap",3],["nodeid",6],["config",3]],[["cryptoresult",6],["dealing",3]]]],[10,"verify_dealing","","Verify a dealing.",46,[[["config",3],["btreemap",3],["nodeid",6],["dealing",3]],["cryptoresult",6]]],[10,"create_response","","Create a response.",46,[[["config",3],["btreemap",3],["btreemap",3],["nodeid",6]],[["response",3],["cryptoresult",6]]]],[10,"verify_response","","Verify a response.",46,[[["response",3],["config",3],["btreemap",3],["btreemap",3],["nodeid",6]],["cryptoresult",6]]],[10,"create_transcript","","Combine the given dealings into a transcript.",46,[[["config",3],["btreemap",3],["btreemap",3],["btreemap",3]],[["cryptoresult",6],["transcript",3]]]],[10,"load_transcript","","Load the given transcript. This ensures that * the…",46,[[["nodeid",6],["transcript",3]],["cryptoresult",6]]],[8,"NiDkgAlgorithm","","The building blocks to perform non-interactive distributed…",null,null],[10,"create_dealing","","Creates a non-interactive DKG dealing.",47,[[["nidkgconfig",3]],[["result",4],["nidkgdealing",3],["dkgcreatedealingerror",4]]]],[10,"verify_dealing","","Verifies a non-interactive DKG dealing.",47,[[["nidkgdealing",3],["nodeid",6],["nidkgconfig",3]],[["result",4],["dkgverifydealingerror",4]]]],[10,"create_transcript","","Combines the dealings into a transcript.",47,[[["btreemap",3],["nidkgconfig",3]],[["nidkgtranscript",3],["result",4],["dkgcreatetranscripterror",4]]]],[10,"load_transcript","","Loads the transcript. This ensures that * the (group\'s)…",47,[[["nidkgtranscript",3]],[["result",4],["dkgloadtranscripterror",4]]]],[10,"retain_only_active_keys","","Retains only keys for the given `transcripts`.",47,[[["nidkgtranscript",3],["hashset",3]],[["dkgkeyremovalerror",4],["result",4]]]],[8,"BasicSigVerifier","","A Crypto Component interface to verify basic signatures.",null,null],[10,"verify_basic_sig","","Verifies a basic signature.",48,[[["basicsigof",6],["registryversion",6],["nodeid",6]],["cryptoresult",6]]],[8,"BasicSigVerifierByPublicKey","","A Crypto Component interface to verify basic signatures by…",null,null],[10,"verify_basic_sig_by_public_key","","Verifies a basic signature using the given `public_key`.",49,[[["basicsigof",6],["userpublickey",3]],["cryptoresult",6]]],[8,"BasicSigner","","A Crypto Component interface to create basic signatures.",null,null],[10,"sign_basic","","Creates a basic signature.",50,[[["registryversion",6],["nodeid",6]],[["basicsigof",6],["cryptoresult",6]]]],[8,"CanisterSigVerifier","","A Crypto Component interface to verify (ICCSA) canister…",null,null],[10,"verify_canister_sig","","Verifies an ICCSA canister signature.",51,[[["canistersigof",6],["registryversion",6],["userpublickey",3]],["cryptoresult",6]]],[8,"IngressSigVerifier","","A Crypto Component interface to verify ingress messages.",null,null],[8,"MultiSigVerifier","","A Crypto Component interface to verify and combine…",null,null],[10,"verify_multi_sig_individual","","Verifies an individual multi-signature.",52,[[["individualmultisigof",6],["registryversion",6],["nodeid",6]],["cryptoresult",6]]],[10,"combine_multi_sig_individuals","","Combines individual multi-signature shares.",52,[[["registryversion",6],["individualmultisigof",6],["btreemap",3],["nodeid",6]],[["combinedmultisigof",6],["cryptoresult",6]]]],[10,"verify_multi_sig_combined","","Verifies a combined multi-signature.",52,[[["combinedmultisigof",6],["registryversion",6],["btreeset",3],["nodeid",6]],["cryptoresult",6]]],[8,"MultiSigner","","A Crypto Component interface to create multi-signatures.",null,null],[10,"sign_multi","","Creates an individual multi-signature.",53,[[["registryversion",6],["nodeid",6]],[["cryptoresult",6],["individualmultisigof",6]]]],[8,"ThresholdSigVerifier","","A Crypto Component interface to verify threshold signatures.",null,null],[10,"verify_threshold_sig_share","","Verifies a threshold signature share.",54,[[["thresholdsigshareof",6],["dkgid",4],["nodeid",6]],["cryptoresult",6]]],[10,"combine_threshold_sig_shares","","Combines the given threshold signature `shares`.",54,[[["btreemap",3],["thresholdsigshareof",6],["nodeid",6],["dkgid",4]],[["cryptoresult",6],["combinedthresholdsigof",6]]]],[10,"verify_threshold_sig_combined","","Verifies a combined threshold signature.",54,[[["dkgid",4],["combinedthresholdsigof",6]],["cryptoresult",6]]],[8,"ThresholdSigVerifierByPublicKey","","A Crypto Component interface to verify threshold…",null,null],[10,"verify_combined_threshold_sig_by_public_key","","Verifies a combined threshold signature using a subnet\'s…",55,[[["registryversion",6],["subnetid",6],["combinedthresholdsigof",6]],["cryptoresult",6]]],[8,"ThresholdSigner","","A Crypto Component interface to create threshold signature…",null,null],[10,"sign_threshold","","Creates a threshold signature share.",56,[[["dkgid",4]],[["thresholdsigshareof",6],["cryptoresult",6]]]],[8,"Signable","","`Signable` represents an object whose byte-vector…",null,null],[10,"as_signed_bytes","","Returns a byte-vector that is used as input for…",57,[[],["vec",3]]],[8,"Crypto","","The functionality offered by the crypto component",null,null],[8,"ErrorReplication","","A classifier for errors returned by the crypto component.…",null,null],[10,"is_replicated","","",58,[[]]],[0,"dkg","ic_interfaces","The DKG public interface.",null,null],[4,"ChangeAction","ic_interfaces::dkg","Various actions that can be perfomed in DKG.",null,null],[13,"AddToValidated","","",59,null],[13,"MoveToValidated","","",59,null],[13,"HandleInvalid","","",59,null],[13,"Purge","","",59,null],[6,"ChangeSet","","",null,null],[8,"Dkg","","An interface for distributed key generation.",null,null],[10,"on_state_change","","",60,[[["dkgpool",8]],["changeset",6]]],[8,"DkgGossip","","Methods related to gossiping DKG.",null,null],[10,"get_priority_function","","",61,[[["dkgpool",8]],[["priorityfn",6],["dkgmessageid",6],["dkgmessageattribute",3]]]],[8,"DkgPool","","The DkgPool is used to store messages that are exchanged…",null,null],[10,"get_validated","","",62,[[],[["box",3],["iterator",8]]]],[10,"get_validated_older_than","","Returns the validated entries older than the age threshold",62,[[["duration",3]],[["box",3],["iterator",8]]]],[10,"get_unvalidated","","",62,[[],[["box",3],["iterator",8]]]],[10,"get_current_start_height","","The start height of the currently computed DKG interval;…",62,[[],["height",6]]],[10,"validated_contains","","Checks if the message is present in the validated section.",62,[[["message",6]]]],[8,"MutableDkgPool","","Trait containing only mutable functions wrt. DkgPool",null,null],[10,"insert","","Inserts a dkg message into the unvalidated part of the pool.",63,[[["message",6],["unvalidatedartifact",3]]]],[10,"apply_changes","","Applies a set of change actions to the pool.",63,[[["changeset",6]]]],[0,"execution_environment","ic_interfaces","The execution environment public interface.",null,null],[3,"InstanceStats","ic_interfaces::execution_environment","Instance execution statistics. The stats are cumulative…",null,null],[12,"accessed_pages","","Total number of (host) pages accessed (read or written) by…",64,null],[12,"dirty_pages","","Total number of (host) pages modified by the instance. By…",64,null],[3,"SubnetAvailableMemory","","This struct is used to manage the view of the current…",null,null],[3,"ExecuteMessageResult","","The data structure returned by…",null,null],[12,"canister","","The `CanisterState` after message execution",65,null],[12,"num_instructions_left","","The amount of instructions left after message execution.…",65,null],[12,"ingress_status","","Optional status for an Ingress message if available.",65,null],[12,"heap_delta","","The size of the heap delta the canister produced",65,null],[3,"ExecResult","","Generic async result of an execution.",null,null],[3,"EarlyResult","","Sync result implementing async interface.",null,null],[4,"CanisterHeartbeatError","","Errors when executing `canister_heartbeat`.",null,null],[13,"CanisterNotRunning","","The canister isn\'t running.",66,null],[12,"status","ic_interfaces::execution_environment::CanisterHeartbeatError","",67,null],[13,"NotSystemSubnet","ic_interfaces::execution_environment","The subnet type isn\'t a system subnet.",66,null],[12,"subnet_type_given","ic_interfaces::execution_environment::CanisterHeartbeatError","",68,null],[13,"OutOfCycles","ic_interfaces::execution_environment","",66,null],[13,"CanisterExecutionFailed","","Execution failed while executing the `canister_heartbeat`.",66,null],[4,"MessageAcceptanceError","","Different types of errors that can be returned from the…",null,null],[13,"CanisterNotFound","","The canister that the message is destined for was not…",69,null],[13,"CanisterHasNoWasmModule","","The canister that the message is destined for does not…",69,null],[13,"CanisterRejected","","The canister explicitly rejected the message.",69,null],[13,"CanisterOutOfCycles","","The canister doesn\'t have enough cycles to execute the…",69,null],[13,"CanisterExecutionFailed","","The canister experienced a failure while executing the…",69,null],[4,"HypervisorError","","Errors returned by the Hypervisor.",null,null],[13,"FunctionNotFound","","The message sent to the canister refers a function not…",70,null],[13,"MethodNotFound","","The message sent to the canister refers to a method that…",70,null],[13,"ContractViolation","","System API contract was violated. They payload contains a…",70,null],[13,"OutOfInstructions","","Wasm execution consumed too many instructions.",70,null],[13,"InvalidWasm","","We could not validate the wasm module",70,null],[13,"InstrumentationFailed","","We could not instrument the wasm module",70,null],[13,"Trapped","","Canister Wasm trapped (e.g. by executing the `unreachable`…",70,null],[13,"CalledTrap","","Canister explicitly called `ic.trap`.",70,null],[13,"WasmModuleNotFound","","An attempt was made to execute a message on a canister…",70,null],[13,"OutOfMemory","","An attempt was made to grow the canister\'s memory above…",70,null],[13,"CanisterStopped","","An attempt to perform an operation that isn\'t allowed when…",70,null],[13,"CanisterExec","","Canister performed an \'exec\' system call. Strictly…",70,null],[13,"InsufficientCyclesInCall","","An attempt was made to use more cycles than was available…",70,null],[12,"available","ic_interfaces::execution_environment::HypervisorError","",71,null],[12,"requested","","",71,null],[13,"InvalidPrincipalId","ic_interfaces::execution_environment","The principal ID specified by the canister is invalid.",70,null],[13,"InvalidCanisterId","","The canister ID specified by the canister is invalid.",70,null],[13,"MessageRejected","","The canister rejected the message.",70,null],[13,"InsufficientCyclesBalance","","An attempt was made to add more cycles to an outgoing call…",70,null],[12,"available","ic_interfaces::execution_environment::HypervisorError","",72,null],[12,"requested","","",72,null],[13,"Cleanup","ic_interfaces::execution_environment","",70,null],[12,"callback_err","ic_interfaces::execution_environment::HypervisorError","",73,null],[12,"cleanup_err","","",73,null],[4,"TrapCode","ic_interfaces::execution_environment","Various traps that a canister can create.",null,null],[13,"StackOverflow","","",74,null],[13,"HeapOutOfBounds","","",74,null],[13,"StableMemoryOutOfBounds","","",74,null],[13,"IntegerDivByZero","","",74,null],[13,"Unreachable","","",74,null],[13,"TableOutOfBounds","","",74,null],[13,"Other","","",74,null],[4,"SubnetAvailableMemoryError","","Errors that can be returned when fetching the available…",null,null],[13,"InsufficientMemory","","",75,null],[12,"requested","ic_interfaces::execution_environment::SubnetAvailableMemoryError","",76,null],[12,"available","","",76,null],[4,"TrySelect","ic_interfaces::execution_environment","An underlying struct/helper for implementing select() on…",null,null],[13,"EarlyResult","","",77,null],[13,"Channel","","",77,null],[4,"ExecResultVariant","","An execution can finish successfully or get interrupted…",null,null],[13,"Completed","","",78,null],[13,"Interrupted","","",78,null],[4,"IngressHistoryError","","Errors that can be returned when reading/writing from/to…",null,null],[13,"StateRemoved","","",79,null],[13,"StateNotAvailableYet","","",79,null],[11,"into_user_error","","",70,[[["canisterid",3]],["usererror",3]]],[6,"HypervisorResult","","",null,null],[8,"ExecutionEnvironment","","ExecutionEnvironment is the component responsible for…",null,null],[16,"State","","Type modelling the replicated state.",80,null],[16,"CanisterState","","Type modelling the canister state.",80,null],[10,"execute_subnet_message","","Executes a message sent to a subnet.",80,[[["numinstructions",6],["provisionalwhitelist",4],["rngcore",8],["subnetavailablememory",3],["canisterinputmessage",4]]]],[10,"execute_canister_message","","Executes a message sent to a canister.",80,[[["numinstructions",6],["routingtable",3],["arc",3],["arc",3],["btreemap",3],["time",3],["subnetavailablememory",3],["canisterinputmessage",4]],[["execresult",3],["executemessageresult",3]]]],[10,"should_accept_ingress_message","","Asks the canister if it is willing to accept the provided…",80,[[["signedingresscontent",3],["arc",3],["provisionalwhitelist",4]],[["messageacceptanceerror",4],["result",4]]]],[10,"execute_canister_heartbeat","","Executes a heartbeat of a given canister.",80,[[["numinstructions",6],["routingtable",3],["arc",3],["arc",3],["time",3],["btreemap",3],["subnetavailablememory",3]],["execresult",3]]],[10,"subnet_available_memory","","Look up the current amount of memory available on the…",80,[[],["numbytes",6]]],[8,"AsyncResult","","An async result which allows for sync wait and select.",null,null],[10,"get","","",81,[[["box",3]],["execresultvariant",4]]],[10,"try_select","","",81,[[["box",3]],["tryselect",4]]],[8,"InterruptedExec","","Interrupted execution. Can be resumed or canceled.",null,null],[10,"resume","","",82,[[["numinstructions",6],["box",3]],["execresult",3]]],[10,"cancel","","",82,[[["box",3]],["execresult",3]]],[8,"QueryHandler","","Interface for the component to execute queries on…",null,null],[16,"State","","Type of state managed by StateReader.",83,null],[10,"query","","Handle a query of type `UserQuery` which was sent by an…",83,[[["arc",3],["vec",3],["userquery",3]],[["usererror",3],["result",4],["wasmresult",4]]]],[8,"IngressHistoryReader","","Interface for reading the history of ingress messages.",null,null],[10,"get_latest_status","","Returns a function that can be used to query the status…",84,[[],[["fn",8],["box",3]]]],[10,"get_status_at_height","","Return a function that can be used to query the status for…",84,[[["height",6]],[["result",4],["ingresshistoryerror",4],["box",3]]]],[8,"IngressHistoryWriter","","Interface for updating the history of ingress messages.",null,null],[16,"State","","Type of state this Writer can update.",85,null],[10,"set_status","","Allows to set status on a message.",85,[[["messageid",3],["ingressstatus",4]]]],[8,"SystemApi","","A trait for providing all necessary imports to a Wasm…",null,null],[10,"set_execution_error","","Stores the execution error, so that the user can evaluate…",86,[[["hypervisorerror",4]]]],[10,"get_execution_error","","Returns the reference to the execution error.",86,[[],[["hypervisorerror",4],["option",4]]]],[10,"get_available_num_instructions","","Returns the amount of available instructions.",86,[[],["numinstructions",6]]],[10,"get_stable_memory_delta_pages","","Returns the stable memory delta that the canister produced",86,[[]]],[10,"set_available_num_instructions","","Sets the amount of available instructions.",86,[[["numinstructions",6]]]],[10,"ic0_msg_caller_copy","","Copies `size` bytes starting from `offset` inside the…",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_caller_size","","Returns the size of the opaque caller blob.",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_arg_data_size","","Returns the size of msg.payload.",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_arg_data_copy","","Copies `length` bytes from…",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_method_name_size","","Used to look up the size of the method_name that the…",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_method_name_copy","","Used to copy the method_name that the message wants to…",86,[[],["hypervisorresult",6]]],[10,"ic0_accept_message","","",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_reply_data_append","","Copies the data referred to by src/size out of the…",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_reply","","Replies to the sender with the data assembled using…",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_reject_code","","Returns the reject code, if the current function is…",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_reject","","Replies to sender with an error message",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_reject_msg_size","","Returns the length of the reject message in bytes.",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_reject_msg_copy","","Copies length bytes from…",86,[[],["hypervisorresult",6]]],[10,"ic0_canister_self_size","","Returns the size of the blob corresponding to the id of…",86,[[],["hypervisorresult",6]]],[10,"ic0_canister_self_copy","","Copies `size` bytes starting from `offset` in the id blob…",86,[[],["hypervisorresult",6]]],[10,"ic0_controller_size","","Returns the size of the blob corresponding to the id of…",86,[[],["hypervisorresult",6]]],[10,"ic0_controller_copy","","Copies `size` bytes starting from `offset` in the id blob…",86,[[],["hypervisorresult",6]]],[10,"ic0_debug_print","","Outputs the specified bytes on the heap as a string on…",86,[[]]],[10,"ic0_exec","","Just like `exec` in C replaces the current process with a…",86,[[["vec",3]],["hypervisorerror",4]]],[10,"ic0_trap","","Traps, with a possibly helpful message",86,[[],["hypervisorerror",4]]],[10,"ic0_call_simple","","Creates a pending inter-canister message that will be…",86,[[],["hypervisorresult",6]]],[10,"ic0_call_new","","Begins assembling a call to the canister specified by…",86,[[],["hypervisorresult",6]]],[10,"ic0_call_data_append","","Appends the specified bytes to the argument of the call.…",86,[[],["hypervisorresult",6]]],[10,"ic0_call_on_cleanup","","Specifies the closure to be called if the reply/reject…",86,[[],["hypervisorresult",6]]],[10,"ic0_call_cycles_add","","Adds cycles to a call by moving them from the canister\'s…",86,[[],["hypervisorresult",6]]],[10,"ic0_call_perform","","This call concludes assembling the call. It queues the…",86,[[],["hypervisorresult",6]]],[10,"ic0_stable_size","","Returns the current size of the stable memory in…",86,[[],["hypervisorresult",6]]],[10,"ic0_stable_grow","","Tries to grow the stable memory by additional_pages many…",86,[[],["hypervisorresult",6]]],[10,"ic0_stable_read","","Copies the data referred to by offset/size out of the…",86,[[],["hypervisorresult",6]]],[10,"ic0_stable_write","","Copies the data referred to by src/size out of the…",86,[[],["hypervisorresult",6]]],[10,"ic0_time","","",86,[[],[["hypervisorresult",6],["time",3]]]],[10,"out_of_instructions","","This system call is not part of the public spec and used…",86,[[],[["hypervisorresult",6],["numinstructions",6]]]],[10,"update_available_memory","","This system call is not part of the public spec. It\'s…",86,[[],["hypervisorresult",6]]],[10,"ic0_canister_cycle_balance","","Returns the current balance in cycles.",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_cycles_available","","Cycles sent in the current call and still available.",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_cycles_refunded","","Cycles that came back with the response, as a refund.",86,[[],["hypervisorresult",6]]],[10,"ic0_msg_cycles_accept","","This moves cycles from the call to the canister balance.…",86,[[],["hypervisorresult",6]]],[10,"ic0_certified_data_set","","Sets the certified data for the canister. See:…",86,[[],["hypervisorresult",6]]],[10,"ic0_data_certificate_present","","If run in non-replicated execution (i.e. query), returns 1…",86,[[],["hypervisorresult",6]]],[10,"ic0_data_certificate_size","","Returns the size of the data certificate if it is present…",86,[[],["hypervisorresult",6]]],[10,"ic0_data_certificate_copy","","Copies the data certificate into the heap if it is present…",86,[[],["hypervisorresult",6]]],[10,"ic0_canister_status","","Returns the current status of the canister. `1` indicates…",86,[[],["hypervisorresult",6]]],[10,"ic0_mint_cycles","","Mints the `amount` cycles Adds cycles to the canister\'s…",86,[[],["hypervisorresult",6]]],[11,"new","","",87,[[["numbytes",6]]]],[11,"try_decrement","","Try to use some memory capacity and fail if not enough is…",87,[[["numbytes",6]],[["subnetavailablememoryerror",4],["result",4]]]],[11,"and_then","","Add post-processing on the output received after…",82,[[["box",3],["fnonce",8]],[["interruptedexec",8],["box",3]]]],[11,"new","","",88,[[["box",3],["asyncresult",8]]]],[11,"get","","Wait for the result",88,[[],["execresultvariant",4]]],[11,"get_no_pause","","Wait for the final result without allowing for a pause. If…",88,[[]]],[11,"try_select","","This function allows to extract an underlying channel to…",88,[[],["tryselect",4]]],[11,"and_then","","Add post-processing on the result.",88,[[["fnonce",8]],["execresult",3]]],[11,"new","","",89,[[],["execresult",3]]],[0,"gossip_pool","ic_interfaces","The gossip pool public interface.",null,null],[8,"GossipPool","ic_interfaces::gossip_pool","GossipPool trait is the generic interface used by…",null,null],[16,"MessageId","","",90,null],[16,"Filter","","",90,null],[11,"check_quota","","Check if an unvalidated artifact can be inserted into the…",90,[[["nodeid",6]],[["artifactpoolerror",4],["result",4]]]],[10,"contains","","Check if an artifact exists by its Id.",90,[[]]],[10,"get_validated_by_identifier","","Get a validated artifact by its identifier",90,[[],["option",4]]],[10,"get_all_validated_by_filter","","Get all validated artifacts by the filter See…",90,[[],[["box",3],["iterator",8]]]],[8,"ConsensusGossipPool","","GossipPool trait for ConsensusPool",null,null],[8,"IngressGossipPool","","GossipPool trait for IngressPool",null,null],[8,"CertificationGossipPool","","GossipPool trait for CertificationPool",null,null],[8,"DkgGossipPool","","GossipPool trait for DkgPool",null,null],[0,"ingress_manager","ic_interfaces","The ingress manager public interface.",null,null],[4,"IngressPermanentError","ic_interfaces::ingress_manager","Permanent errors returned by the Ingress Selector.",null,null],[13,"CryptoError","","",91,null],[13,"StateManagerError","","",91,null],[13,"IngressValidationError","","",91,null],[13,"IngressBucketError","","",91,null],[13,"IngressHistoryError","","",91,null],[13,"IngressPayloadError","","",91,null],[13,"IngressExpired","","",91,null],[13,"IngressMessageTooBig","","",91,null],[13,"IngressPayloadTooBig","","",91,null],[13,"IngressPayloadTooManyMessages","","",91,null],[13,"DuplicatedIngressMessage","","",91,null],[13,"InsufficientCycles","","",91,null],[13,"CanisterNotFound","","",91,null],[13,"InvalidManagementMessage","","",91,null],[4,"IngressTransientError","","Transient errors returned by the Ingress Selector.",null,null],[13,"CryptoError","","",92,null],[13,"StateManagerError","","",92,null],[6,"IngressPayloadValidationError","","",null,null],[8,"IngressSetQuery","","An generic interface that allows checking ingress existence.",null,null],[10,"contains","","Return True if the given msg_id exists in the set.",93,[[["ingressmessageid",3]]]],[10,"get_expiry_lower_bound","","Return the lower bound of expiry time that this set covers.",93,[[],["time",3]]],[8,"IngressHandler","","Processes Ingress messages received from peers or…",null,null],[10,"on_state_change","","Inspect the input [IngressPool] to build a [ChangeSet] of…",94,[[["ingresspool",8]],["changeset",6]]],[8,"IngressSelector","","A component used by Consensus to build and validate a…",null,null],[10,"get_ingress_payload","","Returns a new ingress payload containing valid Signed…",95,[[["ingresspoolselect",8],["validationcontext",3],["ingresssetquery",8]],["ingresspayload",3]]],[10,"validate_ingress_payload","","Validates an IngressPayload against the past payloads and…",95,[[["ingresspayload",3],["ingresssetquery",8],["validationcontext",3]],[["validationresult",6],["ingresspayloadvalidationerror",6]]]],[10,"request_purge_finalized_messages","","Request purge of the given ingress messages from the pool…",95,[[["vec",3],["ingressmessageid",3]]]],[0,"ingress_pool","ic_interfaces","The ingress pool public interface.",null,null],[3,"IngressPoolObject","ic_interfaces::ingress_pool","IngressObject is the format stored in the…",null,null],[12,"signed_ingress","","The received ingress message",96,null],[12,"message_id","","The MessageId of the RawIngress message",96,null],[4,"ChangeAction","","Change actions applicable to the ingress pool.",null,null],[13,"MoveToValidated","","Moves an artifact from the unvalidated to validated…",97,null],[13,"RemoveFromUnvalidated","","Removes an artifact from the unvalidated pool section.",97,null],[13,"RemoveFromValidated","","Removes an artifact from the validated pool section.",97,null],[13,"PurgeBelowExpiry","","Remove expired artifact from both pools.",97,null],[4,"SelectResult","","Indicate whether something should be selected, and whether…",null,null],[13,"Selected","","",98,null],[13,"Skip","","",98,null],[13,"Abort","","",98,null],[6,"ValidatedIngressArtifact","","Validated ingress artifact",null,null],[6,"UnvalidatedIngressArtifact","","Unvalidated ingress artifact",null,null],[6,"ChangeSet","","Change set for processing unvalidated ingress messages",null,null],[6,"IngressChangeArtifact","","",null,null],[8,"PoolSection","","A Pool section is a part of the ingress pool which…",null,null],[10,"get","","Lookup an artifact by the id. Return the ingress message…",99,[[["ingressmessageid",3]],["option",4]]],[10,"get_all_by_expiry_range","","Get reference to all artifacts",99,[[["rangeinclusive",3],["time",3]],[["box",3],["iterator",8]]]],[10,"get_timestamp","","Lookup the timestamp of an artifact by its id.",99,[[["ingressmessageid",3]],[["time",3],["option",4]]]],[10,"size","","Get the number of artifacts in the pool.",99,[[]]],[8,"IngressPool","","The ingress pool contains all the ingress artifacts…",null,null],[10,"validated","","Validated Ingress Pool Section",100,[[],["poolsection",8]]],[10,"unvalidated","","Unvalidated Ingress Pool Section",100,[[],["poolsection",8]]],[8,"MutableIngressPool","","Mutable operations on top of IngressPool.",null,null],[10,"insert","","Insert an unvalidated artifact.",101,[[["unvalidatedartifact",3],["signedingress",3]]]],[10,"apply_changeset","","Apply the change set.",101,[[["changeset",6]]]],[8,"IngressPoolSelect","","A query interface that selects qualifying artifacts from…",null,null],[10,"select_validated","","Select qualifying objects from the validated pool.",102,[[["rangeinclusive",3],["time",3],["box",3],["fnmut",8]],[["signedingress",3],["vec",3]]]],[8,"IngressPoolThrottler","","Interface to throttle user ingress messages",null,null],[10,"exceeds_threshold","","Checks if the total number of entries is within the…",103,[[]]],[0,"messages","ic_interfaces","Messages used in various components.",null,null],[4,"CanisterInputMessage","ic_interfaces::messages","A wrapper around ingress messages and canister…",null,null],[13,"Response","","",104,null],[13,"Request","","",104,null],[13,"Ingress","","",104,null],[4,"RequestOrIngress","","A wrapper around a canister request and an ingress message.",null,null],[13,"Request","","",105,null],[13,"Ingress","","",105,null],[11,"sender","","",105,[[],["principalid",3]]],[11,"method_payload","","",105,[[]]],[11,"method_name","","",105,[[]]],[11,"take_funds","","Extracts the funds received with this message.",105,[[],["funds",3]]],[0,"messaging","ic_interfaces","Message Routing public interfaces.",null,null],[4,"MessageRoutingError","ic_interfaces::messaging","Errors that `MessageRouting` may return.",null,null],[13,"QueueIsFull","","The batch was not delivered because the batch queue is full.",106,null],[13,"Ignored","","The batch is ignored because its number is not the one we…",106,null],[12,"expected_height","ic_interfaces::messaging::MessageRoutingError","",107,null],[12,"actual_height","","",107,null],[4,"InvalidXNetPayload","ic_interfaces::messaging","XNet payload validation error details.",null,null],[13,"InvalidSlice","","",108,null],[13,"StateRemoved","","",108,null],[4,"XNetTransientValidationError","","",null,null],[13,"StateNotCommittedYet","","",109,null],[4,"XNetPayloadError","","Possible errors in making XNetPayload.",null,null],[13,"Pending","","Payload making has started, but the result is not ready yet.",110,null],[6,"XNetPayloadValidationError","","",null,null],[8,"MessageRouting","","The public interface for the MessageRouting layer.",null,null],[10,"deliver_batch","","Delivers a finalized `Batch` for deterministic processing.",111,[[["batch",3]],[["messageroutingerror",4],["result",4]]]],[10,"expected_batch_height","","Returns the height of the next expected batch.",111,[[],["height",6]]],[8,"XNetPayloadBuilder","","Interface for selecting `Streams` for inclusion into a…",null,null],[10,"get_xnet_payload","","Produces an `XNetPayload` of maximum byte size…",112,[[["numbytes",6],["height",6],["validationcontext",3]],[["xnetpayloaderror",4],["result",4],["xnetpayload",3]]]],[10,"validate_xnet_payload","","Checks whether the provided `XNetPayload` is valid given a…",112,[[["xnetpayload",3],["validationcontext",3],["numbytes",6]],[["validationresult",6],["xnetpayloadvalidationerror",6]]]],[0,"p2p","ic_interfaces","The P2P public interface.",null,null],[8,"IngressEventHandler","ic_interfaces::p2p","This is an event handler that can be used to submit an…",null,null],[10,"on_ingress_message","","The method is called when an ingress message is received.",113,[[["signedingress",3]],[["onartifacterror",4],["result",4]]]],[8,"P2PRunner","","P2P exposes channels that are used to hold artifacts sent…",null,null],[10,"run","","The method starts the execution of the `P2PRunner`.",114,[[]]],[0,"registry","ic_interfaces","The registry public interface.",null,null],[8,"RegistryValue","ic_interfaces::registry","A Protocol Buffers message.",null,null],[10,"encoded_len","","Returns the encoded length of the message without a length…",115,[[]]],[11,"encode","","Encodes the message to a buffer.",115,[[],[["encodeerror",3],["result",4]]]],[11,"encode_length_delimited","","Encodes the message with a length-delimiter to a buffer.",115,[[],[["encodeerror",3],["result",4]]]],[11,"decode","","Decodes an instance of the message from a buffer.",115,[[],[["result",4],["decodeerror",3]]]],[11,"decode_length_delimited","","Decodes a length-delimited instance of the message from…",115,[[],[["result",4],["decodeerror",3]]]],[11,"merge","","Decodes an instance of the message from a buffer, and…",115,[[],[["decodeerror",3],["result",4]]]],[11,"merge_length_delimited","","Decodes a length-delimited instance of the message from…",115,[[],[["decodeerror",3],["result",4]]]],[10,"clear","","Clears the message, resetting all fields to their default.",115,[[]]],[24,"RegistryValue","","",null,null],[3,"RegistryVersionedRecord","","A versioned (Key, Value) pair returned from the registry.",null,null],[12,"key","","The key of the record.",116,null],[12,"version","","The version at which this record was added to the…",116,null],[12,"value","","The value of this record. `None` means the value was…",116,null],[5,"empty_zero_registry_record","","",null,[[],["registrytransportrecord",6]]],[6,"RegistryClientVersionedResult","","Result returns when fetching a versioned value from the…",null,null],[6,"RegistryClientResult","","Result returns when fetching a value from the registry.",null,null],[6,"RegistryTransportRecord","","A RegistryRecord represents a versioned k/v-pair as stored…",null,null],[17,"ZERO_REGISTRY_VERSION","","The registry at version `0` is the empty registry.",null,null],[8,"RegistryClient","","The RegistryClient provides methods to query the local…",null,null],[10,"get_versioned_value","","The following holds:",117,[[["registryversion",6]],[["vec",3],["registryclientversionedresult",6]]]],[10,"get_key_family","","Returns all keys that start with `key_prefix` and are…",117,[[["registryversion",6]],[["result",4],["vec",3],["registryclienterror",4]]]],[11,"get_value","","",117,[[["registryversion",6]],[["registryclientresult",6],["vec",3]]]],[10,"get_latest_version","","Returns the latest version known to this replica. If the…",117,[[],["registryversion",6]]],[8,"RegistryDataProvider","","A `RegistryDataProvider` is the data source that backs the…",null,null],[10,"get_updates_since","","If successful, the call returns a pair, the first element…",118,[[["registryversion",6]],[["result",4],["registrydataprovidererror",4]]]],[8,"LocalStoreCertifiedTimeReader","","Whenever the local store is successfully updated, the time…",null,null],[10,"read_certified_time","","The value returns is based on the UNIX EPOCH. If there had…",119,[[],["time",3]]],[11,"map","","",116,[[["fnonce",8]],["registryversionedrecord",3]]],[0,"replica_config","ic_interfaces","The replica config store.",null,null],[4,"ReplicaConfigStoreError","ic_interfaces::replica_config","Errors that ReplicaConfigStore can return.",null,null],[13,"NodeIdExists","","The node ID is already set.",120,null],[8,"ReplicaConfigStore","","An API for storing a `ReplicaConfig`.",null,null],[10,"set_node_id","","Note: This is a write once interface. Write twice and this…",121,[[["nodeid",6],["option",4]],[["result",4],["nodeid",6],["replicaconfigstoreerror",4]]]],[10,"replica_config","","",121,[[],["replicaconfig",3]]],[0,"state_manager","ic_interfaces","The state manager public interface.",null,null],[3,"Labeled","ic_interfaces::state_manager","A node state with a `height` attached to it, indicating…",null,null],[4,"StateManagerError","","",null,null],[13,"StateRemoved","","The state at the specified height was removed and can not…",122,null],[13,"StateNotCommittedYet","","The state at the specified height is not committed yet.",122,null],[4,"CertificationScope","","Indicates the subset of the state that needs to be…",null,null],[13,"Metadata","","Only certify the system metadata.",123,null],[13,"Full","","Certify the full state.",123,null],[4,"CertificationTag","","",null,null],[6,"StateManagerResult","","",null,null],[6,"CertificationMask","","A bit mask for accepting certified/uncertified states.",null,null],[17,"CERT_CERTIFIED","","The mask that only accepts certified states.",null,null],[17,"CERT_UNCERTIFIED","","The mask that only accepts uncertified states.",null,null],[17,"CERT_ANY","","The mask that accepts all states, not matter what their…",null,null],[8,"StateManager","","APIs related to fetching and certifying the state.",null,null],[10,"list_state_hashes_to_certify","","Returns a snapshot of the list of state hashes that need…",124,[[],["vec",3]]],[10,"deliver_state_certification","","Delivers a `certification` corresponding to some state…",124,[[["certification",3]]]],[10,"get_state_hash_at","","Returns the hash of the state at the specified `height`.",124,[[["height",6]],[["statemanagerresult",6],["option",4]]]],[10,"fetch_state","","Initiates asynchronous procedure of state synchronization…",124,[[["height",6],["cryptohashofstate",6]]]],[10,"list_state_heights","","Returns the list of heights corresponding to accessible…",124,[[["certificationmask",6]],[["vec",3],["height",6]]]],[10,"remove_states_below","","Notify this state manager that states with heights…",124,[[["height",6]]]],[10,"commit_and_certify","","Commits the `state` at given `height`, limits the…",124,[[["height",6],["certificationscope",4]]]],[10,"take_tip","","Returns the version of the state that can be modified…",124,[[]]],[10,"take_tip_at","","Returns the version of the state that can be modified…",124,[[["height",6]],["statemanagerresult",6]]],[10,"report_diverged_state","","Reports that the given `height` diverged, i.e., consensus…",124,[[["height",6]]]],[8,"StateReader","","This component is analogous to the `StateManager` except…",null,null],[16,"State","","Type of state managed by StateReader.",125,null],[10,"get_state_at","","Returns a shared object of the state at the specified…",125,[[["height",6]],[["statemanagerresult",6],["labeled",3]]]],[10,"get_latest_state","","Returns a shared object of the state at the latest…",125,[[],[["labeled",3],["arc",3]]]],[10,"latest_state_height","","Returns the height of the latest state available.",125,[[],["height",6]]],[10,"latest_certified_height","","Returns the height of the latest certified state available.",125,[[],["height",6]]],[10,"read_certified_state","","Reads part of the certified state tree specified by the…",125,[[["labeledtree",4]],["option",4]]],[11,"new","","",126,[[["height",6]]]],[11,"height","","The height this state corresponds to.",126,[[],["height",6]]],[11,"get_ref","","Returns a read-only reference the state.",126,[[]]],[11,"take","","Drops the label and returns the raw state.",126,[[]]],[0,"time_source","ic_interfaces","The time source public interface.",null,null],[3,"SysTimeSource","ic_interfaces::time_source","Time source using the system time.",null,null],[3,"TimeNotMonotoneError","","Error when time update is not monotone.",null,null],[8,"TimeSource","","A interface that represent the source of time.",null,null],[10,"get_relative_time","","Return the releative time since origin. The definition of…",127,[[],["time",3]]],[11,"new","","Create a new [SysTimeSource].",128,[[]]],[11,"update_time","","Update time to the new system time value.",128,[[],[["result",4],["timenotmonotoneerror",3]]]],[0,"transport","ic_interfaces","Transport layer public interface.",null,null],[4,"SendError","ic_interfaces::transport","",null,null],[13,"DeserializationFailed","","",129,null],[13,"EndpointClosed","","",129,null],[13,"EndpointNotFound","","",129,null],[8,"Transport","","Transport layer APIs.",null,null],[10,"register_client","","Register the transport client of the specified type. No…",130,[[["asynctransporteventhandler",8],["arc",3],["transportclienttype",4]],[["result",4],["transporterrorcode",4]]]],[10,"start_connections","","Mark the peer as valid neighbor, and set up the transport…",130,[[["nodeid",6],["registryversion",6],["noderecord",3],["transportclienttype",4]],[["result",4],["transporterrorcode",4]]]],[10,"stop_connections","","Remove the peer from the set of valid neighbors, and tear…",130,[[["nodeid",6],["registryversion",6],["transportclienttype",4]],[["result",4],["transporterrorcode",4]]]],[10,"send","","Send the message to the specified peer. The message will…",130,[[["nodeid",6],["flowtag",6],["transportclienttype",4],["transportpayload",3]],[["result",4],["transporterrorcode",4]]]],[10,"clear_send_queues","","Clear any unsent messages in all the send queues for the…",130,[[["nodeid",6],["transportclienttype",4]]]],[10,"clear_send_queue","","Clear any unsent messages in the send queue for the given…",130,[[["nodeid",6],["flowtag",6],["transportclienttype",4]]]],[8,"TransportEventHandler","","API for handling transport events.",null,null],[10,"on_message","","Invoked by the transport layer when a message is received…",131,[[["transportpayload",3],["flowid",3]],[["option",4],["transportpayload",3]]]],[10,"on_error","","",131,[[["flowid",3],["transporterrorcode",4]]]],[10,"on_state_change","","Invoked by the transport layer to notify of any changes in…",131,[[["transportstatechange",4]]]],[8,"AsyncTransportEventHandler","","Async version of the transport event handler",null,null],[10,"send_message","","",132,[[["transportpayload",3],["flowid",3]],[["box",3],["pin",3]]]],[10,"state_changed","","",132,[[["transportstatechange",4]],[["box",3],["pin",3]]]],[10,"error","","",132,[[["flowid",3],["transporterrorcode",4]],[["box",3],["pin",3]]]],[0,"validation","ic_interfaces","Validation related types.",null,null],[4,"ValidationError","ic_interfaces::validation","Validation errors can be either permanent (invalid) or…",null,null],[13,"Permanent","","",133,null],[13,"Transient","","",133,null],[6,"ValidationResult","","Validation result is result type where `Ok(())` means…",null,null],[11,"map","","The inner types of ValidationError can be mapped to…",133,[[["fn",8],["fn",8]],["validationerror",4]]],[11,"from","ic_interfaces::artifact_manager","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","ic_interfaces::artifact_pool","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"erased_serialize","","",8,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",8,[[]]],[11,"encode_hex","","",8,[[]]],[11,"encode_hex_upper","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"erased_serialize","","",9,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",9,[[]]],[11,"encode_hex","","",9,[[]]],[11,"encode_hex_upper","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","ic_interfaces::certification","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","ic_interfaces::certified_stream_store","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","ic_interfaces::consensus","",27,[[]]],[11,"into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","ic_interfaces::consensus_pool","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"into_iter","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"erased_serialize","","",32,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","ic_interfaces::crypto","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","ic_interfaces::dkg","",59,[[]]],[11,"into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","ic_interfaces::execution_environment","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"erased_serialize","","",64,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",64,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"erased_serialize","","",87,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",87,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"vzip","","",88,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"vzip","","",89,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"to_string","","",70,[[],["string",3]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"erased_serialize","","",70,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",70,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"to_string","","",74,[[],["string",3]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"erased_serialize","","",74,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",74,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"from","ic_interfaces::ingress_manager","",91,[[]]],[11,"into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"vzip","","",91,[[]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"vzip","","",92,[[]]],[11,"from","ic_interfaces::ingress_pool","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"vzip","","",96,[[]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"vzip","","",98,[[]]],[11,"from","ic_interfaces::messages","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"vzip","","",104,[[]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"vzip","","",105,[[]]],[11,"from","ic_interfaces::messaging","",106,[[]]],[11,"into","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"vzip","","",106,[[]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"vzip","","",108,[[]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"vzip","","",109,[[]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"to_string","","",110,[[],["string",3]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"vzip","","",110,[[]]],[11,"from","ic_interfaces::registry","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"erased_serialize","","",116,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",116,[[]]],[11,"from","ic_interfaces::replica_config","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"to_string","","",120,[[],["string",3]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"erased_serialize","","",120,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",120,[[]]],[11,"from","ic_interfaces::state_manager","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"vzip","","",126,[[]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"to_string","","",122,[[],["string",3]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"vzip","","",122,[[]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"vzip","","",123,[[]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"vzip","","",134,[[]]],[11,"from","ic_interfaces::time_source","",128,[[]]],[11,"into","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"vzip","","",128,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"vzip","","",135,[[]]],[11,"from","ic_interfaces::transport","",129,[[]]],[11,"into","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"vzip","","",129,[[]]],[11,"from","ic_interfaces::validation","",133,[[]]],[11,"into","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"vzip","","",133,[[]]],[11,"into_inner","ic_interfaces::artifact_pool","",8,[[]]],[11,"into_inner","","",9,[[]]],[11,"timestamp","","",8,[[],["time",3]]],[11,"timestamp","","",9,[[],["time",3]]],[11,"or_else","ic_interfaces","",136,[[["fnonce",8]],["changeset",6]]],[11,"dedup_push","","",136,[[["changeaction",4]],[["result",4],["changeaction",4]]]],[11,"domain","ic_interfaces::crypto","",41,[[],["string",3]]],[11,"get","ic_interfaces::execution_environment","",89,[[["box",3]],["execresultvariant",4]]],[11,"try_select","","",89,[[["box",3]],["tryselect",4]]],[11,"get_relative_time","ic_interfaces::time_source","",128,[[],["time",3]]],[11,"as_ref","ic_interfaces::artifact_pool","",8,[[]]],[11,"as_ref","","",9,[[]]],[11,"from","ic_interfaces::artifact_manager","",2,[[["box",3]],["onartifacterror",4]]],[11,"from","","",2,[[],["onartifacterror",4]]],[11,"from","","",2,[[["artifactpoolerror",4]],["onartifacterror",4]]],[11,"from","","",2,[[["gossipadvert",3]],["onartifacterror",4]]],[11,"from","","",2,[[["advertmismatcherror",3]],["onartifacterror",4]]],[11,"from","ic_interfaces::artifact_pool","",10,[[["box",3],["error",8]],["artifactpoolerror",4]]],[11,"from","","",10,[[["replicaversionmismatch",3]],["artifactpoolerror",4]]],[11,"from","ic_interfaces::certification","",15,[[["cryptoerror",4]],["certificationtransienterror",4]]],[11,"from","","",14,[[["cryptoerror",4]],["certificationpermanenterror",4]]],[11,"from","ic_interfaces::validation","",133,[[["certificationpermanenterror",4]],[["certificationpermanenterror",4],["validationerror",4]]]],[11,"from","","",133,[[["certificationtransienterror",4]],[["certificationtransienterror",4],["validationerror",4]]]],[11,"from","ic_interfaces","",137,[[["ingresspayloadvalidationerror",6]]]],[11,"from","","",137,[[["xnetpayloadvalidationerror",6]]]],[11,"from","","",136,[[["changeaction",4]]]],[11,"from","","",138,[[["changeaction",4]]]],[11,"from","ic_interfaces::execution_environment","",70,[[["wasminstrumentationerror",4]]]],[11,"from","","",70,[[["wasmvalidationerror",4]]]],[11,"from","","",79,[[["statemanagererror",4]]]],[11,"from","ic_interfaces::ingress_manager","",92,[[["cryptoerror",4]],["ingresstransienterror",4]]],[11,"from","","",91,[[["cryptoerror",4]],["ingresspermanenterror",4]]],[11,"from","ic_interfaces::validation","",133,[[["ingresspermanenterror",4]],[["validationerror",4],["ingresspermanenterror",4]]]],[11,"from","","",133,[[["ingresstransienterror",4]],[["validationerror",4],["ingresstransienterror",4]]]],[11,"from","ic_interfaces::ingress_pool","",96,[[["signedingress",3]]]],[11,"from","ic_interfaces::validation","",133,[[],["validationerror",4]]],[11,"next","ic_interfaces::consensus_pool","",40,[[],["option",4]]],[11,"clone","ic_interfaces::artifact_pool","",8,[[],["validatedartifact",3]]],[11,"clone","","",9,[[],["unvalidatedartifact",3]]],[11,"clone","ic_interfaces::consensus_pool","",32,[[],["changeaction",4]]],[11,"clone","ic_interfaces::crypto","",41,[[],["cryptohashabletestdummy",3]]],[11,"clone","","",42,[[],["signablemock",3]]],[11,"clone","ic_interfaces::execution_environment","",74,[[],["trapcode",4]]],[11,"clone","","",70,[[],["hypervisorerror",4]]],[11,"clone","","",64,[[],["instancestats",3]]],[11,"clone","","",87,[[],["subnetavailablememory",3]]],[11,"clone","","",79,[[],["ingresshistoryerror",4]]],[11,"clone","ic_interfaces::ingress_pool","",96,[[],["ingresspoolobject",3]]],[11,"clone","","",97,[[],["changeaction",4]]],[11,"clone","ic_interfaces::messages","",104,[[],["canisterinputmessage",4]]],[11,"clone","","",105,[[],["requestoringress",4]]],[11,"clone","ic_interfaces::messaging","",110,[[],["xnetpayloaderror",4]]],[11,"clone","ic_interfaces::registry","",116,[[],["registryversionedrecord",3]]],[11,"clone","ic_interfaces::replica_config","",120,[[],["replicaconfigstoreerror",4]]],[11,"clone","ic_interfaces::state_manager","",122,[[],["statemanagererror",4]]],[11,"clone","","",123,[[],["certificationscope",4]]],[11,"clone","","",126,[[],["labeled",3]]],[11,"clone","ic_interfaces::time_source","",135,[[],["timenotmonotoneerror",3]]],[11,"cmp","ic_interfaces::registry","",116,[[["registryversionedrecord",3]],["ordering",4]]],[11,"eq","ic_interfaces::artifact_pool","",8,[[["validatedartifact",3]]]],[11,"ne","","",8,[[["validatedartifact",3]]]],[11,"eq","","",9,[[["unvalidatedartifact",3]]]],[11,"ne","","",9,[[["unvalidatedartifact",3]]]],[11,"eq","ic_interfaces::certification","",13,[[["changeaction",4]]]],[11,"ne","","",13,[[["changeaction",4]]]],[11,"eq","","",14,[[["certificationpermanenterror",4]]]],[11,"ne","","",14,[[["certificationpermanenterror",4]]]],[11,"eq","","",15,[[["certificationtransienterror",4]]]],[11,"ne","","",15,[[["certificationtransienterror",4]]]],[11,"eq","ic_interfaces::certified_stream_store","",21,[[["encodestreamerror",4]]]],[11,"ne","","",21,[[["encodestreamerror",4]]]],[11,"eq","","",24,[[["decodestreamerror",4]]]],[11,"ne","","",24,[[["decodestreamerror",4]]]],[11,"eq","ic_interfaces::consensus_pool","",32,[[["changeaction",4]]]],[11,"ne","","",32,[[["changeaction",4]]]],[11,"eq","ic_interfaces::crypto","",41,[[["cryptohashabletestdummy",3]]]],[11,"ne","","",41,[[["cryptohashabletestdummy",3]]]],[11,"eq","","",42,[[["signablemock",3]]]],[11,"ne","","",42,[[["signablemock",3]]]],[11,"eq","ic_interfaces::execution_environment","",74,[[["trapcode",4]]]],[11,"eq","","",66,[[["canisterheartbeaterror",4]]]],[11,"ne","","",66,[[["canisterheartbeaterror",4]]]],[11,"eq","","",69,[[["messageacceptanceerror",4]]]],[11,"ne","","",69,[[["messageacceptanceerror",4]]]],[11,"eq","","",70,[[["hypervisorerror",4]]]],[11,"ne","","",70,[[["hypervisorerror",4]]]],[11,"eq","","",79,[[["ingresshistoryerror",4]]]],[11,"ne","","",79,[[["ingresshistoryerror",4]]]],[11,"eq","ic_interfaces::ingress_pool","",97,[[["changeaction",4]]]],[11,"ne","","",97,[[["changeaction",4]]]],[11,"eq","ic_interfaces::messages","",104,[[["canisterinputmessage",4]]]],[11,"ne","","",104,[[["canisterinputmessage",4]]]],[11,"eq","","",105,[[["requestoringress",4]]]],[11,"ne","","",105,[[["requestoringress",4]]]],[11,"eq","ic_interfaces::messaging","",106,[[["messageroutingerror",4]]]],[11,"ne","","",106,[[["messageroutingerror",4]]]],[11,"eq","ic_interfaces::registry","",116,[[["registryversionedrecord",3]]]],[11,"ne","","",116,[[["registryversionedrecord",3]]]],[11,"eq","ic_interfaces::replica_config","",120,[[["replicaconfigstoreerror",4]]]],[11,"ne","","",120,[[["replicaconfigstoreerror",4]]]],[11,"eq","ic_interfaces::state_manager","",122,[[["statemanagererror",4]]]],[11,"ne","","",122,[[["statemanagererror",4]]]],[11,"eq","","",123,[[["certificationscope",4]]]],[11,"eq","","",126,[[["labeled",3]]]],[11,"ne","","",126,[[["labeled",3]]]],[11,"eq","ic_interfaces::time_source","",135,[[["timenotmonotoneerror",3]]]],[11,"partial_cmp","ic_interfaces::registry","",116,[[["registryversionedrecord",3]],[["option",4],["ordering",4]]]],[11,"lt","","",116,[[["registryversionedrecord",3]]]],[11,"le","","",116,[[["registryversionedrecord",3]]]],[11,"gt","","",116,[[["registryversionedrecord",3]]]],[11,"ge","","",116,[[["registryversionedrecord",3]]]],[11,"deref","","",116,[[]]],[11,"fmt","ic_interfaces::artifact_manager","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::artifact_pool","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::certification","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::certified_stream_store","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::consensus","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::consensus_pool","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::crypto","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::dkg","",59,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::execution_environment","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::ingress_manager","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::ingress_pool","",97,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::messages","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::messaging","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::registry","",116,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::replica_config","",120,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::state_manager","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",126,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::time_source","",135,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::transport","",129,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::validation","",133,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::certified_stream_store","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::execution_environment","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::messaging","",110,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::replica_config","",120,[[["formatter",3]],["result",6]]],[11,"fmt","ic_interfaces::state_manager","",122,[[["formatter",3]],["result",6]]],[11,"hash","ic_interfaces::consensus_pool","",32,[[]]],[11,"hash","ic_interfaces::crypto","",41,[[]]],[11,"hash","","",42,[[]]],[11,"hash","ic_interfaces::ingress_pool","",97,[[]]],[11,"hash","ic_interfaces::messages","",104,[[]]],[11,"hash","","",105,[[]]],[11,"hash","ic_interfaces::registry","",116,[[]]],[11,"hash","ic_interfaces::replica_config","",120,[[]]],[11,"hash","ic_interfaces::state_manager","",122,[[]]],[11,"try_from","ic_interfaces::messages","",105,[[["canisterinputmessage",4]],["result",4]]],[11,"deserialize","ic_interfaces::artifact_pool","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","ic_interfaces::consensus_pool","",32,[[],["result",4]]],[11,"deserialize","ic_interfaces::execution_environment","",74,[[],["result",4]]],[11,"deserialize","","",70,[[],["result",4]]],[11,"deserialize","","",64,[[],["result",4]]],[11,"deserialize","","",87,[[],["result",4]]],[11,"deserialize","ic_interfaces::registry","",116,[[],["result",4]]],[11,"deserialize","ic_interfaces::replica_config","",120,[[],["result",4]]],[11,"serialize","ic_interfaces::artifact_pool","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","ic_interfaces::consensus_pool","",32,[[],["result",4]]],[11,"serialize","ic_interfaces::execution_environment","",74,[[],["result",4]]],[11,"serialize","","",70,[[],["result",4]]],[11,"serialize","","",64,[[],["result",4]]],[11,"serialize","","",87,[[],["result",4]]],[11,"serialize","ic_interfaces::registry","",116,[[],["result",4]]],[11,"serialize","ic_interfaces::replica_config","",120,[[],["result",4]]],[11,"count_bytes","ic_interfaces::ingress_pool","",96,[[]]],[11,"as_signed_bytes_without_domain_separator","ic_interfaces::crypto","",42,[[],["vec",3]]],[11,"content_eq","ic_interfaces::consensus_pool","",32,[[["changeaction",4]]]]],"p":[[3,"AdvertMismatchError"],[4,"ArtifactAcceptance"],[4,"OnArtifactError"],[4,"ProcessingResult"],[8,"ArtifactClient"],[8,"ArtifactProcessor"],[8,"ArtifactManager"],[3,"ReplicaVersionMismatch"],[3,"ValidatedArtifact"],[3,"UnvalidatedArtifact"],[4,"ArtifactPoolError"],[8,"IntoInner"],[8,"HasTimestamp"],[4,"ChangeAction"],[4,"CertificationPermanentError"],[4,"CertificationTransientError"],[8,"Certifier"],[8,"CertifierGossip"],[8,"CertificationPool"],[8,"MutableCertificationPool"],[8,"Verifier"],[4,"EncodeStreamError"],[13,"InvalidSliceBegin"],[13,"InvalidSliceIndices"],[4,"DecodeStreamError"],[13,"InvalidDestination"],[8,"CertifiedStreamStore"],[4,"PayloadPermanentError"],[4,"PayloadTransientError"],[8,"Consensus"],[8,"ConsensusGossip"],[3,"HeightRange"],[4,"ChangeAction"],[4,"OnlyError"],[8,"ChangeSetOperation"],[8,"PoolSection"],[8,"ConsensusPool"],[8,"MutableConsensusPool"],[8,"HeightIndexedPool"],[8,"ConsensusPoolCache"],[3,"ChainIterator"],[3,"CryptoHashableTestDummy"],[3,"SignableMock"],[8,"KeyManager"],[8,"Keygen"],[8,"CryptoHashDomain"],[8,"DkgAlgorithm"],[8,"NiDkgAlgorithm"],[8,"BasicSigVerifier"],[8,"BasicSigVerifierByPublicKey"],[8,"BasicSigner"],[8,"CanisterSigVerifier"],[8,"MultiSigVerifier"],[8,"MultiSigner"],[8,"ThresholdSigVerifier"],[8,"ThresholdSigVerifierByPublicKey"],[8,"ThresholdSigner"],[8,"Signable"],[8,"ErrorReplication"],[4,"ChangeAction"],[8,"Dkg"],[8,"DkgGossip"],[8,"DkgPool"],[8,"MutableDkgPool"],[3,"InstanceStats"],[3,"ExecuteMessageResult"],[4,"CanisterHeartbeatError"],[13,"CanisterNotRunning"],[13,"NotSystemSubnet"],[4,"MessageAcceptanceError"],[4,"HypervisorError"],[13,"InsufficientCyclesInCall"],[13,"InsufficientCyclesBalance"],[13,"Cleanup"],[4,"TrapCode"],[4,"SubnetAvailableMemoryError"],[13,"InsufficientMemory"],[4,"TrySelect"],[4,"ExecResultVariant"],[4,"IngressHistoryError"],[8,"ExecutionEnvironment"],[8,"AsyncResult"],[8,"InterruptedExec"],[8,"QueryHandler"],[8,"IngressHistoryReader"],[8,"IngressHistoryWriter"],[8,"SystemApi"],[3,"SubnetAvailableMemory"],[3,"ExecResult"],[3,"EarlyResult"],[8,"GossipPool"],[4,"IngressPermanentError"],[4,"IngressTransientError"],[8,"IngressSetQuery"],[8,"IngressHandler"],[8,"IngressSelector"],[3,"IngressPoolObject"],[4,"ChangeAction"],[4,"SelectResult"],[8,"PoolSection"],[8,"IngressPool"],[8,"MutableIngressPool"],[8,"IngressPoolSelect"],[8,"IngressPoolThrottler"],[4,"CanisterInputMessage"],[4,"RequestOrIngress"],[4,"MessageRoutingError"],[13,"Ignored"],[4,"InvalidXNetPayload"],[4,"XNetTransientValidationError"],[4,"XNetPayloadError"],[8,"MessageRouting"],[8,"XNetPayloadBuilder"],[8,"IngressEventHandler"],[8,"P2PRunner"],[8,"RegistryValue"],[3,"RegistryVersionedRecord"],[8,"RegistryClient"],[8,"RegistryDataProvider"],[8,"LocalStoreCertifiedTimeReader"],[4,"ReplicaConfigStoreError"],[8,"ReplicaConfigStore"],[4,"StateManagerError"],[4,"CertificationScope"],[8,"StateManager"],[8,"StateReader"],[3,"Labeled"],[8,"TimeSource"],[3,"SysTimeSource"],[4,"SendError"],[8,"Transport"],[8,"TransportEventHandler"],[8,"AsyncTransportEventHandler"],[4,"ValidationError"],[4,"CertificationTag"],[3,"TimeNotMonotoneError"],[6,"ChangeSet"],[6,"PayloadValidationError"],[6,"ChangeSet"]]},\
"ic_logger":{"doc":"","i":[[14,"debug","ic_logger","Log a debug-level log, with context fields if given",null,null],[14,"error","","Log an error-level log, with context fields if given",null,null],[14,"fatal","","Log a crit-level log, with context fields if given, then…",null,null],[14,"info","","Log an info-level log, with context fields if given",null,null],[14,"info_sample","","Sample the given log event",null,null],[14,"log","","Log an entry at the given log level, with context fields…",null,null],[14,"new_logger","","Create a new logger with the supplied context",null,null],[14,"trace","","Log a trace-level message, with context fields if given",null,null],[14,"warn","","Log a warn-level log, with context fields if given",null,null],[3,"LoggerImpl","","",null,null],[12,"root","","",0,null],[12,"async_log_guard","","",0,null],[5,"new_replica_logger","","",null,[[["logger",3],["loggerconfig",3]],["replicalogger",6]]],[0,"replica_logger","","",null,null],[3,"LogEntryLogger","ic_logger::replica_logger","Logs `LogEntry`s using `slog`",null,null],[12,"root","","",1,null],[12,"level","","",1,null],[12,"debug_overrides","","",1,null],[12,"sampling_rates","","",1,null],[12,"enabled_tags","","",1,null],[12,"last_log","","",1,null],[5,"no_op_logger","","A logger that doesn\'t log. Used in tests.",null,[[],["replicalogger",6]]],[5,"get_utc_time","","Return the current time in UTC",null,[[],["string",3]]],[5,"get_crate","","Return the crate that generated the given `Record`",null,[[],["string",3]]],[5,"get_module","","Return the module that generated the given `Record`",null,[[],["string",3]]],[6,"ReplicaLogger","","A logger that logs `LogEntry`s using a `LogEntryLogger`",null,null],[11,"new","","",1,[[["vec",3],["string",3],["level",4],["hashmap",3],["logger",3]]]],[11,"new","ic_logger","",0,[[["loggerconfig",3],["string",3]]]],[11,"new_for_test","","",0,[[["loggerconfig",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","ic_logger::replica_logger","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","ic_logger","",2,[[["logentrylogger",3]]]],[11,"from","ic_logger::replica_logger","",1,[[["logger",3]]]],[11,"clone","","",1,[[]]],[11,"log","","",1,[[["logentry",3],["logmetadata",3],["string",3]]]],[11,"is_enabled_at","","",1,[[["level",4]]]],[11,"should_sample","","",1,[[["into",8],["string",3]]]],[11,"is_tag_enabled","","",1,[[["string",3]]]],[11,"is_n_seconds","","",1,[[["logmetadata",3],["into",8]]]]],"p":[[3,"LoggerImpl"],[3,"LogEntryLogger"],[6,"ReplicaLogger"]]},\
"ic_messaging":{"doc":"The `ic_messaging` crate implements (i) deterministic…","i":[[3,"MessageRoutingImpl","ic_messaging","Implementation of the `MessageRouting` trait.",null,null],[3,"XNetEndpoint","","HTTPS endpoint for fetching XNet stream slices.",null,null],[3,"XNetEndpointConfig","","The socket address for `XNetEndpoint` to listen on.",null,null],[3,"ExpectedIndices","","Message and signal indices into a XNet stream or stream…",null,null],[12,"message_index","","",0,null],[12,"signal_index","","",0,null],[3,"XNetPayloadBuilderImpl","","Implementation of `XNetPayloadBuilder` that uses a…",null,null],[0,"certified_slice_pool","","A pool of incoming `CertifiedStreamSlices` used by…",null,null],[3,"UnpackedStreamSlice","ic_messaging::certified_slice_pool","An unpacked `CertifiedStreamSlice`: a slice of the stream…",null,null],[3,"CertifiedSlicePool","","A pool of `CertifiedStreamSlices` that provides support…",null,null],[4,"CertifiedSliceError","","Error type returned when a pool operation failed due to an…",null,null],[13,"InvalidPayload","","Payload is malformed, slice was dropped from pool (or will…",1,null],[13,"InvalidWitness","","Witness is malformed, slice was dropped from pool (or will…",1,null],[13,"WitnessPruningFailed","","Witness-payload mismatch, slice was dropped from pool.",1,null],[13,"DecodeFailed","","Slice could not be deserialized.",1,null],[13,"InvalidAppend","","Provided slice could not be appended to pooled slice.…",1,null],[13,"TakeBeforeSliceBegin","","Attempted to take already garbage-collected messages,…",1,null],[4,"InvalidSlice","","`CertifiedSliceError::InvalidPayload` and…",null,null],[13,"EmptyMessages","","",2,null],[13,"MissingStreams","","",2,null],[13,"MissingStream","","",2,null],[13,"MoreThanOneStream","","",2,null],[13,"MissingHeader","","",2,null],[13,"NotAStreamIndex","","",2,null],[13,"NotASubTree","","",2,null],[13,"NotALeaf","","",2,null],[4,"InvalidAppend","","Root cause of `append()` failure.",null,null],[13,"DifferentSubnet","","",3,null],[13,"SignalsEndRegresses","","",3,null],[13,"IndexMismatch","","",3,null],[6,"CertifiedSliceResult","","`Result` type returned by `CertifiedSlicePool` operations.",null,null],[17,"METRIC_POOL_SIZE_BYTES","","",null,null],[17,"METRIC_TAKE_COUNT","","",null,null],[17,"METRIC_TAKE_MESSAGES","","",null,null],[17,"METRIC_TAKE_SIZE_BYTES","","",null,null],[17,"METRIC_TAKE_GCED_MESSAGES","","",null,null],[17,"LABEL_STATUS","","",null,null],[17,"STATUS_SUCCESS","","",null,null],[17,"STATUS_NONE","","",null,null],[11,"take_prefix","","Takes a prefix of the slice that meets the given limits.…",4,[[["option",4]],["certifiedsliceresult",6]]],[11,"garbage_collect","","Garbage collects the slice: drops all messages before…",4,[[["expectedindices",3]],[["certifiedsliceresult",6],["option",4]]]],[11,"append","","Appends a partial slice with a matching witness to `self`.",4,[[["unpackedstreamslice",3]],["certifiedsliceresult",6]]],[11,"estimated_size","","Produces an upper bound estimate of the serialized byte…",4,[[]]],[11,"to_label_value","","Maps the error to a string slice suitable for use as…",1,[[]]],[11,"new","","Creates a new pool instance using the given…",5,[[["metricsregistry",3]]]],[11,"take_slice","","Takes a sub-slice of the stream from `subnet_id` starting…",5,[[["expectedindices",3],["subnetid",6],["option",4],["option",4]],[["option",4],["certifiedsliceresult",6]]]],[11,"garbage_collect","","Garbage collects all messages and signals before the given…",5,[[["expectedindices",3],["btreemap",3],["subnetid",6]]]],[11,"garbage_collect_slice","","Garbage collects all messages and signals before the given…",5,[[["expectedindices",3],["subnetid",6]]]],[11,"peers","","Returns an iterator over the `SubnetIds` passed to the…",5,[[]]],[11,"slice_stats","","Returns the cached stream position; as well as the…",5,[[["subnetid",6]]]],[11,"byte_size","","Returns the total estimated size of the slices in the pool.",5,[[]]],[11,"put","","Places the provided slice into the pool, after trimming…",5,[[["certifiedstreamslice",3],["subnetid",6]],["certifiedsliceresult",6]]],[11,"append","","Appends a partial slice to the corresponding pool entry,…",5,[[["certifiedstreamslice",3],["subnetid",6]],["certifiedsliceresult",6]]],[11,"observe_pool_size_bytes","","Observes the total size of all pooled slices.",5,[[]]],[11,"new","ic_messaging","Creates a new `MessageRoutingImpl` for the given subnet…",6,[[["arc",3],["registryclient",8],["arc",3],["arc",3],["statemanager",8],["executionenvironment",8],["arc",3],["subnetid",6],["replicalogger",6],["schedulerconfig",3],["cyclesaccountmanager",3],["arc",3],["subnettype",4],["ingresshistorywriter",8],["certifiedstreamstore",8],["arc",3],["metricsregistry",3]]]],[11,"new_fake","","Creates a new `MessageRoutingImpl` for the given subnet…",6,[[["subnetid",6],["ingresshistorywriter",8],["arc",3],["arc",3],["metricsregistry",3],["replicalogger",6],["statemanager",8]]]],[11,"new","","Creates and starts an `XNetEndpoint` to publish XNet…",7,[[["arc",3],["arc",3],["arc",3],["xnetendpointconfig",3],["handle",3],["certifiedstreamstore",8],["registryclient",8],["replicalogger",6],["tlshandshake",8],["metricsregistry",3]]]],[11,"server_port","","Returns the port that the HTTP server is listening on.",7,[[]]],[11,"from","","Retrieves the `XNetEndpointConfig` for a given node from…",8,[[["registryclient",8],["replicalogger",6],["arc",3],["nodeid",6]],["xnetendpointconfig",3]]],[11,"new","","Creates a new `XNetPayloadBuilderImpl` for a node on…",9,[[["arc",3],["registryclient",8],["arc",3],["arc",3],["statemanager",8],["handle",3],["certifiedstreamstore",8],["subnetid",6],["arc",3],["replicalogger",6],["nodeid",6],["tlshandshake",8],["metricsregistry",3]],["xnetpayloadbuilderimpl",3]]],[0,"xnet_payload_builder_testing","","Internal functionality, exposed for use by integration…",null,null],[3,"PoolRefillTask","ic_messaging::xnet_payload_builder_testing","An async task that refills the slice pool.",null,null],[3,"RefillTaskHandle","","A handle for a `PoolRefillTask`to be used for triggering…",null,null],[3,"XNetEndpointResolver","","Resolves a stream index and byte limit to an…",null,null],[3,"XNetPayloadBuilderMetrics","","",null,null],[12,"build_payload_duration","","Records the time it took to build the payload, by status.",10,null],[12,"pull_attempt_count","","Records pull atempts, by status. Orthogonal to to slice…",10,null],[12,"query_slice_duration","","Records the time it took to query a slice to be included…",10,null],[12,"slice_messages","","Message count per valid slice.",10,null],[12,"slice_payload_size","","Valid slice payload sizes.",10,null],[12,"validate_payload_duration","","Records the time it took to validate a payload, by status.",10,null],[12,"outstanding_queries","","Track outstanding background query tasks",10,null],[4,"XNetClientError","","",null,null],[13,"Timeout","","",11,null],[13,"RequestFailed","","",11,null],[13,"NoContent","","",11,null],[13,"ErrorResponse","","",11,null],[13,"BodyReadError","","",11,null],[13,"ProxyDecodeError","","",11,null],[5,"pool_slice","","Puts the provided slice into the payload builder\'s slice…",null,[[["subnetid",6],["certifiedstreamslice",3],["xnetpayloadbuilderimpl",3]]]],[5,"xnet_payload_builder_with_xnet_client","","Test helper for creating a `XNetPayloadBuilder` around a…",null,[[["replicalogger",6],["registryclient",8],["arc",3],["arc",3],["statemanager",8],["handle",3],["certifiedstreamstore",8],["arc",3],["xnetclient",8],["arc",3],["nodeid",6],["subnetid",6],["metricsregistry",3]],["xnetpayloadbuilderimpl",3]]],[17,"LABEL_STATUS","","",null,null],[17,"METRIC_BUILD_PAYLOAD_DURATION","","",null,null],[17,"METRIC_SLICE_MESSAGES","","",null,null],[17,"METRIC_SLICE_PAYLOAD_SIZE","","",null,null],[17,"POOL_SLICE_BYTE_SIZE_MAX","","Hard maximum slice size in bytes. We only pool up to 4 MB…",null,null],[17,"STATUS_SUCCESS","","",null,null],[17,"SYSTEM_SUBNET_STREAM_MSG_LIMIT","","Message count limit for `System` subnet outgoing streams…",null,null],[8,"XNetClient","","An async `XNetEndpoint` client.",null,null],[10,"query","","Queries the given `XNetEndpoint` URL for a…",12,[[["uri",3]],[["pin",3],["box",3]]]],[11,"from","ic_messaging","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"equivalent","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","ic_messaging::certified_slice_pool","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"equivalent","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"equivalent","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","ic_messaging::xnet_payload_builder_testing","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"init","","",15,[[]]],[11,"deref","","",15,[[]]],[11,"deref_mut","","",15,[[]]],[11,"drop","","",15,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"drop","ic_messaging","Triggers shutdown by notifying the handler to close the…",7,[[]]],[11,"from","ic_messaging::certified_slice_pool","",1,[[["treehasherror",4]]]],[11,"from","","",1,[[["proxydecodeerror",4]]]],[11,"clone","ic_messaging","",0,[[],["expectedindices",3]]],[11,"default","","By default listen on 127.0.0.1, on a free port assigned by…",8,[[],["xnetendpointconfig",3]]],[11,"default","","",0,[[],["expectedindices",3]]],[11,"eq","ic_messaging::certified_slice_pool","",4,[[["unpackedstreamslice",3]]]],[11,"ne","","",4,[[["unpackedstreamslice",3]]]],[11,"eq","","",2,[[["invalidslice",4]]]],[11,"eq","","",3,[[["invalidappend",4]]]],[11,"eq","ic_messaging","",8,[[["xnetendpointconfig",3]]]],[11,"ne","","",8,[[["xnetendpointconfig",3]]]],[11,"eq","","",0,[[["expectedindices",3]]]],[11,"ne","","",0,[[["expectedindices",3]]]],[11,"partial_cmp","","",0,[[["expectedindices",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["expectedindices",3]]]],[11,"le","","",0,[[["expectedindices",3]]]],[11,"gt","","",0,[[["expectedindices",3]]]],[11,"ge","","",0,[[["expectedindices",3]]]],[11,"fmt","ic_messaging::certified_slice_pool","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","ic_messaging","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_messaging::xnet_payload_builder_testing","",11,[[["formatter",3]],["result",6]]],[11,"fmt","ic_messaging::certified_slice_pool","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_messaging::xnet_payload_builder_testing","",11,[[["formatter",3]],["result",6]]],[11,"try_from","ic_messaging::certified_slice_pool","",4,[[["certifiedstreamslice",3]],["result",4]]],[11,"source","ic_messaging::xnet_payload_builder_testing","",11,[[],[["error",8],["option",4]]]],[11,"deliver_batch","ic_messaging","",6,[[["batch",3]],[["messageroutingerror",4],["result",4]]]],[11,"expected_batch_height","","",6,[[],["height",6]]],[11,"get_xnet_payload","","",9,[[["validationcontext",3],["numbytes",6],["height",6]],[["xnetpayload",3],["xnetpayloaderror",4],["result",4]]]],[11,"validate_xnet_payload","","",9,[[["validationcontext",3],["numbytes",6],["xnetpayload",3]],[["xnetpayloadvalidationerror",6],["validationresult",6]]]],[11,"new","ic_messaging::xnet_payload_builder_testing","",10,[[["metricsregistry",3]]]],[11,"new","","",13,[[["replicalogger",6],["registryclient",8],["arc",3],["nodeid",6],["subnetid",6]]]],[11,"xnet_endpoint_url","","Returns the `/api/v1/stream` `XNetEndpoint` URL of a slice…",13,[[["streamindex",6],["subnetid",6]],[["result",4],["error",4],["endpointlocator",3]]]],[11,"start","","Starts an async task that fills the slice pool in the…",14,[[["xnetendpointresolver",3],["arc",3],["handle",3],["mutex",3],["arc",3],["xnetclient",8],["arc",3],["xnetpayloadbuildermetrics",3],["replicalogger",6]],["refilltaskhandle",3]]],[11,"trigger_refill","","Triggers a slice pool refill.",15,[[]]]],"p":[[3,"ExpectedIndices"],[4,"CertifiedSliceError"],[4,"InvalidSlice"],[4,"InvalidAppend"],[3,"UnpackedStreamSlice"],[3,"CertifiedSlicePool"],[3,"MessageRoutingImpl"],[3,"XNetEndpoint"],[3,"XNetEndpointConfig"],[3,"XNetPayloadBuilderImpl"],[3,"XNetPayloadBuilderMetrics"],[4,"XNetClientError"],[8,"XNetClient"],[3,"XNetEndpointResolver"],[3,"PoolRefillTask"],[3,"RefillTaskHandle"]]},\
"ic_metrics":{"doc":"","i":[[3,"Timer","ic_metrics","A timer to be used with `HistogramVec`, when the labels…",null,null],[0,"buckets","","Various bucketing schemes to use when defining histograms.",null,null],[5,"decimal_buckets","ic_metrics::buckets","Create buckets using divisors of 10 multiplied by powers…",null,[[],["vec",3]]],[5,"decimal_buckets_with_zero","","Create decimal buckets with `0` as the first bucket",null,[[],["vec",3]]],[5,"linear_buckets","","Create `count` buckets forming an arithmetic progression,…",null,[[],["vec",3]]],[5,"exponential_buckets","","Create `count` buckets forming a geometric progression,…",null,[[],["vec",3]]],[5,"add_bucket","","Insert a bucket in the existing vector of buckets.",null,[[["vec",3]],["vec",3]]],[0,"registry","ic_metrics","",null,null],[3,"MetricsRegistry","ic_metrics::registry","",null,null],[11,"global","","Get the registry that is global to this process.",0,[[]]],[11,"new","","Create a new, empty registry.",0,[[]]],[11,"histogram","","Create and register a histogram with specified options.",0,[[["into",8],["vec",3],["string",3]],["histogram",3]]],[11,"histogram_vec","","Create and register a `HistogramVec`",0,[[["into",8],["vec",3],["string",3]],["histogramvec",6]]],[11,"int_gauge","","Create and register an `IntGauge`.",0,[[["into",8],["string",3]],["intgauge",6]]],[11,"int_gauge_vec","","Create and register an `IntGaugeVec`.",0,[[["into",8],["string",3]],["intgaugevec",6]]],[11,"gauge","","Create and register a `Gauge`.",0,[[["into",8],["string",3]],["gauge",6]]],[11,"gauge_vec","","Create and register a `GaugeVec`.",0,[[["into",8],["string",3]],["gaugevec",6]]],[11,"int_counter","","Create and register an `IntCounter`.",0,[[["into",8],["string",3]],["intcounter",6]]],[11,"int_counter_vec","","Create and register an `IntCounterVec`.",0,[[["into",8],["string",3]],["intcountervec",6]]],[11,"prometheus_registry","","",0,[[],["registry",3]]],[11,"register","","",0,[[["collector",8],["clone",8]],[["collector",8],["clone",8]]]],[11,"start","ic_metrics","Starts a new timer.",1,[[]]],[11,"elapsed","","Returns the time elapsed since the timer was started (in…",1,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","ic_metrics::registry","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",0,[[],["metricsregistry",3]]],[11,"default","","",0,[[],["metricsregistry",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"MetricsRegistry"],[3,"Timer"]]},\
"ic_metrics_exporter":{"doc":"","i":[[3,"MetricsRuntimeImpl","ic_metrics_exporter","The type of a metrics runtime implementation.",null,null],[11,"new","","",0,[[["config",3],["arc",3],["metricsregistry",3],["tlshandshake",8],["arc",3],["registryclient",8],["logger",3]]]],[11,"new_insecure","","Create a MetricsRuntimeImpl supporting only HTTP for…",0,[[["config",3],["metricsregistry",3],["logger",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"drop","","",0,[[]]]],"p":[[3,"MetricsRuntimeImpl"]]},\
"ic_nns_common":{"doc":"","i":[[0,"access_control","ic_nns_common","",null,null],[5,"init_canister_authz","ic_nns_common::access_control","Initializes authorization for a canister based on the…",null,[[["canisterauthzinfo",3]]]],[5,"current_canister_authz","","Returns the current canister authz information.",null,[[],["canisterauthzinfo",3]]],[5,"update_methods_authz","","Updates this canister\'s authz.",null,[[["vec",3],["methodauthzchange",3]]]],[5,"check_caller_authz_and_log","","Checks that the caller (as returned by…",null,[[]]],[5,"is_authorized","","Checks whether the given principal has access to the given…",null,[[["principalid",3]]]],[5,"check_caller_is_root","","",null,[[]]],[5,"check_caller_is_ledger","","",null,[[]]],[5,"check_caller_is_gtc","","",null,[[]]],[5,"check_caller_is_governance","","",null,[[]]],[6,"AuthzMap","","",null,null],[0,"init","ic_nns_common","",null,null],[3,"LifelineCanisterInitPayload","ic_nns_common::init","",null,null],[12,"authz_info","","",0,null],[3,"LifelineCanisterInitPayloadBuilder","","",null,null],[11,"new","","",1,[[]]],[11,"add_principal_authorized_to_submit_proposals","","",1,[[["principalid",3]]]],[11,"build","","",1,[[],["lifelinecanisterinitpayload",3]]],[0,"pb","ic_nns_common","",null,null],[0,"v1","ic_nns_common::pb","",null,null],[3,"CanisterId","ic_nns_common::pb::v1","A PB container for a CanisterId, which uniquely identifies…",null,null],[12,"serialized_id","","",2,null],[3,"NeuronId","","A container for a NeuronId blob, which uniquely identifies…",null,null],[12,"id","","",3,null],[3,"ProposalId","","The id of a specific proposal.",null,null],[12,"id","","",4,null],[3,"MethodAuthzInfo","","A descriptor of the authorization of a single method. Any…",null,null],[12,"method_name","","",5,null],[12,"principal_ids","","",5,null],[3,"CanisterAuthzInfo","","A descriptor of the authorization of all the update…",null,null],[12,"methods_authz","","",6,null],[0,"registry","ic_nns_common","",null,null],[5,"encode_or_panic","ic_nns_common::registry","Wraps around Message::encode and panics on error.",null,[[],["vec",3]]],[5,"get_value","","Returns the deserialized value associated with the given…",null,[[["option",4]]]],[5,"mutate_registry","","Tries to mutate the registry. If it succeeds, returns the…",null,[[["precondition",3],["vec",3],["registrymutation",3],["vec",3]]]],[5,"get_subnet_record","","",null,[[["subnetid",6]]]],[5,"get_subnet_list_record","","Gets the subnet list record.",null,[[]]],[5,"get_icp_xdr_conversion_rate_record","","",null,[[]]],[5,"get_latest_version","","Returns the latest version of the registry",null,[[]]],[17,"SUBNET_LIST_KEY","","",null,null],[0,"types","ic_nns_common","",null,null],[3,"NeuronId","ic_nns_common::types","",null,null],[12,"0","","",7,null],[3,"ProposalId","","Proposal IDs are simply u64. All proposals are public,…",null,null],[12,"0","","",8,null],[3,"MethodAuthzChange","","Description of a change to the authz of a specific method…",null,null],[12,"canister","","",9,null],[12,"method_name","","",9,null],[12,"principal","","",9,null],[12,"operation","","",9,null],[4,"AuthzChangeOp","","The operation to execute. Varible names in comments refer…",null,null],[13,"Authorize","","\'canister\' must add a principal to the authorized list of…",10,null],[12,"add_self","ic_nns_common::types::AuthzChangeOp","",11,null],[13,"Deauthorize","ic_nns_common::types","\'canister\' must remove \'principal\' from the authorized…",10,null],[6,"NeuronIdParseError","","",null,null],[11,"from_subaccount","ic_nns_common::pb::v1","",3,[[]]],[11,"from","ic_nns_common::init","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","ic_nns_common::pb::v1","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"proxy_encode","","",2,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",2,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"proxy_encode","","",3,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",3,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"proxy_encode","","",4,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",4,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"proxy_encode","","",5,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",5,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"proxy_encode","","",6,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",6,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",6,[[]]],[11,"from","ic_nns_common::types","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","ic_nns_common::pb::v1","",2,[[["canisterid",3]]]],[11,"from","ic_nns_common::types","",7,[[["neuronidproto",3]]]],[11,"from","ic_nns_common::pb::v1","",3,[[["neuronid",3]]]],[11,"from","ic_nns_common::types","",8,[[["proposalidproto",3]]]],[11,"from","ic_nns_common::pb::v1","",4,[[["proposalid",3]]]],[11,"clone","ic_nns_common::init","",0,[[],["lifelinecanisterinitpayload",3]]],[11,"clone","ic_nns_common::pb::v1","",2,[[],["canisterid",3]]],[11,"clone","","",3,[[],["neuronid",3]]],[11,"clone","","",4,[[],["proposalid",3]]],[11,"clone","","",5,[[],["methodauthzinfo",3]]],[11,"clone","","",6,[[],["canisterauthzinfo",3]]],[11,"clone","ic_nns_common::types","",7,[[],["neuronid",3]]],[11,"clone","","",8,[[],["proposalid",3]]],[11,"clone","","",9,[[],["methodauthzchange",3]]],[11,"clone","","",10,[[],["authzchangeop",4]]],[11,"default","ic_nns_common::pb::v1","",2,[[]]],[11,"default","","",3,[[]]],[11,"default","","",4,[[]]],[11,"default","","",5,[[]]],[11,"default","","",6,[[]]],[11,"default","ic_nns_common::types","",8,[[],["proposalid",3]]],[11,"cmp","","",8,[[["proposalid",3]],["ordering",4]]],[11,"eq","ic_nns_common::pb::v1","",2,[[["canisterid",3]]]],[11,"ne","","",2,[[["canisterid",3]]]],[11,"eq","","",3,[[["neuronid",3]]]],[11,"ne","","",3,[[["neuronid",3]]]],[11,"eq","","",4,[[["proposalid",3]]]],[11,"ne","","",4,[[["proposalid",3]]]],[11,"eq","","",5,[[["methodauthzinfo",3]]]],[11,"ne","","",5,[[["methodauthzinfo",3]]]],[11,"eq","","",6,[[["canisterauthzinfo",3]]]],[11,"ne","","",6,[[["canisterauthzinfo",3]]]],[11,"eq","ic_nns_common::types","",7,[[["neuronid",3]]]],[11,"ne","","",7,[[["neuronid",3]]]],[11,"eq","","",8,[[["proposalid",3]]]],[11,"ne","","",8,[[["proposalid",3]]]],[11,"partial_cmp","","",8,[[["proposalid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["proposalid",3]]]],[11,"le","","",8,[[["proposalid",3]]]],[11,"gt","","",8,[[["proposalid",3]]]],[11,"ge","","",8,[[["proposalid",3]]]],[11,"fmt","ic_nns_common::init","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_common::pb::v1","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_common::types","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"hash","ic_nns_common::pb::v1","",3,[[]]],[11,"hash","ic_nns_common::types","",7,[[]]],[11,"hash","","",8,[[]]],[11,"from_str","","",7,[[],["result",4]]],[11,"_ty","ic_nns_common::init","",0,[[],["type",4]]],[11,"id","","",0,[[],["typeid",3]]],[11,"idl_serialize","","",0,[[],["result",4]]],[11,"_ty","ic_nns_common::pb::v1","",2,[[],["type",4]]],[11,"id","","",2,[[],["typeid",3]]],[11,"idl_serialize","","",2,[[],["result",4]]],[11,"_ty","","",3,[[],["type",4]]],[11,"id","","",3,[[],["typeid",3]]],[11,"idl_serialize","","",3,[[],["result",4]]],[11,"_ty","","",4,[[],["type",4]]],[11,"id","","",4,[[],["typeid",3]]],[11,"idl_serialize","","",4,[[],["result",4]]],[11,"_ty","","",5,[[],["type",4]]],[11,"id","","",5,[[],["typeid",3]]],[11,"idl_serialize","","",5,[[],["result",4]]],[11,"_ty","","",6,[[],["type",4]]],[11,"id","","",6,[[],["typeid",3]]],[11,"idl_serialize","","",6,[[],["result",4]]],[11,"_ty","ic_nns_common::types","",7,[[],["type",4]]],[11,"id","","",7,[[],["typeid",3]]],[11,"idl_serialize","","",7,[[],["result",4]]],[11,"_ty","","",8,[[],["type",4]]],[11,"id","","",8,[[],["typeid",3]]],[11,"idl_serialize","","",8,[[],["result",4]]],[11,"_ty","","",9,[[],["type",4]]],[11,"id","","",9,[[],["typeid",3]]],[11,"idl_serialize","","",9,[[],["result",4]]],[11,"_ty","","",10,[[],["type",4]]],[11,"id","","",10,[[],["typeid",3]]],[11,"idl_serialize","","",10,[[],["result",4]]],[11,"encode_raw","ic_nns_common::pb::v1","",2,[[]]],[11,"merge_field","","",2,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",2,[[]]],[11,"clear","","",2,[[]]],[11,"encode_raw","","",3,[[]]],[11,"merge_field","","",3,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"encode_raw","","",4,[[]]],[11,"merge_field","","",4,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",4,[[]]],[11,"clear","","",4,[[]]],[11,"encode_raw","","",5,[[]]],[11,"merge_field","","",5,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",5,[[]]],[11,"clear","","",5,[[]]],[11,"encode_raw","","",6,[[]]],[11,"merge_field","","",6,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",6,[[]]],[11,"clear","","",6,[[]]],[11,"deserialize","ic_nns_common::init","",0,[[],["result",4]]],[11,"deserialize","ic_nns_common::pb::v1","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","ic_nns_common::types","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]]],"p":[[3,"LifelineCanisterInitPayload"],[3,"LifelineCanisterInitPayloadBuilder"],[3,"CanisterId"],[3,"NeuronId"],[3,"ProposalId"],[3,"MethodAuthzInfo"],[3,"CanisterAuthzInfo"],[3,"NeuronId"],[3,"ProposalId"],[3,"MethodAuthzChange"],[4,"AuthzChangeOp"],[13,"Authorize"]]},\
"ic_nns_constants":{"doc":"","i":[[5,"memory_allocation_of","ic_nns_constants","Returns the memory allocation of the given nns canister.",null,[[["canisterid",3]]]],[0,"ids","","",null,null],[3,"TEST_NEURON_1_OWNER_KEYPAIR","ic_nns_constants::ids","",null,null],[3,"TEST_NEURON_1_OWNER_PUBKEY","","",null,null],[3,"TEST_NEURON_1_OWNER_PRINCIPAL","","",null,null],[3,"TEST_NEURON_2_OWNER_KEYPAIR","","",null,null],[3,"TEST_NEURON_2_OWNER_PUBKEY","","",null,null],[3,"TEST_NEURON_2_OWNER_PRINCIPAL","","",null,null],[3,"TEST_NEURON_3_OWNER_KEYPAIR","","",null,null],[3,"TEST_NEURON_3_OWNER_PUBKEY","","",null,null],[3,"TEST_NEURON_3_OWNER_PRINCIPAL","","",null,null],[3,"TEST_USER1_KEYPAIR","","TEST_USER1 is a generic test identity that can be used for…",null,null],[3,"TEST_USER1_PUBKEY","","",null,null],[3,"TEST_USER1_PRINCIPAL","","",null,null],[5,"ed25519_public_key_to_der","","This is copied from…",null,[[["vec",3]],["vec",3]]],[17,"REGISTRY_CANISTER_INDEX_IN_NNS_SUBNET","ic_nns_constants","",null,null],[17,"GOVERNANCE_CANISTER_INDEX_IN_NNS_SUBNET","","",null,null],[17,"LEDGER_CANISTER_INDEX_IN_NNS_SUBNET","","",null,null],[17,"ROOT_CANISTER_INDEX_IN_NNS_SUBNET","","",null,null],[17,"CYCLES_MINTING_CANISTER_INDEX_IN_NNS_SUBNET","","",null,null],[17,"LIFELINE_CANISTER_INDEX_IN_NNS_SUBNET","","",null,null],[17,"GENESIS_TOKEN_CANISTER_INDEX_IN_NNS_SUBNET","","",null,null],[17,"IDENTITY_CANISTER_INDEX_IN_NNS_SUBNET","","",null,null],[17,"NNS_UI_CANISTER_INDEX_IN_NNS_SUBNET","","",null,null],[17,"NNS_CANISTER_WASMS","","The names of all expected .wasm files to set up the NNS.",null,null],[17,"NUM_NNS_CANISTERS","","",null,null],[17,"REGISTRY_CANISTER_ID","","",null,null],[17,"GOVERNANCE_CANISTER_ID","","",null,null],[17,"LEDGER_CANISTER_ID","","",null,null],[17,"ROOT_CANISTER_ID","","",null,null],[17,"CYCLES_MINTING_CANISTER_ID","","",null,null],[17,"LIFELINE_CANISTER_ID","","",null,null],[17,"GENESIS_TOKEN_CANISTER_ID","","",null,null],[17,"IDENTITY_CANISTER_ID","","",null,null],[17,"NNS_UI_CANISTER_ID","","",null,null],[17,"ALL_NNS_CANISTER_IDS","","",null,null],[11,"from","ic_nns_constants::ids","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"deref","","",0,[[],["keypair",3]]],[11,"deref","","",1,[[],["userpublickey",3]]],[11,"deref","","",2,[[],["principalid",3]]],[11,"deref","","",3,[[],["keypair",3]]],[11,"deref","","",4,[[],["userpublickey",3]]],[11,"deref","","",5,[[],["principalid",3]]],[11,"deref","","",6,[[],["keypair",3]]],[11,"deref","","",7,[[],["userpublickey",3]]],[11,"deref","","",8,[[],["principalid",3]]],[11,"deref","","",9,[[],["keypair",3]]],[11,"deref","","",10,[[],["userpublickey",3]]],[11,"deref","","",11,[[],["principalid",3]]],[11,"initialize","","",0,[[]]],[11,"initialize","","",1,[[]]],[11,"initialize","","",2,[[]]],[11,"initialize","","",3,[[]]],[11,"initialize","","",4,[[]]],[11,"initialize","","",5,[[]]],[11,"initialize","","",6,[[]]],[11,"initialize","","",7,[[]]],[11,"initialize","","",8,[[]]],[11,"initialize","","",9,[[]]],[11,"initialize","","",10,[[]]],[11,"initialize","","",11,[[]]]],"p":[[3,"TEST_NEURON_1_OWNER_KEYPAIR"],[3,"TEST_NEURON_1_OWNER_PUBKEY"],[3,"TEST_NEURON_1_OWNER_PRINCIPAL"],[3,"TEST_NEURON_2_OWNER_KEYPAIR"],[3,"TEST_NEURON_2_OWNER_PUBKEY"],[3,"TEST_NEURON_2_OWNER_PRINCIPAL"],[3,"TEST_NEURON_3_OWNER_KEYPAIR"],[3,"TEST_NEURON_3_OWNER_PUBKEY"],[3,"TEST_NEURON_3_OWNER_PRINCIPAL"],[3,"TEST_USER1_KEYPAIR"],[3,"TEST_USER1_PUBKEY"],[3,"TEST_USER1_PRINCIPAL"]]},\
"ic_nns_governance":{"doc":"The purpose of the Network Nervous System (NNS) is to…","i":[[0,"governance","ic_nns_governance","The \'governance\' module contains the canister (smart…",null,null],[3,"Governance","ic_nns_governance::governance","The `Governance` canister implements the full public…",null,null],[12,"proto","","The Governance Protobuf which contains all persistent…",0,null],[12,"env","","Implementation of Environment to make unit testing easier.",0,null],[12,"topic_followee_index","","Cached data structure that (for each topic) maps a…",0,null],[12,"principal_to_neuron_ids_index","","Maps Principals to the Neuron IDs of all Neurons that have…",0,null],[12,"latest_gc_timestamp_seconds","","The time of the latest \\\"garbage collection\\\" - when…",0,null],[12,"latest_gc_num_proposals","","The number of proposals after the last time GC was run.",0,null],[17,"ONE_DAY_SECONDS","","",null,null],[17,"ONE_YEAR_SECONDS","","",null,null],[17,"ONE_MONTH_SECONDS","","",null,null],[17,"EXECUTE_NNS_FUNCTION_PAYLOAD_LISTING_BYTES_MAX","","",null,null],[17,"PROPOSAL_MOTION_TEXT_BYTES_MAX","","",null,null],[17,"MAX_DISSOLVE_DELAY_SECONDS","","",null,null],[17,"MAX_NEURON_AGE_FOR_AGE_BONUS","","",null,null],[17,"MIN_DISSOLVE_DELAY_FOR_VOTE_ELIGIBILITY_SECONDS","","The minimum dissolve delay so that a neuron may vote.",null,null],[17,"MAX_FOLLOWEES_PER_TOPIC","","The maximum amount of followees each neuron can establish…",null,null],[17,"MAX_NEURON_RECENT_BALLOTS","","The maximum amount of recent ballots to keep, per neuron.",null,null],[17,"REWARD_DISTRIBUTION_PERIOD_SECONDS","","The desired period for reward distribution events.",null,null],[17,"MAX_NUMBER_OF_PROPOSALS_WITH_BALLOTS","","The max number of unsettled proposals -- that is proposals…",null,null],[17,"MAX_NUMBER_OF_OPEN_MANAGE_NEURON_PROPOSALS","","The max number of open manage neuron proposals.",null,null],[8,"Environment","","A general trait for the environment in which governance is…",null,null],[10,"now","","Returns the current time, in seconds since the epoch.",1,[[]]],[10,"random_u64","","Returns a random number.",1,[[]]],[10,"random_byte_array","","Returns a random byte array with 32 bytes.",1,[[]]],[10,"execute_nns_function","","Execute a `ExecuteNnsFunction`. The standard…",1,[[["executennsfunction",3]],[["governanceerror",3],["result",4]]]],[8,"Ledger","","",null,null],[10,"transfer_funds","","Transfers funds from one of this canister\'s subaccount to…",2,[[["subaccount",3],["option",4],["accountidentifier",3]],[["pin",3],["box",3]]]],[10,"total_supply","","",2,[[],[["pin",3],["box",3]]]],[11,"new","","",0,[[["governanceproto",3],["environment",8],["box",3],["ledger",8],["box",3]]]],[11,"validate","","Validates that the underlying protobuf is well formed.",0,[[],[["governanceerror",3],["result",4]]]],[11,"get_neuron","","",0,[[["neuronid",3]],[["result",4],["governanceerror",3],["neuron",3]]]],[11,"get_neuron_mut","","",0,[[["neuronid",3]],[["result",4],["governanceerror",3],["neuron",3]]]],[11,"get_neuron_ids_by_principal","","Return the Neuron IDs of all Neurons that have `principal`…",0,[[["principalid",3]],["vec",3]]],[11,"list_neurons_by_principal","","See `ListNeurons`.",0,[[["principalid",3],["listneurons",3]],["listneuronsresponse",3]]],[11,"get_neuron_by_subaccount","","Returns a neuron, given a subaccount.",0,[[["subaccount",3]],[["option",4],["neuron",3]]]],[11,"get_neuron_by_subaccount_mut","","",0,[[["subaccount",3]],[["option",4],["neuron",3]]]],[11,"create_or_refresh_neuron","","Creates a new neuron or refreshes the stake of an existing…",0,[[["neuronstaketransfer",3]]]],[11,"claim_gtc_neurons","","Claim the neurons supplied by the GTC on behalf of…",0,[[["principalid",3],["vec",3],["neuronid",3],["principalid",3]],[["governanceerror",3],["result",4]]]],[11,"transfer_gtc_neuron","","Transfer a GTC neuron to a recipient neuron.",0,[[["principalid",3],["neuronid",3]]]],[11,"disburse_neuron","","Disburse the stake of a neuron.",0,[[["disburse",3],["principalid",3],["neuronid",3]]]],[11,"split_neuron","","Splits a neuron into two neurons.",0,[[["split",3],["principalid",3],["neuronid",3]]]],[11,"spawn_neuron","","Spawn an neuron from an existing neuron\'s maturity.",0,[[["principalid",3],["spawn",3],["neuronid",3]]]],[11,"disburse_to_neuron","","Disburse part of the stake of a neuron into a new neuron,…",0,[[["principalid",3],["disbursetoneuron",3],["neuronid",3]]]],[11,"set_proposal_execution_status","","Set the status of a proposal that is \'being executed\' to…",0,[[["result",4],["governanceerror",3]]]],[11,"get_neuron_info","","Returns the neuron info for a given neuron `id`. This…",0,[[["neuronid",3]],[["governanceerror",3],["result",4],["neuroninfo",3]]]],[11,"get_full_neuron","","Returns the complete neuron data for a given neuron `id`…",0,[[["neuronid",3],["principalid",3]],[["neuron",3],["result",4],["governanceerror",3]]]],[11,"get_node_providers","","",0,[[]]],[11,"latest_reward_event","","",0,[[],["rewardevent",3]]],[11,"get_proposal_info","","Tries to get a proposal given a proposal id",0,[[["principalid",3]],[["proposalinfo",3],["option",4]]]],[11,"get_pending_proposals","","Gets all open proposals",0,[[["principalid",3]],[["vec",3],["proposalinfo",3]]]],[11,"get_pending_proposals_data","","Iterator over proposals info of pending proposals.",0,[[]]],[11,"get_proposal_data","","",0,[[],[["proposaldata",3],["option",4]]]],[11,"list_proposals","","Returns the proposals info of proposals with proposal ID…",0,[[["principalid",3],["listproposalinfo",3]],["listproposalinforesponse",3]]],[11,"process_proposal","","This method attempts to move a proposal forward in the…",0,[[]]],[11,"approve_genesis_kyc","","Mark all Neurons controlled by the given principals as…",0,[[]]],[11,"make_proposal","","",0,[[["neuronid",3],["principalid",3],["proposal",3]],[["proposalid",3],["governanceerror",3],["result",4]]]],[11,"manage_neuron","","",0,[[["principalid",3],["manageneuron",3]]]],[11,"maybe_gc","","Garbage collect obsolete data from the governance canister.",0,[[]]],[11,"run_periodic_tasks","","Triggers a reward distribution event if enough time has…",0,[[]]],[0,"handler_utils","ic_nns_governance","Function to submit a proposal for an external update from…",null,null],[5,"submit_proposal","ic_nns_governance::handler_utils","Wraps the given proposal_payload into a proposal; sends it…",null,[[["nnsfunction",4],["neuronid",3]]]],[0,"init","ic_nns_governance","",null,null],[3,"GovernanceCanisterInitPayloadBuilder","ic_nns_governance::init","",null,null],[12,"proto","","",3,null],[11,"new","","",3,[[]]],[11,"new_neuron_id","","",3,[[],["neuronid",3]]],[11,"get_balance","","",3,[[]]],[11,"with_governance_proto","","",3,[[["governance",3]]]],[11,"make_subaccount","","",3,[[],["subaccount",3]]],[11,"with_test_neurons","","Initializes the governance canister with a few neurons to…",3,[[]]],[11,"add_all_neurons_from_csv_file","","Adds all the neurons from the specified CSV file.",3,[[["path",3]]]],[11,"add_gtc_neurons","","Add the neurons created for GTC accounts to Governance\'s…",3,[[["vec",3],["neuron",3]]]],[11,"build","","",3,[[],["governance",3]]],[0,"pb","ic_nns_governance","",null,null],[0,"v1","ic_nns_governance::pb","",null,null],[3,"NodeProvider","ic_nns_governance::pb::v1","The entity that owns the nodes that run the network.",null,null],[12,"id","","The ID of the node provider.",4,null],[3,"BallotInfo","","How did a neuron vote in the recent past? This data is…",null,null],[12,"proposal_id","","",5,null],[12,"vote","","",5,null],[3,"NeuronInfo","","The result of querying for the state of a single neuron.",null,null],[12,"retrieved_at_timestamp_seconds","","The exact time at which this data was computed. This…",6,null],[12,"state","","The current state of the neuron. See [NeuronState] for a…",6,null],[12,"age_seconds","","The current age of the neuron. See [Neuron::age_seconds]…",6,null],[12,"dissolve_delay_seconds","","The current dissolve delay of the neuron. See…",6,null],[12,"recent_ballots","","See [Neuron::recent_ballots] for a description.",6,null],[12,"voting_power","","Current voting power of the neuron.",6,null],[12,"created_timestamp_seconds","","When the Neuron was created. A neuron can only vote on…",6,null],[3,"NeuronStakeTransfer","","A transfer performed from some account to stake a new…",null,null],[12,"transfer_timestamp","","When the transfer arrived at the governance canister.",7,null],[12,"from","","The principal that made the transfer.",7,null],[12,"from_subaccount","","The (optional) subaccount from which the transfer was made.",7,null],[12,"to_subaccount","","The subaccount to which the transfer was made.",7,null],[12,"neuron_stake_e8s","","The amount of stake that was transfered.",7,null],[12,"block_height","","The block height at which the transfer occurred.",7,null],[12,"memo","","The memo sent with the transfer.",7,null],[3,"Neuron","","This structure represents a neuron \\\"at rest\\\" in governance…",null,null],[12,"id","","The id of the neuron.",8,null],[12,"account","","The principal of the ICP ledger account where the locked…",8,null],[12,"controller","","The principal that actually controls the neuron. The…",8,null],[12,"hot_keys","","Keys that can be used to perform actions with limited…",8,null],[12,"cached_neuron_stake_e8s","","The amount of staked ICP tokens, measured in fractions of…",8,null],[12,"neuron_fees_e8s","","The amount of ICP that this neuron has forfeited due to…",8,null],[12,"created_timestamp_seconds","","When the Neuron was created. A neuron can only vote on…",8,null],[12,"aging_since_timestamp_seconds","","The timestamp, in seconds from the Unix epoch,…",8,null],[12,"followees","","Map `Topic` to followees. The key is represented by an…",8,null],[12,"recent_ballots","","Information about how this neuron voted in the recent…",8,null],[12,"kyc_verified","","`true` if this neuron has passed KYC, `false` otherwise",8,null],[12,"transfer","","The record of the transfer that was made to create this…",8,null],[12,"maturity_e8s_equivalent","","The accumulated maturity of the neuron, in \\\"e8s equivalent\\\".",8,null],[12,"not_for_profit","","Whether this neuron is \\\"Not for profit\\\", making it…",8,null],[12,"dissolve_state","","At any time, at most one of `when_dissolved` and…",8,null],[3,"ExecuteNnsFunction","","Payload of a proposal that calls a function on another NNS…",null,null],[12,"nns_function","","This enum value determines what canister to call and what…",9,null],[12,"payload","","The payload of the NNS function.",9,null],[3,"Motion","","If adopted, a motion should guide the future strategy of…",null,null],[12,"motion_text","","The text of the motion. Maximum 100kib.",10,null],[3,"ApproveGenesisKyc","","For all Neurons controlled by the given principals, set…",null,null],[12,"principals","","",11,null],[3,"AddOrRemoveNodeProvider","","Adds and/or removes NodeProviders from the list of current…",null,null],[12,"change","","",12,null],[3,"RewardNodeProvider","","This proposal payload is used to reward a node provider by…",null,null],[12,"node_provider","","The NodeProvider to reward.",13,null],[12,"amount_e8s","","The amount of e8s to mint to reward the node provider.",13,null],[12,"create_neuron","","If this is specified, executing this proposal will create…",13,null],[3,"SetDefaultFollowees","","Changes the default followees to match the one provided.…",null,null],[12,"default_followees","","",14,null],[3,"Proposal","","A proposal is the immutable input of a proposal…",null,null],[12,"summary","","Text providing a short description of the proposal,…",15,null],[12,"url","","The Web address of additional content required to evaluate…",15,null],[12,"action","","This section describes the action that the proposal…",15,null],[3,"ManageNeuron","","All operations that modify the state of an existing neuron…",null,null],[12,"id","","The ID of the neuron to manage.",16,null],[12,"command","","",16,null],[3,"ManageNeuronResponse","","The response of the ManageNeuron command",null,null],[12,"command","","",17,null],[3,"GovernanceError","","",null,null],[12,"error_type","","",18,null],[12,"error_message","","",18,null],[3,"Ballot","","",null,null],[12,"vote","","",19,null],[12,"voting_power","","",19,null],[3,"Tally","","A tally of votes.",null,null],[12,"timestamp_seconds","","When was this tally made",20,null],[12,"yes","","Yeses, in voting power unit.",20,null],[12,"no","","Noes, in voting power unit.",20,null],[12,"total","","Total voting power unit of eligible neurons. Should always…",20,null],[3,"ProposalData","","A ProposalData contains everything related to an open…",null,null],[12,"id","","This is stored here temporarily. It is also stored on the…",21,null],[12,"proposer","","Immutable: The ID of the neuron that made this proposal.",21,null],[12,"reject_cost_e8s","","Immutable: The amount of ICP in E8s to be charged to the…",21,null],[12,"proposal","","Immutable: The proposal originally submitted.",21,null],[12,"proposal_timestamp_seconds","","Immutable: The timestamp, in seconds from the Unix epoch,…",21,null],[12,"ballots","","Map neuron ID to to the neuron\'s vote and voting power.…",21,null],[12,"latest_tally","","Latest tally. Recomputed for open proposals, when…",21,null],[12,"decided_timestamp_seconds","","If specified: the timestamp when this proposal was adopted…",21,null],[12,"executed_timestamp_seconds","","When an adopted proposal has been executed, this is set to…",21,null],[12,"failed_timestamp_seconds","","When an adopted proposal has failed to be executed, this…",21,null],[12,"reward_event_round","","The reward event round at which rewards for votes on this…",21,null],[3,"ProposalInfo","","This is a view of the ProposalData returned by API queries…",null,null],[12,"id","","The unique id for this proposal.",22,null],[12,"proposer","","The ID of the neuron that made this proposal.",22,null],[12,"reject_cost_e8s","","The amount of ICP in E8s to be charged to the proposer if…",22,null],[12,"proposal","","The proposal originally submitted.",22,null],[12,"proposal_timestamp_seconds","","The timestamp, in seconds from the Unix epoch, when this…",22,null],[12,"ballots","","See [PropopsalData::ballots].",22,null],[12,"latest_tally","","See [PropopsalData::latest_tally].",22,null],[12,"decided_timestamp_seconds","","See [PropopsalData::decided_timestamp_seconds].",22,null],[12,"executed_timestamp_seconds","","See [PropopsalData::executed_timestamp_seconds].",22,null],[12,"failed_timestamp_seconds","","See [PropopsalData::failed_timestamp_seconds].",22,null],[12,"reward_event_round","","See [PropopsalData::reward_event_round].",22,null],[12,"topic","","Derived - see [Topic] for more information",22,null],[12,"status","","Derived - see [ProposalStatus] for more information",22,null],[12,"reward_status","","Derived - see [ProposalRewardStatus] for more information",22,null],[3,"NetworkEconomics","","Network economics contains the parameters for several…",null,null],[12,"reject_cost_e8s","","The number of E8s (10E-8 of an ICP token) that a rejected…",23,null],[12,"neuron_minimum_stake_e8s","","The minium number of E8s that can be staked in a neuron.",23,null],[12,"neuron_management_fee_per_proposal_e8s","","The number of E8s (10E-8 of an ICP token) that it costs to…",23,null],[12,"minimum_icp_xdr_rate","","The minimum number that the ICP/XDR conversion rate can be…",23,null],[12,"neuron_spawn_dissolve_delay_seconds","","The dissolve delay of a neuron spawned from the maturity…",23,null],[12,"maximum_node_provider_rewards_e8s","","The maximum rewards to be distributed to NodeProviders in…",23,null],[12,"transaction_fee_e8s","","The transaction fee that must be paid for each ledger…",23,null],[12,"max_proposals_to_keep_per_topic","","The maximum number of proposals to keep, per topic. When…",23,null],[3,"RewardEvent","","A reward event is an event at which neuron maturity is…",null,null],[12,"day_after_genesis","","This reward event correspond to a time interval that ends…",24,null],[12,"actual_timestamp_seconds","","The timestamp at which this reward event took place, in…",24,null],[12,"settled_proposals","","The list of proposals that were taken into account during…",24,null],[12,"distributed_e8s_equivalent","","The total amount of reward that was distributed during…",24,null],[3,"Governance","","This represents the whole NNS governance system. It…",null,null],[12,"neurons","","Current set of neurons.",25,null],[12,"proposals","","Proposals.",25,null],[12,"to_claim_transfers","","The transfers that have been made to stake new neurons,…",25,null],[12,"wait_for_quiet_threshold_seconds","","Also known as the \'normal voting period\'. The maximum time…",25,null],[12,"authz","","The authz information for the governance canister.",25,null],[12,"economics","","The network economics configuration parameters.",25,null],[12,"latest_reward_event","","The last reward event. Should never be missing.",25,null],[12,"in_flight_commands","","Set of in-flight neuron ledger commands.",25,null],[12,"genesis_timestamp_seconds","","The timestamp, in seconds since the unix epoch, at which…",25,null],[12,"node_providers","","The entities that own the nodes running the IC.",25,null],[12,"default_followees","","Default followees",25,null],[12,"short_voting_period_seconds","","The maximum time a proposal of a topic with short voting…",25,null],[3,"ListProposalInfo","","Proposals with restricted voting are not included unless…",null,null],[12,"limit","","Limit on the number of [ProposalInfo] to return. If no…",26,null],[12,"before_proposal","","If specified, only return proposals that are stricty…",26,null],[12,"exclude_topic","","Exclude proposals with a topic in this list. This is…",26,null],[12,"include_reward_status","","Include proposals that have a reward status in this list…",26,null],[12,"include_status","","Include proposals that have a status in this list (see…",26,null],[3,"ListProposalInfoResponse","","",null,null],[12,"proposal_info","","",27,null],[3,"ListNeurons","","A request to list neurons. The \\\"requested list\\\", i.e., the…",null,null],[12,"neuron_ids","","The neurons to get information about. The \\\"requested list\\\"…",28,null],[12,"include_neurons_readable_by_caller","","If true, the \\\"requested list\\\" also contains the neuron ID…",28,null],[3,"ListNeuronsResponse","","A response to a `ListNeurons` request.",null,null],[12,"neuron_infos","","For each neuron ID in the \\\"requested list\\\", if this neuron…",29,null],[12,"full_neurons","","For each neuron ID in the \\\"requested list\\\", if the neuron…",29,null],[4,"Topic","","Proposal types are organized into topics. Neurons can…",null,null],[13,"Unspecified","","The `Unspecified` topic is used as a fallback when…",30,null],[13,"NeuronManagement","","A special topic by means of which a neuron can be managed…",30,null],[13,"ExchangeRate","","All proposals that provide “real time” information about…",30,null],[13,"NetworkEconomics","","All proposals that administer network economics, for…",30,null],[13,"Governance","","All proposals that administer governance, for example to…",30,null],[13,"NodeAdmin","","All proposals that administer node machines, including,…",30,null],[13,"ParticipantManagement","","All proposals that administer network participants, for…",30,null],[13,"SubnetManagement","","All proposals that administer network subnets, for example…",30,null],[13,"NetworkCanisterManagement","","Installing and upgrading “system” canisters that belong to…",30,null],[13,"Kyc","","Proposals that update KYC information for regulatory…",30,null],[13,"NodeProviderRewards","","Topic for proposals to reward node providers.",30,null],[4,"NeuronState","","Every neuron is in one of three states.",null,null],[13,"Unspecified","","Not a valid state. Required by Protobufs.",31,null],[13,"Locked","","In this state, the neuron is locked with a specific…",31,null],[13,"Dissolving","","In this state, the neuron\'s `dissolve_delay` decreases…",31,null],[13,"Dissolved","","In the dissolved state, the neuron\'s stake can be…",31,null],[4,"Vote","","The types of votes the Neuron can issue.",null,null],[13,"Unspecified","","This exists because proto3 defaults to the 0 value on…",32,null],[13,"Yes","","Vote for the proposal to be adopted.",32,null],[13,"No","","Vote for the proposal to be rejected.",32,null],[4,"NnsFunction","","List of NNS functions that can be called by proposals.",null,null],[13,"Unspecified","","This exists because proto3 defaults to the 0 value on enums.",33,null],[13,"CreateSubnet","","Combine a specified set of nodes, typically drawn from…",33,null],[13,"AddNodeToSubnet","","Add a new node to a subnet. The node cannot be currently…",33,null],[13,"NnsCanisterInstall","","A proposal to add a new canister to be installed and…",33,null],[13,"NnsCanisterUpgrade","","A proposal to upgrade an existing canister in the NNS…",33,null],[13,"BlessReplicaVersion","","A proposal to bless a new version to which the replicas…",33,null],[13,"RecoverSubnet","","Update a subnet\'s recovery CUP (used to recover subnets…",33,null],[13,"UpdateConfigOfSubnet","","Update a subnet\'s configuration. This proposal updates the…",33,null],[13,"AssignNoid","","Assign an identity to a node operator, such as a funding…",33,null],[13,"NnsRootUpgrade","","A proposal to upgrade the root canister in the NNS…",33,null],[13,"IcpXdrConversionRate","","Update the ICP/XDR conversion rate. Changes the ICP-to-XDR…",33,null],[13,"UpdateSubnetReplicaVersion","","Update the replica version running on a given subnet. The…",33,null],[13,"ClearProvisionalWhitelist","","",33,null],[13,"RemoveNodesFromSubnet","","Removes a node from a subnet. The node must be currently…",33,null],[13,"SetAuthorizedSubnetworks","","Informs the cycles minting canister that a certain…",33,null],[13,"SetFirewallConfig","","Change the Firewall configuration in the registry.",33,null],[13,"UpdateNodeOperatorConfig","","Change a Node Operator\'s allowance in the registry.",33,null],[13,"StopOrStartNnsCanister","","Stop or start an NNS canister",33,null],[4,"ProposalStatus","","The proposal status, with respect to decision making and…",null,null],[13,"Unknown","","",34,null],[13,"Open","","A decision (adopt/reject) has yet to be made.",34,null],[13,"Rejected","","The proposal has been rejected.",34,null],[13,"Adopted","","The proposal has been adopted (sometimes also called…",34,null],[13,"Executed","","The proposal was adopted and successfully executed.",34,null],[13,"Failed","","The proposal was adopted, but execution failed.",34,null],[4,"ProposalRewardStatus","","The proposal status, with respect to reward distribution.…",null,null],[13,"Unknown","","",35,null],[13,"AcceptVotes","","The proposal still accept votes, for the purpose of vote…",35,null],[13,"ReadyToSettle","","The proposal no longer accepts votes. It is due to settle…",35,null],[13,"Settled","","The proposal has been taken into account in a reward event.",35,null],[13,"Ineligible","","The proposal is not eligible to be taken into account in a…",35,null],[0,"neuron","","Nested message and enum types in `Neuron`.",null,null],[3,"Followees","ic_nns_governance::pb::v1::neuron","Protobuf representing a list of followees of a neuron for…",null,null],[12,"followees","","",36,null],[4,"DissolveState","","At any time, at most one of `when_dissolved` and…",null,null],[13,"WhenDissolvedTimestampSeconds","","When the dissolve timer is running, this stores the…",37,null],[13,"DissolveDelaySeconds","","When the dissolve timer is stopped, this stores how much…",37,null],[11,"encode","","",37,[[]]],[11,"merge","","",37,[[["wiretype",4],["decodecontext",3],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",37,[[]]],[0,"add_or_remove_node_provider","ic_nns_governance::pb::v1","Nested message and enum types in `AddOrRemoveNodeProvider`.",null,null],[4,"Change","ic_nns_governance::pb::v1::add_or_remove_node_provider","",null,null],[13,"ToAdd","","",38,null],[13,"ToRemove","","",38,null],[11,"encode","","",38,[[]]],[11,"merge","","",38,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",38,[[]]],[0,"reward_node_provider","ic_nns_governance::pb::v1","Nested message and enum types in `RewardNodeProvider`.",null,null],[3,"CreateNeuron","ic_nns_governance::pb::v1::reward_node_provider","This message specifies how to create a new neuron on…",null,null],[12,"dissolve_delay_seconds","","",39,null],[0,"proposal","ic_nns_governance::pb::v1","Nested message and enum types in `Proposal`.",null,null],[4,"Action","ic_nns_governance::pb::v1::proposal","This section describes the action that the proposal…",null,null],[13,"ManageNeuron","","This type of proposal calls a major function on a…",40,null],[13,"ManageNetworkEconomics","","Propose a change to some network parameters of network…",40,null],[13,"Motion","","See [Motion]",40,null],[13,"ExecuteNnsFunction","","A update affecting something outside of the Governance…",40,null],[13,"ApproveGenesisKyc","","Approve Genesis KYC for a given list of principals.",40,null],[13,"AddOrRemoveNodeProvider","","Add/remove NodeProvider from the list of NodeProviders",40,null],[13,"RewardNodeProvider","","Reward a NodeProvider",40,null],[13,"SetDefaultFollowees","","Set the default following",40,null],[11,"encode","","",40,[[]]],[11,"merge","","",40,[[["wiretype",4],["option",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",40,[[]]],[0,"manage_neuron","ic_nns_governance::pb::v1","Nested message and enum types in `ManageNeuron`.",null,null],[3,"IncreaseDissolveDelay","ic_nns_governance::pb::v1::manage_neuron","The dissolve delay of a neuron can be increased up to a…",null,null],[12,"additional_dissolve_delay_seconds","","",41,null],[3,"StartDissolving","","",null,null],[3,"StopDissolving","","",null,null],[3,"AddHotKey","","Add a new hot key that can be used to manage the neuron.…",null,null],[12,"new_hot_key","","",42,null],[3,"RemoveHotKey","","Remove a hot key that has been previously assigned to the…",null,null],[12,"hot_key_to_remove","","",43,null],[3,"Configure","","Commands that only configure a given neuron, but do not…",null,null],[12,"operation","","",44,null],[3,"Disburse","","Disburse this neuron\'s stake: transfer the staked ICP to…",null,null],[12,"amount","","The (optional) amount to transfer. If not specified the…",45,null],[12,"to_account","","The principal to which to transfer the stake.",45,null],[3,"Split","","Split this neuron into two neurons.",null,null],[12,"amount_e8s","","The amount to split to the child neuron.",46,null],[3,"Spawn","","When the maturity of a neuron has risen above a threshold,…",null,null],[12,"new_controller","","If not set, the spawned neuron will have the same…",47,null],[3,"DisburseToNeuron","","Disburse a portion of this neuron\'s stake into another…",null,null],[12,"new_controller","","The controller of the new neuron (must be set).",48,null],[12,"amount_e8s","","The amount to disburse.",48,null],[12,"dissolve_delay_seconds","","The dissolve delay of the new neuron.",48,null],[12,"kyc_verified","","Whether the new neuron has been kyc verified.",48,null],[12,"nonce","","The nonce with whitch to create the subaccount.",48,null],[3,"Follow","","Add a rule that enables the neuron to vote automatically…",null,null],[12,"topic","","Topic UNSPECIFIED means add following for the \'catch all\'.",49,null],[12,"followees","","",49,null],[3,"RegisterVote","","Have the neuron vote to either adopt or reject a proposal…",null,null],[12,"proposal","","",50,null],[12,"vote","","",50,null],[4,"Command","","",null,null],[13,"Configure","","",51,null],[13,"Disburse","","",51,null],[13,"Spawn","","",51,null],[13,"Follow","","",51,null],[13,"MakeProposal","","",51,null],[13,"RegisterVote","","",51,null],[13,"Split","","",51,null],[13,"DisburseToNeuron","","",51,null],[0,"configure","","Nested message and enum types in `Configure`.",null,null],[4,"Operation","ic_nns_governance::pb::v1::manage_neuron::configure","",null,null],[13,"IncreaseDissolveDelay","","",52,null],[13,"StartDissolving","","",52,null],[13,"StopDissolving","","",52,null],[13,"AddHotKey","","",52,null],[13,"RemoveHotKey","","",52,null],[11,"encode","","",52,[[]]],[11,"merge","","",52,[[["wiretype",4],["decodecontext",3],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",52,[[]]],[0,"disburse","ic_nns_governance::pb::v1::manage_neuron","Nested message and enum types in `Disburse`.",null,null],[3,"Amount","ic_nns_governance::pb::v1::manage_neuron::disburse","",null,null],[12,"e8s","","",53,null],[11,"topic","ic_nns_governance::pb::v1::manage_neuron","Returns the enum value of `topic`, or the default if the…",49,[[],["topic",4]]],[11,"set_topic","","Sets `topic` to the provided enum value.",49,[[["topic",4]]]],[11,"vote","","Returns the enum value of `vote`, or the default if the…",50,[[],["vote",4]]],[11,"set_vote","","Sets `vote` to the provided enum value.",50,[[["vote",4]]]],[11,"encode","","",51,[[]]],[11,"merge","","",51,[[["wiretype",4],["decodecontext",3],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",51,[[]]],[0,"manage_neuron_response","ic_nns_governance::pb::v1","Nested message and enum types in `ManageNeuronResponse`.",null,null],[3,"ConfigureResponse","ic_nns_governance::pb::v1::manage_neuron_response","",null,null],[3,"DisburseResponse","","",null,null],[12,"transfer_block_height","","The block height at which the disburse transfer happened",54,null],[3,"SpawnResponse","","",null,null],[12,"created_neuron_id","","The ID of the Neuron created from spawning a Neuron",55,null],[3,"FollowResponse","","",null,null],[3,"MakeProposalResponse","","",null,null],[12,"proposal_id","","The ID of the created proposal",56,null],[3,"RegisterVoteResponse","","",null,null],[3,"SplitResponse","","",null,null],[12,"created_neuron_id","","The ID of the Neuron created from splitting another Neuron",57,null],[3,"DisburseToNeuronResponse","","",null,null],[12,"created_neuron_id","","The ID of the Neuron created from disbursing a Neuron",58,null],[4,"Command","","",null,null],[13,"Error","","",59,null],[13,"Configure","","",59,null],[13,"Disburse","","",59,null],[13,"Spawn","","",59,null],[13,"Follow","","",59,null],[13,"MakeProposal","","",59,null],[13,"RegisterVote","","",59,null],[13,"Split","","",59,null],[13,"DisburseToNeuron","","",59,null],[11,"encode","","",59,[[]]],[11,"merge","","",59,[[["wiretype",4],["decodecontext",3],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",59,[[]]],[0,"governance_error","ic_nns_governance::pb::v1","Nested message and enum types in `GovernanceError`.",null,null],[4,"ErrorType","ic_nns_governance::pb::v1::governance_error","",null,null],[13,"Unspecified","","",60,null],[13,"Ok","","The operation was successfully completed.",60,null],[13,"Unavailable","","This operation is not available, e.g., not implemented.",60,null],[13,"NotAuthorized","","The caller is not authorized to perform this operation.",60,null],[13,"NotFound","","The specified neuron was not found.",60,null],[13,"InvalidCommand","","The command was missing or invalid. This is a permanent…",60,null],[13,"RequiresLocked","","The neuron is not locked and the operation requires it to…",60,null],[13,"RequiresDissolving","","The neuron is not dissolving and the operation requires it…",60,null],[13,"RequiresDissolved","","The neuron is not dissolved and the operation requires it…",60,null],[13,"HotKey","","When adding or removing a hot key: the key to add was…",60,null],[13,"ResourceExhausted","","Some canister side resource is exhausted, so this…",60,null],[13,"PreconditionFailed","","Some precondition for executing this method was not met.",60,null],[13,"External","","Executing this method failed for some reason external to…",60,null],[13,"LedgerUpdateOngoing","","A neuron has an ongoing ledger update and thus can\'t be…",60,null],[13,"InsufficientFunds","","There wasn\'t enough funds to perform the operation.",60,null],[13,"InvalidPrincipal","","The principal provided was invalid.",60,null],[13,"InvalidProposal","","The proposal\'s parameters violate size restrictions.",60,null],[11,"is_valid","","Returns `true` if `value` is a variant of `ErrorType`.",60,[[]]],[11,"from_i32","","Converts an `i32` to a `ErrorType`, or `None` if `value`…",60,[[],[["errortype",4],["option",4]]]],[0,"governance","ic_nns_governance::pb::v1","Nested message and enum types in `Governance`.",null,null],[3,"NeuronInFlightCommand","ic_nns_governance::pb::v1::governance","The possible commands that require interaction with the…",null,null],[12,"timestamp","","The timestamp at which the command was issued, for…",61,null],[12,"command","","",61,null],[0,"neuron_in_flight_command","","Nested message and enum types in `NeuronInFlightCommand`.",null,null],[4,"Command","ic_nns_governance::pb::v1::governance::neuron_in_flight_command","",null,null],[13,"Disburse","","",62,null],[13,"Split","","",62,null],[13,"Spawn","","",62,null],[13,"DisburseToNeuron","","",62,null],[11,"encode","","",62,[[]]],[11,"merge","","",62,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",62,[[]]],[11,"vote","ic_nns_governance::pb::v1","Returns the enum value of `vote`, or the default if the…",5,[[],["vote",4]]],[11,"set_vote","","Sets `vote` to the provided enum value.",5,[[["vote",4]]]],[11,"state","","Returns the enum value of `state`, or the default if the…",6,[[],["neuronstate",4]]],[11,"set_state","","Sets `state` to the provided enum value.",6,[[["neuronstate",4]]]],[11,"nns_function","","Returns the enum value of `nns_function`, or the default…",9,[[],["nnsfunction",4]]],[11,"set_nns_function","","Sets `nns_function` to the provided enum value.",9,[[["nnsfunction",4]]]],[11,"error_type","","Returns the enum value of `error_type`, or the default if…",18,[[],["errortype",4]]],[11,"set_error_type","","Sets `error_type` to the provided enum value.",18,[[["errortype",4]]]],[11,"vote","","Returns the enum value of `vote`, or the default if the…",19,[[],["vote",4]]],[11,"set_vote","","Sets `vote` to the provided enum value.",19,[[["vote",4]]]],[11,"topic","","Returns the enum value of `topic`, or the default if the…",22,[[],["topic",4]]],[11,"set_topic","","Sets `topic` to the provided enum value.",22,[[["topic",4]]]],[11,"status","","Returns the enum value of `status`, or the default if the…",22,[[],["proposalstatus",4]]],[11,"set_status","","Sets `status` to the provided enum value.",22,[[["proposalstatus",4]]]],[11,"reward_status","","Returns the enum value of `reward_status`, or the default…",22,[[],["proposalrewardstatus",4]]],[11,"set_reward_status","","Sets `reward_status` to the provided enum value.",22,[[["proposalrewardstatus",4]]]],[11,"exclude_topic","","Returns an iterator which yields the valid enum values…",26,[[],[["filtermap",3],["cloned",3]]]],[11,"push_exclude_topic","","Appends the provided enum value to `exclude_topic`.",26,[[["topic",4]]]],[11,"include_reward_status","","Returns an iterator which yields the valid enum values…",26,[[],[["cloned",3],["filtermap",3]]]],[11,"push_include_reward_status","","Appends the provided enum value to `include_reward_status`.",26,[[["proposalrewardstatus",4]]]],[11,"include_status","","Returns an iterator which yields the valid enum values…",26,[[],[["filtermap",3],["cloned",3]]]],[11,"push_include_status","","Appends the provided enum value to `include_status`.",26,[[["proposalstatus",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `Topic`.",30,[[]]],[11,"from_i32","","Converts an `i32` to a `Topic`, or `None` if `value` is…",30,[[],[["topic",4],["option",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `NeuronState`.",31,[[]]],[11,"from_i32","","Converts an `i32` to a `NeuronState`, or `None` if `value`…",31,[[],[["option",4],["neuronstate",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `Vote`.",32,[[]]],[11,"from_i32","","Converts an `i32` to a `Vote`, or `None` if `value` is not…",32,[[],[["vote",4],["option",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `NnsFunction`.",33,[[]]],[11,"from_i32","","Converts an `i32` to a `NnsFunction`, or `None` if `value`…",33,[[],[["nnsfunction",4],["option",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `ProposalStatus`.",34,[[]]],[11,"from_i32","","Converts an `i32` to a `ProposalStatus`, or `None` if…",34,[[],[["option",4],["proposalstatus",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of…",35,[[]]],[11,"from_i32","","Converts an `i32` to a `ProposalRewardStatus`, or `None`…",35,[[],[["option",4],["proposalrewardstatus",4]]]],[0,"proposal_submission","ic_nns_governance","",null,null],[5,"create_external_update_proposal_candid","ic_nns_governance::proposal_submission","Simplified the process of creating an ExternalUpdate…",null,[[["nnsfunction",4],["string",3],["candidtype",8]],["proposal",3]]],[5,"create_external_update_proposal_binary","","",null,[[["nnsfunction",4],["vec",3],["string",3]],["proposal",3]]],[5,"create_make_proposal_payload","","Wraps the given proposal into a MakeProposal command, and…",null,[[["proposal",3],["neuronid",3]],["manageneuron",3]]],[5,"decode_make_proposal_response","","",null,[[["vec",3]],[["string",3],["proposalid",3],["result",4]]]],[0,"stable_mem_utils","ic_nns_governance","Implements `BufferedStableMemWriter` and…",null,null],[3,"BufferedStableMemWriter","ic_nns_governance::stable_mem_utils","An implementation of `BufMut` that writes to stable memory…",null,null],[3,"BufferedStableMemReader","","An implementation of `Buf` that reads from stable memory…",null,null],[11,"new","","Create a buffered writer with the given buffer size.",63,[[]]],[11,"flush","","Write the buffer contents to stable memory.",63,[[]]],[11,"new","","Create a buffered reader with the given buffer size.",64,[[]]],[11,"from","ic_nns_governance::governance","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","ic_nns_governance::init","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","ic_nns_governance::pb::v1","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"proxy_encode","","",4,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",4,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",4,[[]]],[11,"from_proto","","",4,[[],[["result",4],["string",3]]]],[11,"to_proto","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"proxy_encode","","",5,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",5,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",5,[[]]],[11,"from_proto","","",5,[[],[["result",4],["string",3]]]],[11,"to_proto","","",5,[[]]],[11,"equivalent","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"proxy_encode","","",6,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",6,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",6,[[]]],[11,"from_proto","","",6,[[],[["result",4],["string",3]]]],[11,"to_proto","","",6,[[]]],[11,"equivalent","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"proxy_encode","","",7,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",7,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",7,[[]]],[11,"from_proto","","",7,[[],[["result",4],["string",3]]]],[11,"to_proto","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"proxy_encode","","",8,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",8,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",8,[[]]],[11,"from_proto","","",8,[[],[["result",4],["string",3]]]],[11,"to_proto","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"proxy_encode","","",9,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",9,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",9,[[]]],[11,"from_proto","","",9,[[],[["result",4],["string",3]]]],[11,"to_proto","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"proxy_encode","","",10,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",10,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",10,[[]]],[11,"from_proto","","",10,[[],[["result",4],["string",3]]]],[11,"to_proto","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"proxy_encode","","",11,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",11,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",11,[[]]],[11,"from_proto","","",11,[[],[["result",4],["string",3]]]],[11,"to_proto","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"proxy_encode","","",12,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",12,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",12,[[]]],[11,"from_proto","","",12,[[],[["result",4],["string",3]]]],[11,"to_proto","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"proxy_encode","","",13,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",13,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",13,[[]]],[11,"from_proto","","",13,[[],[["result",4],["string",3]]]],[11,"to_proto","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"proxy_encode","","",14,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",14,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",14,[[]]],[11,"from_proto","","",14,[[],[["result",4],["string",3]]]],[11,"to_proto","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"proxy_encode","","",15,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",15,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",15,[[]]],[11,"from_proto","","",15,[[],[["result",4],["string",3]]]],[11,"to_proto","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"proxy_encode","","",16,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",16,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",16,[[]]],[11,"from_proto","","",16,[[],[["result",4],["string",3]]]],[11,"to_proto","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"proxy_encode","","",17,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",17,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",17,[[]]],[11,"from_proto","","",17,[[],[["result",4],["string",3]]]],[11,"to_proto","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"proxy_encode","","",18,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",18,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",18,[[]]],[11,"from_proto","","",18,[[],[["result",4],["string",3]]]],[11,"to_proto","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"proxy_encode","","",19,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",19,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",19,[[]]],[11,"from_proto","","",19,[[],[["result",4],["string",3]]]],[11,"to_proto","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"proxy_encode","","",20,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",20,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",20,[[]]],[11,"from_proto","","",20,[[],[["result",4],["string",3]]]],[11,"to_proto","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"proxy_encode","","",21,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",21,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",21,[[]]],[11,"from_proto","","",21,[[],[["result",4],["string",3]]]],[11,"to_proto","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"proxy_encode","","",22,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",22,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",22,[[]]],[11,"from_proto","","",22,[[],[["result",4],["string",3]]]],[11,"to_proto","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"proxy_encode","","",23,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",23,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",23,[[]]],[11,"from_proto","","",23,[[],[["result",4],["string",3]]]],[11,"to_proto","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"proxy_encode","","",24,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",24,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",24,[[]]],[11,"from_proto","","",24,[[],[["result",4],["string",3]]]],[11,"to_proto","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"proxy_encode","","",25,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",25,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",25,[[]]],[11,"from_proto","","",25,[[],[["result",4],["string",3]]]],[11,"to_proto","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"proxy_encode","","",26,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",26,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",26,[[]]],[11,"from_proto","","",26,[[],[["result",4],["string",3]]]],[11,"to_proto","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"proxy_encode","","",27,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",27,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",27,[[]]],[11,"from_proto","","",27,[[],[["result",4],["string",3]]]],[11,"to_proto","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"proxy_encode","","",28,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",28,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",28,[[]]],[11,"from_proto","","",28,[[],[["result",4],["string",3]]]],[11,"to_proto","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"proxy_encode","","",29,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",29,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",29,[[]]],[11,"from_proto","","",29,[[],[["result",4],["string",3]]]],[11,"to_proto","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"equivalent","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"equivalent","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"equivalent","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"equivalent","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"equivalent","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"equivalent","","",35,[[]]],[11,"from","ic_nns_governance::pb::v1::neuron","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"proxy_encode","","",36,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",36,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",36,[[]]],[11,"from_proto","","",36,[[],[["result",4],["string",3]]]],[11,"to_proto","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","ic_nns_governance::pb::v1::add_or_remove_node_provider","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","ic_nns_governance::pb::v1::reward_node_provider","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"proxy_encode","","",39,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",39,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",39,[[]]],[11,"from_proto","","",39,[[],[["result",4],["string",3]]]],[11,"to_proto","","",39,[[]]],[11,"from","ic_nns_governance::pb::v1::proposal","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","ic_nns_governance::pb::v1::manage_neuron","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"proxy_encode","","",41,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",41,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",41,[[]]],[11,"from_proto","","",41,[[],[["result",4],["string",3]]]],[11,"to_proto","","",41,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"proxy_encode","","",65,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",65,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",65,[[]]],[11,"from_proto","","",65,[[],[["result",4],["string",3]]]],[11,"to_proto","","",65,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"proxy_encode","","",66,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",66,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",66,[[]]],[11,"from_proto","","",66,[[],[["result",4],["string",3]]]],[11,"to_proto","","",66,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"proxy_encode","","",42,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",42,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",42,[[]]],[11,"from_proto","","",42,[[],[["result",4],["string",3]]]],[11,"to_proto","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"proxy_encode","","",43,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",43,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",43,[[]]],[11,"from_proto","","",43,[[],[["result",4],["string",3]]]],[11,"to_proto","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"proxy_encode","","",44,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",44,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",44,[[]]],[11,"from_proto","","",44,[[],[["result",4],["string",3]]]],[11,"to_proto","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"proxy_encode","","",45,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",45,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",45,[[]]],[11,"from_proto","","",45,[[],[["result",4],["string",3]]]],[11,"to_proto","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"proxy_encode","","",46,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",46,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",46,[[]]],[11,"from_proto","","",46,[[],[["result",4],["string",3]]]],[11,"to_proto","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"proxy_encode","","",47,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",47,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",47,[[]]],[11,"from_proto","","",47,[[],[["result",4],["string",3]]]],[11,"to_proto","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"proxy_encode","","",48,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",48,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",48,[[]]],[11,"from_proto","","",48,[[],[["result",4],["string",3]]]],[11,"to_proto","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"proxy_encode","","",49,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",49,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",49,[[]]],[11,"from_proto","","",49,[[],[["result",4],["string",3]]]],[11,"to_proto","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"proxy_encode","","",50,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",50,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",50,[[]]],[11,"from_proto","","",50,[[],[["result",4],["string",3]]]],[11,"to_proto","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","ic_nns_governance::pb::v1::manage_neuron::configure","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","ic_nns_governance::pb::v1::manage_neuron::disburse","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"proxy_encode","","",53,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",53,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",53,[[]]],[11,"from_proto","","",53,[[],[["result",4],["string",3]]]],[11,"to_proto","","",53,[[]]],[11,"from","ic_nns_governance::pb::v1::manage_neuron_response","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"proxy_encode","","",67,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",67,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",67,[[]]],[11,"from_proto","","",67,[[],[["result",4],["string",3]]]],[11,"to_proto","","",67,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"proxy_encode","","",54,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",54,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",54,[[]]],[11,"from_proto","","",54,[[],[["result",4],["string",3]]]],[11,"to_proto","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"proxy_encode","","",55,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",55,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",55,[[]]],[11,"from_proto","","",55,[[],[["result",4],["string",3]]]],[11,"to_proto","","",55,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"proxy_encode","","",68,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",68,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",68,[[]]],[11,"from_proto","","",68,[[],[["result",4],["string",3]]]],[11,"to_proto","","",68,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"proxy_encode","","",56,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",56,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",56,[[]]],[11,"from_proto","","",56,[[],[["result",4],["string",3]]]],[11,"to_proto","","",56,[[]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"proxy_encode","","",69,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",69,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",69,[[]]],[11,"from_proto","","",69,[[],[["result",4],["string",3]]]],[11,"to_proto","","",69,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"proxy_encode","","",57,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",57,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",57,[[]]],[11,"from_proto","","",57,[[],[["result",4],["string",3]]]],[11,"to_proto","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"proxy_encode","","",58,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",58,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",58,[[]]],[11,"from_proto","","",58,[[],[["result",4],["string",3]]]],[11,"to_proto","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","ic_nns_governance::pb::v1::governance_error","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"equivalent","","",60,[[]]],[11,"from","ic_nns_governance::pb::v1::governance","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"proxy_encode","","",61,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",61,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",61,[[]]],[11,"from_proto","","",61,[[],[["result",4],["string",3]]]],[11,"to_proto","","",61,[[]]],[11,"from","ic_nns_governance::pb::v1::governance::neuron_in_flight_command","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"from","ic_nns_governance::stable_mem_utils","",63,[[]]],[11,"into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"drop","","",63,[[]]],[11,"from","ic_nns_governance::pb::v1","",32,[[],["vote",4]]],[11,"clone","","",4,[[],["nodeprovider",3]]],[11,"clone","","",5,[[],["ballotinfo",3]]],[11,"clone","","",6,[[],["neuroninfo",3]]],[11,"clone","","",7,[[],["neuronstaketransfer",3]]],[11,"clone","","",8,[[],["neuron",3]]],[11,"clone","ic_nns_governance::pb::v1::neuron","",36,[[],["followees",3]]],[11,"clone","","",37,[[],["dissolvestate",4]]],[11,"clone","ic_nns_governance::pb::v1","",9,[[],["executennsfunction",3]]],[11,"clone","","",10,[[],["motion",3]]],[11,"clone","","",11,[[],["approvegenesiskyc",3]]],[11,"clone","","",12,[[],["addorremovenodeprovider",3]]],[11,"clone","ic_nns_governance::pb::v1::add_or_remove_node_provider","",38,[[],["change",4]]],[11,"clone","ic_nns_governance::pb::v1","",13,[[],["rewardnodeprovider",3]]],[11,"clone","ic_nns_governance::pb::v1::reward_node_provider","",39,[[],["createneuron",3]]],[11,"clone","ic_nns_governance::pb::v1","",14,[[],["setdefaultfollowees",3]]],[11,"clone","","",15,[[],["proposal",3]]],[11,"clone","ic_nns_governance::pb::v1::proposal","",40,[[],["action",4]]],[11,"clone","ic_nns_governance::pb::v1","",16,[[],["manageneuron",3]]],[11,"clone","ic_nns_governance::pb::v1::manage_neuron","",41,[[],["increasedissolvedelay",3]]],[11,"clone","","",65,[[],["startdissolving",3]]],[11,"clone","","",66,[[],["stopdissolving",3]]],[11,"clone","","",42,[[],["addhotkey",3]]],[11,"clone","","",43,[[],["removehotkey",3]]],[11,"clone","","",44,[[],["configure",3]]],[11,"clone","ic_nns_governance::pb::v1::manage_neuron::configure","",52,[[],["operation",4]]],[11,"clone","ic_nns_governance::pb::v1::manage_neuron","",45,[[],["disburse",3]]],[11,"clone","ic_nns_governance::pb::v1::manage_neuron::disburse","",53,[[],["amount",3]]],[11,"clone","ic_nns_governance::pb::v1::manage_neuron","",46,[[],["split",3]]],[11,"clone","","",47,[[],["spawn",3]]],[11,"clone","","",48,[[],["disbursetoneuron",3]]],[11,"clone","","",49,[[],["follow",3]]],[11,"clone","","",50,[[],["registervote",3]]],[11,"clone","","",51,[[],["command",4]]],[11,"clone","ic_nns_governance::pb::v1","",17,[[],["manageneuronresponse",3]]],[11,"clone","ic_nns_governance::pb::v1::manage_neuron_response","",67,[[],["configureresponse",3]]],[11,"clone","","",54,[[],["disburseresponse",3]]],[11,"clone","","",55,[[],["spawnresponse",3]]],[11,"clone","","",68,[[],["followresponse",3]]],[11,"clone","","",56,[[],["makeproposalresponse",3]]],[11,"clone","","",69,[[],["registervoteresponse",3]]],[11,"clone","","",57,[[],["splitresponse",3]]],[11,"clone","","",58,[[],["disbursetoneuronresponse",3]]],[11,"clone","","",59,[[],["command",4]]],[11,"clone","ic_nns_governance::pb::v1","",18,[[],["governanceerror",3]]],[11,"clone","ic_nns_governance::pb::v1::governance_error","",60,[[],["errortype",4]]],[11,"clone","ic_nns_governance::pb::v1","",19,[[],["ballot",3]]],[11,"clone","","",20,[[],["tally",3]]],[11,"clone","","",21,[[],["proposaldata",3]]],[11,"clone","","",22,[[],["proposalinfo",3]]],[11,"clone","","",23,[[],["networkeconomics",3]]],[11,"clone","","",24,[[],["rewardevent",3]]],[11,"clone","","",25,[[],["governance",3]]],[11,"clone","ic_nns_governance::pb::v1::governance","",61,[[],["neuroninflightcommand",3]]],[11,"clone","ic_nns_governance::pb::v1::governance::neuron_in_flight_command","",62,[[],["command",4]]],[11,"clone","ic_nns_governance::pb::v1","",26,[[],["listproposalinfo",3]]],[11,"clone","","",27,[[],["listproposalinforesponse",3]]],[11,"clone","","",28,[[],["listneurons",3]]],[11,"clone","","",29,[[],["listneuronsresponse",3]]],[11,"clone","","",30,[[],["topic",4]]],[11,"clone","","",31,[[],["neuronstate",4]]],[11,"clone","","",32,[[],["vote",4]]],[11,"clone","","",33,[[],["nnsfunction",4]]],[11,"clone","","",34,[[],["proposalstatus",4]]],[11,"clone","","",35,[[],["proposalrewardstatus",4]]],[11,"default","","",4,[[]]],[11,"default","","",5,[[]]],[11,"default","","",6,[[]]],[11,"default","","",7,[[]]],[11,"default","","",8,[[]]],[11,"default","ic_nns_governance::pb::v1::neuron","",36,[[]]],[11,"default","ic_nns_governance::pb::v1","",9,[[]]],[11,"default","","",10,[[]]],[11,"default","","",11,[[]]],[11,"default","","",12,[[]]],[11,"default","","",13,[[]]],[11,"default","ic_nns_governance::pb::v1::reward_node_provider","",39,[[]]],[11,"default","ic_nns_governance::pb::v1","",14,[[]]],[11,"default","","",15,[[]]],[11,"default","","",16,[[]]],[11,"default","ic_nns_governance::pb::v1::manage_neuron","",41,[[]]],[11,"default","","",65,[[]]],[11,"default","","",66,[[]]],[11,"default","","",42,[[]]],[11,"default","","",43,[[]]],[11,"default","","",44,[[]]],[11,"default","","",45,[[]]],[11,"default","ic_nns_governance::pb::v1::manage_neuron::disburse","",53,[[]]],[11,"default","ic_nns_governance::pb::v1::manage_neuron","",46,[[]]],[11,"default","","",47,[[]]],[11,"default","","",48,[[]]],[11,"default","","",49,[[]]],[11,"default","","",50,[[]]],[11,"default","ic_nns_governance::pb::v1","",17,[[]]],[11,"default","ic_nns_governance::pb::v1::manage_neuron_response","",67,[[]]],[11,"default","","",54,[[]]],[11,"default","","",55,[[]]],[11,"default","","",68,[[]]],[11,"default","","",56,[[]]],[11,"default","","",69,[[]]],[11,"default","","",57,[[]]],[11,"default","","",58,[[]]],[11,"default","ic_nns_governance::pb::v1","",18,[[]]],[11,"default","ic_nns_governance::pb::v1::governance_error","",60,[[],["errortype",4]]],[11,"default","ic_nns_governance::pb::v1","",19,[[]]],[11,"default","","",20,[[]]],[11,"default","","",21,[[]]],[11,"default","","",22,[[]]],[11,"default","","",23,[[]]],[11,"default","","",24,[[]]],[11,"default","","",25,[[]]],[11,"default","ic_nns_governance::pb::v1::governance","",61,[[]]],[11,"default","ic_nns_governance::pb::v1","",26,[[]]],[11,"default","","",27,[[]]],[11,"default","","",28,[[]]],[11,"default","","",29,[[]]],[11,"default","","",30,[[],["topic",4]]],[11,"default","","",31,[[],["neuronstate",4]]],[11,"default","","",32,[[],["vote",4]]],[11,"default","","",33,[[],["nnsfunction",4]]],[11,"default","","",34,[[],["proposalstatus",4]]],[11,"default","","",35,[[],["proposalrewardstatus",4]]],[11,"cmp","ic_nns_governance::pb::v1::governance_error","",60,[[["errortype",4]],["ordering",4]]],[11,"cmp","ic_nns_governance::pb::v1","",30,[[["topic",4]],["ordering",4]]],[11,"cmp","","",31,[[["neuronstate",4]],["ordering",4]]],[11,"cmp","","",32,[[["vote",4]],["ordering",4]]],[11,"cmp","","",33,[[["nnsfunction",4]],["ordering",4]]],[11,"cmp","","",34,[[["proposalstatus",4]],["ordering",4]]],[11,"cmp","","",35,[[["proposalrewardstatus",4]],["ordering",4]]],[11,"eq","","",4,[[["nodeprovider",3]]]],[11,"ne","","",4,[[["nodeprovider",3]]]],[11,"eq","","",5,[[["ballotinfo",3]]]],[11,"ne","","",5,[[["ballotinfo",3]]]],[11,"eq","","",6,[[["neuroninfo",3]]]],[11,"ne","","",6,[[["neuroninfo",3]]]],[11,"eq","","",7,[[["neuronstaketransfer",3]]]],[11,"ne","","",7,[[["neuronstaketransfer",3]]]],[11,"eq","","",8,[[["neuron",3]]]],[11,"ne","","",8,[[["neuron",3]]]],[11,"eq","ic_nns_governance::pb::v1::neuron","",36,[[["followees",3]]]],[11,"ne","","",36,[[["followees",3]]]],[11,"eq","","",37,[[["dissolvestate",4]]]],[11,"ne","","",37,[[["dissolvestate",4]]]],[11,"eq","ic_nns_governance::pb::v1","",9,[[["executennsfunction",3]]]],[11,"ne","","",9,[[["executennsfunction",3]]]],[11,"eq","","",10,[[["motion",3]]]],[11,"ne","","",10,[[["motion",3]]]],[11,"eq","","",11,[[["approvegenesiskyc",3]]]],[11,"ne","","",11,[[["approvegenesiskyc",3]]]],[11,"eq","","",12,[[["addorremovenodeprovider",3]]]],[11,"ne","","",12,[[["addorremovenodeprovider",3]]]],[11,"eq","ic_nns_governance::pb::v1::add_or_remove_node_provider","",38,[[["change",4]]]],[11,"ne","","",38,[[["change",4]]]],[11,"eq","ic_nns_governance::pb::v1","",13,[[["rewardnodeprovider",3]]]],[11,"ne","","",13,[[["rewardnodeprovider",3]]]],[11,"eq","ic_nns_governance::pb::v1::reward_node_provider","",39,[[["createneuron",3]]]],[11,"ne","","",39,[[["createneuron",3]]]],[11,"eq","ic_nns_governance::pb::v1","",14,[[["setdefaultfollowees",3]]]],[11,"ne","","",14,[[["setdefaultfollowees",3]]]],[11,"eq","","",15,[[["proposal",3]]]],[11,"ne","","",15,[[["proposal",3]]]],[11,"eq","ic_nns_governance::pb::v1::proposal","",40,[[["action",4]]]],[11,"ne","","",40,[[["action",4]]]],[11,"eq","ic_nns_governance::pb::v1","",16,[[["manageneuron",3]]]],[11,"ne","","",16,[[["manageneuron",3]]]],[11,"eq","ic_nns_governance::pb::v1::manage_neuron","",41,[[["increasedissolvedelay",3]]]],[11,"ne","","",41,[[["increasedissolvedelay",3]]]],[11,"eq","","",65,[[["startdissolving",3]]]],[11,"eq","","",66,[[["stopdissolving",3]]]],[11,"eq","","",42,[[["addhotkey",3]]]],[11,"ne","","",42,[[["addhotkey",3]]]],[11,"eq","","",43,[[["removehotkey",3]]]],[11,"ne","","",43,[[["removehotkey",3]]]],[11,"eq","","",44,[[["configure",3]]]],[11,"ne","","",44,[[["configure",3]]]],[11,"eq","ic_nns_governance::pb::v1::manage_neuron::configure","",52,[[["operation",4]]]],[11,"ne","","",52,[[["operation",4]]]],[11,"eq","ic_nns_governance::pb::v1::manage_neuron","",45,[[["disburse",3]]]],[11,"ne","","",45,[[["disburse",3]]]],[11,"eq","ic_nns_governance::pb::v1::manage_neuron::disburse","",53,[[["amount",3]]]],[11,"ne","","",53,[[["amount",3]]]],[11,"eq","ic_nns_governance::pb::v1::manage_neuron","",46,[[["split",3]]]],[11,"ne","","",46,[[["split",3]]]],[11,"eq","","",47,[[["spawn",3]]]],[11,"ne","","",47,[[["spawn",3]]]],[11,"eq","","",48,[[["disbursetoneuron",3]]]],[11,"ne","","",48,[[["disbursetoneuron",3]]]],[11,"eq","","",49,[[["follow",3]]]],[11,"ne","","",49,[[["follow",3]]]],[11,"eq","","",50,[[["registervote",3]]]],[11,"ne","","",50,[[["registervote",3]]]],[11,"eq","","",51,[[["command",4]]]],[11,"ne","","",51,[[["command",4]]]],[11,"eq","ic_nns_governance::pb::v1","",17,[[["manageneuronresponse",3]]]],[11,"ne","","",17,[[["manageneuronresponse",3]]]],[11,"eq","ic_nns_governance::pb::v1::manage_neuron_response","",67,[[["configureresponse",3]]]],[11,"eq","","",54,[[["disburseresponse",3]]]],[11,"ne","","",54,[[["disburseresponse",3]]]],[11,"eq","","",55,[[["spawnresponse",3]]]],[11,"ne","","",55,[[["spawnresponse",3]]]],[11,"eq","","",68,[[["followresponse",3]]]],[11,"eq","","",56,[[["makeproposalresponse",3]]]],[11,"ne","","",56,[[["makeproposalresponse",3]]]],[11,"eq","","",69,[[["registervoteresponse",3]]]],[11,"eq","","",57,[[["splitresponse",3]]]],[11,"ne","","",57,[[["splitresponse",3]]]],[11,"eq","","",58,[[["disbursetoneuronresponse",3]]]],[11,"ne","","",58,[[["disbursetoneuronresponse",3]]]],[11,"eq","","",59,[[["command",4]]]],[11,"ne","","",59,[[["command",4]]]],[11,"eq","ic_nns_governance::pb::v1","",18,[[["governanceerror",3]]]],[11,"ne","","",18,[[["governanceerror",3]]]],[11,"eq","ic_nns_governance::pb::v1::governance_error","",60,[[["errortype",4]]]],[11,"eq","ic_nns_governance::pb::v1","",19,[[["ballot",3]]]],[11,"ne","","",19,[[["ballot",3]]]],[11,"eq","","",20,[[["tally",3]]]],[11,"ne","","",20,[[["tally",3]]]],[11,"eq","","",21,[[["proposaldata",3]]]],[11,"ne","","",21,[[["proposaldata",3]]]],[11,"eq","","",22,[[["proposalinfo",3]]]],[11,"ne","","",22,[[["proposalinfo",3]]]],[11,"eq","","",23,[[["networkeconomics",3]]]],[11,"ne","","",23,[[["networkeconomics",3]]]],[11,"eq","","",24,[[["rewardevent",3]]]],[11,"ne","","",24,[[["rewardevent",3]]]],[11,"eq","","",25,[[["governance",3]]]],[11,"ne","","",25,[[["governance",3]]]],[11,"eq","ic_nns_governance::pb::v1::governance","",61,[[["neuroninflightcommand",3]]]],[11,"ne","","",61,[[["neuroninflightcommand",3]]]],[11,"eq","ic_nns_governance::pb::v1::governance::neuron_in_flight_command","",62,[[["command",4]]]],[11,"ne","","",62,[[["command",4]]]],[11,"eq","ic_nns_governance::pb::v1","",26,[[["listproposalinfo",3]]]],[11,"ne","","",26,[[["listproposalinfo",3]]]],[11,"eq","","",27,[[["listproposalinforesponse",3]]]],[11,"ne","","",27,[[["listproposalinforesponse",3]]]],[11,"eq","","",28,[[["listneurons",3]]]],[11,"ne","","",28,[[["listneurons",3]]]],[11,"eq","","",29,[[["listneuronsresponse",3]]]],[11,"ne","","",29,[[["listneuronsresponse",3]]]],[11,"eq","","",30,[[["topic",4]]]],[11,"eq","","",31,[[["neuronstate",4]]]],[11,"eq","","",32,[[["vote",4]]]],[11,"eq","","",33,[[["nnsfunction",4]]]],[11,"eq","","",34,[[["proposalstatus",4]]]],[11,"eq","","",35,[[["proposalrewardstatus",4]]]],[11,"partial_cmp","ic_nns_governance::pb::v1::governance_error","",60,[[["errortype",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_nns_governance::pb::v1","",30,[[["topic",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",31,[[["neuronstate",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",32,[[["vote",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",33,[[["nnsfunction",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",34,[[["proposalstatus",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",35,[[["proposalrewardstatus",4]],[["option",4],["ordering",4]]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::neuron","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::add_or_remove_node_provider","",38,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1","",13,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::reward_node_provider","",39,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::proposal","",40,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1","",16,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::manage_neuron","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::manage_neuron::configure","",52,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::manage_neuron","",45,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::manage_neuron::disburse","",53,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::manage_neuron","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1","",17,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::manage_neuron_response","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1","",18,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::governance_error","",60,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::governance","",61,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1::governance::neuron_in_flight_command","",62,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_governance::pb::v1","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"hash","ic_nns_governance::pb::v1::governance_error","",60,[[]]],[11,"hash","ic_nns_governance::pb::v1","",30,[[]]],[11,"hash","","",31,[[]]],[11,"hash","","",32,[[]]],[11,"hash","","",33,[[]]],[11,"hash","","",34,[[]]],[11,"hash","","",35,[[]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::neuron","",36,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::add_or_remove_node_provider","",38,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1","",13,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::reward_node_provider","",39,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1","",14,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::proposal","",40,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1","",16,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::manage_neuron","",41,[[],["result",4]]],[11,"deserialize","","",65,[[],["result",4]]],[11,"deserialize","","",66,[[],["result",4]]],[11,"deserialize","","",42,[[],["result",4]]],[11,"deserialize","","",43,[[],["result",4]]],[11,"deserialize","","",44,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::manage_neuron::configure","",52,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::manage_neuron","",45,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::manage_neuron::disburse","",53,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::manage_neuron","",46,[[],["result",4]]],[11,"deserialize","","",47,[[],["result",4]]],[11,"deserialize","","",48,[[],["result",4]]],[11,"deserialize","","",49,[[],["result",4]]],[11,"deserialize","","",50,[[],["result",4]]],[11,"deserialize","","",51,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1","",17,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::manage_neuron_response","",67,[[],["result",4]]],[11,"deserialize","","",54,[[],["result",4]]],[11,"deserialize","","",55,[[],["result",4]]],[11,"deserialize","","",68,[[],["result",4]]],[11,"deserialize","","",56,[[],["result",4]]],[11,"deserialize","","",69,[[],["result",4]]],[11,"deserialize","","",57,[[],["result",4]]],[11,"deserialize","","",58,[[],["result",4]]],[11,"deserialize","","",59,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::governance","",61,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1::governance::neuron_in_flight_command","",62,[[],["result",4]]],[11,"deserialize","ic_nns_governance::pb::v1","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","","",29,[[],["result",4]]],[11,"deserialize","","",30,[[],["result",4]]],[11,"deserialize","","",31,[[],["result",4]]],[11,"deserialize","","",32,[[],["result",4]]],[11,"deserialize","","",34,[[],["result",4]]],[11,"_ty","","",4,[[],["type",4]]],[11,"id","","",4,[[],["typeid",3]]],[11,"idl_serialize","","",4,[[],["result",4]]],[11,"_ty","","",5,[[],["type",4]]],[11,"id","","",5,[[],["typeid",3]]],[11,"idl_serialize","","",5,[[],["result",4]]],[11,"_ty","","",6,[[],["type",4]]],[11,"id","","",6,[[],["typeid",3]]],[11,"idl_serialize","","",6,[[],["result",4]]],[11,"_ty","","",7,[[],["type",4]]],[11,"id","","",7,[[],["typeid",3]]],[11,"idl_serialize","","",7,[[],["result",4]]],[11,"_ty","","",8,[[],["type",4]]],[11,"id","","",8,[[],["typeid",3]]],[11,"idl_serialize","","",8,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::neuron","",36,[[],["type",4]]],[11,"id","","",36,[[],["typeid",3]]],[11,"idl_serialize","","",36,[[],["result",4]]],[11,"_ty","","",37,[[],["type",4]]],[11,"id","","",37,[[],["typeid",3]]],[11,"idl_serialize","","",37,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1","",9,[[],["type",4]]],[11,"id","","",9,[[],["typeid",3]]],[11,"idl_serialize","","",9,[[],["result",4]]],[11,"_ty","","",10,[[],["type",4]]],[11,"id","","",10,[[],["typeid",3]]],[11,"idl_serialize","","",10,[[],["result",4]]],[11,"_ty","","",11,[[],["type",4]]],[11,"id","","",11,[[],["typeid",3]]],[11,"idl_serialize","","",11,[[],["result",4]]],[11,"_ty","","",12,[[],["type",4]]],[11,"id","","",12,[[],["typeid",3]]],[11,"idl_serialize","","",12,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::add_or_remove_node_provider","",38,[[],["type",4]]],[11,"id","","",38,[[],["typeid",3]]],[11,"idl_serialize","","",38,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1","",13,[[],["type",4]]],[11,"id","","",13,[[],["typeid",3]]],[11,"idl_serialize","","",13,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::reward_node_provider","",39,[[],["type",4]]],[11,"id","","",39,[[],["typeid",3]]],[11,"idl_serialize","","",39,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1","",14,[[],["type",4]]],[11,"id","","",14,[[],["typeid",3]]],[11,"idl_serialize","","",14,[[],["result",4]]],[11,"_ty","","",15,[[],["type",4]]],[11,"id","","",15,[[],["typeid",3]]],[11,"idl_serialize","","",15,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::proposal","",40,[[],["type",4]]],[11,"id","","",40,[[],["typeid",3]]],[11,"idl_serialize","","",40,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1","",16,[[],["type",4]]],[11,"id","","",16,[[],["typeid",3]]],[11,"idl_serialize","","",16,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::manage_neuron","",41,[[],["type",4]]],[11,"id","","",41,[[],["typeid",3]]],[11,"idl_serialize","","",41,[[],["result",4]]],[11,"_ty","","",65,[[],["type",4]]],[11,"id","","",65,[[],["typeid",3]]],[11,"idl_serialize","","",65,[[],["result",4]]],[11,"_ty","","",66,[[],["type",4]]],[11,"id","","",66,[[],["typeid",3]]],[11,"idl_serialize","","",66,[[],["result",4]]],[11,"_ty","","",42,[[],["type",4]]],[11,"id","","",42,[[],["typeid",3]]],[11,"idl_serialize","","",42,[[],["result",4]]],[11,"_ty","","",43,[[],["type",4]]],[11,"id","","",43,[[],["typeid",3]]],[11,"idl_serialize","","",43,[[],["result",4]]],[11,"_ty","","",44,[[],["type",4]]],[11,"id","","",44,[[],["typeid",3]]],[11,"idl_serialize","","",44,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::manage_neuron::configure","",52,[[],["type",4]]],[11,"id","","",52,[[],["typeid",3]]],[11,"idl_serialize","","",52,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::manage_neuron","",45,[[],["type",4]]],[11,"id","","",45,[[],["typeid",3]]],[11,"idl_serialize","","",45,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::manage_neuron::disburse","",53,[[],["type",4]]],[11,"id","","",53,[[],["typeid",3]]],[11,"idl_serialize","","",53,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::manage_neuron","",46,[[],["type",4]]],[11,"id","","",46,[[],["typeid",3]]],[11,"idl_serialize","","",46,[[],["result",4]]],[11,"_ty","","",47,[[],["type",4]]],[11,"id","","",47,[[],["typeid",3]]],[11,"idl_serialize","","",47,[[],["result",4]]],[11,"_ty","","",48,[[],["type",4]]],[11,"id","","",48,[[],["typeid",3]]],[11,"idl_serialize","","",48,[[],["result",4]]],[11,"_ty","","",49,[[],["type",4]]],[11,"id","","",49,[[],["typeid",3]]],[11,"idl_serialize","","",49,[[],["result",4]]],[11,"_ty","","",50,[[],["type",4]]],[11,"id","","",50,[[],["typeid",3]]],[11,"idl_serialize","","",50,[[],["result",4]]],[11,"_ty","","",51,[[],["type",4]]],[11,"id","","",51,[[],["typeid",3]]],[11,"idl_serialize","","",51,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1","",17,[[],["type",4]]],[11,"id","","",17,[[],["typeid",3]]],[11,"idl_serialize","","",17,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::manage_neuron_response","",67,[[],["type",4]]],[11,"id","","",67,[[],["typeid",3]]],[11,"idl_serialize","","",67,[[],["result",4]]],[11,"_ty","","",54,[[],["type",4]]],[11,"id","","",54,[[],["typeid",3]]],[11,"idl_serialize","","",54,[[],["result",4]]],[11,"_ty","","",55,[[],["type",4]]],[11,"id","","",55,[[],["typeid",3]]],[11,"idl_serialize","","",55,[[],["result",4]]],[11,"_ty","","",68,[[],["type",4]]],[11,"id","","",68,[[],["typeid",3]]],[11,"idl_serialize","","",68,[[],["result",4]]],[11,"_ty","","",56,[[],["type",4]]],[11,"id","","",56,[[],["typeid",3]]],[11,"idl_serialize","","",56,[[],["result",4]]],[11,"_ty","","",69,[[],["type",4]]],[11,"id","","",69,[[],["typeid",3]]],[11,"idl_serialize","","",69,[[],["result",4]]],[11,"_ty","","",57,[[],["type",4]]],[11,"id","","",57,[[],["typeid",3]]],[11,"idl_serialize","","",57,[[],["result",4]]],[11,"_ty","","",58,[[],["type",4]]],[11,"id","","",58,[[],["typeid",3]]],[11,"idl_serialize","","",58,[[],["result",4]]],[11,"_ty","","",59,[[],["type",4]]],[11,"id","","",59,[[],["typeid",3]]],[11,"idl_serialize","","",59,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1","",18,[[],["type",4]]],[11,"id","","",18,[[],["typeid",3]]],[11,"idl_serialize","","",18,[[],["result",4]]],[11,"_ty","","",19,[[],["type",4]]],[11,"id","","",19,[[],["typeid",3]]],[11,"idl_serialize","","",19,[[],["result",4]]],[11,"_ty","","",20,[[],["type",4]]],[11,"id","","",20,[[],["typeid",3]]],[11,"idl_serialize","","",20,[[],["result",4]]],[11,"_ty","","",21,[[],["type",4]]],[11,"id","","",21,[[],["typeid",3]]],[11,"idl_serialize","","",21,[[],["result",4]]],[11,"_ty","","",22,[[],["type",4]]],[11,"id","","",22,[[],["typeid",3]]],[11,"idl_serialize","","",22,[[],["result",4]]],[11,"_ty","","",23,[[],["type",4]]],[11,"id","","",23,[[],["typeid",3]]],[11,"idl_serialize","","",23,[[],["result",4]]],[11,"_ty","","",24,[[],["type",4]]],[11,"id","","",24,[[],["typeid",3]]],[11,"idl_serialize","","",24,[[],["result",4]]],[11,"_ty","","",25,[[],["type",4]]],[11,"id","","",25,[[],["typeid",3]]],[11,"idl_serialize","","",25,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::governance","",61,[[],["type",4]]],[11,"id","","",61,[[],["typeid",3]]],[11,"idl_serialize","","",61,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1::governance::neuron_in_flight_command","",62,[[],["type",4]]],[11,"id","","",62,[[],["typeid",3]]],[11,"idl_serialize","","",62,[[],["result",4]]],[11,"_ty","ic_nns_governance::pb::v1","",26,[[],["type",4]]],[11,"id","","",26,[[],["typeid",3]]],[11,"idl_serialize","","",26,[[],["result",4]]],[11,"_ty","","",27,[[],["type",4]]],[11,"id","","",27,[[],["typeid",3]]],[11,"idl_serialize","","",27,[[],["result",4]]],[11,"_ty","","",28,[[],["type",4]]],[11,"id","","",28,[[],["typeid",3]]],[11,"idl_serialize","","",28,[[],["result",4]]],[11,"_ty","","",29,[[],["type",4]]],[11,"id","","",29,[[],["typeid",3]]],[11,"idl_serialize","","",29,[[],["result",4]]],[11,"_ty","","",30,[[],["type",4]]],[11,"id","","",30,[[],["typeid",3]]],[11,"idl_serialize","","",30,[[],["result",4]]],[11,"_ty","","",31,[[],["type",4]]],[11,"id","","",31,[[],["typeid",3]]],[11,"idl_serialize","","",31,[[],["result",4]]],[11,"_ty","","",32,[[],["type",4]]],[11,"id","","",32,[[],["typeid",3]]],[11,"idl_serialize","","",32,[[],["result",4]]],[11,"_ty","","",34,[[],["type",4]]],[11,"id","","",34,[[],["typeid",3]]],[11,"idl_serialize","","",34,[[],["result",4]]],[11,"encode_raw","","",4,[[]]],[11,"merge_field","","",4,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",4,[[]]],[11,"clear","","",4,[[]]],[11,"encode_raw","","",5,[[]]],[11,"merge_field","","",5,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",5,[[]]],[11,"clear","","",5,[[]]],[11,"encode_raw","","",6,[[]]],[11,"merge_field","","",6,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",6,[[]]],[11,"clear","","",6,[[]]],[11,"encode_raw","","",7,[[]]],[11,"merge_field","","",7,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",7,[[]]],[11,"clear","","",7,[[]]],[11,"encode_raw","","",8,[[]]],[11,"merge_field","","",8,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",8,[[]]],[11,"clear","","",8,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1::neuron","",36,[[]]],[11,"merge_field","","",36,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",36,[[]]],[11,"clear","","",36,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1","",9,[[]]],[11,"merge_field","","",9,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",9,[[]]],[11,"clear","","",9,[[]]],[11,"encode_raw","","",10,[[]]],[11,"merge_field","","",10,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",10,[[]]],[11,"clear","","",10,[[]]],[11,"encode_raw","","",11,[[]]],[11,"merge_field","","",11,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",11,[[]]],[11,"clear","","",11,[[]]],[11,"encode_raw","","",12,[[]]],[11,"merge_field","","",12,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",12,[[]]],[11,"clear","","",12,[[]]],[11,"encode_raw","","",13,[[]]],[11,"merge_field","","",13,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",13,[[]]],[11,"clear","","",13,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1::reward_node_provider","",39,[[]]],[11,"merge_field","","",39,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",39,[[]]],[11,"clear","","",39,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1","",14,[[]]],[11,"merge_field","","",14,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",14,[[]]],[11,"clear","","",14,[[]]],[11,"encode_raw","","",15,[[]]],[11,"merge_field","","",15,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",15,[[]]],[11,"clear","","",15,[[]]],[11,"encode_raw","","",16,[[]]],[11,"merge_field","","",16,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",16,[[]]],[11,"clear","","",16,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1::manage_neuron","",41,[[]]],[11,"merge_field","","",41,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",41,[[]]],[11,"clear","","",41,[[]]],[11,"encode_raw","","",65,[[]]],[11,"merge_field","","",65,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",65,[[]]],[11,"clear","","",65,[[]]],[11,"encode_raw","","",66,[[]]],[11,"merge_field","","",66,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",66,[[]]],[11,"clear","","",66,[[]]],[11,"encode_raw","","",42,[[]]],[11,"merge_field","","",42,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",42,[[]]],[11,"clear","","",42,[[]]],[11,"encode_raw","","",43,[[]]],[11,"merge_field","","",43,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",43,[[]]],[11,"clear","","",43,[[]]],[11,"encode_raw","","",44,[[]]],[11,"merge_field","","",44,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",44,[[]]],[11,"clear","","",44,[[]]],[11,"encode_raw","","",45,[[]]],[11,"merge_field","","",45,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",45,[[]]],[11,"clear","","",45,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1::manage_neuron::disburse","",53,[[]]],[11,"merge_field","","",53,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",53,[[]]],[11,"clear","","",53,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1::manage_neuron","",46,[[]]],[11,"merge_field","","",46,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",46,[[]]],[11,"clear","","",46,[[]]],[11,"encode_raw","","",47,[[]]],[11,"merge_field","","",47,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",47,[[]]],[11,"clear","","",47,[[]]],[11,"encode_raw","","",48,[[]]],[11,"merge_field","","",48,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",48,[[]]],[11,"clear","","",48,[[]]],[11,"encode_raw","","",49,[[]]],[11,"merge_field","","",49,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",49,[[]]],[11,"clear","","",49,[[]]],[11,"encode_raw","","",50,[[]]],[11,"merge_field","","",50,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",50,[[]]],[11,"clear","","",50,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1","",17,[[]]],[11,"merge_field","","",17,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",17,[[]]],[11,"clear","","",17,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1::manage_neuron_response","",67,[[]]],[11,"merge_field","","",67,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",67,[[]]],[11,"clear","","",67,[[]]],[11,"encode_raw","","",54,[[]]],[11,"merge_field","","",54,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",54,[[]]],[11,"clear","","",54,[[]]],[11,"encode_raw","","",55,[[]]],[11,"merge_field","","",55,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",55,[[]]],[11,"clear","","",55,[[]]],[11,"encode_raw","","",68,[[]]],[11,"merge_field","","",68,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",68,[[]]],[11,"clear","","",68,[[]]],[11,"encode_raw","","",56,[[]]],[11,"merge_field","","",56,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",56,[[]]],[11,"clear","","",56,[[]]],[11,"encode_raw","","",69,[[]]],[11,"merge_field","","",69,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",69,[[]]],[11,"clear","","",69,[[]]],[11,"encode_raw","","",57,[[]]],[11,"merge_field","","",57,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",57,[[]]],[11,"clear","","",57,[[]]],[11,"encode_raw","","",58,[[]]],[11,"merge_field","","",58,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",58,[[]]],[11,"clear","","",58,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1","",18,[[]]],[11,"merge_field","","",18,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",18,[[]]],[11,"clear","","",18,[[]]],[11,"encode_raw","","",19,[[]]],[11,"merge_field","","",19,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",19,[[]]],[11,"clear","","",19,[[]]],[11,"encode_raw","","",20,[[]]],[11,"merge_field","","",20,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",20,[[]]],[11,"clear","","",20,[[]]],[11,"encode_raw","","",21,[[]]],[11,"merge_field","","",21,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",21,[[]]],[11,"clear","","",21,[[]]],[11,"encode_raw","","",22,[[]]],[11,"merge_field","","",22,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",22,[[]]],[11,"clear","","",22,[[]]],[11,"encode_raw","","",23,[[]]],[11,"merge_field","","",23,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",23,[[]]],[11,"clear","","",23,[[]]],[11,"encode_raw","","",24,[[]]],[11,"merge_field","","",24,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",24,[[]]],[11,"clear","","",24,[[]]],[11,"encode_raw","","",25,[[]]],[11,"merge_field","","",25,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",25,[[]]],[11,"clear","","",25,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1::governance","",61,[[]]],[11,"merge_field","","",61,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",61,[[]]],[11,"clear","","",61,[[]]],[11,"encode_raw","ic_nns_governance::pb::v1","",26,[[]]],[11,"merge_field","","",26,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",26,[[]]],[11,"clear","","",26,[[]]],[11,"encode_raw","","",27,[[]]],[11,"merge_field","","",27,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",27,[[]]],[11,"clear","","",27,[[]]],[11,"encode_raw","","",28,[[]]],[11,"merge_field","","",28,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",28,[[]]],[11,"clear","","",28,[[]]],[11,"encode_raw","","",29,[[]]],[11,"merge_field","","",29,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",29,[[]]],[11,"clear","","",29,[[]]],[11,"remaining","ic_nns_governance::stable_mem_utils","",64,[[]]],[11,"chunk","","",64,[[]]],[11,"advance","","",64,[[]]],[11,"remaining_mut","","",63,[[]]],[11,"advance_mut","","",63,[[]]],[11,"chunk_mut","","",63,[[],["uninitslice",3]]],[11,"with_default_values","ic_nns_governance::pb::v1","",23,[[]]],[11,"new","","",18,[[["errortype",4]]]],[11,"new_with_message","","",18,[[["errortype",4]]]],[11,"is_err","","",17,[[]]],[11,"err_ref","","",17,[[],[["option",4],["governanceerror",3]]]],[11,"err","","",17,[[],[["option",4],["governanceerror",3]]]],[11,"is_ok","","",17,[[]]],[11,"expect","","",17,[[]]],[11,"error","","",17,[[["governanceerror",3]]]],[11,"configure_response","","",17,[[]]],[11,"disburse_response","","",17,[[]]],[11,"spawn_response","","",17,[[["neuronid",3]]]],[11,"follow_response","","",17,[[]]],[11,"make_proposal_response","","",17,[[["proposalid",3]]]],[11,"register_vote_response","","",17,[[]]],[11,"split_response","","",17,[[["neuronid",3]]]],[11,"disburse_to_neuron_response","","",17,[[["neuronid",3]]]],[11,"canister_and_function","","",33,[[],[["result",4],["governanceerror",3]]]],[11,"dissolve_delay_seconds","","Returns the dissolve delay of this neuron. For a locked…",8,[[]]],[11,"configure","","Apply the specified neuron configuration operation on this…",8,[[["principalid",3],["configure",3]],[["governanceerror",3],["result",4]]]],[11,"get_neuron_info","","Get the \'public\' information associated with this neuron.",8,[[],["neuroninfo",3]]],[11,"stake_e8s","","Return the current \'stake\' of this Neuron in number of…",8,[[]]],[11,"is_manage_neuron","","Whether this proposal is restricted, that is, whether…",15,[[]]],[11,"managed_neuron","","If this is a [ManageNeuron] proposal, this returns the ID…",15,[[],[["option",4],["neuronid",3]]]],[11,"status","","Compute the \'status\' of a proposal. See [ProposalStatus]…",21,[[],["proposalstatus",4]]],[11,"is_manage_neuron","","Whether this proposal is restricted, that is, whether…",21,[[]]],[11,"reward_status","","",21,[[],["proposalrewardstatus",4]]],[11,"accepts_vote","","Returns true if votes are still accepted for this proposal…",21,[[]]],[11,"recompute_tally","","This is an expensive operation.",21,[[]]],[11,"is_final","","Return true if this status is \'final\' in the sense that no…",34,[[]]],[11,"is_final","","Return true if this reward status is \'final\' in the sense…",35,[[]]],[11,"build_topic_followee_index","","From the `neurons` part of this `Governance` struct, build…",25,[[],[["btreemap",3],["btreemap",3],["topic",4]]]],[11,"add_neuron_to_topic_followee_index","","",25,[[["btreemap",3],["neuron",3]]]],[11,"remove_neuron_from_topic_followee_index","","",25,[[["btreemap",3],["neuron",3]]]],[11,"add_neuron_to_principal_to_neuron_ids_index","","Update `index` to map all the given Neuron\'s hot keys and…",25,[[["btreemap",3],["neuron",3]]]],[11,"add_neuron_to_principal_in_principal_to_neuron_ids_index","","",25,[[["btreemap",3],["principalid",3]]]],[11,"remove_neuron_from_principal_to_neuron_ids_index","","Update `index` to remove the neuron from the list of…",25,[[["btreemap",3],["neuron",3]]]],[11,"remove_neuron_from_principal_in_principal_to_neuron_ids_index","","",25,[[["btreemap",3],["principalid",3]]]],[11,"build_principal_to_neuron_ids_index","","",25,[[],[["btreemap",3],["hashset",3],["principalid",3]]]]],"p":[[3,"Governance"],[8,"Environment"],[8,"Ledger"],[3,"GovernanceCanisterInitPayloadBuilder"],[3,"NodeProvider"],[3,"BallotInfo"],[3,"NeuronInfo"],[3,"NeuronStakeTransfer"],[3,"Neuron"],[3,"ExecuteNnsFunction"],[3,"Motion"],[3,"ApproveGenesisKyc"],[3,"AddOrRemoveNodeProvider"],[3,"RewardNodeProvider"],[3,"SetDefaultFollowees"],[3,"Proposal"],[3,"ManageNeuron"],[3,"ManageNeuronResponse"],[3,"GovernanceError"],[3,"Ballot"],[3,"Tally"],[3,"ProposalData"],[3,"ProposalInfo"],[3,"NetworkEconomics"],[3,"RewardEvent"],[3,"Governance"],[3,"ListProposalInfo"],[3,"ListProposalInfoResponse"],[3,"ListNeurons"],[3,"ListNeuronsResponse"],[4,"Topic"],[4,"NeuronState"],[4,"Vote"],[4,"NnsFunction"],[4,"ProposalStatus"],[4,"ProposalRewardStatus"],[3,"Followees"],[4,"DissolveState"],[4,"Change"],[3,"CreateNeuron"],[4,"Action"],[3,"IncreaseDissolveDelay"],[3,"AddHotKey"],[3,"RemoveHotKey"],[3,"Configure"],[3,"Disburse"],[3,"Split"],[3,"Spawn"],[3,"DisburseToNeuron"],[3,"Follow"],[3,"RegisterVote"],[4,"Command"],[4,"Operation"],[3,"Amount"],[3,"DisburseResponse"],[3,"SpawnResponse"],[3,"MakeProposalResponse"],[3,"SplitResponse"],[3,"DisburseToNeuronResponse"],[4,"Command"],[4,"ErrorType"],[3,"NeuronInFlightCommand"],[4,"Command"],[3,"BufferedStableMemWriter"],[3,"BufferedStableMemReader"],[3,"StartDissolving"],[3,"StopDissolving"],[3,"ConfigureResponse"],[3,"FollowResponse"],[3,"RegisterVoteResponse"]]},\
"ic_nns_gtc":{"doc":"","i":[[5,"der_encode","ic_nns_gtc","DER-encode the given `PublicKey`",null,[[["publickey",3]],["vec",3]]],[0,"init","","",null,null],[3,"GenesisTokenCanisterInitPayloadBuilder","ic_nns_gtc::init","",null,null],[12,"gtc_neurons","","",0,null],[12,"total_alloc","","",0,null],[12,"genesis_timestamp_seconds","","",0,null],[12,"donate_account_recipient_neuron_id","","",0,null],[12,"forward_all_unclaimed_accounts_recipient_neuron_id","","",0,null],[12,"sr_months_to_release","","",0,null],[12,"ect_months_to_release","","",0,null],[12,"rng","","",0,null],[12,"aging_since_timestamp_seconds","","",0,null],[11,"new","","",0,[[]]],[11,"add_sr_neurons","","Given a list of \\\"Seed Round\\\" accounts, create each…",0,[[]]],[11,"add_ect_neurons","","Given a list of \\\"Early Contributor Tokenholder\\\" accounts,…",0,[[]]],[11,"get_gtc_neurons","","Return a list of all SR and ECT neurons that have been added",0,[[],[["vec",3],["neuron",3]]]],[11,"with_genesis_timestamp_seconds","","",0,[[]]],[11,"build","","Convert `self` into a `Gtc`, which is used to initialize…",0,[[],["gtc",3]]],[0,"pb","ic_nns_gtc","",null,null],[0,"v1","ic_nns_gtc::pb","",null,null],[3,"Gtc","ic_nns_gtc::pb::v1","The internal state of the Genesis Token Canister",null,null],[12,"accounts","","Maps account addresses to the state of the account",1,null],[12,"total_alloc","","The total amount of ICP allocated by the GTC",1,null],[12,"genesis_timestamp_seconds","","The timestamp, in seconds since the unix epoch, at which…",1,null],[12,"donate_account_recipient_neuron_id","","The ID of the Neuron that GTC account owners will have…",1,null],[12,"forward_all_unclaimed_accounts_recipient_neuron_id","","",1,null],[3,"AccountState","","The state of a GTC account",null,null],[12,"neuron_ids","","The neuron IDs of the neurons that exist in the Governance…",2,null],[12,"icpts","","The account value, in ICPTs. The sum of the stake of all…",2,null],[12,"has_claimed","","If `true`, the neurons in `neuron_ids` have been claimed…",2,null],[12,"has_donated","","If `true`, the neurons in `neuron_ids` have been donated.",2,null],[12,"has_forwarded","","If `true`, the neurons in `neuron_ids` have been forwarded.",2,null],[12,"authenticated_principal_id","","The `PrincipalId` that has been authenticated as the owner…",2,null],[12,"successfully_transferred_neurons","","The neurons that have been successfully transferred",2,null],[12,"failed_transferred_neurons","","The neurons that failed to be transferred",2,null],[3,"TransferredNeuron","","",null,null],[12,"neuron_id","","The ID of the transferred neuron",3,null],[12,"timestamp_seconds","","The UNIX timestamp (in seconds) at which the neuron was…",3,null],[12,"error","","The failure encountered when transferring the neuron, if any",3,null],[0,"test_constants","ic_nns_gtc","",null,null],[3,"TestIdentity","ic_nns_gtc::test_constants","An identity used to make calls to the GTC canister in tests",null,null],[12,"public_key_bytes","","",4,null],[12,"secret_key_bytes","","",4,null],[12,"public_key_hex","","",4,null],[12,"gtc_address","","",4,null],[12,"principal_id_str","","",4,null],[17,"TEST_IDENTITY_1","","",null,null],[17,"TEST_IDENTITY_2","","",null,null],[17,"TEST_IDENTITY_3","","",null,null],[17,"TEST_IDENTITY_4","","",null,null],[11,"public_key","","",4,[[],["publickey",3]]],[11,"secret_key","","",4,[[],["secretkey",3]]],[11,"principal_id","","",4,[[],["principalid",3]]],[11,"sign","","",4,[[],["vec",3]]],[11,"check_public_key_hex","","Assert that `self.public_key_hex` is the hex-encoding of…",4,[[]]],[11,"check_gtc_address","","Assert that `self.gtc_address` is the correct address…",4,[[]]],[11,"check_principal_id_str","","Assert that `self.principal_id_str` is the correct…",4,[[]]],[17,"LOG_PREFIX","ic_nns_gtc","",null,null],[17,"SECONDS_UNTIL_CLAIM_NEURONS_CAN_BE_CALLED","","The amount of time after the genesis of the IC that GTC…",null,null],[17,"SECONDS_UNTIL_FORWARD_ALL_UNCLAIMED_ACCOUNTS_CAN_BE_CALLED","","The amount of time after the genesis of the IC that any…",null,null],[11,"claim_neurons","ic_nns_gtc::pb::v1","Claim the caller\'s GTC neurons (on behalf of the caller)…",1,[[["principalid",3],["string",3]]]],[11,"donate_account","","Donates the stake of all GTC neurons owned by the caller…",1,[[["principalid",3],["string",3]]]],[11,"forward_all_unclaimed_accounts","","Forwards the stake of all GTC neurons that have not been…",1,[[]]],[11,"get_account","","Return the account associated with `address`, if one exists",1,[[],[["accountstate",3],["string",3],["result",4]]]],[11,"transfer","","Transfer the stake of all unclaimed neurons (associated…",2,[[["neuronid",3],["option",4]]]],[11,"from","ic_nns_gtc::init","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","ic_nns_gtc::pb::v1","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"proxy_encode","","",1,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",1,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",1,[[]]],[11,"from_proto","","",1,[[],[["result",4],["string",3]]]],[11,"to_proto","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"proxy_encode","","",2,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",2,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",2,[[]]],[11,"from_proto","","",2,[[],[["result",4],["string",3]]]],[11,"to_proto","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"proxy_encode","","",3,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",3,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",3,[[]]],[11,"from_proto","","",3,[[],[["result",4],["string",3]]]],[11,"to_proto","","",3,[[]]],[11,"from","ic_nns_gtc::test_constants","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","ic_nns_gtc::pb::v1","",2,[[["vec",3]],["accountstate",3]]],[11,"clone","","",1,[[],["gtc",3]]],[11,"clone","","",2,[[],["accountstate",3]]],[11,"clone","","",3,[[],["transferredneuron",3]]],[11,"default","ic_nns_gtc::init","",0,[[],["genesistokencanisterinitpayloadbuilder",3]]],[11,"default","ic_nns_gtc::pb::v1","",1,[[]]],[11,"default","","",2,[[]]],[11,"default","","",3,[[]]],[11,"eq","","",1,[[["gtc",3]]]],[11,"ne","","",1,[[["gtc",3]]]],[11,"eq","","",2,[[["accountstate",3]]]],[11,"ne","","",2,[[["accountstate",3]]]],[11,"eq","","",3,[[["transferredneuron",3]]]],[11,"ne","","",3,[[["transferredneuron",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"encode_raw","","",1,[[]]],[11,"merge_field","","",1,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"encode_raw","","",2,[[]]],[11,"merge_field","","",2,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",2,[[]]],[11,"clear","","",2,[[]]],[11,"encode_raw","","",3,[[]]],[11,"merge_field","","",3,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"_ty","","",1,[[],["type",4]]],[11,"id","","",1,[[],["typeid",3]]],[11,"idl_serialize","","",1,[[],["result",4]]],[11,"_ty","","",2,[[],["type",4]]],[11,"id","","",2,[[],["typeid",3]]],[11,"idl_serialize","","",2,[[],["result",4]]],[11,"_ty","","",3,[[],["type",4]]],[11,"id","","",3,[[],["typeid",3]]],[11,"idl_serialize","","",3,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]]],"p":[[3,"GenesisTokenCanisterInitPayloadBuilder"],[3,"Gtc"],[3,"AccountState"],[3,"TransferredNeuron"],[3,"TestIdentity"]]},\
"ic_nns_gtc_accounts":{"doc":"","i":[[7,"SEED_ROUND_ACCOUNTS","ic_nns_gtc_accounts","Seed Round accounts",null,null],[7,"ECT_ACCOUNTS","","Early Contributor Tokenholder accounts",null,null]],"p":[]},\
"ic_nns_handler_root":{"doc":"","i":[[0,"canister_management","ic_nns_handler_root","",null,null],[5,"canister_status","ic_nns_handler_root::canister_management","",null,[[["canisteridrecord",3]]]],[5,"update_authz","","",null,[[["vec",3],["canisterid",3],["methodauthzchange",3]]]],[5,"do_change_nns_canister","","",null,[[["changennscanisterproposalpayload",3]]]],[5,"do_add_nns_canister","","",null,[[["addnnscanisterproposalpayload",3]]]],[5,"stop_or_start_nns_canister","","",null,[[["stoporstartnnscanisterproposalpayload",3]]]],[0,"common","ic_nns_handler_root","",null,null],[3,"CanisterIdRecord","ic_nns_handler_root::common","Copied from ic-types::ic_00::CanisterIdRecord.",null,null],[3,"CanisterStatusResult","","Partial copy-paste of ic-types::ic_00::CanisterStatusResult.",null,null],[12,"status","","",0,null],[12,"module_hash","","",0,null],[12,"controller","","",0,null],[12,"memory_size","","",0,null],[3,"ChangeNnsCanisterProposalPayload","","The payload to a proposal to upgrade a canister.",null,null],[12,"stop_before_installing","","Whether the canister should first be stopped before the…",1,null],[12,"mode","","Whether to Reinstall or Upgrade a canister.",1,null],[12,"canister_id","","The id of the canister to change.",1,null],[12,"wasm_module","","The new wasm module to ship.",1,null],[12,"arg","","The new canister args",1,null],[12,"compute_allocation","","",1,null],[12,"memory_allocation","","",1,null],[12,"query_allocation","","",1,null],[12,"authz_changes","","A list of authz changes to enact, in addition to changing…",1,null],[3,"AddNnsCanisterProposalPayload","","",null,null],[12,"name","","A unique name for this NNS canister.",2,null],[12,"wasm_module","","The new wasm module to ship.",2,null],[12,"arg","","",2,null],[12,"compute_allocation","","",2,null],[12,"memory_allocation","","",2,null],[12,"query_allocation","","",2,null],[12,"initial_cycles","","",2,null],[12,"authz_changes","","A list of authz changes to enact, in addition to…",2,null],[3,"StopOrStartNnsCanisterProposalPayload","","",null,null],[12,"canister_id","","",3,null],[12,"action","","",3,null],[4,"CanisterStatusType","","Copy-paste of ic-types::ic_00::CanisterStatusType.",null,null],[13,"Running","","",4,null],[13,"Stopping","","",4,null],[13,"Stopped","","",4,null],[4,"CanisterAction","","",null,null],[13,"Stop","","",5,null],[13,"Start","","",5,null],[17,"LOG_PREFIX","","",null,null],[11,"get_canister_id","","",6,[[],["canisterid",3]]],[11,"controller","","",0,[[],["principalid",3]]],[11,"new","","",1,[[["canisterid",3],["canisterinstallmode",4]]]],[11,"with_wasm","","",1,[[["vec",3]]]],[11,"with_arg","","",1,[[["vec",3]]]],[0,"init","ic_nns_handler_root","",null,null],[3,"RootCanisterInitPayload","ic_nns_handler_root::init","",null,null],[12,"authz_info","","",7,null],[3,"RootCanisterInitPayloadBuilder","","",null,null],[11,"new","","",8,[[]]],[11,"add_principal_authorized_to_submit_proposals","","",8,[[["principalid",3]]]],[11,"add_principals_authorized_to_submit_proposals","","",8,[[["vec",3],["principalid",3]]]],[11,"build","","",8,[[],["rootcanisterinitpayload",3]]],[0,"pb","ic_nns_handler_root","",null,null],[0,"v1","ic_nns_handler_root::pb","",null,null],[3,"RootCanisterStableStorage","ic_nns_handler_root::pb::v1","A container for the what gets written to stable storage,…",null,null],[12,"authz","","",9,null],[11,"from","ic_nns_handler_root::common","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","ic_nns_handler_root::init","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","ic_nns_handler_root::pb::v1","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"proxy_encode","","",9,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",9,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",9,[[]]],[11,"from_proto","","",9,[[],[["result",4],["string",3]]]],[11,"to_proto","","",9,[[]]],[11,"from","ic_nns_handler_root::common","",6,[[["canisterid",3]]]],[11,"clone","","",4,[[],["canisterstatustype",4]]],[11,"clone","","",1,[[],["changennscanisterproposalpayload",3]]],[11,"clone","","",2,[[],["addnnscanisterproposalpayload",3]]],[11,"clone","","",5,[[],["canisteraction",4]]],[11,"clone","","",3,[[],["stoporstartnnscanisterproposalpayload",3]]],[11,"clone","ic_nns_handler_root::init","",7,[[],["rootcanisterinitpayload",3]]],[11,"clone","ic_nns_handler_root::pb::v1","",9,[[],["rootcanisterstablestorage",3]]],[11,"default","","",9,[[]]],[11,"eq","ic_nns_handler_root::common","",4,[[["canisterstatustype",4]]]],[11,"eq","","",0,[[["canisterstatusresult",3]]]],[11,"ne","","",0,[[["canisterstatusresult",3]]]],[11,"eq","ic_nns_handler_root::pb::v1","",9,[[["rootcanisterstablestorage",3]]]],[11,"ne","","",9,[[["rootcanisterstablestorage",3]]]],[11,"fmt","ic_nns_handler_root::common","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_handler_root::init","",7,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_handler_root::pb::v1","",9,[[["formatter",3]],["result",6]]],[11,"fmt","ic_nns_handler_root::common","",4,[[["formatter",3]],["result",6]]],[11,"hash","","",4,[[]]],[11,"_ty","","",6,[[],["type",4]]],[11,"id","","",6,[[],["typeid",3]]],[11,"idl_serialize","","",6,[[],["result",4]]],[11,"_ty","","",4,[[],["type",4]]],[11,"id","","",4,[[],["typeid",3]]],[11,"idl_serialize","","",4,[[],["result",4]]],[11,"_ty","","",0,[[],["type",4]]],[11,"id","","",0,[[],["typeid",3]]],[11,"idl_serialize","","",0,[[],["result",4]]],[11,"_ty","","",1,[[],["type",4]]],[11,"id","","",1,[[],["typeid",3]]],[11,"idl_serialize","","",1,[[],["result",4]]],[11,"_ty","","",2,[[],["type",4]]],[11,"id","","",2,[[],["typeid",3]]],[11,"idl_serialize","","",2,[[],["result",4]]],[11,"_ty","","",5,[[],["type",4]]],[11,"id","","",5,[[],["typeid",3]]],[11,"idl_serialize","","",5,[[],["result",4]]],[11,"_ty","","",3,[[],["type",4]]],[11,"id","","",3,[[],["typeid",3]]],[11,"idl_serialize","","",3,[[],["result",4]]],[11,"_ty","ic_nns_handler_root::init","",7,[[],["type",4]]],[11,"id","","",7,[[],["typeid",3]]],[11,"idl_serialize","","",7,[[],["result",4]]],[11,"encode_raw","ic_nns_handler_root::pb::v1","",9,[[]]],[11,"merge_field","","",9,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",9,[[]]],[11,"clear","","",9,[[]]],[11,"deserialize","ic_nns_handler_root::common","",6,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","ic_nns_handler_root::init","",7,[[],["result",4]]]],"p":[[3,"CanisterStatusResult"],[3,"ChangeNnsCanisterProposalPayload"],[3,"AddNnsCanisterProposalPayload"],[3,"StopOrStartNnsCanisterProposalPayload"],[4,"CanisterStatusType"],[4,"CanisterAction"],[3,"CanisterIdRecord"],[3,"RootCanisterInitPayload"],[3,"RootCanisterInitPayloadBuilder"],[3,"RootCanisterStableStorage"]]},\
"ic_p2p":{"doc":"","i":[[0,"p2p","ic_p2p","The P2P module exposes the peer-to-peer functionality.",null,null],[3,"P2PService","ic_p2p::p2p","A helper service to run the P2P component.",null,null],[3,"P2P","","The P2P struct, which encapsulates all relevant components…",null,null],[3,"TestArtifact","","The artifact struct used by the testing framework.",null,null],[4,"P2PStateSyncClient","","The P2P state sync client.",null,null],[13,"Client","","The main client variant.",0,null],[13,"TestClient","","The test client variant.",0,null],[13,"TestChunkingPool","","The test chunking pool variant.",0,null],[6,"TestArtifactMessage","","The artifact message used by the testing framework.",null,null],[6,"TestArtifactId","","The artifact ID used by the testing framework.",null,null],[6,"TestArtifactAttribute","","The attribute of the artifact used by the testing framework.",null,null],[11,"fetch_gossip_config","","Fetch the Gossip configuration from the registry.",1,[[["arc",3],["subnetid",6],["registryclient",8]],["gossipconfig",3]]],[11,"new","","The function constructs a P2P instance. Currently, it…",1,[[["arc",3],["vec",3],["nodeid",6],["statemanager",8],["ingresssigverifier",8],["arc",3],["ingresshistoryreader",8],["xnetpayloadbuilder",8],["messagerouting",8],["arc",3],["subnetid",6],["transport",8],["p2pstatesyncclient",4],["arc",3],["arc",3],["arc",3],["cyclesaccountmanager",3],["flowtag",6],["arc",3],["artifactpoolconfig",3],["registryclient",8],["metricsregistry",3],["arc",3],["arc",3],["arc",3],["replicalogger",6],["box",3],["maliciousflags",3],["certificationcrypto",8],["consensusconfig",3],["consensuscrypto",8],["crypto",8],["cupwithoriginalprotobuf",3],["option",4],["arc",3]],[["result",4],["string",3]]]],[14,"use_gossip_malicious_behavior_on_chunk_request","ic_p2p","A macro to choose between running malicious code or the…",null,null],[11,"from","ic_p2p::p2p","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"equivalent","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"drop","","The method drops the P2PService.",2,[[]]],[11,"drop","","The method signals the tasks to exit and waits for them to…",1,[[]]],[11,"clone","","",0,[[],["p2pstatesyncclient",4]]],[11,"eq","","",3,[[["testartifact",3]]]],[11,"to_advert","","The function converts a TestArtifactMessage to an advert…",3,[[["testartifactmessage",6]],[["testartifact",3],["advert",3]]]],[11,"run","","The method starts the run loop of the P2P service.",2,[[]]]],"p":[[4,"P2PStateSyncClient"],[3,"P2P"],[3,"P2PService"],[3,"TestArtifact"]]},\
"ic_protobuf":{"doc":"","i":[[0,"crypto","ic_protobuf","",null,null],[0,"v1","ic_protobuf::crypto","",null,null],[3,"NodePublicKeys","ic_protobuf::crypto::v1","Public keys corresponding to the given node.",null,null],[12,"version","","",0,null],[12,"node_signing_pk","","",0,null],[12,"committee_signing_pk","","",0,null],[12,"tls_certificate","","",0,null],[12,"dkg_dealing_encryption_pk","","",0,null],[0,"log","ic_protobuf","",null,null],[0,"replica_config","ic_protobuf::log","",null,null],[0,"v1","ic_protobuf::log::replica_config","",null,null],[3,"ReplicaConfig","ic_protobuf::log::replica_config::v1","",null,null],[12,"node_id","","",1,null],[12,"subnet_id","","",1,null],[0,"consensus_log_entry","ic_protobuf::log","",null,null],[0,"v1","ic_protobuf::log::consensus_log_entry","",null,null],[3,"ConsensusLogEntry","ic_protobuf::log::consensus_log_entry::v1","",null,null],[12,"height","","",2,null],[12,"hash","","",2,null],[0,"crypto_log_entry","ic_protobuf::log","",null,null],[0,"v1","ic_protobuf::log::crypto_log_entry","",null,null],[3,"CryptoLogEntry","ic_protobuf::log::crypto_log_entry::v1","A crypto component log entry.",null,null],[12,"trait_name","","",3,null],[12,"dkg_id","","",3,null],[12,"request_id","","",3,null],[12,"public_key","","",3,null],[12,"registry_version","","",3,null],[12,"method_name","","",3,null],[12,"description","","",3,null],[12,"is_ok","","",3,null],[12,"error","","",3,null],[12,"subnet_id","","",3,null],[12,"dkg_config","","",3,null],[12,"dkg_dealing","","",3,null],[12,"dkg_dealer","","",3,null],[12,"dkg_transcript","","",3,null],[12,"signed_bytes","","",3,null],[12,"allowed_tls_clients","","",3,null],[12,"tls_server","","",3,null],[12,"dkg_epoch","","",3,null],[0,"p2p_log_entry","ic_protobuf::log","",null,null],[0,"v1","ic_protobuf::log::p2p_log_entry","",null,null],[3,"P2pLogEntry","ic_protobuf::log::p2p_log_entry::v1","",null,null],[12,"event","","",4,null],[12,"src","","",4,null],[12,"dest","","",4,null],[12,"artifact_id","","",4,null],[12,"chunk_id","","",4,null],[12,"advert","","",4,null],[12,"request","","",4,null],[12,"artifact","","",4,null],[12,"height","","",4,null],[12,"disconnect_elapsed","","",4,null],[0,"messaging_log_entry","ic_protobuf::log","",null,null],[0,"v1","ic_protobuf::log::messaging_log_entry","",null,null],[3,"MessagingLogEntry","ic_protobuf::log::messaging_log_entry::v1","",null,null],[12,"round","","",5,null],[12,"core","","",5,null],[12,"canister_id","","",5,null],[12,"message_id","","",5,null],[0,"ingress_message_log_entry","ic_protobuf::log","",null,null],[0,"v1","ic_protobuf::log::ingress_message_log_entry","",null,null],[3,"IngressMessageLogEntry","ic_protobuf::log::ingress_message_log_entry::v1","",null,null],[12,"canister_id","","",6,null],[12,"compute_allocation","","",6,null],[12,"desired_id","","",6,null],[12,"expiry_time","","",6,null],[12,"memory_allocation","","",6,null],[12,"message_id","","",6,null],[12,"method_name","","",6,null],[12,"mode","","",6,null],[12,"reason","","Gives additional information about this log event",6,null],[12,"request_type","","",6,null],[12,"sender","","",6,null],[12,"size","","",6,null],[12,"batch_time","","",6,null],[12,"batch_time_plus_ttl","","",6,null],[0,"block_log_entry","ic_protobuf::log","",null,null],[0,"v1","ic_protobuf::log::block_log_entry","",null,null],[3,"BlockLogEntry","ic_protobuf::log::block_log_entry::v1","",null,null],[12,"byte_size","","",7,null],[12,"certified_height","","",7,null],[12,"dkg_payload_type","","",7,null],[12,"hash","","",7,null],[12,"height","","",7,null],[12,"parent_hash","","",7,null],[12,"rank","","",7,null],[12,"registry_version","","",7,null],[12,"time","","",7,null],[12,"version","","",7,null],[0,"malicious_behaviour_log_entry","ic_protobuf::log","",null,null],[0,"v1","ic_protobuf::log::malicious_behaviour_log_entry","",null,null],[3,"MaliciousBehaviourLogEntry","ic_protobuf::log::malicious_behaviour_log_entry::v1","",null,null],[12,"malicious_behaviour","","",8,null],[4,"MaliciousBehaviour","","",null,null],[13,"Unspecified","","",9,null],[13,"GossipDropRequests","","",9,null],[13,"GossipArtifactNotFound","","",9,null],[13,"GossipSendManyArtifacts","","",9,null],[13,"GossipSendInvalidArtifacts","","",9,null],[13,"GossipSendLateArtifacts","","",9,null],[13,"ProposeEquivocatingBlocks","","",9,null],[13,"ProposeEmptyBlocks","","",9,null],[13,"FinalizeAll","","",9,null],[13,"NotarizeAll","","",9,null],[13,"TweakDkg","","",9,null],[13,"CertifyInvalidHash","","",9,null],[13,"MalfunctioningXnetEndpoint","","",9,null],[13,"DisableExecution","","",9,null],[13,"CorruptOwnStateAtHeights","","",9,null],[11,"malicious_behaviour","","Returns the enum value of `malicious_behaviour`, or the…",8,[[],["maliciousbehaviour",4]]],[11,"set_malicious_behaviour","","Sets `malicious_behaviour` to the provided enum value.",8,[[["maliciousbehaviour",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of…",9,[[]]],[11,"from_i32","","Converts an `i32` to a `MaliciousBehaviour`, or `None` if…",9,[[],[["option",4],["maliciousbehaviour",4]]]],[0,"log_entry","ic_protobuf::log","",null,null],[0,"v1","ic_protobuf::log::log_entry","",null,null],[3,"LogEntry","ic_protobuf::log::log_entry::v1","",null,null],[12,"level","","",10,null],[12,"utc_time","","",10,null],[12,"message","","",10,null],[12,"crate_","","",10,null],[12,"module","","",10,null],[12,"line","","",10,null],[12,"node_id","","",10,null],[12,"subnet_id","","",10,null],[12,"consensus","","",10,null],[12,"p2p","","",10,null],[12,"messaging","","",10,null],[12,"ingress_message","","",10,null],[12,"block","","",10,null],[12,"crypto","","",10,null],[12,"malicious_behaviour","","",10,null],[0,"messaging","ic_protobuf","",null,null],[0,"xnet","ic_protobuf::messaging","",null,null],[0,"v1","ic_protobuf::messaging::xnet","",null,null],[3,"ThresholdSignature","ic_protobuf::messaging::xnet::v1","Combined threshold signature.",null,null],[12,"signature","","",11,null],[12,"signer","","",11,null],[3,"CertificationContent","","State tree root hash.",null,null],[12,"hash","","",12,null],[3,"Certification","","Certification of state tree root hash.",null,null],[12,"height","","",13,null],[12,"content","","",13,null],[12,"signature","","",13,null],[3,"CertifiedStreamSlice","","XNet stream slice with certification and matching Merkle…",null,null],[12,"payload","","Serialized part of the state tree containing the stream…",14,null],[12,"merkle_proof","","Witness that can be used to recompute the root hash from…",14,null],[12,"certification","","Certification of the root hash.",14,null],[3,"LabeledTree","","Tree with ordered, labeled edges.",null,null],[12,"node_enum","","",15,null],[3,"MixedHashTree","","A tree containing both data and merkle proofs.",null,null],[12,"tree_enum","","",16,null],[3,"Witness","","Merkle proof - a subset of a `HashTree`.",null,null],[12,"witness_enum","","",17,null],[0,"labeled_tree","","Nested message and enum types in `LabeledTree`.",null,null],[3,"SubTree","ic_protobuf::messaging::xnet::v1::labeled_tree","Inner node with zero or more ordered, labeled children.",null,null],[12,"children","","Defined as `repeated` instead of `map` in order to…",18,null],[3,"Child","","A `SubTree`\'s labeled child.",null,null],[12,"label","","",19,null],[12,"node","","",19,null],[4,"NodeEnum","","",null,null],[13,"Leaf","","",20,null],[13,"SubTree","","",20,null],[11,"encode","","",20,[[]]],[11,"merge","","",20,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",20,[[]]],[0,"mixed_hash_tree","ic_protobuf::messaging::xnet::v1","Nested message and enum types in `MixedHashTree`.",null,null],[3,"Fork","ic_protobuf::messaging::xnet::v1::mixed_hash_tree","",null,null],[12,"left_tree","","",21,null],[12,"right_tree","","",21,null],[3,"Labeled","","",null,null],[12,"label","","",22,null],[12,"subtree","","",22,null],[4,"TreeEnum","","",null,null],[13,"Empty","","",23,null],[13,"Fork","","",23,null],[13,"Labeled","","",23,null],[13,"LeafData","","",23,null],[13,"PrunedDigest","","",23,null],[11,"encode","","",23,[[]]],[11,"merge","","",23,[[["decodecontext",3],["wiretype",4],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",23,[[]]],[0,"witness","ic_protobuf::messaging::xnet::v1","Nested message and enum types in `Witness`.",null,null],[3,"Fork","ic_protobuf::messaging::xnet::v1::witness","Binary fork.",null,null],[12,"left_tree","","",24,null],[12,"right_tree","","",24,null],[3,"Node","","Labeled leaf or subtree.",null,null],[12,"label","","",25,null],[12,"sub_witness","","",25,null],[3,"Pruned","","Pruned leaf or subtree.",null,null],[12,"digest","","",26,null],[3,"Known","","Marker for provided data (leaf or subtree).",null,null],[4,"WitnessEnum","","",null,null],[13,"Fork","","",27,null],[13,"Node","","",27,null],[13,"Pruned","","",27,null],[13,"Known","","",27,null],[11,"encode","","",27,[[]]],[11,"merge","","",27,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",27,[[]]],[0,"p2p","ic_protobuf","",null,null],[0,"v1","ic_protobuf::p2p","",null,null],[3,"GossipMessage","ic_protobuf::p2p::v1","",null,null],[12,"body","","",28,null],[3,"GossipAdvert","","",null,null],[12,"attribute","","",29,null],[12,"size","","",29,null],[12,"artifact_id","","",29,null],[12,"integrity_hash","","",29,null],[3,"GossipChunkRequest","","",null,null],[12,"artifact_id","","",30,null],[12,"chunk_id","","",30,null],[3,"ArtifactFilter","","",null,null],[12,"consensus_filter","","",31,null],[12,"ingress_filter","","",31,null],[12,"certification_message_filter","","",31,null],[12,"state_sync_filter","","",31,null],[3,"ConsensusMessageFilter","","",null,null],[12,"height","","",32,null],[3,"IngressMessageFilter","","",null,null],[12,"time","","",33,null],[3,"CertificationMessageFilter","","",null,null],[12,"height","","",34,null],[3,"StateSyncFilter","","",null,null],[12,"height","","",35,null],[3,"GossipRetransmissionRequest","","",null,null],[12,"filter","","",36,null],[3,"GossipChunk","","",null,null],[12,"artifact_id","","",37,null],[12,"chunk_id","","",37,null],[12,"response","","",37,null],[3,"ArtifactChunk","","",null,null],[12,"witnesses","","",38,null],[12,"data","","",38,null],[4,"P2pError","","",null,null],[13,"Unspecified","","",39,null],[13,"NotFound","","",39,null],[0,"gossip_message","","Nested message and enum types in `GossipMessage`.",null,null],[4,"Body","ic_protobuf::p2p::v1::gossip_message","",null,null],[13,"Advert","","",40,null],[13,"ChunkRequest","","",40,null],[13,"Chunk","","",40,null],[13,"RetransmissionRequest","","",40,null],[11,"encode","","",40,[[]]],[11,"merge","","",40,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",40,[[]]],[0,"gossip_chunk","ic_protobuf::p2p::v1","Nested message and enum types in `GossipChunk`.",null,null],[4,"Response","ic_protobuf::p2p::v1::gossip_chunk","",null,null],[13,"Chunk","","",41,null],[13,"Error","","",41,null],[11,"encode","","",41,[[]]],[11,"merge","","",41,[[["decodecontext",3],["option",4],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",41,[[]]],[0,"artifact_chunk","ic_protobuf::p2p::v1","Nested message and enum types in `ArtifactChunk`.",null,null],[4,"Data","ic_protobuf::p2p::v1::artifact_chunk","",null,null],[13,"Artifact","","TODO(P2P-483): bincode-encoded Artifact to proto-encoding",42,null],[13,"Chunk","","",42,null],[11,"encode","","",42,[[]]],[11,"merge","","",42,[[["decodecontext",3],["wiretype",4],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",42,[[]]],[11,"is_valid","ic_protobuf::p2p::v1","Returns `true` if `value` is a variant of `P2pError`.",39,[[]]],[11,"from_i32","","Converts an `i32` to a `P2pError`, or `None` if `value` is…",39,[[],[["option",4],["p2perror",4]]]],[0,"proxy","ic_protobuf","A proxy for encoding arbitrary Rust structs in protocol…",null,null],[4,"ProxyDecodeError","ic_protobuf::proxy","Errors that may result when mapping a proto to a Rust…",null,null],[13,"DecodeError","","Protobuf message decoding error.",43,null],[13,"CborDecodeError","","CBOR message decoding error.",43,null],[13,"MissingField","","Required struct field missing from proto.",43,null],[13,"ValueOutOfRange","","Invalid value for type.",43,null],[12,"typ","ic_protobuf::proxy::ProxyDecodeError","",44,null],[12,"err","","",44,null],[13,"InvalidPrincipalId","ic_protobuf::proxy","Blob-to-`PrincipalId` parse error.",43,null],[13,"InvalidCanisterId","","Blob-to-`CanisterId` parse error.",43,null],[13,"InvalidDigestLength","","Invalid `Digest` length.",43,null],[12,"expected","ic_protobuf::proxy::ProxyDecodeError","",45,null],[12,"actual","","",45,null],[13,"InvalidMessageId","ic_protobuf::proxy","Invalid `MessageID`.",43,null],[12,"expected","ic_protobuf::proxy::ProxyDecodeError","",46,null],[12,"actual","","",46,null],[13,"ReplicaVersionParseError","ic_protobuf::proxy","Replica version parsing error.",43,null],[13,"DuplicateEntry","","Duplicate map entry.",43,null],[12,"key","ic_protobuf::proxy::ProxyDecodeError","",47,null],[12,"v1","","",47,null],[12,"v2","","",47,null],[13,"Other","ic_protobuf::proxy","Generic error.",43,null],[5,"try_from_option_field","","Converts an optional proto field into a Rust type using…",null,[[["option",4]],[["result",4],["proxydecodeerror",4]]]],[8,"ProtoProxy","","Allows a `prost::Message` to act as a proxy for encoding…",null,null],[10,"proxy_encode","","Encodes `t` into a vector via this proxy.",48,[[],[["vec",3],["encodeerror",3],["result",4]]]],[10,"proxy_decode","","Decodes a `T` from a slice via this proxy.",48,[[],[["result",4],["proxydecodeerror",4]]]],[11,"source_eq","","Compares the wrapped source error (where applicable) with…",43,[[]]],[0,"registry","ic_protobuf","",null,null],[0,"conversion_rate","ic_protobuf::registry","",null,null],[0,"v1","ic_protobuf::registry::conversion_rate","",null,null],[3,"IcpXdrConversionRateRecord","ic_protobuf::registry::conversion_rate::v1","Instruct the NNS about the market value of 1 ICP measured…",null,null],[12,"timestamp_seconds","","The time for which the market data was queried, expressed…",49,null],[12,"xdr_permyriad_per_icp","","The number of 10,000ths of IMF SDR (currency code XDR)…",49,null],[0,"crypto","ic_protobuf::registry","",null,null],[0,"v1","ic_protobuf::registry::crypto","",null,null],[3,"PublicKey","ic_protobuf::registry::crypto::v1","A public key. Described by its `AlgorithmId`, the key\'s…",null,null],[12,"version","","",50,null],[12,"algorithm","","",50,null],[12,"key_value","","",50,null],[12,"proof_data","","",50,null],[3,"X509PublicKeyCert","","DER-encoded X509 public key certificate",null,null],[12,"certificate_der","","",51,null],[4,"AlgorithmId","","An algorithm ID. This is used to specify the signature…",null,null],[13,"Unspecified","","",52,null],[13,"MultiBls12381","","",52,null],[13,"ThresBls12381","","",52,null],[13,"SchnorrSecp256k1","","",52,null],[13,"StaticDhSecp256k1","","",52,null],[13,"HashSha256","","",52,null],[13,"Tls","","",52,null],[13,"Ed25519","","",52,null],[13,"Secp256k1","","",52,null],[13,"Groth20Bls12381","","",52,null],[13,"NidkgGroth20Bls12381","","",52,null],[13,"EcdsaP256","","",52,null],[13,"EcdsaSecp256k1","","",52,null],[13,"IcCanisterSignature","","",52,null],[11,"algorithm","","Returns the enum value of `algorithm`, or the default if…",50,[[],["algorithmid",4]]],[11,"set_algorithm","","Sets `algorithm` to the provided enum value.",50,[[["algorithmid",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `AlgorithmId`.",52,[[]]],[11,"from_i32","","Converts an `i32` to a `AlgorithmId`, or `None` if `value`…",52,[[],[["algorithmid",4],["option",4]]]],[0,"firewall","ic_protobuf::registry","",null,null],[0,"v1","ic_protobuf::registry::firewall","",null,null],[3,"FirewallConfig","ic_protobuf::registry::firewall::v1","Firewall configuration",null,null],[12,"firewall_config","","The firewall configuration content",53,null],[12,"ipv4_prefixes","","List of allowed IPv4 prefixes",53,null],[12,"ipv6_prefixes","","List of allowed IPv6 prefixes",53,null],[0,"nns","ic_protobuf::registry","",null,null],[0,"v1","ic_protobuf::registry::nns","",null,null],[3,"NnsCanisterRecord","ic_protobuf::registry::nns::v1","Information about an NNS canister.",null,null],[12,"id","","",54,null],[3,"NnsCanisterRecords","","All of the post-genesis NNS canisters.",null,null],[12,"canisters","","Mapping name (arbitrary string) -> canister id.",55,null],[0,"node","ic_protobuf::registry","",null,null],[0,"v1","ic_protobuf::registry::node","",null,null],[3,"ConnectionEndpoint","ic_protobuf::registry::node::v1","A connection endpoint.",null,null],[12,"ip_addr","","The IP address. Senders SHOULD use dotted-quad notation…",56,null],[12,"port","","",56,null],[12,"protocol","","Protocol that is used on this endpoint. If…",56,null],[3,"FlowEndpoint","","",null,null],[12,"flow_tag","","The flow identifier (tag). This has to be unique per…",57,null],[12,"endpoint","","The IP/port for this flow.",57,null],[3,"NodeRecord","","A node: one machine running a replica instance.",null,null],[12,"xnet","","The endpoint where this node receives xnet messages.",58,null],[12,"http","","The endpoint where this node receives http requests.",58,null],[12,"p2p_flow_endpoints","","The P2P flow end points.",58,null],[12,"prometheus_metrics_http","","Endpoint where the node provides Prometheus format metrics…",58,null],[12,"public_api","","Endpoints on which the public API is served.",58,null],[12,"private_api","","Endpoints on which private APIs are served.",58,null],[12,"prometheus_metrics","","Endpoints on which metrics compatible with the Prometheus…",58,null],[12,"xnet_api","","Endpoints on which the XNet API is served",58,null],[12,"node_operator_id","","The id of the node operator that added this node.",58,null],[0,"connection_endpoint","","Nested message and enum types in `ConnectionEndpoint`.",null,null],[4,"Protocol","ic_protobuf::registry::node::v1::connection_endpoint","",null,null],[13,"Unspecified","","",59,null],[13,"Http1","","",59,null],[13,"Http1Tls13","","",59,null],[13,"P2p1Tls13","","",59,null],[11,"is_valid","","Returns `true` if `value` is a variant of `Protocol`.",59,[[]]],[11,"from_i32","","Converts an `i32` to a `Protocol`, or `None` if `value` is…",59,[[],[["option",4],["protocol",4]]]],[11,"protocol","ic_protobuf::registry::node::v1","Returns the enum value of `protocol`, or the default if…",56,[[],["protocol",4]]],[11,"set_protocol","","Sets `protocol` to the provided enum value.",56,[[["protocol",4]]]],[0,"node_operator","ic_protobuf::registry","",null,null],[0,"v1","ic_protobuf::registry::node_operator","",null,null],[3,"NodeOperatorRecord","ic_protobuf::registry::node_operator::v1","A record for a node operator. Each node operator is…",null,null],[12,"node_operator_principal_id","","The principal id of the node operator. This principal is…",60,null],[12,"node_allowance","","The remaining number of nodes that could be added by this…",60,null],[12,"node_provider_principal_id","","The principal id of this node operator\'s provider.",60,null],[0,"provisional_whitelist","ic_protobuf::registry","",null,null],[0,"v1","ic_protobuf::registry::provisional_whitelist","",null,null],[3,"ProvisionalWhitelist","ic_protobuf::registry::provisional_whitelist::v1","",null,null],[12,"list_type","","",61,null],[12,"set","","This must be empty if list_type is of variant ALL.",61,null],[0,"provisional_whitelist","","Nested message and enum types in `ProvisionalWhitelist`.",null,null],[4,"ListType","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",null,null],[13,"Unspecified","","",62,null],[13,"All","","",62,null],[13,"Set","","",62,null],[11,"is_valid","","Returns `true` if `value` is a variant of `ListType`.",62,[[]]],[11,"from_i32","","Converts an `i32` to a `ListType`, or `None` if `value` is…",62,[[],[["listtype",4],["option",4]]]],[11,"list_type","ic_protobuf::registry::provisional_whitelist::v1","Returns the enum value of `list_type`, or the default if…",61,[[],["listtype",4]]],[11,"set_list_type","","Sets `list_type` to the provided enum value.",61,[[["listtype",4]]]],[0,"replica_version","ic_protobuf::registry","",null,null],[0,"v1","ic_protobuf::registry::replica_version","",null,null],[3,"ReplicaVersionRecord","ic_protobuf::registry::replica_version::v1","Information about a Replica version",null,null],[12,"binary_url","","The URL against which a HTTP GET request will return a…",63,null],[12,"sha256_hex","","The hex-formatted SHA-256 hash of the binary served by…",63,null],[12,"node_manager_binary_url","","The URL against which a HTTP GET request will return a…",63,null],[12,"node_manager_sha256_hex","","The hex-formatted SHA-256 hash of the binary served by…",63,null],[12,"release_package_url","","The URL against which a HTTP GET request will return a…",63,null],[12,"release_package_sha256_hex","","The hex-formatted SHA-256 hash of the archive file served…",63,null],[3,"BlessedReplicaVersions","","A list of blessed versions of the IC Replica",null,null],[12,"blessed_version_ids","","A list of version information ids.",64,null],[0,"routing_table","ic_protobuf::registry","",null,null],[0,"v1","ic_protobuf::registry::routing_table","",null,null],[3,"CanisterIdRange","ic_protobuf::registry::routing_table::v1","Represents a closed range of canister ids.",null,null],[12,"start_canister_id","","",65,null],[12,"end_canister_id","","",65,null],[3,"CanisterIdRanges","","A list of closed ranges of canister Ids.",null,null],[12,"ranges","","",66,null],[3,"RoutingTable","","Maps a closed range of canister Ids to a subnet id.",null,null],[12,"entries","","Defined as `repeated` instead of `map` in order to…",67,null],[0,"routing_table","","Nested message and enum types in `RoutingTable`.",null,null],[3,"Entry","ic_protobuf::registry::routing_table::v1::routing_table","",null,null],[12,"range","","",68,null],[12,"subnet_id","","",68,null],[0,"subnet","ic_protobuf::registry","",null,null],[0,"v1","ic_protobuf::registry::subnet","",null,null],[3,"SubnetRecord","ic_protobuf::registry::subnet::v1","A subnet: A logical group of nodes that run consensus",null,null],[12,"membership","","",69,null],[12,"initial_dkg_transcript","","",69,null],[12,"ingress_bytes_per_block_soft_cap","","Ingress message params used by that subnet.",69,null],[12,"max_ingress_bytes_per_message","","Maximum amount of bytes per message. This is a hard cap,…",69,null],[12,"unit_delay_millis","","Unit delay for blockmaker (in milliseconds).",69,null],[12,"initial_notary_delay_millis","","Initial delay for notary (in milliseconds), to give time…",69,null],[12,"replica_version_id","","ID of the Replica version to run",69,null],[12,"dkg_interval_length","","The length of all DKG intervals. The DKG interval length…",69,null],[12,"gossip_config","","Gossip Config",69,null],[12,"start_as_nns","","If set to yes, the subnet starts as a (new) NNS",69,null],[12,"subnet_type","","The type of subnet.",69,null],[12,"dkg_dealings_per_block","","The upper bound for the number of dealings we allow in a…",69,null],[12,"is_halted","","If `true`, the subnet will be halted: it will no longer…",69,null],[12,"max_ingress_messages_per_block","","Max number of ingress messages per block.",69,null],[3,"CatchUpPackageContents","","Contains the initial DKG transcripts for the subnet and…",null,null],[12,"initial_ni_dkg_transcript_low_threshold","","Initial non-interactive low-threshold DKG transcript",70,null],[12,"initial_ni_dkg_transcript_high_threshold","","Initial non-interactive high-threshold DKG transcript",70,null],[12,"height","","The blockchain height that the CUP should have",70,null],[12,"time","","Block time for the CUP\'s block",70,null],[12,"state_hash","","The hash of the state that the subnet should use",70,null],[12,"registry_store_uri","","A uri from which data to replace the registry local store…",70,null],[3,"RegistryStoreUri","","",null,null],[12,"uri","","",71,null],[12,"hash","","",71,null],[12,"registry_version","","",71,null],[3,"SubnetListRecord","","A list of subnet ids of all subnets present in this…",null,null],[12,"subnets","","",72,null],[3,"InitialDkgTranscriptRecord","","",null,null],[12,"id","","the dkg id",73,null],[12,"committee","","Node Ids of the nodes that originally participated in this…",73,null],[12,"transcript_bytes","","the transcript",73,null],[3,"DkgId","","The dkg id",null,null],[12,"instance_id","","",74,null],[12,"subnet_id","","",74,null],[3,"InitialNiDkgTranscriptRecord","","Initial non-interactive DKG transcript record",null,null],[12,"id","","",75,null],[12,"threshold","","",75,null],[12,"committee","","",75,null],[12,"registry_version","","",75,null],[12,"internal_csp_transcript","","",75,null],[3,"GossipConfig","","Per subnet P2P configuration Note: protoc is mangling the…",null,null],[12,"max_artifact_streams_per_peer","","max outstanding request per peer MIN/DEFAULT/MAX 1/20/200",76,null],[12,"max_chunk_wait_ms","","timeout for a outstanding request 3_000/15_000/180_000",76,null],[12,"max_duplicity","","max duplicate requests in underutilized networks 1/28/6000",76,null],[12,"max_chunk_size","","maximum chunk size supported on this subnet…",76,null],[12,"receive_check_cache_size","","history size for receive check 1_000/5_000/30_000",76,null],[12,"pfn_evaluation_period_ms","","period for re evaluating the priority function.…",76,null],[12,"registry_poll_period_ms","","period for polling the registry for updates…",76,null],[12,"retransmission_request_ms","","period for sending a retransmission request    ",76,null],[4,"SubnetType","","Represents the type of subnet. Subnets of different type…",null,null],[13,"Unspecified","","",77,null],[13,"Application","","A normal subnet where no restrictions are applied.",77,null],[13,"System","","A more privileged subnet where certain restrictions are…",77,null],[13,"VerifiedApplication","","A subnet type that is like application subnets but can…",77,null],[11,"subnet_type","","Returns the enum value of `subnet_type`, or the default if…",69,[[],["subnettype",4]]],[11,"set_subnet_type","","Sets `subnet_type` to the provided enum value.",69,[[["subnettype",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `SubnetType`.",77,[[]]],[11,"from_i32","","Converts an `i32` to a `SubnetType`, or `None` if `value`…",77,[[],[["option",4],["subnettype",4]]]],[0,"state","ic_protobuf","",null,null],[0,"canister_state_bits","ic_protobuf::state","",null,null],[0,"v1","ic_protobuf::state::canister_state_bits","",null,null],[3,"CallContext","ic_protobuf::state::canister_state_bits::v1","",null,null],[12,"responded","","",78,null],[12,"available_funds","","",78,null],[12,"deleted","","",78,null],[12,"call_origin","","",78,null],[3,"CallContextEntry","","",null,null],[12,"call_context_id","","",79,null],[12,"call_context","","",79,null],[3,"WasmClosure","","",null,null],[12,"func_idx","","",80,null],[12,"env","","",80,null],[3,"Callback","","",null,null],[12,"call_context_id","","",81,null],[12,"on_reply","","",81,null],[12,"on_reject","","",81,null],[12,"on_cleanup","","",81,null],[12,"cycles_sent","","",81,null],[3,"CallbackEntry","","",null,null],[12,"callback_id","","",82,null],[12,"callback","","",82,null],[3,"CallContextManager","","",null,null],[12,"next_call_context_id","","",83,null],[12,"next_callback_id","","",83,null],[12,"call_contexts","","",83,null],[12,"callbacks","","",83,null],[3,"CyclesAccount","","",null,null],[12,"cycles_balance","","Cycle balance is store as u128::to_bytes_le()",84,null],[3,"Global","","",null,null],[12,"global","","",85,null],[3,"WasmMethod","","",null,null],[12,"wasm_method","","",86,null],[3,"ExecutionStateBits","","",null,null],[12,"exported_globals","","",87,null],[12,"heap_size","","",87,null],[12,"exports","","",87,null],[12,"last_executed_round","","",87,null],[3,"StopCanisterContext","","",null,null],[12,"context","","",88,null],[3,"CanisterStatusRunning","","",null,null],[12,"call_context_manager","","",89,null],[3,"CanisterStatusStopping","","",null,null],[12,"call_context_manager","","",90,null],[12,"stop_contexts","","",90,null],[3,"CanisterStatusStopped","","",null,null],[3,"CanisterStateBits","","",null,null],[12,"controller","","",91,null],[12,"last_full_execution_round","","",91,null],[12,"call_context_manager","","",91,null],[12,"compute_allocation","","",91,null],[12,"accumulated_priority","","",91,null],[12,"query_allocation","","",91,null],[12,"execution_state_bits","","",91,null],[12,"memory_allocation","","",91,null],[12,"cycles_account","","",91,null],[12,"icp_balance","","",91,null],[12,"scheduled_as_first","","",91,null],[12,"skipped_round_due_to_no_messages","","",91,null],[12,"executed","","In how many rounds a canister is executed.",91,null],[12,"certified_data","","",91,null],[12,"interruped_during_execution","","",91,null],[12,"consumed_cycles_since_replica_started","","",91,null],[12,"freeze_threshold","","",91,null],[12,"stable_memory_size","","",91,null],[12,"canister_status","","",91,null],[0,"call_context","","Nested message and enum types in `CallContext`.",null,null],[3,"Ingress","ic_protobuf::state::canister_state_bits::v1::call_context","",null,null],[12,"user_id","","",92,null],[12,"message_id","","",92,null],[3,"CanisterUpdateOrQuery","","",null,null],[12,"canister_id","","",93,null],[12,"callback_id","","",93,null],[3,"Heartbeat","","",null,null],[4,"CallOrigin","","",null,null],[13,"Ingress","","",94,null],[13,"CanisterUpdate","","",94,null],[13,"Query","","",94,null],[13,"CanisterQuery","","",94,null],[13,"Heartbeat","","",94,null],[11,"encode","","",94,[[]]],[11,"merge","","",94,[[["decodecontext",3],["wiretype",4],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",94,[[]]],[0,"global","ic_protobuf::state::canister_state_bits::v1","Nested message and enum types in `Global`.",null,null],[4,"Global","ic_protobuf::state::canister_state_bits::v1::global","",null,null],[13,"I32","","",95,null],[13,"I64","","",95,null],[13,"F32","","",95,null],[13,"F64","","",95,null],[11,"encode","","",95,[[]]],[11,"merge","","",95,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",95,[[]]],[0,"wasm_method","ic_protobuf::state::canister_state_bits::v1","Nested message and enum types in `WasmMethod`.",null,null],[4,"SystemMethod","ic_protobuf::state::canister_state_bits::v1::wasm_method","",null,null],[13,"Unspecified","","",96,null],[13,"CanisterStart","","",96,null],[13,"CanisterInit","","",96,null],[13,"CanisterPreUpgrade","","",96,null],[13,"CanisterPostUpgrade","","",96,null],[13,"CanisterInspectMessage","","",96,null],[13,"CanisterHeartbeat","","",96,null],[13,"Empty","","",96,null],[4,"WasmMethod","","",null,null],[13,"Update","","",97,null],[13,"Query","","",97,null],[13,"System","","",97,null],[11,"is_valid","","Returns `true` if `value` is a variant of `SystemMethod`.",96,[[]]],[11,"from_i32","","Converts an `i32` to a `SystemMethod`, or `None` if…",96,[[],[["systemmethod",4],["option",4]]]],[11,"encode","","",97,[[]]],[11,"merge","","",97,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",97,[[]]],[0,"stop_canister_context","ic_protobuf::state::canister_state_bits::v1","Nested message and enum types in `StopCanisterContext`.",null,null],[3,"Ingress","ic_protobuf::state::canister_state_bits::v1::stop_canister_context","",null,null],[12,"sender","","",98,null],[12,"message_id","","",98,null],[3,"Canister","","",null,null],[12,"sender","","",99,null],[12,"reply_callback","","",99,null],[12,"funds","","",99,null],[4,"Context","","",null,null],[13,"Ingress","","",100,null],[13,"Canister","","",100,null],[11,"encode","","",100,[[]]],[11,"merge","","",100,[[["decodecontext",3],["wiretype",4],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",100,[[]]],[0,"canister_state_bits","ic_protobuf::state::canister_state_bits::v1","Nested message and enum types in `CanisterStateBits`.",null,null],[4,"CanisterStatus","ic_protobuf::state::canister_state_bits::v1::canister_state_bits","",null,null],[13,"Running","","",101,null],[13,"Stopping","","",101,null],[13,"Stopped","","",101,null],[11,"encode","","",101,[[]]],[11,"merge","","",101,[[["decodecontext",3],["wiretype",4],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",101,[[]]],[0,"ingress","ic_protobuf::state","",null,null],[0,"v1","ic_protobuf::state::ingress","",null,null],[3,"IngressStatusUnknown","ic_protobuf::state::ingress::v1","",null,null],[3,"IngressStatusProcessing","","",null,null],[12,"user_id","","",102,null],[12,"time_nanos","","",102,null],[12,"receiver","","",102,null],[3,"IngressStatusReceived","","",null,null],[12,"user_id","","",103,null],[12,"time_nanos","","",103,null],[12,"receiver","","",103,null],[3,"IngressStatusCompleted","","",null,null],[12,"user_id","","",104,null],[12,"time_nanos","","",104,null],[12,"receiver","","",104,null],[12,"wasm_result","","",104,null],[3,"IngressStatusFailed","","",null,null],[12,"user_id","","",105,null],[12,"err_code","","",105,null],[12,"err_description","","",105,null],[12,"time_nanos","","",105,null],[12,"receiver","","",105,null],[3,"PruningEntry","","",null,null],[12,"time_nanos","","",106,null],[12,"messages","","",106,null],[3,"IngressStatus","","",null,null],[12,"status","","",107,null],[3,"IngressStatusEntry","","",null,null],[12,"message_id","","",108,null],[12,"status","","",108,null],[3,"IngressHistoryState","","",null,null],[12,"statuses","","",109,null],[12,"pruning_times","","",109,null],[3,"Ingress","","",null,null],[12,"source","","",110,null],[12,"receiver","","",110,null],[12,"method_name","","",110,null],[12,"method_payload","","",110,null],[12,"message_id","","",110,null],[12,"expiry_time_nanos","","",110,null],[0,"ingress_status_completed","","Nested message and enum types in `IngressStatusCompleted`.",null,null],[4,"WasmResult","ic_protobuf::state::ingress::v1::ingress_status_completed","",null,null],[13,"Reply","","",111,null],[13,"Reject","","",111,null],[11,"encode","","",111,[[]]],[11,"merge","","",111,[[["decodecontext",3],["wiretype",4],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",111,[[]]],[0,"ingress_status","ic_protobuf::state::ingress::v1","Nested message and enum types in `IngressStatus`.",null,null],[4,"Status","ic_protobuf::state::ingress::v1::ingress_status","",null,null],[13,"Unknown","","",112,null],[13,"Processing","","",112,null],[13,"Received","","",112,null],[13,"Completed","","",112,null],[13,"Failed","","",112,null],[11,"encode","","",112,[[]]],[11,"merge","","",112,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",112,[[]]],[0,"queues","ic_protobuf::state","",null,null],[0,"v1","ic_protobuf::state::queues","",null,null],[3,"Cycles","ic_protobuf::state::queues::v1","",null,null],[12,"raw_cycles","","",113,null],[3,"Funds","","",null,null],[12,"icp","","",114,null],[12,"cycles_struct","","",114,null],[3,"Stream","","",null,null],[12,"messages_begin","","",115,null],[12,"messages","","",115,null],[12,"signals_end","","",115,null],[3,"StreamEntry","","",null,null],[12,"subnet_id","","",116,null],[12,"subnet_stream","","",116,null],[3,"Request","","",null,null],[12,"receiver","","",117,null],[12,"sender","","",117,null],[12,"sender_reply_callback","","",117,null],[12,"payment","","",117,null],[12,"method_name","","",117,null],[12,"method_payload","","",117,null],[3,"RejectContext","","",null,null],[12,"reject_code","","",118,null],[12,"reject_message","","",118,null],[3,"Response","","",null,null],[12,"originator","","",119,null],[12,"respondent","","",119,null],[12,"originator_reply_callback","","",119,null],[12,"refund","","",119,null],[12,"response_payload","","",119,null],[3,"RequestOrResponse","","",null,null],[12,"r","","",120,null],[3,"InputOutputQueue","","",null,null],[12,"queue","","",121,null],[12,"ind","","",121,null],[12,"capacity","","",121,null],[12,"num_slots_reserved","","",121,null],[3,"QueueEntry","","",null,null],[12,"canister_id","","",122,null],[12,"queue","","",122,null],[3,"CanisterQueues","","",null,null],[12,"ingress_queue","","",123,null],[12,"input_queues","","",123,null],[12,"input_schedule","","",123,null],[12,"output_queues","","",123,null],[0,"response","","Nested message and enum types in `Response`.",null,null],[4,"ResponsePayload","ic_protobuf::state::queues::v1::response","",null,null],[13,"Data","","",124,null],[13,"Reject","","",124,null],[11,"encode","","",124,[[]]],[11,"merge","","",124,[[["decodecontext",3],["option",4],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",124,[[]]],[0,"request_or_response","ic_protobuf::state::queues::v1","Nested message and enum types in `RequestOrResponse`.",null,null],[4,"R","ic_protobuf::state::queues::v1::request_or_response","",null,null],[13,"Request","","",125,null],[13,"Response","","",125,null],[11,"encode","","",125,[[]]],[11,"merge","","",125,[[["decodecontext",3],["wiretype",4],["option",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",125,[[]]],[0,"sync","ic_protobuf::state","",null,null],[0,"v1","ic_protobuf::state::sync","",null,null],[3,"FileInfo","ic_protobuf::state::sync::v1","",null,null],[12,"relative_path","","",126,null],[12,"size_bytes","","",126,null],[12,"hash","","",126,null],[3,"ChunkInfo","","",null,null],[12,"file_index","","",127,null],[12,"size_bytes","","",127,null],[12,"offset","","",127,null],[12,"hash","","",127,null],[3,"Manifest","","",null,null],[12,"version","","",128,null],[12,"file_table","","",128,null],[12,"chunk_table","","",128,null],[0,"system_metadata","ic_protobuf::state","",null,null],[0,"v1","ic_protobuf::state::system_metadata","",null,null],[3,"NodeTopology","ic_protobuf::state::system_metadata::v1","",null,null],[12,"ip_address","","",129,null],[12,"http_port","","",129,null],[3,"SubnetTopologyEntry","","",null,null],[12,"node_id","","",130,null],[12,"node_topology","","",130,null],[3,"SubnetTopology","","",null,null],[12,"nodes","","",131,null],[12,"public_key","","The public key of the subnet (a DER-encoded BLS key, see…",131,null],[12,"subnet_type","","",131,null],[3,"SubnetsEntry","","",null,null],[12,"subnet_id","","",132,null],[12,"subnet_topology","","",132,null],[3,"NetworkTopology","","",null,null],[12,"subnets","","",133,null],[12,"routing_table","","",133,null],[12,"nns_subnet_id","","",133,null],[3,"SetupInitialDkgContext","","",null,null],[12,"request","","",134,null],[12,"nodes_in_subnet","","",134,null],[12,"target_id","","",134,null],[12,"registry_version","","",134,null],[3,"SubnetCallContext","","",null,null],[12,"setup_initial_dkg_context","","",135,null],[3,"SubnetCallContextTree","","",null,null],[12,"callback_id","","",136,null],[12,"context","","",136,null],[3,"SubnetCallContextManager","","",null,null],[12,"next_callback_id","","",137,null],[12,"contexts","","",137,null],[3,"SystemMetadata","","",null,null],[12,"generated_id_counter","","",138,null],[12,"prev_state_hash","","",138,null],[12,"batch_time_nanos","","",138,null],[12,"ingress_history","","",138,null],[12,"streams","","",138,null],[12,"network_topology","","",138,null],[12,"own_subnet_id","","",138,null],[12,"subnet_call_context_manager","","",138,null],[12,"state_sync_version","","Version of the StateSync protocol that should be used to…",138,null],[12,"certification_version","","Version of the certification protocol that should be used…",138,null],[12,"heap_delta_estimate","","",138,null],[3,"StableMemory","","",null,null],[12,"memory","","",139,null],[11,"subnet_type","","Returns the enum value of `subnet_type`, or the default if…",131,[[],["subnettype",4]]],[11,"set_subnet_type","","Sets `subnet_type` to the provided enum value.",131,[[["subnettype",4]]]],[0,"v1","ic_protobuf::state","",null,null],[3,"StateMetadata","ic_protobuf::state::v1","",null,null],[12,"manifest","","",140,null],[3,"StatesMetadata","","",null,null],[12,"by_height","","",141,null],[0,"types","ic_protobuf","",null,null],[0,"v1","ic_protobuf::types","",null,null],[3,"PrincipalId","ic_protobuf::types::v1","",null,null],[12,"raw","","",142,null],[3,"CanisterId","","",null,null],[12,"principal_id","","",143,null],[3,"SubnetId","","",null,null],[12,"principal_id","","",144,null],[3,"UserId","","",null,null],[12,"principal_id","","",145,null],[3,"NodeId","","",null,null],[12,"principal_id","","",146,null],[3,"NiDkgId","","A non-interactive distributed key generation (NI-DKG) ID.",null,null],[12,"start_block_height","","",147,null],[12,"dealer_subnet","","",147,null],[12,"dkg_tag","","",147,null],[12,"remote_target_id","","",147,null],[3,"NominalCycles","","",null,null],[12,"high","","",148,null],[12,"low","","",148,null],[3,"DkgMessage","","",null,null],[12,"signer","","",149,null],[12,"signature","","",149,null],[12,"replica_version","","",149,null],[12,"dkg_id","","",149,null],[12,"dealing","","",149,null],[3,"DkgPayload","","",null,null],[12,"val","","",150,null],[3,"Dealings","","",null,null],[12,"dealings","","",151,null],[12,"summary_height","","",151,null],[3,"Summary","","",null,null],[12,"registry_version","","",152,null],[12,"interval_length","","",152,null],[12,"next_interval_length","","",152,null],[12,"height","","",152,null],[12,"current_transcripts","","",152,null],[12,"next_transcripts","","",152,null],[12,"configs","","",152,null],[12,"transcripts_for_new_subnets","","",152,null],[3,"TaggedNiDkgTranscript","","",null,null],[12,"transcript","","",153,null],[12,"tag","","",153,null],[3,"IdedNiDkgTranscript","","",null,null],[12,"dkg_id","","",154,null],[12,"transcript_result","","",154,null],[3,"NiDkgTranscriptResult","","",null,null],[12,"val","","",155,null],[3,"NiDkgTranscript","","A transcript for non-interactive Distributed Key…",null,null],[12,"dkg_id","","",156,null],[12,"threshold","","",156,null],[12,"committee","","",156,null],[12,"registry_version","","",156,null],[12,"internal_csp_transcript","","",156,null],[3,"NiDkgConfig","","A configuration for non-interactive Distributed Key…",null,null],[12,"dkg_id","","",157,null],[12,"max_corrupt_dealers","","",157,null],[12,"dealers","","",157,null],[12,"max_corrupt_receivers","","",157,null],[12,"receivers","","",157,null],[12,"threshold","","",157,null],[12,"registry_version","","",157,null],[12,"resharing_transcript","","",157,null],[3,"CatchUpPackage","","",null,null],[12,"content","","",158,null],[12,"signature","","",158,null],[12,"signer","","",158,null],[3,"CatchUpContent","","",null,null],[12,"block","","",159,null],[12,"random_beacon","","",159,null],[12,"state_hash","","",159,null],[12,"block_hash","","",159,null],[12,"random_beacon_hash","","",159,null],[3,"Block","","",null,null],[12,"version","","",160,null],[12,"parent","","",160,null],[12,"dkg_payload","","",160,null],[12,"height","","",160,null],[12,"rank","","",160,null],[12,"time","","ValidationContext",160,null],[12,"registry_version","","",160,null],[12,"certified_height","","",160,null],[12,"ingress_payload","","Payloads",160,null],[12,"xnet_payload","","",160,null],[12,"payload_hash","","",160,null],[3,"BlockProposal","","",null,null],[12,"hash","","",161,null],[12,"value","","",161,null],[12,"signature","","",161,null],[12,"signer","","",161,null],[3,"RandomBeacon","","",null,null],[12,"version","","",162,null],[12,"height","","",162,null],[12,"parent","","",162,null],[12,"signature","","",162,null],[12,"signer","","",162,null],[3,"RandomTape","","",null,null],[12,"version","","",163,null],[12,"height","","",163,null],[12,"signature","","",163,null],[12,"signer","","",163,null],[3,"Finalization","","",null,null],[12,"version","","",164,null],[12,"height","","",164,null],[12,"block","","",164,null],[12,"signature","","",164,null],[12,"signers","","",164,null],[3,"Notarization","","",null,null],[12,"version","","",165,null],[12,"height","","",165,null],[12,"block","","",165,null],[12,"signature","","",165,null],[12,"signers","","",165,null],[3,"SubnetStreamSlice","","",null,null],[12,"subnet_id","","",166,null],[12,"stream_slice","","",166,null],[3,"XNetPayload","","",null,null],[12,"stream_slices","","",167,null],[3,"IngressIdOffset","","",null,null],[12,"expiry","","",168,null],[12,"message_id","","",168,null],[12,"offset","","",168,null],[3,"IngressPayload","","",null,null],[12,"id_and_pos","","",169,null],[12,"buffer","","",169,null],[4,"NiDkgTag","","A non-interactive distributed key generation (NI-DKG) tag.",null,null],[13,"Unspecified","","",170,null],[13,"LowThreshold","","",170,null],[13,"HighThreshold","","",170,null],[0,"dkg_payload","","Nested message and enum types in `DkgPayload`.",null,null],[4,"Val","ic_protobuf::types::v1::dkg_payload","",null,null],[13,"Summary","","",171,null],[13,"Dealings","","",171,null],[11,"encode","","",171,[[]]],[11,"merge","","",171,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",171,[[]]],[0,"ni_dkg_transcript_result","ic_protobuf::types::v1","Nested message and enum types in `NiDkgTranscriptResult`.",null,null],[4,"Val","ic_protobuf::types::v1::ni_dkg_transcript_result","",null,null],[13,"Transcript","","",172,null],[13,"ErrorString","","",172,null],[11,"encode","","",172,[[]]],[11,"merge","","",172,[[["decodecontext",3],["option",4],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",172,[[]]],[11,"dkg_tag","ic_protobuf::types::v1","Returns the enum value of `dkg_tag`, or the default if the…",147,[[],["nidkgtag",4]]],[11,"set_dkg_tag","","Sets `dkg_tag` to the provided enum value.",147,[[["nidkgtag",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `NiDkgTag`.",170,[[]]],[11,"from_i32","","Converts an `i32` to a `NiDkgTag`, or `None` if `value` is…",170,[[],[["option",4],["nidkgtag",4]]]],[11,"tag","","Returns the enum value of `tag`, or the default if the…",153,[[],["nidkgtag",4]]],[11,"set_tag","","Sets `tag` to the provided enum value.",153,[[["nidkgtag",4]]]],[11,"read_from_file","","Read and deserialize a protobuf CatchUpPackage from the…",158,[[["path",3],["asref",8],["debug",8]],[["result",4],["string",3]]]],[11,"read_from_reader","","Deserialize a protobuf CatchUpPackage from the provided…",158,[[["read",8]],[["result",4],["string",3]]]],[11,"write_to_file","","Write the protobuf to the provided file.",158,[[["path",3],["asref",8],["debug",8]],[["result",4],["error",3]]]],[11,"as_protobuf_vec","","",159,[[],["vec",3]]],[14,"import_mod","ic_protobuf","Declare a sub-module of the `log` module",null,null],[14,"serialize_fallback_for","","Emit the given `LogEntry` field in…",null,null],[11,"proxy_encode","ic_protobuf::crypto::v1","",0,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",0,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::log::replica_config::v1","",1,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",1,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::log::consensus_log_entry::v1","",2,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",2,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::log::crypto_log_entry::v1","",3,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",3,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::log::p2p_log_entry::v1","",4,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",4,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::log::messaging_log_entry::v1","",5,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",5,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"erased_serialize","","",5,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::log::ingress_message_log_entry::v1","",6,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",6,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::log::block_log_entry::v1","",7,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",7,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"erased_serialize","","",7,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::log::malicious_behaviour_log_entry::v1","",8,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",8,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"erased_serialize","","",8,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"proxy_encode","ic_protobuf::log::log_entry::v1","",10,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",10,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"erased_serialize","","",10,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::messaging::xnet::v1","",11,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",11,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"erased_serialize","","",11,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",12,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",12,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"erased_serialize","","",12,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",13,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",13,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"erased_serialize","","",13,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",14,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",14,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"erased_serialize","","",14,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",15,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",15,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"erased_serialize","","",15,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",16,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",16,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"erased_serialize","","",16,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",17,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",17,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"erased_serialize","","",17,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::messaging::xnet::v1::labeled_tree","",18,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",18,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"erased_serialize","","",18,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",19,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",19,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"erased_serialize","","",19,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"erased_serialize","","",20,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::messaging::xnet::v1::mixed_hash_tree","",21,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",21,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"erased_serialize","","",21,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",22,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",22,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"erased_serialize","","",22,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"erased_serialize","","",23,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::messaging::xnet::v1::witness","",24,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",24,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"erased_serialize","","",24,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",25,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",25,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"erased_serialize","","",25,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",26,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",26,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"erased_serialize","","",26,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",173,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",173,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",173,[[]]],[11,"into","","",173,[[]]],[11,"to_owned","","",173,[[]]],[11,"clone_into","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"try_into","","",173,[[],["result",4]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"erased_serialize","","",173,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"erased_serialize","","",27,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::p2p::v1","",28,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",28,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"erased_serialize","","",28,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",29,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",29,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"erased_serialize","","",29,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",30,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",30,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"erased_serialize","","",30,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",31,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",31,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"erased_serialize","","",31,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",32,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",32,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"erased_serialize","","",32,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",33,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",33,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"erased_serialize","","",33,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",34,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",34,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"erased_serialize","","",34,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",35,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",35,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"erased_serialize","","",35,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",36,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",36,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"erased_serialize","","",36,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",37,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",37,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"erased_serialize","","",37,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",38,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",38,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"erased_serialize","","",38,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"erased_serialize","","",39,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","ic_protobuf::p2p::v1::gossip_message","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"erased_serialize","","",40,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","ic_protobuf::p2p::v1::gossip_chunk","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"erased_serialize","","",41,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","ic_protobuf::p2p::v1::artifact_chunk","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"erased_serialize","","",42,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","ic_protobuf::proxy","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_string","","",43,[[],["string",3]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"proxy_encode","ic_protobuf::registry::conversion_rate::v1","",49,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",49,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"erased_serialize","","",49,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::registry::crypto::v1","",50,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",50,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"erased_serialize","","",50,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",51,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",51,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"erased_serialize","","",51,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"erased_serialize","","",52,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::registry::firewall::v1","",53,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",53,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"erased_serialize","","",53,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::registry::nns::v1","",54,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",54,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"erased_serialize","","",54,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",55,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",55,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"erased_serialize","","",55,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::registry::node::v1","",56,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",56,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"erased_serialize","","",56,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",57,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",57,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"erased_serialize","","",57,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",58,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",58,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"erased_serialize","","",58,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","ic_protobuf::registry::node::v1::connection_endpoint","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"erased_serialize","","",59,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::registry::node_operator::v1","",60,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",60,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"erased_serialize","","",60,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::registry::provisional_whitelist::v1","",61,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",61,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"erased_serialize","","",61,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"erased_serialize","","",62,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::registry::replica_version::v1","",63,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",63,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"erased_serialize","","",63,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",64,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",64,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"erased_serialize","","",64,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::registry::routing_table::v1","",65,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",65,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"erased_serialize","","",65,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",66,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",66,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"erased_serialize","","",66,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",67,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",67,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"erased_serialize","","",67,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::registry::routing_table::v1::routing_table","",68,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",68,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"erased_serialize","","",68,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::registry::subnet::v1","",69,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",69,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"erased_serialize","","",69,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",70,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",70,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"erased_serialize","","",70,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",71,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",71,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"erased_serialize","","",71,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",72,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",72,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"erased_serialize","","",72,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",73,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",73,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"erased_serialize","","",73,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",74,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",74,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"erased_serialize","","",74,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",75,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",75,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"erased_serialize","","",75,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",76,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",76,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"erased_serialize","","",76,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"erased_serialize","","",77,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","ic_protobuf::state::canister_state_bits::v1","",78,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",78,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"proxy_encode","","",79,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",79,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"proxy_encode","","",80,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",80,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"proxy_encode","","",81,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",81,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"proxy_encode","","",82,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",82,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"proxy_encode","","",83,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",83,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"proxy_encode","","",84,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",84,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"proxy_encode","","",85,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",85,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"proxy_encode","","",86,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",86,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"proxy_encode","","",87,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",87,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"proxy_encode","","",88,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",88,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"proxy_encode","","",89,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",89,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"proxy_encode","","",90,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",90,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"proxy_encode","","",174,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",174,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",174,[[]]],[11,"into","","",174,[[]]],[11,"to_owned","","",174,[[]]],[11,"clone_into","","",174,[[]]],[11,"try_from","","",174,[[],["result",4]]],[11,"try_into","","",174,[[],["result",4]]],[11,"borrow","","",174,[[]]],[11,"borrow_mut","","",174,[[]]],[11,"type_id","","",174,[[],["typeid",3]]],[11,"proxy_encode","","",91,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",91,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"proxy_encode","ic_protobuf::state::canister_state_bits::v1::call_context","",92,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",92,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"proxy_encode","","",93,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",93,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"proxy_encode","","",175,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",175,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",175,[[]]],[11,"into","","",175,[[]]],[11,"to_owned","","",175,[[]]],[11,"clone_into","","",175,[[]]],[11,"try_from","","",175,[[],["result",4]]],[11,"try_into","","",175,[[],["result",4]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","ic_protobuf::state::canister_state_bits::v1::global","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","ic_protobuf::state::canister_state_bits::v1::wasm_method","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"proxy_encode","ic_protobuf::state::canister_state_bits::v1::stop_canister_context","",98,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",98,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"proxy_encode","","",99,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",99,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","ic_protobuf::state::canister_state_bits::v1::canister_state_bits","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"proxy_encode","ic_protobuf::state::ingress::v1","",176,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",176,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",176,[[]]],[11,"into","","",176,[[]]],[11,"to_owned","","",176,[[]]],[11,"clone_into","","",176,[[]]],[11,"try_from","","",176,[[],["result",4]]],[11,"try_into","","",176,[[],["result",4]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"proxy_encode","","",102,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",102,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"proxy_encode","","",103,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",103,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"proxy_encode","","",104,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",104,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"proxy_encode","","",105,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",105,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"proxy_encode","","",106,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",106,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"proxy_encode","","",107,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",107,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"proxy_encode","","",108,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",108,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"proxy_encode","","",109,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",109,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"proxy_encode","","",110,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",110,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","ic_protobuf::state::ingress::v1::ingress_status_completed","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","ic_protobuf::state::ingress::v1::ingress_status","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"proxy_encode","ic_protobuf::state::queues::v1","",113,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",113,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"proxy_encode","","",114,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",114,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"proxy_encode","","",115,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",115,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"proxy_encode","","",116,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",116,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"proxy_encode","","",117,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",117,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"proxy_encode","","",118,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",118,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"proxy_encode","","",119,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",119,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"proxy_encode","","",120,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",120,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"proxy_encode","","",121,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",121,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"proxy_encode","","",122,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",122,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"proxy_encode","","",123,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",123,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","ic_protobuf::state::queues::v1::response","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","ic_protobuf::state::queues::v1::request_or_response","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"proxy_encode","ic_protobuf::state::sync::v1","",126,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",126,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"proxy_encode","","",127,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",127,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"proxy_encode","","",128,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",128,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"proxy_encode","ic_protobuf::state::system_metadata::v1","",129,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",129,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"proxy_encode","","",130,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",130,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"proxy_encode","","",131,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",131,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"proxy_encode","","",132,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",132,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"proxy_encode","","",133,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",133,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"proxy_encode","","",134,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",134,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"proxy_encode","","",135,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",135,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"proxy_encode","","",136,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",136,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"proxy_encode","","",137,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",137,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"proxy_encode","","",138,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",138,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"proxy_encode","","",139,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",139,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"proxy_encode","ic_protobuf::state::v1","",140,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",140,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"to_owned","","",140,[[]]],[11,"clone_into","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"proxy_encode","","",141,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",141,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"proxy_encode","ic_protobuf::types::v1","",142,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",142,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"erased_serialize","","",142,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",143,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",143,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"erased_serialize","","",143,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",144,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",144,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"to_owned","","",144,[[]]],[11,"clone_into","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"erased_serialize","","",144,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",145,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",145,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"to_owned","","",145,[[]]],[11,"clone_into","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"erased_serialize","","",145,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",146,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",146,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"to_owned","","",146,[[]]],[11,"clone_into","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"erased_serialize","","",146,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",147,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",147,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"to_owned","","",147,[[]]],[11,"clone_into","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"erased_serialize","","",147,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",148,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",148,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"to_owned","","",148,[[]]],[11,"clone_into","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"erased_serialize","","",148,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",149,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",149,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"to_owned","","",149,[[]]],[11,"clone_into","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"erased_serialize","","",149,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",150,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",150,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"to_owned","","",150,[[]]],[11,"clone_into","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"erased_serialize","","",150,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",151,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",151,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"to_owned","","",151,[[]]],[11,"clone_into","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"erased_serialize","","",151,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",152,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",152,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"to_owned","","",152,[[]]],[11,"clone_into","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"erased_serialize","","",152,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",153,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",153,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"to_owned","","",153,[[]]],[11,"clone_into","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"erased_serialize","","",153,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",154,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",154,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"to_owned","","",154,[[]]],[11,"clone_into","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"erased_serialize","","",154,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",155,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",155,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"to_owned","","",155,[[]]],[11,"clone_into","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"erased_serialize","","",155,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",156,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",156,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"to_owned","","",156,[[]]],[11,"clone_into","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"erased_serialize","","",156,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",157,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",157,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",157,[[]]],[11,"into","","",157,[[]]],[11,"to_owned","","",157,[[]]],[11,"clone_into","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"erased_serialize","","",157,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",158,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",158,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"to_owned","","",158,[[]]],[11,"clone_into","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"erased_serialize","","",158,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",159,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",159,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"to_owned","","",159,[[]]],[11,"clone_into","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"erased_serialize","","",159,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",160,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",160,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",160,[[]]],[11,"into","","",160,[[]]],[11,"to_owned","","",160,[[]]],[11,"clone_into","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"erased_serialize","","",160,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",161,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",161,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",161,[[]]],[11,"into","","",161,[[]]],[11,"to_owned","","",161,[[]]],[11,"clone_into","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"erased_serialize","","",161,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",162,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",162,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",162,[[]]],[11,"into","","",162,[[]]],[11,"to_owned","","",162,[[]]],[11,"clone_into","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"erased_serialize","","",162,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",163,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",163,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",163,[[]]],[11,"into","","",163,[[]]],[11,"to_owned","","",163,[[]]],[11,"clone_into","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"erased_serialize","","",163,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",164,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",164,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",164,[[]]],[11,"into","","",164,[[]]],[11,"to_owned","","",164,[[]]],[11,"clone_into","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"erased_serialize","","",164,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",165,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",165,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",165,[[]]],[11,"into","","",165,[[]]],[11,"to_owned","","",165,[[]]],[11,"clone_into","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"try_into","","",165,[[],["result",4]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"erased_serialize","","",165,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",166,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",166,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",166,[[]]],[11,"into","","",166,[[]]],[11,"to_owned","","",166,[[]]],[11,"clone_into","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"erased_serialize","","",166,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",167,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",167,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",167,[[]]],[11,"into","","",167,[[]]],[11,"to_owned","","",167,[[]]],[11,"clone_into","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"erased_serialize","","",167,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",168,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",168,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",168,[[]]],[11,"into","","",168,[[]]],[11,"to_owned","","",168,[[]]],[11,"clone_into","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"try_into","","",168,[[],["result",4]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"erased_serialize","","",168,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"proxy_encode","","",169,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",169,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",169,[[]]],[11,"into","","",169,[[]]],[11,"to_owned","","",169,[[]]],[11,"clone_into","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"try_into","","",169,[[],["result",4]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"erased_serialize","","",169,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","","",170,[[]]],[11,"into","","",170,[[]]],[11,"to_owned","","",170,[[]]],[11,"clone_into","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"try_into","","",170,[[],["result",4]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"erased_serialize","","",170,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","ic_protobuf::types::v1::dkg_payload","",171,[[]]],[11,"into","","",171,[[]]],[11,"to_owned","","",171,[[]]],[11,"clone_into","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"try_into","","",171,[[],["result",4]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"erased_serialize","","",171,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","ic_protobuf::types::v1::ni_dkg_transcript_result","",172,[[]]],[11,"into","","",172,[[]]],[11,"to_owned","","",172,[[]]],[11,"clone_into","","",172,[[]]],[11,"try_from","","",172,[[],["result",4]]],[11,"try_into","","",172,[[],["result",4]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"erased_serialize","","",172,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"from","ic_protobuf::proxy","",43,[[["infallible",4]],["proxydecodeerror",4]]],[11,"from","","",43,[[["error",6]],["proxydecodeerror",4]]],[11,"clone","ic_protobuf::crypto::v1","",0,[[],["nodepublickeys",3]]],[11,"clone","ic_protobuf::log::replica_config::v1","",1,[[],["replicaconfig",3]]],[11,"clone","ic_protobuf::log::consensus_log_entry::v1","",2,[[],["consensuslogentry",3]]],[11,"clone","ic_protobuf::log::crypto_log_entry::v1","",3,[[],["cryptologentry",3]]],[11,"clone","ic_protobuf::log::p2p_log_entry::v1","",4,[[],["p2plogentry",3]]],[11,"clone","ic_protobuf::log::messaging_log_entry::v1","",5,[[],["messaginglogentry",3]]],[11,"clone","ic_protobuf::log::ingress_message_log_entry::v1","",6,[[],["ingressmessagelogentry",3]]],[11,"clone","ic_protobuf::log::block_log_entry::v1","",7,[[],["blocklogentry",3]]],[11,"clone","ic_protobuf::log::malicious_behaviour_log_entry::v1","",8,[[],["maliciousbehaviourlogentry",3]]],[11,"clone","","",9,[[],["maliciousbehaviour",4]]],[11,"clone","ic_protobuf::log::log_entry::v1","",10,[[],["logentry",3]]],[11,"clone","ic_protobuf::messaging::xnet::v1","",11,[[],["thresholdsignature",3]]],[11,"clone","","",12,[[],["certificationcontent",3]]],[11,"clone","","",13,[[],["certification",3]]],[11,"clone","","",14,[[],["certifiedstreamslice",3]]],[11,"clone","","",15,[[],["labeledtree",3]]],[11,"clone","ic_protobuf::messaging::xnet::v1::labeled_tree","",18,[[],["subtree",3]]],[11,"clone","","",19,[[],["child",3]]],[11,"clone","","",20,[[],["nodeenum",4]]],[11,"clone","ic_protobuf::messaging::xnet::v1","",16,[[],["mixedhashtree",3]]],[11,"clone","ic_protobuf::messaging::xnet::v1::mixed_hash_tree","",21,[[],["fork",3]]],[11,"clone","","",22,[[],["labeled",3]]],[11,"clone","","",23,[[],["treeenum",4]]],[11,"clone","ic_protobuf::messaging::xnet::v1","",17,[[],["witness",3]]],[11,"clone","ic_protobuf::messaging::xnet::v1::witness","",24,[[],["fork",3]]],[11,"clone","","",25,[[],["node",3]]],[11,"clone","","",26,[[],["pruned",3]]],[11,"clone","","",173,[[],["known",3]]],[11,"clone","","",27,[[],["witnessenum",4]]],[11,"clone","ic_protobuf::p2p::v1","",28,[[],["gossipmessage",3]]],[11,"clone","ic_protobuf::p2p::v1::gossip_message","",40,[[],["body",4]]],[11,"clone","ic_protobuf::p2p::v1","",29,[[],["gossipadvert",3]]],[11,"clone","","",30,[[],["gossipchunkrequest",3]]],[11,"clone","","",31,[[],["artifactfilter",3]]],[11,"clone","","",32,[[],["consensusmessagefilter",3]]],[11,"clone","","",33,[[],["ingressmessagefilter",3]]],[11,"clone","","",34,[[],["certificationmessagefilter",3]]],[11,"clone","","",35,[[],["statesyncfilter",3]]],[11,"clone","","",36,[[],["gossipretransmissionrequest",3]]],[11,"clone","","",37,[[],["gossipchunk",3]]],[11,"clone","ic_protobuf::p2p::v1::gossip_chunk","",41,[[],["response",4]]],[11,"clone","ic_protobuf::p2p::v1","",38,[[],["artifactchunk",3]]],[11,"clone","ic_protobuf::p2p::v1::artifact_chunk","",42,[[],["data",4]]],[11,"clone","ic_protobuf::p2p::v1","",39,[[],["p2perror",4]]],[11,"clone","ic_protobuf::registry::conversion_rate::v1","",49,[[],["icpxdrconversionraterecord",3]]],[11,"clone","ic_protobuf::registry::crypto::v1","",50,[[],["publickey",3]]],[11,"clone","","",51,[[],["x509publickeycert",3]]],[11,"clone","","",52,[[],["algorithmid",4]]],[11,"clone","ic_protobuf::registry::firewall::v1","",53,[[],["firewallconfig",3]]],[11,"clone","ic_protobuf::registry::nns::v1","",54,[[],["nnscanisterrecord",3]]],[11,"clone","","",55,[[],["nnscanisterrecords",3]]],[11,"clone","ic_protobuf::registry::node::v1","",56,[[],["connectionendpoint",3]]],[11,"clone","ic_protobuf::registry::node::v1::connection_endpoint","",59,[[],["protocol",4]]],[11,"clone","ic_protobuf::registry::node::v1","",57,[[],["flowendpoint",3]]],[11,"clone","","",58,[[],["noderecord",3]]],[11,"clone","ic_protobuf::registry::node_operator::v1","",60,[[],["nodeoperatorrecord",3]]],[11,"clone","ic_protobuf::registry::provisional_whitelist::v1","",61,[[],["provisionalwhitelist",3]]],[11,"clone","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",62,[[],["listtype",4]]],[11,"clone","ic_protobuf::registry::replica_version::v1","",63,[[],["replicaversionrecord",3]]],[11,"clone","","",64,[[],["blessedreplicaversions",3]]],[11,"clone","ic_protobuf::registry::routing_table::v1","",65,[[],["canisteridrange",3]]],[11,"clone","","",66,[[],["canisteridranges",3]]],[11,"clone","","",67,[[],["routingtable",3]]],[11,"clone","ic_protobuf::registry::routing_table::v1::routing_table","",68,[[],["entry",3]]],[11,"clone","ic_protobuf::registry::subnet::v1","",69,[[],["subnetrecord",3]]],[11,"clone","","",70,[[],["catchuppackagecontents",3]]],[11,"clone","","",71,[[],["registrystoreuri",3]]],[11,"clone","","",72,[[],["subnetlistrecord",3]]],[11,"clone","","",73,[[],["initialdkgtranscriptrecord",3]]],[11,"clone","","",74,[[],["dkgid",3]]],[11,"clone","","",75,[[],["initialnidkgtranscriptrecord",3]]],[11,"clone","","",76,[[],["gossipconfig",3]]],[11,"clone","","",77,[[],["subnettype",4]]],[11,"clone","ic_protobuf::state::canister_state_bits::v1","",78,[[],["callcontext",3]]],[11,"clone","ic_protobuf::state::canister_state_bits::v1::call_context","",92,[[],["ingress",3]]],[11,"clone","","",93,[[],["canisterupdateorquery",3]]],[11,"clone","","",175,[[],["heartbeat",3]]],[11,"clone","","",94,[[],["callorigin",4]]],[11,"clone","ic_protobuf::state::canister_state_bits::v1","",79,[[],["callcontextentry",3]]],[11,"clone","","",80,[[],["wasmclosure",3]]],[11,"clone","","",81,[[],["callback",3]]],[11,"clone","","",82,[[],["callbackentry",3]]],[11,"clone","","",83,[[],["callcontextmanager",3]]],[11,"clone","","",84,[[],["cyclesaccount",3]]],[11,"clone","","",85,[[],["global",3]]],[11,"clone","ic_protobuf::state::canister_state_bits::v1::global","",95,[[],["global",4]]],[11,"clone","ic_protobuf::state::canister_state_bits::v1","",86,[[],["wasmmethod",3]]],[11,"clone","ic_protobuf::state::canister_state_bits::v1::wasm_method","",96,[[],["systemmethod",4]]],[11,"clone","","",97,[[],["wasmmethod",4]]],[11,"clone","ic_protobuf::state::canister_state_bits::v1","",87,[[],["executionstatebits",3]]],[11,"clone","","",88,[[],["stopcanistercontext",3]]],[11,"clone","ic_protobuf::state::canister_state_bits::v1::stop_canister_context","",98,[[],["ingress",3]]],[11,"clone","","",99,[[],["canister",3]]],[11,"clone","","",100,[[],["context",4]]],[11,"clone","ic_protobuf::state::canister_state_bits::v1","",89,[[],["canisterstatusrunning",3]]],[11,"clone","","",90,[[],["canisterstatusstopping",3]]],[11,"clone","","",174,[[],["canisterstatusstopped",3]]],[11,"clone","","",91,[[],["canisterstatebits",3]]],[11,"clone","ic_protobuf::state::canister_state_bits::v1::canister_state_bits","",101,[[],["canisterstatus",4]]],[11,"clone","ic_protobuf::state::ingress::v1","",176,[[],["ingressstatusunknown",3]]],[11,"clone","","",102,[[],["ingressstatusprocessing",3]]],[11,"clone","","",103,[[],["ingressstatusreceived",3]]],[11,"clone","","",104,[[],["ingressstatuscompleted",3]]],[11,"clone","ic_protobuf::state::ingress::v1::ingress_status_completed","",111,[[],["wasmresult",4]]],[11,"clone","ic_protobuf::state::ingress::v1","",105,[[],["ingressstatusfailed",3]]],[11,"clone","","",106,[[],["pruningentry",3]]],[11,"clone","","",107,[[],["ingressstatus",3]]],[11,"clone","ic_protobuf::state::ingress::v1::ingress_status","",112,[[],["status",4]]],[11,"clone","ic_protobuf::state::ingress::v1","",108,[[],["ingressstatusentry",3]]],[11,"clone","","",109,[[],["ingresshistorystate",3]]],[11,"clone","","",110,[[],["ingress",3]]],[11,"clone","ic_protobuf::state::queues::v1","",113,[[],["cycles",3]]],[11,"clone","","",114,[[],["funds",3]]],[11,"clone","","",115,[[],["stream",3]]],[11,"clone","","",116,[[],["streamentry",3]]],[11,"clone","","",117,[[],["request",3]]],[11,"clone","","",118,[[],["rejectcontext",3]]],[11,"clone","","",119,[[],["response",3]]],[11,"clone","ic_protobuf::state::queues::v1::response","",124,[[],["responsepayload",4]]],[11,"clone","ic_protobuf::state::queues::v1","",120,[[],["requestorresponse",3]]],[11,"clone","ic_protobuf::state::queues::v1::request_or_response","",125,[[],["r",4]]],[11,"clone","ic_protobuf::state::queues::v1","",121,[[],["inputoutputqueue",3]]],[11,"clone","","",122,[[],["queueentry",3]]],[11,"clone","","",123,[[],["canisterqueues",3]]],[11,"clone","ic_protobuf::state::sync::v1","",126,[[],["fileinfo",3]]],[11,"clone","","",127,[[],["chunkinfo",3]]],[11,"clone","","",128,[[],["manifest",3]]],[11,"clone","ic_protobuf::state::system_metadata::v1","",129,[[],["nodetopology",3]]],[11,"clone","","",130,[[],["subnettopologyentry",3]]],[11,"clone","","",131,[[],["subnettopology",3]]],[11,"clone","","",132,[[],["subnetsentry",3]]],[11,"clone","","",133,[[],["networktopology",3]]],[11,"clone","","",134,[[],["setupinitialdkgcontext",3]]],[11,"clone","","",135,[[],["subnetcallcontext",3]]],[11,"clone","","",136,[[],["subnetcallcontexttree",3]]],[11,"clone","","",137,[[],["subnetcallcontextmanager",3]]],[11,"clone","","",138,[[],["systemmetadata",3]]],[11,"clone","","",139,[[],["stablememory",3]]],[11,"clone","ic_protobuf::state::v1","",140,[[],["statemetadata",3]]],[11,"clone","","",141,[[],["statesmetadata",3]]],[11,"clone","ic_protobuf::types::v1","",142,[[],["principalid",3]]],[11,"clone","","",143,[[],["canisterid",3]]],[11,"clone","","",144,[[],["subnetid",3]]],[11,"clone","","",145,[[],["userid",3]]],[11,"clone","","",146,[[],["nodeid",3]]],[11,"clone","","",147,[[],["nidkgid",3]]],[11,"clone","","",148,[[],["nominalcycles",3]]],[11,"clone","","",170,[[],["nidkgtag",4]]],[11,"clone","","",149,[[],["dkgmessage",3]]],[11,"clone","","",150,[[],["dkgpayload",3]]],[11,"clone","ic_protobuf::types::v1::dkg_payload","",171,[[],["val",4]]],[11,"clone","ic_protobuf::types::v1","",151,[[],["dealings",3]]],[11,"clone","","",152,[[],["summary",3]]],[11,"clone","","",153,[[],["taggednidkgtranscript",3]]],[11,"clone","","",154,[[],["idednidkgtranscript",3]]],[11,"clone","","",155,[[],["nidkgtranscriptresult",3]]],[11,"clone","ic_protobuf::types::v1::ni_dkg_transcript_result","",172,[[],["val",4]]],[11,"clone","ic_protobuf::types::v1","",156,[[],["nidkgtranscript",3]]],[11,"clone","","",157,[[],["nidkgconfig",3]]],[11,"clone","","",158,[[],["catchuppackage",3]]],[11,"clone","","",159,[[],["catchupcontent",3]]],[11,"clone","","",160,[[],["block",3]]],[11,"clone","","",161,[[],["blockproposal",3]]],[11,"clone","","",162,[[],["randombeacon",3]]],[11,"clone","","",163,[[],["randomtape",3]]],[11,"clone","","",164,[[],["finalization",3]]],[11,"clone","","",165,[[],["notarization",3]]],[11,"clone","","",166,[[],["subnetstreamslice",3]]],[11,"clone","","",167,[[],["xnetpayload",3]]],[11,"clone","","",168,[[],["ingressidoffset",3]]],[11,"clone","","",169,[[],["ingresspayload",3]]],[11,"default","ic_protobuf::crypto::v1","",0,[[]]],[11,"default","ic_protobuf::log::replica_config::v1","",1,[[]]],[11,"default","ic_protobuf::log::consensus_log_entry::v1","",2,[[]]],[11,"default","ic_protobuf::log::crypto_log_entry::v1","",3,[[]]],[11,"default","ic_protobuf::log::p2p_log_entry::v1","",4,[[]]],[11,"default","ic_protobuf::log::messaging_log_entry::v1","",5,[[]]],[11,"default","ic_protobuf::log::ingress_message_log_entry::v1","",6,[[]]],[11,"default","ic_protobuf::log::block_log_entry::v1","",7,[[]]],[11,"default","ic_protobuf::log::malicious_behaviour_log_entry::v1","",8,[[]]],[11,"default","","",9,[[],["maliciousbehaviour",4]]],[11,"default","ic_protobuf::log::log_entry::v1","",10,[[]]],[11,"default","ic_protobuf::messaging::xnet::v1","",11,[[]]],[11,"default","","",12,[[]]],[11,"default","","",13,[[]]],[11,"default","","",14,[[]]],[11,"default","","",15,[[]]],[11,"default","ic_protobuf::messaging::xnet::v1::labeled_tree","",18,[[]]],[11,"default","","",19,[[]]],[11,"default","ic_protobuf::messaging::xnet::v1","",16,[[]]],[11,"default","ic_protobuf::messaging::xnet::v1::mixed_hash_tree","",21,[[]]],[11,"default","","",22,[[]]],[11,"default","ic_protobuf::messaging::xnet::v1","",17,[[]]],[11,"default","ic_protobuf::messaging::xnet::v1::witness","",24,[[]]],[11,"default","","",25,[[]]],[11,"default","","",26,[[]]],[11,"default","","",173,[[]]],[11,"default","ic_protobuf::p2p::v1","",28,[[]]],[11,"default","","",29,[[]]],[11,"default","","",30,[[]]],[11,"default","","",31,[[]]],[11,"default","","",32,[[]]],[11,"default","","",33,[[]]],[11,"default","","",34,[[]]],[11,"default","","",35,[[]]],[11,"default","","",36,[[]]],[11,"default","","",37,[[]]],[11,"default","","",38,[[]]],[11,"default","","",39,[[],["p2perror",4]]],[11,"default","ic_protobuf::registry::conversion_rate::v1","",49,[[]]],[11,"default","ic_protobuf::registry::crypto::v1","",50,[[]]],[11,"default","","",51,[[]]],[11,"default","","",52,[[],["algorithmid",4]]],[11,"default","ic_protobuf::registry::firewall::v1","",53,[[]]],[11,"default","ic_protobuf::registry::nns::v1","",54,[[]]],[11,"default","","",55,[[]]],[11,"default","ic_protobuf::registry::node::v1","",56,[[]]],[11,"default","ic_protobuf::registry::node::v1::connection_endpoint","",59,[[],["protocol",4]]],[11,"default","ic_protobuf::registry::node::v1","",57,[[]]],[11,"default","","",58,[[]]],[11,"default","ic_protobuf::registry::node_operator::v1","",60,[[]]],[11,"default","ic_protobuf::registry::provisional_whitelist::v1","",61,[[]]],[11,"default","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",62,[[],["listtype",4]]],[11,"default","ic_protobuf::registry::replica_version::v1","",63,[[]]],[11,"default","","",64,[[]]],[11,"default","ic_protobuf::registry::routing_table::v1","",65,[[]]],[11,"default","","",66,[[]]],[11,"default","","",67,[[]]],[11,"default","ic_protobuf::registry::routing_table::v1::routing_table","",68,[[]]],[11,"default","ic_protobuf::registry::subnet::v1","",69,[[]]],[11,"default","","",70,[[]]],[11,"default","","",71,[[]]],[11,"default","","",72,[[]]],[11,"default","","",73,[[]]],[11,"default","","",74,[[]]],[11,"default","","",75,[[]]],[11,"default","","",76,[[]]],[11,"default","","",77,[[],["subnettype",4]]],[11,"default","ic_protobuf::state::canister_state_bits::v1","",78,[[]]],[11,"default","ic_protobuf::state::canister_state_bits::v1::call_context","",92,[[]]],[11,"default","","",93,[[]]],[11,"default","","",175,[[]]],[11,"default","ic_protobuf::state::canister_state_bits::v1","",79,[[]]],[11,"default","","",80,[[]]],[11,"default","","",81,[[]]],[11,"default","","",82,[[]]],[11,"default","","",83,[[]]],[11,"default","","",84,[[]]],[11,"default","","",85,[[]]],[11,"default","","",86,[[]]],[11,"default","ic_protobuf::state::canister_state_bits::v1::wasm_method","",96,[[],["systemmethod",4]]],[11,"default","ic_protobuf::state::canister_state_bits::v1","",87,[[]]],[11,"default","","",88,[[]]],[11,"default","ic_protobuf::state::canister_state_bits::v1::stop_canister_context","",98,[[]]],[11,"default","","",99,[[]]],[11,"default","ic_protobuf::state::canister_state_bits::v1","",89,[[]]],[11,"default","","",90,[[]]],[11,"default","","",174,[[]]],[11,"default","","",91,[[]]],[11,"default","ic_protobuf::state::ingress::v1","",176,[[]]],[11,"default","","",102,[[]]],[11,"default","","",103,[[]]],[11,"default","","",104,[[]]],[11,"default","","",105,[[]]],[11,"default","","",106,[[]]],[11,"default","","",107,[[]]],[11,"default","","",108,[[]]],[11,"default","","",109,[[]]],[11,"default","","",110,[[]]],[11,"default","ic_protobuf::state::queues::v1","",113,[[]]],[11,"default","","",114,[[]]],[11,"default","","",115,[[]]],[11,"default","","",116,[[]]],[11,"default","","",117,[[]]],[11,"default","","",118,[[]]],[11,"default","","",119,[[]]],[11,"default","","",120,[[]]],[11,"default","","",121,[[]]],[11,"default","","",122,[[]]],[11,"default","","",123,[[]]],[11,"default","ic_protobuf::state::sync::v1","",126,[[]]],[11,"default","","",127,[[]]],[11,"default","","",128,[[]]],[11,"default","ic_protobuf::state::system_metadata::v1","",129,[[]]],[11,"default","","",130,[[]]],[11,"default","","",131,[[]]],[11,"default","","",132,[[]]],[11,"default","","",133,[[]]],[11,"default","","",134,[[]]],[11,"default","","",135,[[]]],[11,"default","","",136,[[]]],[11,"default","","",137,[[]]],[11,"default","","",138,[[]]],[11,"default","","",139,[[]]],[11,"default","ic_protobuf::state::v1","",140,[[]]],[11,"default","","",141,[[]]],[11,"default","ic_protobuf::types::v1","",142,[[]]],[11,"default","","",143,[[]]],[11,"default","","",144,[[]]],[11,"default","","",145,[[]]],[11,"default","","",146,[[]]],[11,"default","","",147,[[]]],[11,"default","","",148,[[]]],[11,"default","","",170,[[],["nidkgtag",4]]],[11,"default","","",149,[[]]],[11,"default","","",150,[[]]],[11,"default","","",151,[[]]],[11,"default","","",152,[[]]],[11,"default","","",153,[[]]],[11,"default","","",154,[[]]],[11,"default","","",155,[[]]],[11,"default","","",156,[[]]],[11,"default","","",157,[[]]],[11,"default","","",158,[[]]],[11,"default","","",159,[[]]],[11,"default","","",160,[[]]],[11,"default","","",161,[[]]],[11,"default","","",162,[[]]],[11,"default","","",163,[[]]],[11,"default","","",164,[[]]],[11,"default","","",165,[[]]],[11,"default","","",166,[[]]],[11,"default","","",167,[[]]],[11,"default","","",168,[[]]],[11,"default","","",169,[[]]],[11,"cmp","ic_protobuf::log::malicious_behaviour_log_entry::v1","",9,[[["maliciousbehaviour",4]],["ordering",4]]],[11,"cmp","ic_protobuf::p2p::v1","",39,[[["p2perror",4]],["ordering",4]]],[11,"cmp","ic_protobuf::registry::crypto::v1","",52,[[["algorithmid",4]],["ordering",4]]],[11,"cmp","ic_protobuf::registry::node::v1::connection_endpoint","",59,[[["protocol",4]],["ordering",4]]],[11,"cmp","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",62,[[["listtype",4]],["ordering",4]]],[11,"cmp","ic_protobuf::registry::subnet::v1","",77,[[["subnettype",4]],["ordering",4]]],[11,"cmp","ic_protobuf::state::canister_state_bits::v1::wasm_method","",96,[[["systemmethod",4]],["ordering",4]]],[11,"cmp","ic_protobuf::types::v1","",170,[[["nidkgtag",4]],["ordering",4]]],[11,"eq","ic_protobuf::crypto::v1","",0,[[["nodepublickeys",3]]]],[11,"ne","","",0,[[["nodepublickeys",3]]]],[11,"eq","ic_protobuf::log::replica_config::v1","",1,[[["replicaconfig",3]]]],[11,"ne","","",1,[[["replicaconfig",3]]]],[11,"eq","ic_protobuf::log::consensus_log_entry::v1","",2,[[["consensuslogentry",3]]]],[11,"ne","","",2,[[["consensuslogentry",3]]]],[11,"eq","ic_protobuf::log::crypto_log_entry::v1","",3,[[["cryptologentry",3]]]],[11,"ne","","",3,[[["cryptologentry",3]]]],[11,"eq","ic_protobuf::log::p2p_log_entry::v1","",4,[[["p2plogentry",3]]]],[11,"ne","","",4,[[["p2plogentry",3]]]],[11,"eq","ic_protobuf::log::messaging_log_entry::v1","",5,[[["messaginglogentry",3]]]],[11,"ne","","",5,[[["messaginglogentry",3]]]],[11,"eq","ic_protobuf::log::ingress_message_log_entry::v1","",6,[[["ingressmessagelogentry",3]]]],[11,"ne","","",6,[[["ingressmessagelogentry",3]]]],[11,"eq","ic_protobuf::log::block_log_entry::v1","",7,[[["blocklogentry",3]]]],[11,"ne","","",7,[[["blocklogentry",3]]]],[11,"eq","ic_protobuf::log::malicious_behaviour_log_entry::v1","",8,[[["maliciousbehaviourlogentry",3]]]],[11,"ne","","",8,[[["maliciousbehaviourlogentry",3]]]],[11,"eq","","",9,[[["maliciousbehaviour",4]]]],[11,"eq","ic_protobuf::log::log_entry::v1","",10,[[["logentry",3]]]],[11,"ne","","",10,[[["logentry",3]]]],[11,"eq","ic_protobuf::messaging::xnet::v1","",11,[[["thresholdsignature",3]]]],[11,"ne","","",11,[[["thresholdsignature",3]]]],[11,"eq","","",12,[[["certificationcontent",3]]]],[11,"ne","","",12,[[["certificationcontent",3]]]],[11,"eq","","",13,[[["certification",3]]]],[11,"ne","","",13,[[["certification",3]]]],[11,"eq","","",14,[[["certifiedstreamslice",3]]]],[11,"ne","","",14,[[["certifiedstreamslice",3]]]],[11,"eq","","",15,[[["labeledtree",3]]]],[11,"ne","","",15,[[["labeledtree",3]]]],[11,"eq","ic_protobuf::messaging::xnet::v1::labeled_tree","",18,[[["subtree",3]]]],[11,"ne","","",18,[[["subtree",3]]]],[11,"eq","","",19,[[["child",3]]]],[11,"ne","","",19,[[["child",3]]]],[11,"eq","","",20,[[["nodeenum",4]]]],[11,"ne","","",20,[[["nodeenum",4]]]],[11,"eq","ic_protobuf::messaging::xnet::v1","",16,[[["mixedhashtree",3]]]],[11,"ne","","",16,[[["mixedhashtree",3]]]],[11,"eq","ic_protobuf::messaging::xnet::v1::mixed_hash_tree","",21,[[["fork",3]]]],[11,"ne","","",21,[[["fork",3]]]],[11,"eq","","",22,[[["labeled",3]]]],[11,"ne","","",22,[[["labeled",3]]]],[11,"eq","","",23,[[["treeenum",4]]]],[11,"ne","","",23,[[["treeenum",4]]]],[11,"eq","ic_protobuf::messaging::xnet::v1","",17,[[["witness",3]]]],[11,"ne","","",17,[[["witness",3]]]],[11,"eq","ic_protobuf::messaging::xnet::v1::witness","",24,[[["fork",3]]]],[11,"ne","","",24,[[["fork",3]]]],[11,"eq","","",25,[[["node",3]]]],[11,"ne","","",25,[[["node",3]]]],[11,"eq","","",26,[[["pruned",3]]]],[11,"ne","","",26,[[["pruned",3]]]],[11,"eq","","",173,[[["known",3]]]],[11,"eq","","",27,[[["witnessenum",4]]]],[11,"ne","","",27,[[["witnessenum",4]]]],[11,"eq","ic_protobuf::p2p::v1","",28,[[["gossipmessage",3]]]],[11,"ne","","",28,[[["gossipmessage",3]]]],[11,"eq","ic_protobuf::p2p::v1::gossip_message","",40,[[["body",4]]]],[11,"ne","","",40,[[["body",4]]]],[11,"eq","ic_protobuf::p2p::v1","",29,[[["gossipadvert",3]]]],[11,"ne","","",29,[[["gossipadvert",3]]]],[11,"eq","","",30,[[["gossipchunkrequest",3]]]],[11,"ne","","",30,[[["gossipchunkrequest",3]]]],[11,"eq","","",31,[[["artifactfilter",3]]]],[11,"ne","","",31,[[["artifactfilter",3]]]],[11,"eq","","",32,[[["consensusmessagefilter",3]]]],[11,"ne","","",32,[[["consensusmessagefilter",3]]]],[11,"eq","","",33,[[["ingressmessagefilter",3]]]],[11,"ne","","",33,[[["ingressmessagefilter",3]]]],[11,"eq","","",34,[[["certificationmessagefilter",3]]]],[11,"ne","","",34,[[["certificationmessagefilter",3]]]],[11,"eq","","",35,[[["statesyncfilter",3]]]],[11,"ne","","",35,[[["statesyncfilter",3]]]],[11,"eq","","",36,[[["gossipretransmissionrequest",3]]]],[11,"ne","","",36,[[["gossipretransmissionrequest",3]]]],[11,"eq","","",37,[[["gossipchunk",3]]]],[11,"ne","","",37,[[["gossipchunk",3]]]],[11,"eq","ic_protobuf::p2p::v1::gossip_chunk","",41,[[["response",4]]]],[11,"ne","","",41,[[["response",4]]]],[11,"eq","ic_protobuf::p2p::v1","",38,[[["artifactchunk",3]]]],[11,"ne","","",38,[[["artifactchunk",3]]]],[11,"eq","ic_protobuf::p2p::v1::artifact_chunk","",42,[[["data",4]]]],[11,"ne","","",42,[[["data",4]]]],[11,"eq","ic_protobuf::p2p::v1","",39,[[["p2perror",4]]]],[11,"eq","ic_protobuf::registry::conversion_rate::v1","",49,[[["icpxdrconversionraterecord",3]]]],[11,"ne","","",49,[[["icpxdrconversionraterecord",3]]]],[11,"eq","ic_protobuf::registry::crypto::v1","",50,[[["publickey",3]]]],[11,"ne","","",50,[[["publickey",3]]]],[11,"eq","","",51,[[["x509publickeycert",3]]]],[11,"ne","","",51,[[["x509publickeycert",3]]]],[11,"eq","","",52,[[["algorithmid",4]]]],[11,"eq","ic_protobuf::registry::firewall::v1","",53,[[["firewallconfig",3]]]],[11,"ne","","",53,[[["firewallconfig",3]]]],[11,"eq","ic_protobuf::registry::nns::v1","",54,[[["nnscanisterrecord",3]]]],[11,"ne","","",54,[[["nnscanisterrecord",3]]]],[11,"eq","","",55,[[["nnscanisterrecords",3]]]],[11,"ne","","",55,[[["nnscanisterrecords",3]]]],[11,"eq","ic_protobuf::registry::node::v1","",56,[[["connectionendpoint",3]]]],[11,"ne","","",56,[[["connectionendpoint",3]]]],[11,"eq","ic_protobuf::registry::node::v1::connection_endpoint","",59,[[["protocol",4]]]],[11,"eq","ic_protobuf::registry::node::v1","",57,[[["flowendpoint",3]]]],[11,"ne","","",57,[[["flowendpoint",3]]]],[11,"eq","","",58,[[["noderecord",3]]]],[11,"ne","","",58,[[["noderecord",3]]]],[11,"eq","ic_protobuf::registry::node_operator::v1","",60,[[["nodeoperatorrecord",3]]]],[11,"ne","","",60,[[["nodeoperatorrecord",3]]]],[11,"eq","ic_protobuf::registry::provisional_whitelist::v1","",61,[[["provisionalwhitelist",3]]]],[11,"ne","","",61,[[["provisionalwhitelist",3]]]],[11,"eq","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",62,[[["listtype",4]]]],[11,"eq","ic_protobuf::registry::replica_version::v1","",63,[[["replicaversionrecord",3]]]],[11,"ne","","",63,[[["replicaversionrecord",3]]]],[11,"eq","","",64,[[["blessedreplicaversions",3]]]],[11,"ne","","",64,[[["blessedreplicaversions",3]]]],[11,"eq","ic_protobuf::registry::routing_table::v1","",65,[[["canisteridrange",3]]]],[11,"ne","","",65,[[["canisteridrange",3]]]],[11,"eq","","",66,[[["canisteridranges",3]]]],[11,"ne","","",66,[[["canisteridranges",3]]]],[11,"eq","","",67,[[["routingtable",3]]]],[11,"ne","","",67,[[["routingtable",3]]]],[11,"eq","ic_protobuf::registry::routing_table::v1::routing_table","",68,[[["entry",3]]]],[11,"ne","","",68,[[["entry",3]]]],[11,"eq","ic_protobuf::registry::subnet::v1","",69,[[["subnetrecord",3]]]],[11,"ne","","",69,[[["subnetrecord",3]]]],[11,"eq","","",70,[[["catchuppackagecontents",3]]]],[11,"ne","","",70,[[["catchuppackagecontents",3]]]],[11,"eq","","",71,[[["registrystoreuri",3]]]],[11,"ne","","",71,[[["registrystoreuri",3]]]],[11,"eq","","",72,[[["subnetlistrecord",3]]]],[11,"ne","","",72,[[["subnetlistrecord",3]]]],[11,"eq","","",73,[[["initialdkgtranscriptrecord",3]]]],[11,"ne","","",73,[[["initialdkgtranscriptrecord",3]]]],[11,"eq","","",74,[[["dkgid",3]]]],[11,"ne","","",74,[[["dkgid",3]]]],[11,"eq","","",75,[[["initialnidkgtranscriptrecord",3]]]],[11,"ne","","",75,[[["initialnidkgtranscriptrecord",3]]]],[11,"eq","","",76,[[["gossipconfig",3]]]],[11,"ne","","",76,[[["gossipconfig",3]]]],[11,"eq","","",77,[[["subnettype",4]]]],[11,"eq","ic_protobuf::state::canister_state_bits::v1","",78,[[["callcontext",3]]]],[11,"ne","","",78,[[["callcontext",3]]]],[11,"eq","ic_protobuf::state::canister_state_bits::v1::call_context","",92,[[["ingress",3]]]],[11,"ne","","",92,[[["ingress",3]]]],[11,"eq","","",93,[[["canisterupdateorquery",3]]]],[11,"ne","","",93,[[["canisterupdateorquery",3]]]],[11,"eq","","",175,[[["heartbeat",3]]]],[11,"eq","","",94,[[["callorigin",4]]]],[11,"ne","","",94,[[["callorigin",4]]]],[11,"eq","ic_protobuf::state::canister_state_bits::v1","",79,[[["callcontextentry",3]]]],[11,"ne","","",79,[[["callcontextentry",3]]]],[11,"eq","","",80,[[["wasmclosure",3]]]],[11,"ne","","",80,[[["wasmclosure",3]]]],[11,"eq","","",81,[[["callback",3]]]],[11,"ne","","",81,[[["callback",3]]]],[11,"eq","","",82,[[["callbackentry",3]]]],[11,"ne","","",82,[[["callbackentry",3]]]],[11,"eq","","",83,[[["callcontextmanager",3]]]],[11,"ne","","",83,[[["callcontextmanager",3]]]],[11,"eq","","",84,[[["cyclesaccount",3]]]],[11,"ne","","",84,[[["cyclesaccount",3]]]],[11,"eq","","",85,[[["global",3]]]],[11,"ne","","",85,[[["global",3]]]],[11,"eq","ic_protobuf::state::canister_state_bits::v1::global","",95,[[["global",4]]]],[11,"ne","","",95,[[["global",4]]]],[11,"eq","ic_protobuf::state::canister_state_bits::v1","",86,[[["wasmmethod",3]]]],[11,"ne","","",86,[[["wasmmethod",3]]]],[11,"eq","ic_protobuf::state::canister_state_bits::v1::wasm_method","",96,[[["systemmethod",4]]]],[11,"eq","","",97,[[["wasmmethod",4]]]],[11,"ne","","",97,[[["wasmmethod",4]]]],[11,"eq","ic_protobuf::state::canister_state_bits::v1","",87,[[["executionstatebits",3]]]],[11,"ne","","",87,[[["executionstatebits",3]]]],[11,"eq","","",88,[[["stopcanistercontext",3]]]],[11,"ne","","",88,[[["stopcanistercontext",3]]]],[11,"eq","ic_protobuf::state::canister_state_bits::v1::stop_canister_context","",98,[[["ingress",3]]]],[11,"ne","","",98,[[["ingress",3]]]],[11,"eq","","",99,[[["canister",3]]]],[11,"ne","","",99,[[["canister",3]]]],[11,"eq","","",100,[[["context",4]]]],[11,"ne","","",100,[[["context",4]]]],[11,"eq","ic_protobuf::state::canister_state_bits::v1","",89,[[["canisterstatusrunning",3]]]],[11,"ne","","",89,[[["canisterstatusrunning",3]]]],[11,"eq","","",90,[[["canisterstatusstopping",3]]]],[11,"ne","","",90,[[["canisterstatusstopping",3]]]],[11,"eq","","",174,[[["canisterstatusstopped",3]]]],[11,"eq","","",91,[[["canisterstatebits",3]]]],[11,"ne","","",91,[[["canisterstatebits",3]]]],[11,"eq","ic_protobuf::state::canister_state_bits::v1::canister_state_bits","",101,[[["canisterstatus",4]]]],[11,"ne","","",101,[[["canisterstatus",4]]]],[11,"eq","ic_protobuf::state::ingress::v1","",176,[[["ingressstatusunknown",3]]]],[11,"eq","","",102,[[["ingressstatusprocessing",3]]]],[11,"ne","","",102,[[["ingressstatusprocessing",3]]]],[11,"eq","","",103,[[["ingressstatusreceived",3]]]],[11,"ne","","",103,[[["ingressstatusreceived",3]]]],[11,"eq","","",104,[[["ingressstatuscompleted",3]]]],[11,"ne","","",104,[[["ingressstatuscompleted",3]]]],[11,"eq","ic_protobuf::state::ingress::v1::ingress_status_completed","",111,[[["wasmresult",4]]]],[11,"ne","","",111,[[["wasmresult",4]]]],[11,"eq","ic_protobuf::state::ingress::v1","",105,[[["ingressstatusfailed",3]]]],[11,"ne","","",105,[[["ingressstatusfailed",3]]]],[11,"eq","","",106,[[["pruningentry",3]]]],[11,"ne","","",106,[[["pruningentry",3]]]],[11,"eq","","",107,[[["ingressstatus",3]]]],[11,"ne","","",107,[[["ingressstatus",3]]]],[11,"eq","ic_protobuf::state::ingress::v1::ingress_status","",112,[[["status",4]]]],[11,"ne","","",112,[[["status",4]]]],[11,"eq","ic_protobuf::state::ingress::v1","",108,[[["ingressstatusentry",3]]]],[11,"ne","","",108,[[["ingressstatusentry",3]]]],[11,"eq","","",109,[[["ingresshistorystate",3]]]],[11,"ne","","",109,[[["ingresshistorystate",3]]]],[11,"eq","","",110,[[["ingress",3]]]],[11,"ne","","",110,[[["ingress",3]]]],[11,"eq","ic_protobuf::state::queues::v1","",113,[[["cycles",3]]]],[11,"ne","","",113,[[["cycles",3]]]],[11,"eq","","",114,[[["funds",3]]]],[11,"ne","","",114,[[["funds",3]]]],[11,"eq","","",115,[[["stream",3]]]],[11,"ne","","",115,[[["stream",3]]]],[11,"eq","","",116,[[["streamentry",3]]]],[11,"ne","","",116,[[["streamentry",3]]]],[11,"eq","","",117,[[["request",3]]]],[11,"ne","","",117,[[["request",3]]]],[11,"eq","","",118,[[["rejectcontext",3]]]],[11,"ne","","",118,[[["rejectcontext",3]]]],[11,"eq","","",119,[[["response",3]]]],[11,"ne","","",119,[[["response",3]]]],[11,"eq","ic_protobuf::state::queues::v1::response","",124,[[["responsepayload",4]]]],[11,"ne","","",124,[[["responsepayload",4]]]],[11,"eq","ic_protobuf::state::queues::v1","",120,[[["requestorresponse",3]]]],[11,"ne","","",120,[[["requestorresponse",3]]]],[11,"eq","ic_protobuf::state::queues::v1::request_or_response","",125,[[["r",4]]]],[11,"ne","","",125,[[["r",4]]]],[11,"eq","ic_protobuf::state::queues::v1","",121,[[["inputoutputqueue",3]]]],[11,"ne","","",121,[[["inputoutputqueue",3]]]],[11,"eq","","",122,[[["queueentry",3]]]],[11,"ne","","",122,[[["queueentry",3]]]],[11,"eq","","",123,[[["canisterqueues",3]]]],[11,"ne","","",123,[[["canisterqueues",3]]]],[11,"eq","ic_protobuf::state::sync::v1","",126,[[["fileinfo",3]]]],[11,"ne","","",126,[[["fileinfo",3]]]],[11,"eq","","",127,[[["chunkinfo",3]]]],[11,"ne","","",127,[[["chunkinfo",3]]]],[11,"eq","","",128,[[["manifest",3]]]],[11,"ne","","",128,[[["manifest",3]]]],[11,"eq","ic_protobuf::state::system_metadata::v1","",129,[[["nodetopology",3]]]],[11,"ne","","",129,[[["nodetopology",3]]]],[11,"eq","","",130,[[["subnettopologyentry",3]]]],[11,"ne","","",130,[[["subnettopologyentry",3]]]],[11,"eq","","",131,[[["subnettopology",3]]]],[11,"ne","","",131,[[["subnettopology",3]]]],[11,"eq","","",132,[[["subnetsentry",3]]]],[11,"ne","","",132,[[["subnetsentry",3]]]],[11,"eq","","",133,[[["networktopology",3]]]],[11,"ne","","",133,[[["networktopology",3]]]],[11,"eq","","",134,[[["setupinitialdkgcontext",3]]]],[11,"ne","","",134,[[["setupinitialdkgcontext",3]]]],[11,"eq","","",135,[[["subnetcallcontext",3]]]],[11,"ne","","",135,[[["subnetcallcontext",3]]]],[11,"eq","","",136,[[["subnetcallcontexttree",3]]]],[11,"ne","","",136,[[["subnetcallcontexttree",3]]]],[11,"eq","","",137,[[["subnetcallcontextmanager",3]]]],[11,"ne","","",137,[[["subnetcallcontextmanager",3]]]],[11,"eq","","",138,[[["systemmetadata",3]]]],[11,"ne","","",138,[[["systemmetadata",3]]]],[11,"eq","","",139,[[["stablememory",3]]]],[11,"ne","","",139,[[["stablememory",3]]]],[11,"eq","ic_protobuf::state::v1","",140,[[["statemetadata",3]]]],[11,"ne","","",140,[[["statemetadata",3]]]],[11,"eq","","",141,[[["statesmetadata",3]]]],[11,"ne","","",141,[[["statesmetadata",3]]]],[11,"eq","ic_protobuf::types::v1","",142,[[["principalid",3]]]],[11,"ne","","",142,[[["principalid",3]]]],[11,"eq","","",143,[[["canisterid",3]]]],[11,"ne","","",143,[[["canisterid",3]]]],[11,"eq","","",144,[[["subnetid",3]]]],[11,"ne","","",144,[[["subnetid",3]]]],[11,"eq","","",145,[[["userid",3]]]],[11,"ne","","",145,[[["userid",3]]]],[11,"eq","","",146,[[["nodeid",3]]]],[11,"ne","","",146,[[["nodeid",3]]]],[11,"eq","","",147,[[["nidkgid",3]]]],[11,"ne","","",147,[[["nidkgid",3]]]],[11,"eq","","",148,[[["nominalcycles",3]]]],[11,"ne","","",148,[[["nominalcycles",3]]]],[11,"eq","","",170,[[["nidkgtag",4]]]],[11,"eq","","",149,[[["dkgmessage",3]]]],[11,"ne","","",149,[[["dkgmessage",3]]]],[11,"eq","","",150,[[["dkgpayload",3]]]],[11,"ne","","",150,[[["dkgpayload",3]]]],[11,"eq","ic_protobuf::types::v1::dkg_payload","",171,[[["val",4]]]],[11,"ne","","",171,[[["val",4]]]],[11,"eq","ic_protobuf::types::v1","",151,[[["dealings",3]]]],[11,"ne","","",151,[[["dealings",3]]]],[11,"eq","","",152,[[["summary",3]]]],[11,"ne","","",152,[[["summary",3]]]],[11,"eq","","",153,[[["taggednidkgtranscript",3]]]],[11,"ne","","",153,[[["taggednidkgtranscript",3]]]],[11,"eq","","",154,[[["idednidkgtranscript",3]]]],[11,"ne","","",154,[[["idednidkgtranscript",3]]]],[11,"eq","","",155,[[["nidkgtranscriptresult",3]]]],[11,"ne","","",155,[[["nidkgtranscriptresult",3]]]],[11,"eq","ic_protobuf::types::v1::ni_dkg_transcript_result","",172,[[["val",4]]]],[11,"ne","","",172,[[["val",4]]]],[11,"eq","ic_protobuf::types::v1","",156,[[["nidkgtranscript",3]]]],[11,"ne","","",156,[[["nidkgtranscript",3]]]],[11,"eq","","",157,[[["nidkgconfig",3]]]],[11,"ne","","",157,[[["nidkgconfig",3]]]],[11,"eq","","",158,[[["catchuppackage",3]]]],[11,"ne","","",158,[[["catchuppackage",3]]]],[11,"eq","","",159,[[["catchupcontent",3]]]],[11,"ne","","",159,[[["catchupcontent",3]]]],[11,"eq","","",160,[[["block",3]]]],[11,"ne","","",160,[[["block",3]]]],[11,"eq","","",161,[[["blockproposal",3]]]],[11,"ne","","",161,[[["blockproposal",3]]]],[11,"eq","","",162,[[["randombeacon",3]]]],[11,"ne","","",162,[[["randombeacon",3]]]],[11,"eq","","",163,[[["randomtape",3]]]],[11,"ne","","",163,[[["randomtape",3]]]],[11,"eq","","",164,[[["finalization",3]]]],[11,"ne","","",164,[[["finalization",3]]]],[11,"eq","","",165,[[["notarization",3]]]],[11,"ne","","",165,[[["notarization",3]]]],[11,"eq","","",166,[[["subnetstreamslice",3]]]],[11,"ne","","",166,[[["subnetstreamslice",3]]]],[11,"eq","","",167,[[["xnetpayload",3]]]],[11,"ne","","",167,[[["xnetpayload",3]]]],[11,"eq","","",168,[[["ingressidoffset",3]]]],[11,"ne","","",168,[[["ingressidoffset",3]]]],[11,"eq","","",169,[[["ingresspayload",3]]]],[11,"ne","","",169,[[["ingresspayload",3]]]],[11,"partial_cmp","ic_protobuf::log::malicious_behaviour_log_entry::v1","",9,[[["maliciousbehaviour",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_protobuf::p2p::v1","",39,[[["p2perror",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_protobuf::registry::crypto::v1","",52,[[["algorithmid",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_protobuf::registry::node::v1::connection_endpoint","",59,[[["protocol",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",62,[[["listtype",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_protobuf::registry::subnet::v1","",77,[[["subnettype",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_protobuf::state::canister_state_bits::v1::wasm_method","",96,[[["systemmethod",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_protobuf::types::v1","",170,[[["nidkgtag",4]],[["option",4],["ordering",4]]]],[11,"fmt","ic_protobuf::crypto::v1","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::log::replica_config::v1","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::log::consensus_log_entry::v1","",2,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::log::crypto_log_entry::v1","",3,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::log::p2p_log_entry::v1","",4,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::log::messaging_log_entry::v1","",5,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::log::ingress_message_log_entry::v1","",6,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::log::block_log_entry::v1","",7,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::log::malicious_behaviour_log_entry::v1","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::log::log_entry::v1","",10,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::messaging::xnet::v1","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::messaging::xnet::v1::labeled_tree","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::messaging::xnet::v1","",16,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::messaging::xnet::v1::mixed_hash_tree","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::messaging::xnet::v1","",17,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::messaging::xnet::v1::witness","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",173,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::p2p::v1","",28,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::p2p::v1::gossip_message","",40,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::p2p::v1","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::p2p::v1::gossip_chunk","",41,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::p2p::v1","",38,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::p2p::v1::artifact_chunk","",42,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::p2p::v1","",39,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::proxy","",43,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::conversion_rate::v1","",49,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::crypto::v1","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::firewall::v1","",53,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::nns::v1","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::node::v1","",56,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::node::v1::connection_endpoint","",59,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::node::v1","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::node_operator::v1","",60,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::provisional_whitelist::v1","",61,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",62,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::replica_version::v1","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::routing_table::v1","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::routing_table::v1::routing_table","",68,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::registry::subnet::v1","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::canister_state_bits::v1","",78,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::canister_state_bits::v1::call_context","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",175,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::canister_state_bits::v1","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::canister_state_bits::v1::global","",95,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::canister_state_bits::v1","",86,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::canister_state_bits::v1::wasm_method","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::canister_state_bits::v1","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::canister_state_bits::v1::stop_canister_context","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::canister_state_bits::v1","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",174,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::canister_state_bits::v1::canister_state_bits","",101,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::ingress::v1","",176,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::ingress::v1::ingress_status_completed","",111,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::ingress::v1","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::ingress::v1::ingress_status","",112,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::ingress::v1","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::queues::v1","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::queues::v1::response","",124,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::queues::v1","",120,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::queues::v1::request_or_response","",125,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::queues::v1","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::sync::v1","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::system_metadata::v1","",129,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","","",131,[[["formatter",3]],["result",6]]],[11,"fmt","","",132,[[["formatter",3]],["result",6]]],[11,"fmt","","",133,[[["formatter",3]],["result",6]]],[11,"fmt","","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"fmt","","",137,[[["formatter",3]],["result",6]]],[11,"fmt","","",138,[[["formatter",3]],["result",6]]],[11,"fmt","","",139,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::state::v1","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",141,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::types::v1","",142,[[["formatter",3]],["result",6]]],[11,"fmt","","",143,[[["formatter",3]],["result",6]]],[11,"fmt","","",144,[[["formatter",3]],["result",6]]],[11,"fmt","","",145,[[["formatter",3]],["result",6]]],[11,"fmt","","",146,[[["formatter",3]],["result",6]]],[11,"fmt","","",147,[[["formatter",3]],["result",6]]],[11,"fmt","","",148,[[["formatter",3]],["result",6]]],[11,"fmt","","",170,[[["formatter",3]],["result",6]]],[11,"fmt","","",149,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::types::v1::dkg_payload","",171,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::types::v1","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::types::v1::ni_dkg_transcript_result","",172,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::types::v1","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",162,[[["formatter",3]],["result",6]]],[11,"fmt","","",163,[[["formatter",3]],["result",6]]],[11,"fmt","","",164,[[["formatter",3]],["result",6]]],[11,"fmt","","",165,[[["formatter",3]],["result",6]]],[11,"fmt","","",166,[[["formatter",3]],["result",6]]],[11,"fmt","","",167,[[["formatter",3]],["result",6]]],[11,"fmt","","",168,[[["formatter",3]],["result",6]]],[11,"fmt","","",169,[[["formatter",3]],["result",6]]],[11,"fmt","ic_protobuf::proxy","",43,[[["formatter",3]],["result",6]]],[11,"hash","ic_protobuf::log::malicious_behaviour_log_entry::v1","",9,[[]]],[11,"hash","ic_protobuf::p2p::v1","",39,[[]]],[11,"hash","ic_protobuf::registry::crypto::v1","",52,[[]]],[11,"hash","ic_protobuf::registry::node::v1::connection_endpoint","",59,[[]]],[11,"hash","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",62,[[]]],[11,"hash","ic_protobuf::registry::subnet::v1","",77,[[]]],[11,"hash","ic_protobuf::state::canister_state_bits::v1::wasm_method","",96,[[]]],[11,"hash","ic_protobuf::types::v1","",142,[[]]],[11,"hash","","",144,[[]]],[11,"hash","","",147,[[]]],[11,"hash","","",170,[[]]],[11,"hash","","",158,[[]]],[11,"source","ic_protobuf::proxy","",43,[[],[["error",8],["option",4]]]],[11,"encode_raw","ic_protobuf::crypto::v1","",0,[[]]],[11,"merge_field","","",0,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"encode_raw","ic_protobuf::log::replica_config::v1","",1,[[]]],[11,"merge_field","","",1,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"encode_raw","ic_protobuf::log::consensus_log_entry::v1","",2,[[]]],[11,"merge_field","","",2,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",2,[[]]],[11,"clear","","",2,[[]]],[11,"encode_raw","ic_protobuf::log::crypto_log_entry::v1","",3,[[]]],[11,"merge_field","","",3,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"encode_raw","ic_protobuf::log::p2p_log_entry::v1","",4,[[]]],[11,"merge_field","","",4,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",4,[[]]],[11,"clear","","",4,[[]]],[11,"encode_raw","ic_protobuf::log::messaging_log_entry::v1","",5,[[]]],[11,"merge_field","","",5,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",5,[[]]],[11,"clear","","",5,[[]]],[11,"encode_raw","ic_protobuf::log::ingress_message_log_entry::v1","",6,[[]]],[11,"merge_field","","",6,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",6,[[]]],[11,"clear","","",6,[[]]],[11,"encode_raw","ic_protobuf::log::block_log_entry::v1","",7,[[]]],[11,"merge_field","","",7,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",7,[[]]],[11,"clear","","",7,[[]]],[11,"encode_raw","ic_protobuf::log::malicious_behaviour_log_entry::v1","",8,[[]]],[11,"merge_field","","",8,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",8,[[]]],[11,"clear","","",8,[[]]],[11,"encode_raw","ic_protobuf::log::log_entry::v1","",10,[[]]],[11,"merge_field","","",10,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",10,[[]]],[11,"clear","","",10,[[]]],[11,"encode_raw","ic_protobuf::messaging::xnet::v1","",11,[[]]],[11,"merge_field","","",11,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",11,[[]]],[11,"clear","","",11,[[]]],[11,"encode_raw","","",12,[[]]],[11,"merge_field","","",12,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",12,[[]]],[11,"clear","","",12,[[]]],[11,"encode_raw","","",13,[[]]],[11,"merge_field","","",13,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",13,[[]]],[11,"clear","","",13,[[]]],[11,"encode_raw","","",14,[[]]],[11,"merge_field","","",14,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",14,[[]]],[11,"clear","","",14,[[]]],[11,"encode_raw","","",15,[[]]],[11,"merge_field","","",15,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",15,[[]]],[11,"clear","","",15,[[]]],[11,"encode_raw","ic_protobuf::messaging::xnet::v1::labeled_tree","",18,[[]]],[11,"merge_field","","",18,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",18,[[]]],[11,"clear","","",18,[[]]],[11,"encode_raw","","",19,[[]]],[11,"merge_field","","",19,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",19,[[]]],[11,"clear","","",19,[[]]],[11,"encode_raw","ic_protobuf::messaging::xnet::v1","",16,[[]]],[11,"merge_field","","",16,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",16,[[]]],[11,"clear","","",16,[[]]],[11,"encode_raw","ic_protobuf::messaging::xnet::v1::mixed_hash_tree","",21,[[]]],[11,"merge_field","","",21,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",21,[[]]],[11,"clear","","",21,[[]]],[11,"encode_raw","","",22,[[]]],[11,"merge_field","","",22,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",22,[[]]],[11,"clear","","",22,[[]]],[11,"encode_raw","ic_protobuf::messaging::xnet::v1","",17,[[]]],[11,"merge_field","","",17,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",17,[[]]],[11,"clear","","",17,[[]]],[11,"encode_raw","ic_protobuf::messaging::xnet::v1::witness","",24,[[]]],[11,"merge_field","","",24,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",24,[[]]],[11,"clear","","",24,[[]]],[11,"encode_raw","","",25,[[]]],[11,"merge_field","","",25,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",25,[[]]],[11,"clear","","",25,[[]]],[11,"encode_raw","","",26,[[]]],[11,"merge_field","","",26,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",26,[[]]],[11,"clear","","",26,[[]]],[11,"encode_raw","","",173,[[]]],[11,"merge_field","","",173,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",173,[[]]],[11,"clear","","",173,[[]]],[11,"encode_raw","ic_protobuf::p2p::v1","",28,[[]]],[11,"merge_field","","",28,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",28,[[]]],[11,"clear","","",28,[[]]],[11,"encode_raw","","",29,[[]]],[11,"merge_field","","",29,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",29,[[]]],[11,"clear","","",29,[[]]],[11,"encode_raw","","",30,[[]]],[11,"merge_field","","",30,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",30,[[]]],[11,"clear","","",30,[[]]],[11,"encode_raw","","",31,[[]]],[11,"merge_field","","",31,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",31,[[]]],[11,"clear","","",31,[[]]],[11,"encode_raw","","",32,[[]]],[11,"merge_field","","",32,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",32,[[]]],[11,"clear","","",32,[[]]],[11,"encode_raw","","",33,[[]]],[11,"merge_field","","",33,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",33,[[]]],[11,"clear","","",33,[[]]],[11,"encode_raw","","",34,[[]]],[11,"merge_field","","",34,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",34,[[]]],[11,"clear","","",34,[[]]],[11,"encode_raw","","",35,[[]]],[11,"merge_field","","",35,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",35,[[]]],[11,"clear","","",35,[[]]],[11,"encode_raw","","",36,[[]]],[11,"merge_field","","",36,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",36,[[]]],[11,"clear","","",36,[[]]],[11,"encode_raw","","",37,[[]]],[11,"merge_field","","",37,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",37,[[]]],[11,"clear","","",37,[[]]],[11,"encode_raw","","",38,[[]]],[11,"merge_field","","",38,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",38,[[]]],[11,"clear","","",38,[[]]],[11,"encode_raw","ic_protobuf::registry::conversion_rate::v1","",49,[[]]],[11,"merge_field","","",49,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",49,[[]]],[11,"clear","","",49,[[]]],[11,"encode_raw","ic_protobuf::registry::crypto::v1","",50,[[]]],[11,"merge_field","","",50,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",50,[[]]],[11,"clear","","",50,[[]]],[11,"encode_raw","","",51,[[]]],[11,"merge_field","","",51,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",51,[[]]],[11,"clear","","",51,[[]]],[11,"encode_raw","ic_protobuf::registry::firewall::v1","",53,[[]]],[11,"merge_field","","",53,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",53,[[]]],[11,"clear","","",53,[[]]],[11,"encode_raw","ic_protobuf::registry::nns::v1","",54,[[]]],[11,"merge_field","","",54,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",54,[[]]],[11,"clear","","",54,[[]]],[11,"encode_raw","","",55,[[]]],[11,"merge_field","","",55,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",55,[[]]],[11,"clear","","",55,[[]]],[11,"encode_raw","ic_protobuf::registry::node::v1","",56,[[]]],[11,"merge_field","","",56,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",56,[[]]],[11,"clear","","",56,[[]]],[11,"encode_raw","","",57,[[]]],[11,"merge_field","","",57,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",57,[[]]],[11,"clear","","",57,[[]]],[11,"encode_raw","","",58,[[]]],[11,"merge_field","","",58,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",58,[[]]],[11,"clear","","",58,[[]]],[11,"encode_raw","ic_protobuf::registry::node_operator::v1","",60,[[]]],[11,"merge_field","","",60,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",60,[[]]],[11,"clear","","",60,[[]]],[11,"encode_raw","ic_protobuf::registry::provisional_whitelist::v1","",61,[[]]],[11,"merge_field","","",61,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",61,[[]]],[11,"clear","","",61,[[]]],[11,"encode_raw","ic_protobuf::registry::replica_version::v1","",63,[[]]],[11,"merge_field","","",63,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",63,[[]]],[11,"clear","","",63,[[]]],[11,"encode_raw","","",64,[[]]],[11,"merge_field","","",64,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",64,[[]]],[11,"clear","","",64,[[]]],[11,"encode_raw","ic_protobuf::registry::routing_table::v1","",65,[[]]],[11,"merge_field","","",65,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",65,[[]]],[11,"clear","","",65,[[]]],[11,"encode_raw","","",66,[[]]],[11,"merge_field","","",66,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",66,[[]]],[11,"clear","","",66,[[]]],[11,"encode_raw","","",67,[[]]],[11,"merge_field","","",67,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",67,[[]]],[11,"clear","","",67,[[]]],[11,"encode_raw","ic_protobuf::registry::routing_table::v1::routing_table","",68,[[]]],[11,"merge_field","","",68,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",68,[[]]],[11,"clear","","",68,[[]]],[11,"encode_raw","ic_protobuf::registry::subnet::v1","",69,[[]]],[11,"merge_field","","",69,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",69,[[]]],[11,"clear","","",69,[[]]],[11,"encode_raw","","",70,[[]]],[11,"merge_field","","",70,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",70,[[]]],[11,"clear","","",70,[[]]],[11,"encode_raw","","",71,[[]]],[11,"merge_field","","",71,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",71,[[]]],[11,"clear","","",71,[[]]],[11,"encode_raw","","",72,[[]]],[11,"merge_field","","",72,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",72,[[]]],[11,"clear","","",72,[[]]],[11,"encode_raw","","",73,[[]]],[11,"merge_field","","",73,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",73,[[]]],[11,"clear","","",73,[[]]],[11,"encode_raw","","",74,[[]]],[11,"merge_field","","",74,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",74,[[]]],[11,"clear","","",74,[[]]],[11,"encode_raw","","",75,[[]]],[11,"merge_field","","",75,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",75,[[]]],[11,"clear","","",75,[[]]],[11,"encode_raw","","",76,[[]]],[11,"merge_field","","",76,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",76,[[]]],[11,"clear","","",76,[[]]],[11,"encode_raw","ic_protobuf::state::canister_state_bits::v1","",78,[[]]],[11,"merge_field","","",78,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",78,[[]]],[11,"clear","","",78,[[]]],[11,"encode_raw","ic_protobuf::state::canister_state_bits::v1::call_context","",92,[[]]],[11,"merge_field","","",92,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",92,[[]]],[11,"clear","","",92,[[]]],[11,"encode_raw","","",93,[[]]],[11,"merge_field","","",93,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",93,[[]]],[11,"clear","","",93,[[]]],[11,"encode_raw","","",175,[[]]],[11,"merge_field","","",175,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",175,[[]]],[11,"clear","","",175,[[]]],[11,"encode_raw","ic_protobuf::state::canister_state_bits::v1","",79,[[]]],[11,"merge_field","","",79,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",79,[[]]],[11,"clear","","",79,[[]]],[11,"encode_raw","","",80,[[]]],[11,"merge_field","","",80,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",80,[[]]],[11,"clear","","",80,[[]]],[11,"encode_raw","","",81,[[]]],[11,"merge_field","","",81,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",81,[[]]],[11,"clear","","",81,[[]]],[11,"encode_raw","","",82,[[]]],[11,"merge_field","","",82,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",82,[[]]],[11,"clear","","",82,[[]]],[11,"encode_raw","","",83,[[]]],[11,"merge_field","","",83,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",83,[[]]],[11,"clear","","",83,[[]]],[11,"encode_raw","","",84,[[]]],[11,"merge_field","","",84,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",84,[[]]],[11,"clear","","",84,[[]]],[11,"encode_raw","","",85,[[]]],[11,"merge_field","","",85,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",85,[[]]],[11,"clear","","",85,[[]]],[11,"encode_raw","","",86,[[]]],[11,"merge_field","","",86,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",86,[[]]],[11,"clear","","",86,[[]]],[11,"encode_raw","","",87,[[]]],[11,"merge_field","","",87,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",87,[[]]],[11,"clear","","",87,[[]]],[11,"encode_raw","","",88,[[]]],[11,"merge_field","","",88,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",88,[[]]],[11,"clear","","",88,[[]]],[11,"encode_raw","ic_protobuf::state::canister_state_bits::v1::stop_canister_context","",98,[[]]],[11,"merge_field","","",98,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",98,[[]]],[11,"clear","","",98,[[]]],[11,"encode_raw","","",99,[[]]],[11,"merge_field","","",99,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",99,[[]]],[11,"clear","","",99,[[]]],[11,"encode_raw","ic_protobuf::state::canister_state_bits::v1","",89,[[]]],[11,"merge_field","","",89,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",89,[[]]],[11,"clear","","",89,[[]]],[11,"encode_raw","","",90,[[]]],[11,"merge_field","","",90,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",90,[[]]],[11,"clear","","",90,[[]]],[11,"encode_raw","","",174,[[]]],[11,"merge_field","","",174,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",174,[[]]],[11,"clear","","",174,[[]]],[11,"encode_raw","","",91,[[]]],[11,"merge_field","","",91,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",91,[[]]],[11,"clear","","",91,[[]]],[11,"encode_raw","ic_protobuf::state::ingress::v1","",176,[[]]],[11,"merge_field","","",176,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",176,[[]]],[11,"clear","","",176,[[]]],[11,"encode_raw","","",102,[[]]],[11,"merge_field","","",102,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",102,[[]]],[11,"clear","","",102,[[]]],[11,"encode_raw","","",103,[[]]],[11,"merge_field","","",103,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",103,[[]]],[11,"clear","","",103,[[]]],[11,"encode_raw","","",104,[[]]],[11,"merge_field","","",104,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",104,[[]]],[11,"clear","","",104,[[]]],[11,"encode_raw","","",105,[[]]],[11,"merge_field","","",105,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",105,[[]]],[11,"clear","","",105,[[]]],[11,"encode_raw","","",106,[[]]],[11,"merge_field","","",106,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",106,[[]]],[11,"clear","","",106,[[]]],[11,"encode_raw","","",107,[[]]],[11,"merge_field","","",107,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",107,[[]]],[11,"clear","","",107,[[]]],[11,"encode_raw","","",108,[[]]],[11,"merge_field","","",108,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",108,[[]]],[11,"clear","","",108,[[]]],[11,"encode_raw","","",109,[[]]],[11,"merge_field","","",109,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",109,[[]]],[11,"clear","","",109,[[]]],[11,"encode_raw","","",110,[[]]],[11,"merge_field","","",110,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",110,[[]]],[11,"clear","","",110,[[]]],[11,"encode_raw","ic_protobuf::state::queues::v1","",113,[[]]],[11,"merge_field","","",113,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",113,[[]]],[11,"clear","","",113,[[]]],[11,"encode_raw","","",114,[[]]],[11,"merge_field","","",114,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",114,[[]]],[11,"clear","","",114,[[]]],[11,"encode_raw","","",115,[[]]],[11,"merge_field","","",115,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",115,[[]]],[11,"clear","","",115,[[]]],[11,"encode_raw","","",116,[[]]],[11,"merge_field","","",116,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",116,[[]]],[11,"clear","","",116,[[]]],[11,"encode_raw","","",117,[[]]],[11,"merge_field","","",117,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",117,[[]]],[11,"clear","","",117,[[]]],[11,"encode_raw","","",118,[[]]],[11,"merge_field","","",118,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",118,[[]]],[11,"clear","","",118,[[]]],[11,"encode_raw","","",119,[[]]],[11,"merge_field","","",119,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",119,[[]]],[11,"clear","","",119,[[]]],[11,"encode_raw","","",120,[[]]],[11,"merge_field","","",120,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",120,[[]]],[11,"clear","","",120,[[]]],[11,"encode_raw","","",121,[[]]],[11,"merge_field","","",121,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",121,[[]]],[11,"clear","","",121,[[]]],[11,"encode_raw","","",122,[[]]],[11,"merge_field","","",122,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",122,[[]]],[11,"clear","","",122,[[]]],[11,"encode_raw","","",123,[[]]],[11,"merge_field","","",123,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",123,[[]]],[11,"clear","","",123,[[]]],[11,"encode_raw","ic_protobuf::state::sync::v1","",126,[[]]],[11,"merge_field","","",126,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",126,[[]]],[11,"clear","","",126,[[]]],[11,"encode_raw","","",127,[[]]],[11,"merge_field","","",127,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",127,[[]]],[11,"clear","","",127,[[]]],[11,"encode_raw","","",128,[[]]],[11,"merge_field","","",128,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",128,[[]]],[11,"clear","","",128,[[]]],[11,"encode_raw","ic_protobuf::state::system_metadata::v1","",129,[[]]],[11,"merge_field","","",129,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",129,[[]]],[11,"clear","","",129,[[]]],[11,"encode_raw","","",130,[[]]],[11,"merge_field","","",130,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",130,[[]]],[11,"clear","","",130,[[]]],[11,"encode_raw","","",131,[[]]],[11,"merge_field","","",131,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",131,[[]]],[11,"clear","","",131,[[]]],[11,"encode_raw","","",132,[[]]],[11,"merge_field","","",132,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",132,[[]]],[11,"clear","","",132,[[]]],[11,"encode_raw","","",133,[[]]],[11,"merge_field","","",133,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",133,[[]]],[11,"clear","","",133,[[]]],[11,"encode_raw","","",134,[[]]],[11,"merge_field","","",134,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",134,[[]]],[11,"clear","","",134,[[]]],[11,"encode_raw","","",135,[[]]],[11,"merge_field","","",135,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",135,[[]]],[11,"clear","","",135,[[]]],[11,"encode_raw","","",136,[[]]],[11,"merge_field","","",136,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",136,[[]]],[11,"clear","","",136,[[]]],[11,"encode_raw","","",137,[[]]],[11,"merge_field","","",137,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",137,[[]]],[11,"clear","","",137,[[]]],[11,"encode_raw","","",138,[[]]],[11,"merge_field","","",138,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",138,[[]]],[11,"clear","","",138,[[]]],[11,"encode_raw","","",139,[[]]],[11,"merge_field","","",139,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",139,[[]]],[11,"clear","","",139,[[]]],[11,"encode_raw","ic_protobuf::state::v1","",140,[[]]],[11,"merge_field","","",140,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",140,[[]]],[11,"clear","","",140,[[]]],[11,"encode_raw","","",141,[[]]],[11,"merge_field","","",141,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",141,[[]]],[11,"clear","","",141,[[]]],[11,"encode_raw","ic_protobuf::types::v1","",142,[[]]],[11,"merge_field","","",142,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",142,[[]]],[11,"clear","","",142,[[]]],[11,"encode_raw","","",143,[[]]],[11,"merge_field","","",143,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",143,[[]]],[11,"clear","","",143,[[]]],[11,"encode_raw","","",144,[[]]],[11,"merge_field","","",144,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",144,[[]]],[11,"clear","","",144,[[]]],[11,"encode_raw","","",145,[[]]],[11,"merge_field","","",145,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",145,[[]]],[11,"clear","","",145,[[]]],[11,"encode_raw","","",146,[[]]],[11,"merge_field","","",146,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",146,[[]]],[11,"clear","","",146,[[]]],[11,"encode_raw","","",147,[[]]],[11,"merge_field","","",147,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",147,[[]]],[11,"clear","","",147,[[]]],[11,"encode_raw","","",148,[[]]],[11,"merge_field","","",148,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",148,[[]]],[11,"clear","","",148,[[]]],[11,"encode_raw","","",149,[[]]],[11,"merge_field","","",149,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",149,[[]]],[11,"clear","","",149,[[]]],[11,"encode_raw","","",150,[[]]],[11,"merge_field","","",150,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",150,[[]]],[11,"clear","","",150,[[]]],[11,"encode_raw","","",151,[[]]],[11,"merge_field","","",151,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",151,[[]]],[11,"clear","","",151,[[]]],[11,"encode_raw","","",152,[[]]],[11,"merge_field","","",152,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",152,[[]]],[11,"clear","","",152,[[]]],[11,"encode_raw","","",153,[[]]],[11,"merge_field","","",153,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",153,[[]]],[11,"clear","","",153,[[]]],[11,"encode_raw","","",154,[[]]],[11,"merge_field","","",154,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",154,[[]]],[11,"clear","","",154,[[]]],[11,"encode_raw","","",155,[[]]],[11,"merge_field","","",155,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",155,[[]]],[11,"clear","","",155,[[]]],[11,"encode_raw","","",156,[[]]],[11,"merge_field","","",156,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",156,[[]]],[11,"clear","","",156,[[]]],[11,"encode_raw","","",157,[[]]],[11,"merge_field","","",157,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",157,[[]]],[11,"clear","","",157,[[]]],[11,"encode_raw","","",158,[[]]],[11,"merge_field","","",158,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",158,[[]]],[11,"clear","","",158,[[]]],[11,"encode_raw","","",159,[[]]],[11,"merge_field","","",159,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",159,[[]]],[11,"clear","","",159,[[]]],[11,"encode_raw","","",160,[[]]],[11,"merge_field","","",160,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",160,[[]]],[11,"clear","","",160,[[]]],[11,"encode_raw","","",161,[[]]],[11,"merge_field","","",161,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",161,[[]]],[11,"clear","","",161,[[]]],[11,"encode_raw","","",162,[[]]],[11,"merge_field","","",162,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",162,[[]]],[11,"clear","","",162,[[]]],[11,"encode_raw","","",163,[[]]],[11,"merge_field","","",163,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",163,[[]]],[11,"clear","","",163,[[]]],[11,"encode_raw","","",164,[[]]],[11,"merge_field","","",164,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",164,[[]]],[11,"clear","","",164,[[]]],[11,"encode_raw","","",165,[[]]],[11,"merge_field","","",165,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",165,[[]]],[11,"clear","","",165,[[]]],[11,"encode_raw","","",166,[[]]],[11,"merge_field","","",166,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",166,[[]]],[11,"clear","","",166,[[]]],[11,"encode_raw","","",167,[[]]],[11,"merge_field","","",167,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",167,[[]]],[11,"clear","","",167,[[]]],[11,"encode_raw","","",168,[[]]],[11,"merge_field","","",168,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",168,[[]]],[11,"clear","","",168,[[]]],[11,"encode_raw","","",169,[[]]],[11,"merge_field","","",169,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",169,[[]]],[11,"clear","","",169,[[]]],[11,"serialize","ic_protobuf::crypto::v1","",0,[[],["result",4]]],[11,"serialize","ic_protobuf::log::replica_config::v1","",1,[[],["result",4]]],[11,"serialize","ic_protobuf::log::consensus_log_entry::v1","",2,[[],["result",4]]],[11,"serialize","ic_protobuf::log::crypto_log_entry::v1","",3,[[],["result",4]]],[11,"serialize","ic_protobuf::log::p2p_log_entry::v1","",4,[[],["result",4]]],[11,"serialize","ic_protobuf::log::messaging_log_entry::v1","",5,[[],["result",4]]],[11,"serialize","ic_protobuf::log::ingress_message_log_entry::v1","",6,[[],["result",4]]],[11,"serialize","ic_protobuf::log::block_log_entry::v1","",7,[[],["result",4]]],[11,"serialize","ic_protobuf::log::malicious_behaviour_log_entry::v1","",8,[[],["result",4]]],[11,"serialize","ic_protobuf::log::log_entry::v1","",10,[[],["result",4]]],[11,"serialize","ic_protobuf::messaging::xnet::v1","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","ic_protobuf::messaging::xnet::v1::labeled_tree","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","ic_protobuf::messaging::xnet::v1","",16,[[],["result",4]]],[11,"serialize","ic_protobuf::messaging::xnet::v1::mixed_hash_tree","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","ic_protobuf::messaging::xnet::v1","",17,[[],["result",4]]],[11,"serialize","ic_protobuf::messaging::xnet::v1::witness","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",173,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","ic_protobuf::p2p::v1","",28,[[],["result",4]]],[11,"serialize","ic_protobuf::p2p::v1::gossip_message","",40,[[],["result",4]]],[11,"serialize","ic_protobuf::p2p::v1","",29,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"serialize","","",32,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","","",34,[[],["result",4]]],[11,"serialize","","",35,[[],["result",4]]],[11,"serialize","","",36,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"serialize","ic_protobuf::p2p::v1::gossip_chunk","",41,[[],["result",4]]],[11,"serialize","ic_protobuf::p2p::v1","",38,[[],["result",4]]],[11,"serialize","ic_protobuf::p2p::v1::artifact_chunk","",42,[[],["result",4]]],[11,"serialize","ic_protobuf::p2p::v1","",39,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::conversion_rate::v1","",49,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::crypto::v1","",50,[[],["result",4]]],[11,"serialize","","",51,[[],["result",4]]],[11,"serialize","","",52,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::firewall::v1","",53,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::nns::v1","",54,[[],["result",4]]],[11,"serialize","","",55,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::node::v1","",56,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::node::v1::connection_endpoint","",59,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::node::v1","",57,[[],["result",4]]],[11,"serialize","","",58,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::node_operator::v1","",60,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::provisional_whitelist::v1","",61,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",62,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::replica_version::v1","",63,[[],["result",4]]],[11,"serialize","","",64,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::routing_table::v1","",65,[[],["result",4]]],[11,"serialize","","",66,[[],["result",4]]],[11,"serialize","","",67,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::routing_table::v1::routing_table","",68,[[],["result",4]]],[11,"serialize","ic_protobuf::registry::subnet::v1","",69,[[],["result",4]]],[11,"serialize","","",70,[[],["result",4]]],[11,"serialize","","",71,[[],["result",4]]],[11,"serialize","","",72,[[],["result",4]]],[11,"serialize","","",73,[[],["result",4]]],[11,"serialize","","",74,[[],["result",4]]],[11,"serialize","","",75,[[],["result",4]]],[11,"serialize","","",76,[[],["result",4]]],[11,"serialize","","",77,[[],["result",4]]],[11,"serialize","ic_protobuf::types::v1","",142,[[],["result",4]]],[11,"serialize","","",143,[[],["result",4]]],[11,"serialize","","",144,[[],["result",4]]],[11,"serialize","","",145,[[],["result",4]]],[11,"serialize","","",146,[[],["result",4]]],[11,"serialize","","",147,[[],["result",4]]],[11,"serialize","","",148,[[],["result",4]]],[11,"serialize","","",170,[[],["result",4]]],[11,"serialize","","",149,[[],["result",4]]],[11,"serialize","","",150,[[],["result",4]]],[11,"serialize","ic_protobuf::types::v1::dkg_payload","",171,[[],["result",4]]],[11,"serialize","ic_protobuf::types::v1","",151,[[],["result",4]]],[11,"serialize","","",152,[[],["result",4]]],[11,"serialize","","",153,[[],["result",4]]],[11,"serialize","","",154,[[],["result",4]]],[11,"serialize","","",155,[[],["result",4]]],[11,"serialize","ic_protobuf::types::v1::ni_dkg_transcript_result","",172,[[],["result",4]]],[11,"serialize","ic_protobuf::types::v1","",156,[[],["result",4]]],[11,"serialize","","",157,[[],["result",4]]],[11,"serialize","","",158,[[],["result",4]]],[11,"serialize","","",159,[[],["result",4]]],[11,"serialize","","",160,[[],["result",4]]],[11,"serialize","","",161,[[],["result",4]]],[11,"serialize","","",162,[[],["result",4]]],[11,"serialize","","",163,[[],["result",4]]],[11,"serialize","","",164,[[],["result",4]]],[11,"serialize","","",165,[[],["result",4]]],[11,"serialize","","",166,[[],["result",4]]],[11,"serialize","","",167,[[],["result",4]]],[11,"serialize","","",168,[[],["result",4]]],[11,"serialize","","",169,[[],["result",4]]],[11,"deserialize","ic_protobuf::crypto::v1","",0,[[],["result",4]]],[11,"deserialize","ic_protobuf::log::replica_config::v1","",1,[[],["result",4]]],[11,"deserialize","ic_protobuf::log::consensus_log_entry::v1","",2,[[],["result",4]]],[11,"deserialize","ic_protobuf::log::crypto_log_entry::v1","",3,[[],["result",4]]],[11,"deserialize","ic_protobuf::log::p2p_log_entry::v1","",4,[[],["result",4]]],[11,"deserialize","ic_protobuf::log::messaging_log_entry::v1","",5,[[],["result",4]]],[11,"deserialize","ic_protobuf::log::ingress_message_log_entry::v1","",6,[[],["result",4]]],[11,"deserialize","ic_protobuf::log::block_log_entry::v1","",7,[[],["result",4]]],[11,"deserialize","ic_protobuf::log::malicious_behaviour_log_entry::v1","",8,[[],["result",4]]],[11,"deserialize","ic_protobuf::log::log_entry::v1","",10,[[],["result",4]]],[11,"deserialize","ic_protobuf::messaging::xnet::v1","",11,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","ic_protobuf::messaging::xnet::v1::labeled_tree","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","ic_protobuf::messaging::xnet::v1","",16,[[],["result",4]]],[11,"deserialize","ic_protobuf::messaging::xnet::v1::mixed_hash_tree","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","ic_protobuf::messaging::xnet::v1","",17,[[],["result",4]]],[11,"deserialize","ic_protobuf::messaging::xnet::v1::witness","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",173,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","ic_protobuf::p2p::v1","",28,[[],["result",4]]],[11,"deserialize","ic_protobuf::p2p::v1::gossip_message","",40,[[],["result",4]]],[11,"deserialize","ic_protobuf::p2p::v1","",29,[[],["result",4]]],[11,"deserialize","","",30,[[],["result",4]]],[11,"deserialize","","",31,[[],["result",4]]],[11,"deserialize","","",32,[[],["result",4]]],[11,"deserialize","","",33,[[],["result",4]]],[11,"deserialize","","",34,[[],["result",4]]],[11,"deserialize","","",35,[[],["result",4]]],[11,"deserialize","","",36,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"deserialize","ic_protobuf::p2p::v1::gossip_chunk","",41,[[],["result",4]]],[11,"deserialize","ic_protobuf::p2p::v1","",38,[[],["result",4]]],[11,"deserialize","ic_protobuf::p2p::v1::artifact_chunk","",42,[[],["result",4]]],[11,"deserialize","ic_protobuf::p2p::v1","",39,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::conversion_rate::v1","",49,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::crypto::v1","",50,[[],["result",4]]],[11,"deserialize","","",51,[[],["result",4]]],[11,"deserialize","","",52,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::firewall::v1","",53,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::nns::v1","",54,[[],["result",4]]],[11,"deserialize","","",55,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::node::v1","",56,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::node::v1::connection_endpoint","",59,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::node::v1","",57,[[],["result",4]]],[11,"deserialize","","",58,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::node_operator::v1","",60,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::provisional_whitelist::v1","",61,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::provisional_whitelist::v1::provisional_whitelist","",62,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::replica_version::v1","",63,[[],["result",4]]],[11,"deserialize","","",64,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::routing_table::v1","",65,[[],["result",4]]],[11,"deserialize","","",66,[[],["result",4]]],[11,"deserialize","","",67,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::routing_table::v1::routing_table","",68,[[],["result",4]]],[11,"deserialize","ic_protobuf::registry::subnet::v1","",69,[[],["result",4]]],[11,"deserialize","","",70,[[],["result",4]]],[11,"deserialize","","",71,[[],["result",4]]],[11,"deserialize","","",72,[[],["result",4]]],[11,"deserialize","","",73,[[],["result",4]]],[11,"deserialize","","",74,[[],["result",4]]],[11,"deserialize","","",75,[[],["result",4]]],[11,"deserialize","","",76,[[],["result",4]]],[11,"deserialize","","",77,[[],["result",4]]],[11,"deserialize","ic_protobuf::types::v1","",142,[[],["result",4]]],[11,"deserialize","","",143,[[],["result",4]]],[11,"deserialize","","",144,[[],["result",4]]],[11,"deserialize","","",145,[[],["result",4]]],[11,"deserialize","","",146,[[],["result",4]]],[11,"deserialize","","",147,[[],["result",4]]],[11,"deserialize","","",148,[[],["result",4]]],[11,"deserialize","","",170,[[],["result",4]]],[11,"deserialize","","",149,[[],["result",4]]],[11,"deserialize","","",150,[[],["result",4]]],[11,"deserialize","ic_protobuf::types::v1::dkg_payload","",171,[[],["result",4]]],[11,"deserialize","ic_protobuf::types::v1","",151,[[],["result",4]]],[11,"deserialize","","",152,[[],["result",4]]],[11,"deserialize","","",153,[[],["result",4]]],[11,"deserialize","","",154,[[],["result",4]]],[11,"deserialize","","",155,[[],["result",4]]],[11,"deserialize","ic_protobuf::types::v1::ni_dkg_transcript_result","",172,[[],["result",4]]],[11,"deserialize","ic_protobuf::types::v1","",156,[[],["result",4]]],[11,"deserialize","","",157,[[],["result",4]]],[11,"deserialize","","",158,[[],["result",4]]],[11,"deserialize","","",159,[[],["result",4]]],[11,"deserialize","","",160,[[],["result",4]]],[11,"deserialize","","",161,[[],["result",4]]],[11,"deserialize","","",162,[[],["result",4]]],[11,"deserialize","","",163,[[],["result",4]]],[11,"deserialize","","",164,[[],["result",4]]],[11,"deserialize","","",165,[[],["result",4]]],[11,"deserialize","","",166,[[],["result",4]]],[11,"deserialize","","",167,[[],["result",4]]],[11,"deserialize","","",168,[[],["result",4]]],[11,"deserialize","","",169,[[],["result",4]]],[11,"serialize_fallback","ic_protobuf::log::log_entry::v1","",10,[[["serializer",8],["key",6]],["result",6]]],[11,"as_serde","","",10,[[],["serialize",8]]],[11,"to_sendable","","",10,[[],[["serdevalue",8],["box",3]]]],[11,"serialize","","",10,[[["serializer",8],["key",6],["record",3]],["result",6]]]],"p":[[3,"NodePublicKeys"],[3,"ReplicaConfig"],[3,"ConsensusLogEntry"],[3,"CryptoLogEntry"],[3,"P2pLogEntry"],[3,"MessagingLogEntry"],[3,"IngressMessageLogEntry"],[3,"BlockLogEntry"],[3,"MaliciousBehaviourLogEntry"],[4,"MaliciousBehaviour"],[3,"LogEntry"],[3,"ThresholdSignature"],[3,"CertificationContent"],[3,"Certification"],[3,"CertifiedStreamSlice"],[3,"LabeledTree"],[3,"MixedHashTree"],[3,"Witness"],[3,"SubTree"],[3,"Child"],[4,"NodeEnum"],[3,"Fork"],[3,"Labeled"],[4,"TreeEnum"],[3,"Fork"],[3,"Node"],[3,"Pruned"],[4,"WitnessEnum"],[3,"GossipMessage"],[3,"GossipAdvert"],[3,"GossipChunkRequest"],[3,"ArtifactFilter"],[3,"ConsensusMessageFilter"],[3,"IngressMessageFilter"],[3,"CertificationMessageFilter"],[3,"StateSyncFilter"],[3,"GossipRetransmissionRequest"],[3,"GossipChunk"],[3,"ArtifactChunk"],[4,"P2pError"],[4,"Body"],[4,"Response"],[4,"Data"],[4,"ProxyDecodeError"],[13,"ValueOutOfRange"],[13,"InvalidDigestLength"],[13,"InvalidMessageId"],[13,"DuplicateEntry"],[8,"ProtoProxy"],[3,"IcpXdrConversionRateRecord"],[3,"PublicKey"],[3,"X509PublicKeyCert"],[4,"AlgorithmId"],[3,"FirewallConfig"],[3,"NnsCanisterRecord"],[3,"NnsCanisterRecords"],[3,"ConnectionEndpoint"],[3,"FlowEndpoint"],[3,"NodeRecord"],[4,"Protocol"],[3,"NodeOperatorRecord"],[3,"ProvisionalWhitelist"],[4,"ListType"],[3,"ReplicaVersionRecord"],[3,"BlessedReplicaVersions"],[3,"CanisterIdRange"],[3,"CanisterIdRanges"],[3,"RoutingTable"],[3,"Entry"],[3,"SubnetRecord"],[3,"CatchUpPackageContents"],[3,"RegistryStoreUri"],[3,"SubnetListRecord"],[3,"InitialDkgTranscriptRecord"],[3,"DkgId"],[3,"InitialNiDkgTranscriptRecord"],[3,"GossipConfig"],[4,"SubnetType"],[3,"CallContext"],[3,"CallContextEntry"],[3,"WasmClosure"],[3,"Callback"],[3,"CallbackEntry"],[3,"CallContextManager"],[3,"CyclesAccount"],[3,"Global"],[3,"WasmMethod"],[3,"ExecutionStateBits"],[3,"StopCanisterContext"],[3,"CanisterStatusRunning"],[3,"CanisterStatusStopping"],[3,"CanisterStateBits"],[3,"Ingress"],[3,"CanisterUpdateOrQuery"],[4,"CallOrigin"],[4,"Global"],[4,"SystemMethod"],[4,"WasmMethod"],[3,"Ingress"],[3,"Canister"],[4,"Context"],[4,"CanisterStatus"],[3,"IngressStatusProcessing"],[3,"IngressStatusReceived"],[3,"IngressStatusCompleted"],[3,"IngressStatusFailed"],[3,"PruningEntry"],[3,"IngressStatus"],[3,"IngressStatusEntry"],[3,"IngressHistoryState"],[3,"Ingress"],[4,"WasmResult"],[4,"Status"],[3,"Cycles"],[3,"Funds"],[3,"Stream"],[3,"StreamEntry"],[3,"Request"],[3,"RejectContext"],[3,"Response"],[3,"RequestOrResponse"],[3,"InputOutputQueue"],[3,"QueueEntry"],[3,"CanisterQueues"],[4,"ResponsePayload"],[4,"R"],[3,"FileInfo"],[3,"ChunkInfo"],[3,"Manifest"],[3,"NodeTopology"],[3,"SubnetTopologyEntry"],[3,"SubnetTopology"],[3,"SubnetsEntry"],[3,"NetworkTopology"],[3,"SetupInitialDkgContext"],[3,"SubnetCallContext"],[3,"SubnetCallContextTree"],[3,"SubnetCallContextManager"],[3,"SystemMetadata"],[3,"StableMemory"],[3,"StateMetadata"],[3,"StatesMetadata"],[3,"PrincipalId"],[3,"CanisterId"],[3,"SubnetId"],[3,"UserId"],[3,"NodeId"],[3,"NiDkgId"],[3,"NominalCycles"],[3,"DkgMessage"],[3,"DkgPayload"],[3,"Dealings"],[3,"Summary"],[3,"TaggedNiDkgTranscript"],[3,"IdedNiDkgTranscript"],[3,"NiDkgTranscriptResult"],[3,"NiDkgTranscript"],[3,"NiDkgConfig"],[3,"CatchUpPackage"],[3,"CatchUpContent"],[3,"Block"],[3,"BlockProposal"],[3,"RandomBeacon"],[3,"RandomTape"],[3,"Finalization"],[3,"Notarization"],[3,"SubnetStreamSlice"],[3,"XNetPayload"],[3,"IngressIdOffset"],[3,"IngressPayload"],[4,"NiDkgTag"],[4,"Val"],[4,"Val"],[3,"Known"],[3,"CanisterStatusStopped"],[3,"Heartbeat"],[3,"IngressStatusUnknown"]]},\
"ic_registry_client":{"doc":"","i":[[0,"client","ic_registry_client","Implementation of the registry client. Calls to the API…",null,null],[4,"DataProviderConfig","ic_registry_client::client","",null,null],[13,"Bootstrap","","DEPRECATED On an initial node of the NNS subnetwork, the…",0,null],[12,"initial_registry_file","ic_registry_client::client::DataProviderConfig","",1,null],[12,"registry_canister_url","","",1,null],[13,"RegistryCanisterUrl","ic_registry_client::client","DEPRECATED Comma separated list of base Urls of a node on…",0,null],[13,"ProtobufFile","","DEPRECATED A protobuf file that contains a snapshot of the…",0,null],[13,"LocalStore","","A path to a directory that containing the locally…",0,null],[5,"empty_zero_registry_record","","",null,[[],[["registryversionedrecord",3],["vec",3]]]],[8,"RegistryClient","","The RegistryClient provides methods to query the local…",null,null],[10,"get_versioned_value","","The following holds:",2,[[["amountof",3],["registryversiontag",3]],[["result",4],["registryversionedrecord",3],["registryclienterror",4]]]],[10,"get_key_family","","Returns all keys that start with `key_prefix` and are…",2,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["vec",3]]]],[11,"get_value","","",2,[[["amountof",3],["registryversiontag",3]],[["result",4],["option",4],["registryclienterror",4]]]],[10,"get_latest_version","","Returns the latest version known to this replica. If the…",2,[[],[["amountof",3],["registryversiontag",3]]]],[6,"RegistryClientVersionedResult","","Result returns when fetching a versioned value from the…",null,null],[8,"RegistryDataProvider","","A `RegistryDataProvider` is the data source that backs the…",null,null],[10,"get_updates_since","","If successful, the call returns a pair, the first element…",3,[[["amountof",3],["registryversiontag",3]],[["registrydataprovidererror",4],["result",4]]]],[6,"RegistryTransportRecord","","A RegistryRecord represents a versioned k/v-pair as stored…",null,null],[17,"ZERO_REGISTRY_VERSION","","The registry at version `0` is the empty registry.",null,null],[3,"ThresholdSigPublicKey","","A threshold signature public key.",null,null],[4,"RegistryClientError","","Errors returned by the registry client.",null,null],[13,"VersionNotAvailable","","",4,null],[12,"version","ic_registry_client::client::RegistryClientError","",5,null],[13,"DataProviderQueryFailed","ic_registry_client::client","",4,null],[12,"source","ic_registry_client::client::RegistryClientError","",6,null],[13,"PollLockFailed","ic_registry_client::client","",4,null],[12,"error","ic_registry_client::client::RegistryClientError","",7,null],[4,"RegistryDataProviderError","ic_registry_client::client","Errors returned by the registry data provider.",null,null],[13,"Timeout","","Timeout occurred when attempting to fetch updates from the…",8,null],[13,"Transfer","","Error when using registry transfer",8,null],[12,"source","ic_registry_client::client::RegistryDataProviderError","",9,null],[6,"RegistryVersion","ic_registry_client::client","A type representing the registry\'s version.",null,null],[3,"RegistryClientImpl","","",null,null],[3,"EmptyRegistryDataProvider","","An empty registry data provider that emulates a static,…",null,null],[5,"create_data_provider","","Instantiate a data provider from a `DataProviderConfig`.…",null,[[["dataproviderconfig",4],["option",4],["thresholdsigpublickey",3]],[["arc",3],["registrydataprovider",8]]]],[11,"new","","Creates a new instance of the RegistryClient.",10,[[["arc",3],["registrydataprovider",8],["metricsregistry",3],["option",4]]]],[11,"fetch_and_start_polling","","Calls `poll_once()` synchronously, if it succeeds a…",10,[[],[["registryclienterror",4],["result",4]]]],[11,"poll_once","","Fetches the newest updates from the registry data provider.",10,[[],[["registryclienterror",4],["result",4]]]],[0,"fake","ic_registry_client","A fake implementation of RegistryClient intended to be…",null,null],[3,"FakeRegistryClient","ic_registry_client::fake","",null,null],[11,"new","","After creation, the cache is empty.",11,[[["arc",3],["registrydataprovider",8]]]],[11,"update_to_latest_version","","Calls `get_updates_since()` on the data provider and…",11,[[]]],[0,"helper","ic_registry_client","These are Helper traits that wrap a RegistryClient and…",null,null],[0,"crypto","ic_registry_client::helper","",null,null],[3,"DkgTranscripts","ic_registry_client::helper::crypto","Contains initial DKG transcripts used to bootstrap a subnet.",null,null],[12,"low_threshold","","",12,null],[12,"high_threshold","","",12,null],[5,"initial_ni_dkg_transcript_from_registry_record","","",null,[[["initialnidkgtranscriptrecord",3]],["nidkgtranscript",3]]],[8,"CryptoRegistry","","",null,null],[10,"get_crypto_key_for_node","","",13,[[["keypurpose",4],["registryversion",6],["nodeid",6]],[["registryclientresult",6],["publickeyproto",3]]]],[10,"get_threshold_signing_public_key_for_subnet","","",13,[[["registryversion",6],["subnetid",6]],[["thresholdsigpublickey",3],["registryclientresult",6]]]],[10,"get_tls_certificate","","",13,[[["registryversion",6],["nodeid",6]],[["x509publickeycert",3],["registryclientresult",6]]]],[10,"get_initial_dkg_transcripts","","Returns initial DKG key material for the subnet and the…",13,[[["registryversion",6],["subnetid",6]],[["registryclientversionedresult",6],["dkgtranscripts",3]]]],[0,"firewall","ic_registry_client::helper","",null,null],[8,"FirewallRegistry","ic_registry_client::helper::firewall","A trait that allows access to `FirewallConfig`. The…",null,null],[10,"get_firewall_config","","",14,[[["registryversion",6]],[["registryclientresult",6],["firewallconfig",3]]]],[0,"node","ic_registry_client::helper","",null,null],[3,"ConnectionEndpoint","ic_registry_client::helper::node","A connection endpoint.",null,null],[12,"ip_addr","","The IP address. Senders SHOULD use dotted-quad notation…",15,null],[12,"port","","",15,null],[12,"protocol","","Protocol that is used on this endpoint. If…",15,null],[3,"NodeRecord","","A node: one machine running a replica instance.",null,null],[12,"xnet","","The endpoint where this node receives xnet messages.",16,null],[12,"http","","The endpoint where this node receives http requests.",16,null],[12,"p2p_flow_endpoints","","The P2P flow end points.",16,null],[12,"prometheus_metrics_http","","Endpoint where the node provides Prometheus format metrics…",16,null],[12,"public_api","","Endpoints on which the public API is served.",16,null],[12,"private_api","","Endpoints on which private APIs are served.",16,null],[12,"prometheus_metrics","","Endpoints on which metrics compatible with the Prometheus…",16,null],[12,"xnet_api","","Endpoints on which the XNet API is served",16,null],[12,"node_operator_id","","The id of the node operator that added this node.",16,null],[6,"NodeId","","A type representing a node\'s [`PrincipalId`].",null,null],[6,"RegistryVersion","","A type representing the registry\'s version.",null,null],[6,"SubnetId","","A type representing a subnet\'s [`PrincipalId`].",null,null],[8,"NodeRegistry","","",null,null],[10,"get_transport_info","","",17,[[["registryversion",6],["nodeid",6]],[["registryclientresult",6],["noderecord",3]]]],[10,"get_subnet_id_from_node_id","","",17,[[["registryversion",6],["nodeid",6]],[["registryclientresult",6],["subnetid",6]]]],[10,"get_node_ids","","Returns a list of node ids that contains the id of each…",17,[[["registryversion",6]],[["result",4],["vec",3],["registryclienterror",4]]]],[0,"provisional_whitelist","ic_registry_client::helper","",null,null],[8,"ProvisionalWhitelistRegistry","ic_registry_client::helper::provisional_whitelist","A trait that allows access to `ProvisionalWhitelist`.",null,null],[10,"get_provisional_whitelist","","",18,[[["registryversion",6]],[["provisionalwhitelist",4],["registryclientresult",6]]]],[0,"routing_table","ic_registry_client::helper","",null,null],[8,"RoutingTableRegistry","ic_registry_client::helper::routing_table","A trait that allows access to `RoutingTable`. The…",null,null],[10,"get_routing_table","","",19,[[["registryversion",6]],[["registryclientresult",6],["routingtable",3]]]],[0,"subnet","ic_registry_client::helper","",null,null],[3,"NotarizationDelaySettings","ic_registry_client::helper::subnet","",null,null],[12,"unit_delay","","",20,null],[12,"initial_notary_delay","","",20,null],[3,"IngressMessageSettings","","",null,null],[12,"ingress_bytes_per_block_soft_cap","","Maximum number of bytes per block. This is a soft cap,…",21,null],[12,"max_ingress_bytes_per_message","","Maximum number of bytes per message. This is a hard cap,…",21,null],[12,"max_ingress_messages_per_block","","Maximum number of messages per block. This is a hard cap,…",21,null],[5,"get_node_ids_from_subnet_record","","",null,[[["subnetrecord",3]],[["vec",3],["nodeid",6]]]],[8,"SubnetRegistry","","A helper trait that wraps a RegistryClient and provides…",null,null],[10,"get_subnet_record","","",22,[[["registryversion",6],["subnetid",6]],[["subnetrecord",3],["registryclientresult",6]]]],[10,"get_root_subnet_id","","",22,[[["registryversion",6]],[["registryclientresult",6],["subnetid",6]]]],[10,"get_node_ids_on_subnet","","",22,[[["registryversion",6],["subnetid",6]],[["registryclientresult",6],["vec",3]]]],[10,"get_subnet_size","","",22,[[["registryversion",6],["subnetid",6]],["registryclientresult",6]]],[10,"get_ingress_message_settings","","Returns ingress message settings.",22,[[["registryversion",6],["subnetid",6]],[["registryclientresult",6],["ingressmessagesettings",3]]]],[10,"get_gossip_config","","Returns gossip config",22,[[["registryversion",6],["subnetid",6]],[["registryclientresult",6],["option",4]]]],[10,"get_notarization_delay_settings","","Returns notarization delay settings: - the unit delay for…",22,[[["registryversion",6],["subnetid",6]],[["registryclientresult",6],["notarizationdelaysettings",3]]]],[10,"get_dkg_dealings_per_block","","Returns the upper bound for the number of dealings we…",22,[[["registryversion",6],["subnetid",6]],["registryclientresult",6]]],[10,"get_dkg_interval_length","","Returns the length of all DKG intervals for the given…",22,[[["registryversion",6],["subnetid",6]],[["height",6],["registryclientresult",6]]]],[10,"get_is_halted","","Returns whether the subnet record instructs the subnet to…",22,[[["registryversion",6],["subnetid",6]],["registryclientresult",6]]],[10,"get_replica_version","","Return the ReplicaVersion as recorded in the subnet record…",22,[[["registryversion",6],["subnetid",6]],[["registryclientresult",6],["replicaversion",3]]]],[10,"get_replica_version_record","","Return the ReplicaVersionRecord as recorded in the subnet…",22,[[["registryversion",6],["subnetid",6]],[["registryclientresult",6],["replicaversionrecord",3]]]],[10,"get_replica_version_record_from_version_id","","",22,[[["replicaversion",3],["registryversion",6]],[["registryclientresult",6],["replicaversionrecord",3]]]],[10,"get_subnet_record_registry_version","","Return the RegistryVersion at which the SubnetRecord for…",22,[[["registryversion",6],["subnetid",6]],[["registryclientresult",6],["registryversion",6]]]],[10,"get_listed_subnet_for_node_id","","",22,[[["registryversion",6],["nodeid",6]],["registryclientresult",6]]],[10,"get_all_listed_subnet_records","","",22,[[["registryversion",6]],[["registryclientresult",6],["vec",3]]]],[10,"get_cup_contents","","Get the necessary material to construct a genesis/recovery…",22,[[["registryversion",6],["subnetid",6]],[["registryclientversionedresult",6],["catchuppackagecontents",3]]]],[8,"SubnetListRegistry","","A helper trait to access the subnet list; the list of…",null,null],[10,"get_subnet_ids","","",23,[[["registryversion",6]],[["registryclientresult",6],["vec",3]]]],[8,"SubnetTransportRegistry","","Helper methods primarily used in `transport`/`p2p` where…",null,null],[10,"get_subnet_transport_infos","","Return a list of pairs containing the node id and…",24,[[["registryversion",6],["subnetid",6]],[["registryclientresult",6],["vec",3]]]],[0,"nns_registry_replicator","ic_registry_client","NNS Registry Replicator",null,null],[3,"NnsRegistryReplicator","ic_registry_client::nns_registry_replicator","",null,null],[11,"new","","",25,[[["duration",3],["replicalogger",6],["nodeid",6],["registryclient",8],["arc",3],["localstore",8],["arc",3]]]],[11,"fetch_and_start_polling","","Calls `poll()` synchronously and spawns a background task…",25,[[],[["error",3],["result",4]]]],[11,"set_local_registry_data","","Set the local registry data to what is contained in the…",25,[[["localstore",8]]]],[11,"stop_polling_and_set_local_registry_data","","",25,[[["localstore",8]]]],[11,"stop_polling","","",25,[[]]],[11,"from","ic_registry_client::client","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"erased_serialize","","",26,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",26,[[]]],[11,"equivalent","","",26,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",4,[[]]],[11,"equivalent","","",4,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"erased_serialize","","",8,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",8,[[]]],[11,"equivalent","","",8,[[]]],[11,"get_crypto_key_for_node","","",10,[[["amountof",3],["id",3],["keypurpose",4],["nodetag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_threshold_signing_public_key_for_subnet","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_tls_certificate","","",10,[[["amountof",3],["id",3],["nodetag",3],["registryversiontag",3],["principalid",3]],[["option",4],["registryclienterror",4],["result",4]]]],[11,"get_initial_dkg_transcripts","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["registryversionedrecord",3]]]],[11,"get_firewall_config","","",10,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_transport_info","","",10,[[["amountof",3],["id",3],["nodetag",3],["registryversiontag",3],["principalid",3]],[["option",4],["result",4],["registryclienterror",4]]]],[11,"get_subnet_id_from_node_id","","",10,[[["amountof",3],["id",3],["nodetag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_node_ids","","",10,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["vec",3]]]],[11,"get_provisional_whitelist","","",10,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_routing_table","","",10,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_subnet_record","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["option",4],["registryclienterror",4],["result",4]]]],[11,"get_root_subnet_id","","Return the root subnet id if it is available and can be…",10,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_node_ids_on_subnet","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["result",4],["registryclienterror",4],["option",4]]]],[11,"get_subnet_size","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["option",4],["registryclienterror",4],["result",4]]]],[11,"get_ingress_message_settings","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_gossip_config","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["option",4],["result",4]]]],[11,"get_notarization_delay_settings","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["result",4],["option",4],["registryclienterror",4]]]],[11,"get_dkg_dealings_per_block","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["option",4],["registryclienterror",4],["result",4]]]],[11,"get_dkg_interval_length","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["option",4],["result",4],["registryclienterror",4]]]],[11,"get_is_halted","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["result",4],["registryclienterror",4],["option",4]]]],[11,"get_replica_version","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_replica_version_record","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["option",4],["result",4],["registryclienterror",4]]]],[11,"get_replica_version_record_from_version_id","","",10,[[["amountof",3],["registryversiontag",3],["replicaversion",3]],[["option",4],["result",4],["registryclienterror",4]]]],[11,"get_subnet_record_registry_version","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_listed_subnet_for_node_id","","Given a Node ID, this method returns a pair (subnet_id,…",10,[[["amountof",3],["id",3],["nodetag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_all_listed_subnet_records","","Returns a list of pairs (subnet_id, subnet_record). The…",10,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_cup_contents","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryversionedrecord",3],["result",4],["registryclienterror",4]]]],[11,"get_subnet_ids","","",10,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["option",4],["result",4]]]],[11,"get_subnet_transport_infos","","",10,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["result",4],["registryclienterror",4],["option",4]]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"get_test_proto","","",10,[[["amountof",3],["registryversiontag",3]],[["result",4],["option",4],["registryclienterror",4]]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"get_crypto_key_for_node","ic_registry_client::fake","",11,[[["amountof",3],["id",3],["keypurpose",4],["nodetag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_threshold_signing_public_key_for_subnet","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_tls_certificate","","",11,[[["amountof",3],["id",3],["nodetag",3],["registryversiontag",3],["principalid",3]],[["option",4],["registryclienterror",4],["result",4]]]],[11,"get_initial_dkg_transcripts","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["registryversionedrecord",3]]]],[11,"get_firewall_config","","",11,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_transport_info","","",11,[[["amountof",3],["id",3],["nodetag",3],["registryversiontag",3],["principalid",3]],[["option",4],["result",4],["registryclienterror",4]]]],[11,"get_subnet_id_from_node_id","","",11,[[["amountof",3],["id",3],["nodetag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_node_ids","","",11,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["vec",3]]]],[11,"get_provisional_whitelist","","",11,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_routing_table","","",11,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_subnet_record","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["option",4],["registryclienterror",4],["result",4]]]],[11,"get_root_subnet_id","","Return the root subnet id if it is available and can be…",11,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_node_ids_on_subnet","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["result",4],["registryclienterror",4],["option",4]]]],[11,"get_subnet_size","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["option",4],["registryclienterror",4],["result",4]]]],[11,"get_ingress_message_settings","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_gossip_config","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["option",4],["result",4]]]],[11,"get_notarization_delay_settings","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["result",4],["option",4],["registryclienterror",4]]]],[11,"get_dkg_dealings_per_block","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["option",4],["registryclienterror",4],["result",4]]]],[11,"get_dkg_interval_length","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["option",4],["result",4],["registryclienterror",4]]]],[11,"get_is_halted","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["result",4],["registryclienterror",4],["option",4]]]],[11,"get_replica_version","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_replica_version_record","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["option",4],["result",4],["registryclienterror",4]]]],[11,"get_replica_version_record_from_version_id","","",11,[[["amountof",3],["registryversiontag",3],["replicaversion",3]],[["option",4],["result",4],["registryclienterror",4]]]],[11,"get_subnet_record_registry_version","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_listed_subnet_for_node_id","","Given a Node ID, this method returns a pair (subnet_id,…",11,[[["amountof",3],["id",3],["nodetag",3],["registryversiontag",3],["principalid",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_all_listed_subnet_records","","Returns a list of pairs (subnet_id, subnet_record). The…",11,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["result",4],["option",4]]]],[11,"get_cup_contents","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["registryversionedrecord",3],["result",4],["registryclienterror",4]]]],[11,"get_subnet_ids","","",11,[[["amountof",3],["registryversiontag",3]],[["registryclienterror",4],["option",4],["result",4]]]],[11,"get_subnet_transport_infos","","",11,[[["amountof",3],["id",3],["subnettag",3],["registryversiontag",3],["principalid",3]],[["result",4],["registryclienterror",4],["option",4]]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"get_test_proto","","",11,[[["amountof",3],["registryversiontag",3]],[["result",4],["option",4],["registryclienterror",4]]]],[11,"from","ic_registry_client::helper::crypto","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","ic_registry_client::helper::node","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"proxy_encode","","",15,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",15,[[],[["result",4],["proxydecodeerror",4]]]],[11,"erased_serialize","","",15,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"proxy_encode","","",16,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",16,[[],[["result",4],["proxydecodeerror",4]]]],[11,"erased_serialize","","",16,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",16,[[]]],[11,"from","ic_registry_client::helper::subnet","",20,[[]]],[11,"into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","ic_registry_client::nns_registry_replicator","",25,[[]]],[11,"into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"serialize","ic_registry_client::client","",0,[[],["result",4]]],[11,"eq","","",0,[[["dataproviderconfig",4]]]],[11,"ne","","",0,[[["dataproviderconfig",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",0,[[],["dataproviderconfig",4]]],[11,"deserialize","","",0,[[],[["result",4],["dataproviderconfig",4]]]],[11,"source","","",4,[[],[["error",8],["option",4]]]],[11,"eq","","",26,[[["thresholdsigpublickey",3]]]],[11,"ne","","",26,[[["thresholdsigpublickey",3]]]],[11,"eq","","",8,[[["registrydataprovidererror",4]]]],[11,"ne","","",8,[[["registrydataprovidererror",4]]]],[11,"eq","","",4,[[["registryclienterror",4]]]],[11,"ne","","",4,[[["registryclienterror",4]]]],[11,"cmp","","",26,[[["thresholdsigpublickey",3]],["ordering",4]]],[11,"fmt","","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",26,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",4,[[],["registryclienterror",4]]],[11,"clone","","",26,[[],["thresholdsigpublickey",3]]],[11,"clone","","",8,[[],["registrydataprovidererror",4]]],[11,"try_from","","",26,[[["publickey",3]],[["thresholdsigpublickey",3],["result",4]]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"partial_cmp","","",26,[[["thresholdsigpublickey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",26,[[["thresholdsigpublickey",3]]]],[11,"le","","",26,[[["thresholdsigpublickey",3]]]],[11,"gt","","",26,[[["thresholdsigpublickey",3]]]],[11,"ge","","",26,[[["thresholdsigpublickey",3]]]],[11,"from","ic_registry_client::helper::node","",15,[[["connectionendpoint",3]],["connectionendpoint",3]]],[11,"from","ic_registry_client::client","",26,[[["cspthresholdsigpublickey",4]],["thresholdsigpublickey",3]]],[11,"from","","",4,[[["registrydataprovidererror",4]],["registryclienterror",4]]],[11,"from","","",26,[[["publickeybytes",3]],["thresholdsigpublickey",3]]],[11,"from","","",26,[[["nidkgtranscript",3]],["thresholdsigpublickey",3]]],[11,"hash","","",4,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",26,[[]]],[11,"deserialize","","",4,[[],[["registryclienterror",4],["result",4]]]],[11,"deserialize","","",26,[[],[["result",4],["thresholdsigpublickey",3]]]],[11,"deserialize","","",8,[[],[["result",4],["registrydataprovidererror",4]]]],[11,"eq","ic_registry_client::helper::node","",16,[[["noderecord",3]]]],[11,"ne","","",16,[[["noderecord",3]]]],[11,"eq","","",15,[[["connectionendpoint",3]]]],[11,"ne","","",15,[[["connectionendpoint",3]]]],[11,"default","","",15,[[],["connectionendpoint",3]]],[11,"default","","",16,[[],["noderecord",3]]],[11,"fmt","","",15,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",16,[[["formatter",3]],[["result",4],["error",3]]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"encode_raw","","",15,[[]]],[11,"merge_field","","",15,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",15,[[]]],[11,"clear","","",15,[[]]],[11,"encode_raw","","",16,[[]]],[11,"merge_field","","",16,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",16,[[]]],[11,"clear","","",16,[[]]],[11,"clone","","",15,[[],["connectionendpoint",3]]],[11,"clone","","",16,[[],["noderecord",3]]],[11,"deserialize","","",15,[[],[["connectionendpoint",3],["result",4]]]],[11,"deserialize","","",16,[[],[["result",4],["noderecord",3]]]],[11,"drop","ic_registry_client::client","",10,[[]]],[11,"drop","ic_registry_client::nns_registry_replicator","",25,[[]]],[11,"clone","ic_registry_client::client","",10,[[],["registryclientimpl",3]]],[11,"get_versioned_value","","",10,[[["registryversion",6]],[["vec",3],["registryclientversionedresult",6]]]],[11,"get_key_family","","",10,[[["registryversion",6]],[["result",4],["vec",3],["registryclienterror",4]]]],[11,"get_latest_version","","",10,[[],["registryversion",6]]],[11,"get_versioned_value","ic_registry_client::fake","",11,[[["registryversion",6]],[["vec",3],["registryclientversionedresult",6]]]],[11,"get_key_family","","",11,[[["registryversion",6]],[["result",4],["vec",3],["registryclienterror",4]]]],[11,"get_latest_version","","",11,[[],["registryversion",6]]],[11,"get_updates_since","ic_registry_client::client","",27,[[["registryversion",6]],[["result",4],["registrydataprovidererror",4]]]],[11,"get_registry_urls","","",0,[[],[["url",3],["vec",3]]]],[18,"SIZE","","",26,null],[11,"into_bytes","","",26,[[]]],[11,"protocol","ic_registry_client::helper::node","Returns the enum value of `protocol`, or the default if…",15,[[],["protocol",4]]],[11,"set_protocol","","Sets `protocol` to the provided enum value.",15,[[["protocol",4]]]]],"p":[[4,"DataProviderConfig"],[13,"Bootstrap"],[8,"RegistryClient"],[8,"RegistryDataProvider"],[4,"RegistryClientError"],[13,"VersionNotAvailable"],[13,"DataProviderQueryFailed"],[13,"PollLockFailed"],[4,"RegistryDataProviderError"],[13,"Transfer"],[3,"RegistryClientImpl"],[3,"FakeRegistryClient"],[3,"DkgTranscripts"],[8,"CryptoRegistry"],[8,"FirewallRegistry"],[3,"ConnectionEndpoint"],[3,"NodeRecord"],[8,"NodeRegistry"],[8,"ProvisionalWhitelistRegistry"],[8,"RoutingTableRegistry"],[3,"NotarizationDelaySettings"],[3,"IngressMessageSettings"],[8,"SubnetRegistry"],[8,"SubnetListRegistry"],[8,"SubnetTransportRegistry"],[3,"NnsRegistryReplicator"],[3,"ThresholdSigPublicKey"],[3,"EmptyRegistryDataProvider"]]},\
"ic_registry_common":{"doc":"","i":[[0,"bootstrap_registry_data_provider","ic_registry_common","",null,null],[3,"BootstrapRegistryDataProvider","ic_registry_common::bootstrap_registry_data_provider","Fetches the first version (V1) from an initial data…",null,null],[5,"is_valid_initial_update","","Tests whether the update received from the initial data…",null,[[]]],[17,"INITIAL_REGISTRY_VERSION","","",null,null],[11,"new","","",0,[[["arc",3],["registrydataprovider",8]]]],[0,"data_provider","ic_registry_common","",null,null],[3,"NnsDataProvider","ic_registry_common::data_provider","",null,null],[3,"CertifiedNnsDataProvider","","",null,null],[11,"new","","",1,[[["registrycanister",3]],["nnsdataprovider",3]]],[11,"new","","",2,[[["registrycanister",3],["thresholdsigpublickey",3]]]],[0,"local_store","ic_registry_common","",null,null],[3,"KeyMutation","ic_registry_common::local_store","",null,null],[12,"key","","The key of the entry.",3,null],[12,"value","","The value of this key value pair. `None` means that the…",3,null],[3,"LocalStoreImpl","","",null,null],[6,"ChangelogEntry","","A ChangelogEntry is a list of mutations that, when applied…",null,null],[6,"Changelog","","A changelog is a sequence of ChangelogEntries. Applied…",null,null],[8,"LocalStore","","",null,null],[8,"LocalStoreReader","","",null,null],[10,"get_changelog_since_version","","For a given version `version`, returns a (possibly empty)…",4,[[["registryversion",6]],[["changelog",6],["result",6]]]],[8,"LocalStoreWriter","","",null,null],[10,"store","","Store the changelog at the given version.",5,[[["registryversion",6],["changelogentry",6]],["result",6]]],[10,"clear","","Clears the Local Store.",5,[[],["result",6]]],[10,"update_certified_time","","Update the locally stored certified time to…",5,[[],["result",6]]],[11,"new","","",6,[[["path",3],["asref",8]]]],[0,"pb","ic_registry_common","",null,null],[0,"local_store","ic_registry_common::pb","Prost-build generated registry protos.",null,null],[0,"v1","ic_registry_common::pb::local_store","",null,null],[3,"ChangelogEntry","ic_registry_common::pb::local_store::v1","Set of all mutations that, when applied to the registry at…",null,null],[12,"key_mutations","","The default, an empty list, is invalid here.",7,null],[3,"KeyMutation","","A mutation of a single key.",null,null],[12,"key","","Key.",8,null],[12,"value","","Protobuf encoded value.",8,null],[12,"mutation_type","","If this is `UNSET`, `value` must assume the default value.",8,null],[3,"CertifiedTime","","The time when the last certified update was successfully…",null,null],[12,"unix_epoch_nanos","","Number of nano seconds since UNIX EPOCH",9,null],[4,"MutationType","","",null,null],[13,"InvalidState","","Illegal state.",10,null],[13,"Set","","The value was SET in this delta.",10,null],[13,"Unset","","The value was UNSET in this delta.",10,null],[11,"mutation_type","","Returns the enum value of `mutation_type`, or the default…",8,[[],["mutationtype",4]]],[11,"set_mutation_type","","Sets `mutation_type` to the provided enum value.",8,[[["mutationtype",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `MutationType`.",10,[[]]],[11,"from_i32","","Converts an `i32` to a `MutationType`, or `None` if…",10,[[],[["option",4],["mutationtype",4]]]],[0,"proto_registry","ic_registry_common::pb","Prost-build generated registry protos.",null,null],[0,"v1","ic_registry_common::pb::proto_registry","",null,null],[3,"ProtoRegistry","ic_registry_common::pb::proto_registry::v1","",null,null],[12,"records","","",11,null],[3,"ProtoRegistryRecord","","",null,null],[12,"key","","",12,null],[12,"version","","",12,null],[12,"value","","",12,null],[0,"test_protos","ic_registry_common::pb","",null,null],[0,"v1","ic_registry_common::pb::test_protos","",null,null],[3,"TestProto","ic_registry_common::pb::test_protos::v1","",null,null],[12,"test_value","","",13,null],[0,"proto_registry_data_provider","ic_registry_common","",null,null],[3,"ProtoRegistryDataProvider","ic_registry_common::proto_registry_data_provider","",null,null],[4,"ProtoRegistryDataProviderError","","",null,null],[13,"KeyAlreadyExists","","",14,null],[12,"key","ic_registry_common::proto_registry_data_provider::ProtoRegistryDataProviderError","",15,null],[12,"version","","",15,null],[11,"new","ic_registry_common::proto_registry_data_provider","",16,[[]]],[11,"add","","",16,[[["registryversion",6],["option",4]],[["protoregistrydataprovidererror",4],["result",4]]]],[11,"add_mutations","","Writes mutations to the initial Registry",16,[[["vec",3],["registrymutation",3]],[["protoregistrydataprovidererror",4],["result",4]]]],[11,"decode","","",16,[[["buf",8]]]],[11,"encode","","",16,[[]]],[11,"load_from_file","","",16,[[]]],[11,"write_to_file","","Write the state of this data provider to a file at `path`.",16,[[]]],[0,"registry","ic_registry_common","",null,null],[3,"RegistryCanister","ic_registry_common::registry","A higher level helper to interact with the registry…",null,null],[5,"registry_deltas_to_registry_transport_records","","Convert `Vec<RegistryDelta>` to…",null,[[["vec",3],["registrydelta",3]],[["vec",3],["error",4],["result",4]]]],[11,"new","","",17,[[["url",3],["vec",3]],["registrycanister",3]]],[11,"get_changes_since","","Queries the registry for all changes that occurred since…",17,[[]]],[11,"get_changes_since_as_transport_records","","Same as `get_changes_since`, but also converts the deltas…",17,[[]]],[11,"get_certified_changes_since","","Queries the registry for all the changes that occurred…",17,[[["thresholdsigpublickey",3]]]],[11,"get_value","","Obtains the value for \'key\'. If \'version_opt\' is Some,…",17,[[["vec",3],["option",4]]]],[11,"atomic_mutate","","Applies \'mutations\' to the registry.",17,[[["vec",3],["registrymutation",3],["precondition",3],["vec",3]]]],[0,"test_proto","ic_registry_common","",null,null],[8,"TestProtoHelper","ic_registry_common::test_proto","Provides functionality to get values of type TestProto…",null,null],[10,"get_test_proto","","",18,[[["registryversion",6]],[["testproto",3],["registryclientresult",6]]]],[0,"values","ic_registry_common","",null,null],[5,"deserialize_registry_value","ic_registry_common::values","Utility function to deserialize the bytes returned from…",null,[[["vec",3],["registryclientresult",6]],[["registryvalue",8],["default",8],["registryclientresult",6]]]],[11,"from","ic_registry_common::bootstrap_registry_data_provider","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","ic_registry_common::data_provider","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","ic_registry_common::local_store","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"equivalent","","",3,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","ic_registry_common::pb::local_store::v1","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"proxy_encode","","",7,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",7,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"proxy_encode","","",8,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",8,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"proxy_encode","","",9,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",9,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"equivalent","","",10,[[]]],[11,"from","ic_registry_common::pb::proto_registry::v1","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"proxy_encode","","",11,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",11,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"proxy_encode","","",12,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",12,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",12,[[]]],[11,"from","ic_registry_common::pb::test_protos::v1","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"proxy_encode","","",13,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",13,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",13,[[]]],[11,"from","ic_registry_common::proto_registry_data_provider","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","ic_registry_common::registry","",17,[[]]],[11,"into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"get_changelog_since_version","ic_registry_common::local_store","",6,[[["registryversion",6]],[["changelog",6],["result",6]]]],[11,"store","","",6,[[["registryversion",6],["changelogentry",6]],["result",6]]],[11,"clear","","",6,[[],["result",6]]],[11,"update_certified_time","","",6,[[],["result",6]]],[11,"clone","","",3,[[],["keymutation",3]]],[11,"clone","ic_registry_common::pb::local_store::v1","",7,[[],["changelogentry",3]]],[11,"clone","","",8,[[],["keymutation",3]]],[11,"clone","","",9,[[],["certifiedtime",3]]],[11,"clone","","",10,[[],["mutationtype",4]]],[11,"clone","ic_registry_common::pb::proto_registry::v1","",11,[[],["protoregistry",3]]],[11,"clone","","",12,[[],["protoregistryrecord",3]]],[11,"clone","ic_registry_common::pb::test_protos::v1","",13,[[],["testproto",3]]],[11,"clone","ic_registry_common::proto_registry_data_provider","",16,[[],["protoregistrydataprovider",3]]],[11,"clone","","",14,[[],["protoregistrydataprovidererror",4]]],[11,"default","ic_registry_common::pb::local_store::v1","",7,[[]]],[11,"default","","",8,[[]]],[11,"default","","",9,[[]]],[11,"default","","",10,[[],["mutationtype",4]]],[11,"default","ic_registry_common::pb::proto_registry::v1","",11,[[]]],[11,"default","","",12,[[]]],[11,"default","ic_registry_common::pb::test_protos::v1","",13,[[]]],[11,"default","ic_registry_common::proto_registry_data_provider","",16,[[]]],[11,"cmp","ic_registry_common::local_store","",3,[[["keymutation",3]],["ordering",4]]],[11,"cmp","ic_registry_common::pb::local_store::v1","",10,[[["mutationtype",4]],["ordering",4]]],[11,"eq","ic_registry_common::local_store","",3,[[["keymutation",3]]]],[11,"ne","","",3,[[["keymutation",3]]]],[11,"eq","ic_registry_common::pb::local_store::v1","",7,[[["changelogentry",3]]]],[11,"ne","","",7,[[["changelogentry",3]]]],[11,"eq","","",8,[[["keymutation",3]]]],[11,"ne","","",8,[[["keymutation",3]]]],[11,"eq","","",9,[[["certifiedtime",3]]]],[11,"ne","","",9,[[["certifiedtime",3]]]],[11,"eq","","",10,[[["mutationtype",4]]]],[11,"eq","ic_registry_common::pb::proto_registry::v1","",11,[[["protoregistry",3]]]],[11,"ne","","",11,[[["protoregistry",3]]]],[11,"eq","","",12,[[["protoregistryrecord",3]]]],[11,"ne","","",12,[[["protoregistryrecord",3]]]],[11,"eq","ic_registry_common::pb::test_protos::v1","",13,[[["testproto",3]]]],[11,"ne","","",13,[[["testproto",3]]]],[11,"partial_cmp","ic_registry_common::local_store","",3,[[["keymutation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["keymutation",3]]]],[11,"le","","",3,[[["keymutation",3]]]],[11,"gt","","",3,[[["keymutation",3]]]],[11,"ge","","",3,[[["keymutation",3]]]],[11,"partial_cmp","ic_registry_common::pb::local_store::v1","",10,[[["mutationtype",4]],[["option",4],["ordering",4]]]],[11,"fmt","ic_registry_common::local_store","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_common::pb::local_store::v1","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_common::pb::proto_registry::v1","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_common::pb::test_protos::v1","",13,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_common::proto_registry_data_provider","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"hash","ic_registry_common::local_store","",3,[[]]],[11,"hash","ic_registry_common::pb::local_store::v1","",10,[[]]],[11,"try_from","ic_registry_common","",19,[[["pbchangelogentry",3]],["result",4]]],[11,"try_from","ic_registry_common::local_store","",3,[[["pbkeymutation",3]],["result",4]]],[11,"encode_raw","ic_registry_common::pb::local_store::v1","",7,[[]]],[11,"merge_field","","",7,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",7,[[]]],[11,"clear","","",7,[[]]],[11,"encode_raw","","",8,[[]]],[11,"merge_field","","",8,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",8,[[]]],[11,"clear","","",8,[[]]],[11,"encode_raw","","",9,[[]]],[11,"merge_field","","",9,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",9,[[]]],[11,"clear","","",9,[[]]],[11,"encode_raw","ic_registry_common::pb::proto_registry::v1","",11,[[]]],[11,"merge_field","","",11,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",11,[[]]],[11,"clear","","",11,[[]]],[11,"encode_raw","","",12,[[]]],[11,"merge_field","","",12,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",12,[[]]],[11,"clear","","",12,[[]]],[11,"encode_raw","ic_registry_common::pb::test_protos::v1","",13,[[]]],[11,"merge_field","","",13,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",13,[[]]],[11,"clear","","",13,[[]]],[11,"get_updates_since","ic_registry_common::bootstrap_registry_data_provider","",0,[[["registryversion",6]],[["registrydataprovidererror",4],["result",4]]]],[11,"get_updates_since","ic_registry_common::data_provider","",1,[[["registryversion",6]],[["registrydataprovidererror",4],["result",4]]]],[11,"get_updates_since","","",2,[[["registryversion",6]],[["registrydataprovidererror",4],["result",4]]]],[11,"get_updates_since","ic_registry_common::local_store","",6,[[["registryversion",6]],[["registrydataprovidererror",4],["result",4]]]],[11,"get_updates_since","ic_registry_common::proto_registry_data_provider","This function only accesses internal state which is…",16,[[["registryversion",6]],[["registrydataprovidererror",4],["result",4]]]],[11,"read_certified_time","ic_registry_common::local_store","",6,[[],["time",3]]]],"p":[[3,"BootstrapRegistryDataProvider"],[3,"NnsDataProvider"],[3,"CertifiedNnsDataProvider"],[3,"KeyMutation"],[8,"LocalStoreReader"],[8,"LocalStoreWriter"],[3,"LocalStoreImpl"],[3,"ChangelogEntry"],[3,"KeyMutation"],[3,"CertifiedTime"],[4,"MutationType"],[3,"ProtoRegistry"],[3,"ProtoRegistryRecord"],[3,"TestProto"],[4,"ProtoRegistryDataProviderError"],[13,"KeyAlreadyExists"],[3,"ProtoRegistryDataProvider"],[3,"RegistryCanister"],[8,"TestProtoHelper"],[6,"ChangelogEntry"]]},\
"ic_registry_keys":{"doc":"Functions that create keys for the registry","i":[[5,"make_icp_xdr_conversion_rate_record_key","ic_registry_keys","Returns the only key whose payload is the ICP/XDR…",null,[[],["string",3]]],[5,"make_subnet_list_record_key","","Returns the only key whose payload is the list of subnets.",null,[[],["string",3]]],[5,"make_replica_version_key","","Makes a key for a ReplicaVersion registry entry.",null,[[["asref",8]],["string",3]]],[5,"make_blessed_replica_version_key","","Returns the only key whose payload is the list of blessed…",null,[[],["string",3]]],[5,"make_routing_table_record_key","","",null,[[],["string",3]]],[5,"make_firewall_config_record_key","","",null,[[],["string",3]]],[5,"make_provisional_whitelist_record_key","","",null,[[],["string",3]]],[5,"make_node_operator_record_key","","",null,[[["principalid",3]],["string",3]]],[5,"principal_id_to_u64","","",null,[[["principalid",3]]]],[5,"make_crypto_tls_cert_key","","Makes a key for a TLS certificate registry entry for a node.",null,[[["nodeid",6]],["string",3]]],[5,"maybe_parse_crypto_tls_cert_key","","",null,[[],[["option",4],["nodeid",6]]]],[5,"make_node_record_key","","Makes a key for a NodeRecord registry entry.",null,[[["nodeid",6]],["string",3]]],[5,"is_node_record_key","","Checks whether a given key is a node record key",null,[[]]],[5,"get_node_record_node_id","","Returns the node_id associated with a given node_record…",null,[[],[["principalid",3],["option",4]]]],[5,"make_crypto_threshold_signing_pubkey_key","","Makes a key for a threshold signature public key entry for…",null,[[["subnetid",6]],["string",3]]],[5,"maybe_parse_crypto_threshold_signing_pubkey_key","","",null,[[],[["option",4],["subnetid",6]]]],[5,"make_catch_up_package_contents_key","","Makes a key for a record for the catch up package contents.",null,[[["subnetid",6]],["string",3]]],[5,"make_subnet_record_key","","Makes a key for a SubnetRecord registry entry.",null,[[["subnetid",6]],["string",3]]],[5,"make_crypto_node_key","","Makes a key for a crypto key registry entry for a node.",null,[[["keypurpose",4],["nodeid",6]],["string",3]]],[5,"maybe_parse_crypto_node_key","","",null,[[],["option",4]]],[5,"make_nns_canister_records_key","","Returns the unique key that stores the information about…",null,[[],["string",3]]],[17,"SUBNET_LIST_KEY","","",null,null],[17,"ROOT_SUBNET_ID_KEY","","The subnet id of the NNS subnet. Remark: This subnet id…",null,null],[17,"XDR_PER_ICP_KEY","","",null,null],[17,"NODE_RECORD_KEY_PREFIX","","",null,null],[17,"NODE_OPERATOR_RECORD_KEY_PREFIX","","",null,null],[17,"REPLICA_VERSION_KEY_PREFIX","","",null,null],[17,"SUBNET_RECORD_KEY_PREFIX","","",null,null],[17,"CRYPTO_RECORD_KEY_PREFIX","","",null,null],[17,"CRYPTO_TLS_CERT_KEY_PREFIX","","",null,null],[17,"CRYPTO_THRESHOLD_SIGNING_KEY_PREFIX","","",null,null]],"p":[]},\
"ic_registry_provisional_whitelist":{"doc":"","i":[[4,"ProvisionalWhitelist","ic_registry_provisional_whitelist","",null,null],[13,"Set","","The only PrincipalIds that are allowed to use the…",0,null],[13,"All","","All PrincipalIds are allowed to use the provisional API.…",0,null],[11,"contains","","",0,[[["principalid",3]]]],[11,"new_empty","","Returns a new empty whitelist",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["provisionalwhitelist",4]]],[11,"eq","","",0,[[["provisionalwhitelist",4]]]],[11,"ne","","",0,[[["provisionalwhitelist",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"try_from","","",0,[[["provisionalwhitelist",3]],["result",4]]]],"p":[[4,"ProvisionalWhitelist"]]},\
"ic_registry_routing_table":{"doc":"","i":[[3,"CanisterIdRange","ic_registry_routing_table","",null,null],[12,"start","","",0,null],[12,"end","","",0,null],[3,"CanisterIdRanges","","A list of closed `CanisterId` ranges that are present in…",null,null],[3,"RoutingTable","","Stores an ordered map mapping CanisterId ranges to…",null,null],[12,"0","","",1,null],[4,"ResolveDestinationError","","",null,null],[13,"CandidError","","",2,null],[13,"MethodNotFound","","",2,null],[13,"SubnetNotFound","","",2,null],[4,"WellFormedError","","",null,null],[13,"CanisterIdRangeNonClosedRange","","",3,null],[13,"CanisterIdRangeAppGroupSplit","","",3,null],[13,"CanisterIdRangeNotSortedOrNotDisjoint","","",3,null],[13,"RoutingTableNonEmptyRange","","",3,null],[13,"RoutingTableAppGroupSplit","","",3,null],[13,"RoutingTableNotDisjoint","","",3,null],[5,"resolve_destination","","Inspect the method name and payload of a request to ic:00…",null,[[["arc",3],["routingtable",3],["subnetid",6]],[["resolvedestinationerror",4],["result",4],["subnetid",6]]]],[5,"routing_table_insert_subnet","","A helper function to help insert a new subnet to the…",null,[[["routingtable",3],["subnetid",6]],[["wellformederror",4],["result",4]]]],[11,"total_count","","Total sum of the lengths of all ranges, i.e., the total…",4,[[]]],[11,"locate","","Given location \'loc\' in the range [0, total_count()),…",4,[[],["canisterid",3]]],[11,"new","","",1,[[["btreemap",3],["canisteridrange",3],["subnetid",6]]]],[11,"insert","","Insert a new subnet with a corresponding canister_id_range…",1,[[["canisteridrange",3],["subnetid",6]],[["wellformederror",4],["result",4]]]],[11,"iter","","",1,[[]]],[11,"is_empty","","",1,[[]]],[11,"well_formed","","Returns true if the routing table is well-formed.",1,[[],[["wellformederror",4],["result",4]]]],[11,"route","","Returns the `SubnetId` that the given `principal_id` is…",1,[[["principalid",3]],[["option",4],["subnetid",6]]]],[11,"ranges","","Find all canister ranges that are assigned to subnet_id.",1,[[["subnetid",6]],["canisteridranges",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",0,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",4,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",2,[[["error",4]]]],[11,"into_iter","","",1,[[]]],[11,"clone","","",0,[[],["canisteridrange",3]]],[11,"clone","","",4,[[],["canisteridranges",3]]],[11,"clone","","",1,[[],["routingtable",3]]],[11,"default","","",4,[[],["canisteridranges",3]]],[11,"default","","",1,[[],["routingtable",3]]],[11,"cmp","","",0,[[["canisteridrange",3]],["ordering",4]]],[11,"eq","","",0,[[["canisteridrange",3]]]],[11,"ne","","",0,[[["canisteridrange",3]]]],[11,"eq","","",3,[[["wellformederror",4]]]],[11,"ne","","",3,[[["wellformederror",4]]]],[11,"eq","","",4,[[["canisteridranges",3]]]],[11,"ne","","",4,[[["canisteridranges",3]]]],[11,"eq","","",1,[[["routingtable",3]]]],[11,"ne","","",1,[[["routingtable",3]]]],[11,"partial_cmp","","",0,[[["canisteridrange",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["canisteridrange",3]]]],[11,"le","","",0,[[["canisteridrange",3]]]],[11,"gt","","",0,[[["canisteridrange",3]]]],[11,"ge","","",0,[[["canisteridrange",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"try_from","","",0,[[["canisteridrange",3]],["result",4]]],[11,"try_from","","",4,[[["canisteridranges",3]],["result",4]]],[11,"try_from","","",1,[[["routingtable",3]],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]]],"p":[[3,"CanisterIdRange"],[3,"RoutingTable"],[4,"ResolveDestinationError"],[4,"WellFormedError"],[3,"CanisterIdRanges"]]},\
"ic_registry_subnet_type":{"doc":"","i":[[4,"SubnetType","ic_registry_subnet_type","Defines the different types of subnets that can exist on…",null,null],[13,"Application","","The application subnet type where most of the normal…",0,null],[13,"System","","System subnet type is allowed special privileges. The NNS…",0,null],[13,"VerifiedApplication","","Similar to application subnet type. The main differences…",0,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"clone","","",0,[[],["subnettype",4]]],[11,"default","","",0,[[]]],[11,"eq","","",0,[[["subnettype",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_from","","",0,[[["subnettype",4]],["result",4]]],[11,"from_str","","",0,[[],[["subnettype",4],["result",4]]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"_ty","","",0,[[],["type",4]]],[11,"id","","",0,[[],["typeid",3]]],[11,"idl_serialize","","",0,[[],["result",4]]]],"p":[[4,"SubnetType"]]},\
"ic_registry_transport":{"doc":"","i":[[4,"Error","ic_registry_transport","The possible errors in registry responses. Per key errors…",null,null],[13,"MalformedMessage","","",0,null],[13,"KeyNotPresent","","",0,null],[13,"KeyAlreadyPresent","","",0,null],[13,"VersionNotLatest","","",0,null],[13,"VersionBeyondLatest","","",0,null],[13,"RegistryUnreachable","","",0,null],[13,"UnknownError","","",0,null],[5,"serialize_get_value_request","","Serializes the arguments for a request to the get_value()…",null,[[["vec",3],["option",4]],[["vec",3],["error",4],["result",4]]]],[5,"deserialize_get_value_request","","Deserializes the arguments for a request to the…",null,[[["vec",3]],[["error",4],["result",4]]]],[5,"serialize_get_value_response","","Serializes a response for a get_value() request to the…",null,[[["registrygetvalueresponse",3]],[["vec",3],["error",4],["result",4]]]],[5,"deserialize_get_value_response","","Deserializes the response obtained from the registry…",null,[[["vec",3]],[["error",4],["result",4]]]],[5,"serialize_get_latest_version_response","","Serializes a response for a get_latest_version() request…",null,[[["registrygetlatestversionresponse",3]],[["vec",3],["error",4],["result",4]]]],[5,"deserialize_get_latest_version_response","","Deserializes the response obtained from the registry…",null,[[["vec",3]],[["error",4],["result",4]]]],[5,"deserialize_get_changes_since_request","","Deserializes the response obtained from the registry…",null,[[["vec",3]],[["error",4],["result",4]]]],[5,"serialize_get_changes_since_response","","Serializes a response for a get_changes_since() request to…",null,[[["registrygetchangessinceresponse",3]],[["vec",3],["error",4],["result",4]]]],[5,"serialize_get_changes_since_request","","Serializes a request for a get_changes_since() request to…",null,[[],[["vec",3],["error",4],["result",4]]]],[5,"deserialize_get_changes_since_response","","Deserializes the response obtained from the registry…",null,[[["vec",3]],[["result",4],["error",4]]]],[5,"serialize_atomic_mutate_request","","Serializes the arguments for a request to the insert()…",null,[[["vec",3],["vec",3],["registrymutation",3],["precondition",3]],["vec",3]]],[5,"deserialize_atomic_mutate_request","","Deserializes the arguments for a request to the…",null,[[["vec",3]],[["registryatomicmutaterequest",3],["result",4],["error",4]]]],[5,"serialize_atomic_mutate_response","","Serializes a response for a atomic_mutate() request to the…",null,[[["registryatomicmutateresponse",3]],[["vec",3],["error",4],["result",4]]]],[5,"deserialize_atomic_mutate_response","","Deserializes the response obtained from the registry…",null,[[["vec",3]],[["vec",3],["result",4]]]],[5,"insert","","Shorthand to create a RegistryMutation with type Insert.",null,[[],["registrymutation",3]]],[5,"update","","Shorthand to create a RegistryMutation with type Update.",null,[[],["registrymutation",3]]],[5,"delete","","Shorthand to create a RegistryMutation with type Delete.",null,[[],["registrymutation",3]]],[5,"upsert","","Shorthand to create a RegistryMutation with type Upsert.",null,[[],["registrymutation",3]]],[5,"precondition","","Shorthand to create a Precondition.",null,[[],["precondition",3]]],[0,"pb","","",null,null],[0,"v1","ic_registry_transport::pb","",null,null],[3,"RegistryError","ic_registry_transport::pb::v1","Message corresponding to an error while performing an…",null,null],[12,"code","","",1,null],[12,"reason","","The reason for the error. This is optional.",1,null],[12,"key","","The key on which the error occurred. This is optional and…",1,null],[3,"RegistryValue","","A single change made to a key in the registry.",null,null],[12,"value","","The value that was set in this mutation. If the mutation…",2,null],[12,"version","","The version at which this mutation happened.",2,null],[12,"deletion_marker","","If true, this change represents a deletion.",2,null],[3,"RegistryDelta","","A sequence of changes made to a key in the registry.",null,null],[12,"key","","",3,null],[12,"values","","",3,null],[3,"RegistryGetChangesSinceRequest","","Message to retrieve all the changes from the registry…",null,null],[12,"version","","",4,null],[3,"RegistryGetChangesSinceResponse","","Message corresponding to the response from the registry…",null,null],[12,"error","","If anything went wrong, the registry canister will set…",5,null],[12,"version","","The last version of the registry.",5,null],[12,"deltas","","A list of all the keys and all the values that change and…",5,null],[3,"RegistryGetValueRequest","","Message to retrieve a version of some registry key from…",null,null],[12,"version","","The version of the registry key to retrieve. Optional: If…",6,null],[12,"key","","The byte array corresponding to the key to retrieve from…",6,null],[3,"RegistryGetValueResponse","","Message corresponding to the response from the canister to…",null,null],[12,"error","","If anything went wrong, the registry canister will set…",7,null],[12,"version","","the version at which the value corresponding to the…",7,null],[12,"value","","The value retrieved from the registry.",7,null],[3,"RegistryGetLatestVersionResponse","","Message corresponding to the response from the canister to…",null,null],[12,"version","","the latest registry version",8,null],[3,"RegistryMutation","","A single mutation in the registry.",null,null],[12,"mutation_type","","The type of the mutation to apply to the registry. Always…",9,null],[12,"key","","The key of the entry to mutate in the registry. Always…",9,null],[12,"value","","The value to mutate in the registry. Required for insert,…",9,null],[3,"Precondition","","A precondition on the version at which the value of a…",null,null],[12,"key","","",10,null],[12,"expected_version","","The precondition is satisfied if and only is the version…",10,null],[3,"RegistryAtomicMutateRequest","","Message corresponding to a list of mutations to apply,…",null,null],[12,"mutations","","The set of mutations to apply to the registry.",11,null],[12,"preconditions","","Preconditions at the key level.",11,null],[3,"RegistryAtomicMutateResponse","","Message corresponding to the response of an atomic_mutate…",null,null],[12,"errors","","If anything went wrong, the registry canister will set…",12,null],[12,"version","","The last version of the registry.",12,null],[3,"CertifiedResponse","","Message encoding a response to any *_certified method call.",null,null],[12,"hash_tree","","The hash tree encoding both the response and the…",13,null],[12,"certificate","","The certificate obtained from the system using…",13,null],[0,"registry_error","","Nested message and enum types in `RegistryError`.",null,null],[4,"Code","ic_registry_transport::pb::v1::registry_error","",null,null],[13,"MalformedMessage","","The message had a problem like a missing field or a field…",14,null],[13,"KeyNotPresent","","The \'key\' specified on the request was not present in the…",14,null],[13,"KeyAlreadyPresent","","The \'key\' specified on the request was already present.",14,null],[13,"VersionNotLatest","","The \'version\' specified in a precondition for a mutation…",14,null],[13,"VersionBeyondLatest","","The \'version\' specified in a precondition for a mutation…",14,null],[13,"InternalError","","A generic internal error occurred in the registry.",14,null],[11,"is_valid","","Returns `true` if `value` is a variant of `Code`.",14,[[]]],[11,"from_i32","","Converts an `i32` to a `Code`, or `None` if `value` is not…",14,[[],[["option",4],["code",4]]]],[0,"registry_mutation","ic_registry_transport::pb::v1","Nested message and enum types in `RegistryMutation`.",null,null],[4,"Type","ic_registry_transport::pb::v1::registry_mutation","",null,null],[13,"Insert","","Key is expected to not exist in the registry at the…",15,null],[13,"Update","","Key is expected to exist in the registry at the current…",15,null],[13,"Delete","","Key is expected to exist in the registry at the current…",15,null],[13,"Upsert","","If the key does not exist at the current version, it will…",15,null],[11,"is_valid","","Returns `true` if `value` is a variant of `Type`.",15,[[]]],[11,"from_i32","","Converts an `i32` to a `Type`, or `None` if `value` is not…",15,[[],[["option",4],["type",4]]]],[11,"code","ic_registry_transport::pb::v1","Returns the enum value of `code`, or the default if the…",1,[[],["code",4]]],[11,"set_code","","Sets `code` to the provided enum value.",1,[[["code",4]]]],[11,"mutation_type","","Returns the enum value of `mutation_type`, or the default…",9,[[],["type",4]]],[11,"set_mutation_type","","Sets `mutation_type` to the provided enum value.",9,[[["type",4]]]],[11,"key_as_string","","Returns a string representation of the key, lossily.",9,[[],["cow",4]]],[11,"from","ic_registry_transport","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"from","ic_registry_transport::pb::v1","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"proxy_encode","","",1,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",1,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"proxy_encode","","",2,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",2,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"proxy_encode","","",3,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",3,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"proxy_encode","","",4,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",4,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"proxy_encode","","",5,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",5,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"proxy_encode","","",6,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",6,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"proxy_encode","","",7,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",7,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"proxy_encode","","",8,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",8,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"proxy_encode","","",9,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",9,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"proxy_encode","","",10,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",10,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"proxy_encode","","",11,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",11,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"proxy_encode","","",12,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",12,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"proxy_encode","","",13,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",13,[[],[["result",4],["proxydecodeerror",4]]]],[11,"from","ic_registry_transport::pb::v1::registry_error","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","ic_registry_transport::pb::v1::registry_mutation","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","ic_registry_transport","",0,[[["registryerror",3]]]],[11,"from","ic_registry_transport::pb::v1","",1,[[["error",4]]]],[11,"clone","","",1,[[],["registryerror",3]]],[11,"clone","ic_registry_transport::pb::v1::registry_error","",14,[[],["code",4]]],[11,"clone","ic_registry_transport::pb::v1","",2,[[],["registryvalue",3]]],[11,"clone","","",3,[[],["registrydelta",3]]],[11,"clone","","",4,[[],["registrygetchangessincerequest",3]]],[11,"clone","","",5,[[],["registrygetchangessinceresponse",3]]],[11,"clone","","",6,[[],["registrygetvaluerequest",3]]],[11,"clone","","",7,[[],["registrygetvalueresponse",3]]],[11,"clone","","",8,[[],["registrygetlatestversionresponse",3]]],[11,"clone","","",9,[[],["registrymutation",3]]],[11,"clone","ic_registry_transport::pb::v1::registry_mutation","",15,[[],["type",4]]],[11,"clone","ic_registry_transport::pb::v1","",10,[[],["precondition",3]]],[11,"clone","","",11,[[],["registryatomicmutaterequest",3]]],[11,"clone","","",12,[[],["registryatomicmutateresponse",3]]],[11,"clone","","",13,[[],["certifiedresponse",3]]],[11,"clone","ic_registry_transport","",0,[[],["error",4]]],[11,"default","ic_registry_transport::pb::v1","",1,[[]]],[11,"default","ic_registry_transport::pb::v1::registry_error","",14,[[],["code",4]]],[11,"default","ic_registry_transport::pb::v1","",2,[[]]],[11,"default","","",3,[[]]],[11,"default","","",4,[[]]],[11,"default","","",5,[[]]],[11,"default","","",6,[[]]],[11,"default","","",7,[[]]],[11,"default","","",8,[[]]],[11,"default","","",9,[[]]],[11,"default","ic_registry_transport::pb::v1::registry_mutation","",15,[[],["type",4]]],[11,"default","ic_registry_transport::pb::v1","",10,[[]]],[11,"default","","",11,[[]]],[11,"default","","",12,[[]]],[11,"default","","",13,[[]]],[11,"cmp","ic_registry_transport::pb::v1::registry_error","",14,[[["code",4]],["ordering",4]]],[11,"cmp","ic_registry_transport::pb::v1::registry_mutation","",15,[[["type",4]],["ordering",4]]],[11,"eq","ic_registry_transport::pb::v1","",1,[[["registryerror",3]]]],[11,"ne","","",1,[[["registryerror",3]]]],[11,"eq","ic_registry_transport::pb::v1::registry_error","",14,[[["code",4]]]],[11,"eq","ic_registry_transport::pb::v1","",2,[[["registryvalue",3]]]],[11,"ne","","",2,[[["registryvalue",3]]]],[11,"eq","","",3,[[["registrydelta",3]]]],[11,"ne","","",3,[[["registrydelta",3]]]],[11,"eq","","",4,[[["registrygetchangessincerequest",3]]]],[11,"ne","","",4,[[["registrygetchangessincerequest",3]]]],[11,"eq","","",5,[[["registrygetchangessinceresponse",3]]]],[11,"ne","","",5,[[["registrygetchangessinceresponse",3]]]],[11,"eq","","",6,[[["registrygetvaluerequest",3]]]],[11,"ne","","",6,[[["registrygetvaluerequest",3]]]],[11,"eq","","",7,[[["registrygetvalueresponse",3]]]],[11,"ne","","",7,[[["registrygetvalueresponse",3]]]],[11,"eq","","",8,[[["registrygetlatestversionresponse",3]]]],[11,"ne","","",8,[[["registrygetlatestversionresponse",3]]]],[11,"eq","","",9,[[["registrymutation",3]]]],[11,"ne","","",9,[[["registrymutation",3]]]],[11,"eq","ic_registry_transport::pb::v1::registry_mutation","",15,[[["type",4]]]],[11,"eq","ic_registry_transport::pb::v1","",10,[[["precondition",3]]]],[11,"ne","","",10,[[["precondition",3]]]],[11,"eq","","",11,[[["registryatomicmutaterequest",3]]]],[11,"ne","","",11,[[["registryatomicmutaterequest",3]]]],[11,"eq","","",12,[[["registryatomicmutateresponse",3]]]],[11,"ne","","",12,[[["registryatomicmutateresponse",3]]]],[11,"eq","","",13,[[["certifiedresponse",3]]]],[11,"ne","","",13,[[["certifiedresponse",3]]]],[11,"eq","ic_registry_transport","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"partial_cmp","ic_registry_transport::pb::v1::registry_error","",14,[[["code",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_registry_transport::pb::v1::registry_mutation","",15,[[["type",4]],[["option",4],["ordering",4]]]],[11,"fmt","ic_registry_transport::pb::v1","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_transport::pb::v1::registry_error","",14,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_transport::pb::v1","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_transport::pb::v1::registry_mutation","",15,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_transport::pb::v1","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_transport","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_transport::pb::v1","Produces a string that shows the key being mutated and the…",9,[[["formatter",3]],["result",6]]],[11,"fmt","","Produces a string that shows the keys being mutated and…",11,[[["formatter",3]],["result",6]]],[11,"fmt","ic_registry_transport","",0,[[["formatter",3]],["result",6]]],[11,"hash","ic_registry_transport::pb::v1::registry_error","",14,[[]]],[11,"hash","ic_registry_transport::pb::v1::registry_mutation","",15,[[]]],[11,"hash","ic_registry_transport","",0,[[]]],[11,"encode_raw","ic_registry_transport::pb::v1","",1,[[]]],[11,"merge_field","","",1,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"encode_raw","","",2,[[]]],[11,"merge_field","","",2,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",2,[[]]],[11,"clear","","",2,[[]]],[11,"encode_raw","","",3,[[]]],[11,"merge_field","","",3,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"encode_raw","","",4,[[]]],[11,"merge_field","","",4,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",4,[[]]],[11,"clear","","",4,[[]]],[11,"encode_raw","","",5,[[]]],[11,"merge_field","","",5,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",5,[[]]],[11,"clear","","",5,[[]]],[11,"encode_raw","","",6,[[]]],[11,"merge_field","","",6,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",6,[[]]],[11,"clear","","",6,[[]]],[11,"encode_raw","","",7,[[]]],[11,"merge_field","","",7,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",7,[[]]],[11,"clear","","",7,[[]]],[11,"encode_raw","","",8,[[]]],[11,"merge_field","","",8,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",8,[[]]],[11,"clear","","",8,[[]]],[11,"encode_raw","","",9,[[]]],[11,"merge_field","","",9,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",9,[[]]],[11,"clear","","",9,[[]]],[11,"encode_raw","","",10,[[]]],[11,"merge_field","","",10,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",10,[[]]],[11,"clear","","",10,[[]]],[11,"encode_raw","","",11,[[]]],[11,"merge_field","","",11,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",11,[[]]],[11,"clear","","",11,[[]]],[11,"encode_raw","","",12,[[]]],[11,"merge_field","","",12,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",12,[[]]],[11,"clear","","",12,[[]]],[11,"encode_raw","","",13,[[]]],[11,"merge_field","","",13,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",13,[[]]],[11,"clear","","",13,[[]]],[11,"serialize","ic_registry_transport","",0,[[],["result",4]]],[11,"deserialize","ic_registry_transport::pb::v1","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","ic_registry_transport","",0,[[],["result",4]]],[11,"_ty","ic_registry_transport::pb::v1","",9,[[],["type",4]]],[11,"id","","",9,[[],["typeid",3]]],[11,"idl_serialize","","",9,[[],["result",4]]],[11,"_ty","","",10,[[],["type",4]]],[11,"id","","",10,[[],["typeid",3]]],[11,"idl_serialize","","",10,[[],["result",4]]],[11,"_ty","","",11,[[],["type",4]]],[11,"id","","",11,[[],["typeid",3]]],[11,"idl_serialize","","",11,[[],["result",4]]]],"p":[[4,"Error"],[3,"RegistryError"],[3,"RegistryValue"],[3,"RegistryDelta"],[3,"RegistryGetChangesSinceRequest"],[3,"RegistryGetChangesSinceResponse"],[3,"RegistryGetValueRequest"],[3,"RegistryGetValueResponse"],[3,"RegistryGetLatestVersionResponse"],[3,"RegistryMutation"],[3,"Precondition"],[3,"RegistryAtomicMutateRequest"],[3,"RegistryAtomicMutateResponse"],[3,"CertifiedResponse"],[4,"Code"],[4,"Type"]]},\
"ic_release":{"doc":"","i":[[0,"error","ic_release","",null,null],[4,"ReleaseError","ic_release::error","",null,null],[13,"IoError","","A general I/O-Error",0,null],[13,"FileNotFound","","A specified file could not be found.",0,null],[13,"NonUniquePaths","","The provided paths are not unique.",0,null],[13,"InvalidReleaseDirectory","","The provided path is not a directory",0,null],[13,"InvalidFileName","","Illegal filename",0,null],[13,"KeyMissing","","The given key is missing from a `ReleaseContent`",0,null],[6,"ReleaseResult","","",null,null],[11,"io_error","","",0,[[["error",3]]]],[11,"file_not_found","","",0,[[["path",3],["asref",8]]]],[11,"file_read_err","","",0,[[["path",3],["asref",8],["error",3]]]],[11,"file_open_error","","",0,[[["path",3],["asref",8],["error",3]]]],[11,"gz_error","","",0,[[["error",3]]]],[11,"tar_error","","",0,[[["path",3],["asref",8],["error",3]]]],[11,"tar_finish_error","","",0,[[["path",3],["asref",8],["error",3]]]],[11,"untar_error","","",0,[[["path",3],["asref",8],["error",3]]]],[11,"write_error","","",0,[[["path",3],["asref",8],["error",3]]]],[11,"invalid_release_directory","","",0,[[["path",3],["asref",8]]]],[11,"release_directory_error","","",0,[[["path",3],["asref",8],["error",3]]]],[11,"invalid_file_name","","",0,[[["path",3],["asref",8]]]],[11,"path_io_error","","",0,[[["path",3],["asref",8],["error",3]]]],[11,"file_set_permissions_error","","",0,[[["pathbuf",3],["error",3]]]],[0,"release","ic_release","",null,null],[3,"ReleaseIdentifier","ic_release::release","",null,null],[12,"0","","",1,null],[3,"ReleaseContent","","The content of a release is defined by a set of named…",null,null],[3,"ReleasePackage","","A release package is a file containing the release content.",null,null],[17,"REPLICA_KEY","","",null,null],[17,"NODEMANAGER_KEY","","",null,null],[11,"from_paths","","",2,[[["path",3],["asref",8]]]],[11,"add_entry","","",2,[[["pathbuf",3]]]],[11,"pack","","",2,[[["path",3],["asref",8]],[["releaseresult",6],["releasepackage",3]]]],[11,"validate","","Provide rudimentary validation of the provided files. E.g.,",2,[[],["releaseresult",6]]],[11,"get_release_identifier","","H( concat( \\\"\\\\x0Aic-release\\\", sort [ H(key_1) · H(value_1)…",2,[[],[["releaseresult",6],["releaseidentifier",3]]]],[11,"get_file_by_key","","Return a path to the file associated with the given key,…",2,[[],[["pathbuf",3],["releaseresult",6]]]],[11,"get_node_manager_binary","","Return a path to the node manager binary, if this path…",2,[[],[["pathbuf",3],["releaseresult",6]]]],[11,"get_node_manager_hash","","Return the hash of the node manager, if it exists in the…",2,[[],["releaseresult",6]]],[11,"get_replica_binary","","Return a path to the replica binary, if this path exists",2,[[],[["pathbuf",3],["releaseresult",6]]]],[11,"from_file","","",3,[[["path",3],["asref",8]]]],[11,"unpack_in","","",3,[[["path",3],["asref",8]],[["releasecontent",3],["releaseresult",6]]]],[11,"from","ic_release::error","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","ic_release::release","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"clone","","",1,[[],["releaseidentifier",3]]],[11,"default","","",2,[[]]],[11,"cmp","","",1,[[["releaseidentifier",3]],["ordering",4]]],[11,"eq","","",1,[[["releaseidentifier",3]]]],[11,"ne","","",1,[[["releaseidentifier",3]]]],[11,"partial_cmp","","",1,[[["releaseidentifier",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["releaseidentifier",3]]]],[11,"le","","",1,[[["releaseidentifier",3]]]],[11,"gt","","",1,[[["releaseidentifier",3]]]],[11,"ge","","",1,[[["releaseidentifier",3]]]],[11,"fmt","ic_release::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_release::release","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","ic_release::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_release::release","",1,[[["formatter",3]],["result",6]]],[11,"hash","","",1,[[]]],[11,"try_from","","",2,[[["path",3]],["result",4]]]],"p":[[4,"ReleaseError"],[3,"ReleaseIdentifier"],[3,"ReleaseContent"],[3,"ReleasePackage"]]},\
"ic_replica":{"doc":"","i":[[0,"args","ic_replica","",null,null],[3,"ReplicaArgs","ic_replica::args","",null,null],[12,"print_sample_config","","Print a sample config if set",0,null],[12,"config_file","","The path to the Replica config file",0,null],[12,"config_literal","","A string representation of the Replica config",0,null],[12,"catch_up_package","","A path to a CBOR-encoded catch-up package to seed the…",0,null],[12,"replica_version","","The version of the Replica being run",0,null],[12,"nns_public_key_file","","A path to the PEM file with the public key of the NNS…",0,null],[12,"force_subnet","","Force to use the given subnet ID. This is needed to…",0,null],[0,"setup","ic_replica","",null,null],[5,"parse_args","ic_replica::setup","Parse command-line args into `ReplicaArgs`",null,[[],[["result",4],["error",3],["replicaargs",3]]]],[5,"set_replica_version","","Set the Replica version passed in via command-line",null,[[["replicalogger",6],["result",4]]]],[5,"get_catch_up_package","","Parse the catch-up package given via command-line args (if…",null,[[["replicalogger",6],["result",4]],[["cupwithoriginalprotobuf",3],["option",4]]]],[5,"get_subnet_id","","Return the subnet ID of the given node",null,[[["catchuppackage",6],["option",4],["registryclient",8],["nodeid",6],["replicalogger",6]]]],[5,"get_subnet_type","","Return the subnet type of the given subnet.",null,[[["registryclient",8],["replicalogger",6],["registryversion",6],["subnetid",6]]]],[5,"get_config_source","","Return the source from which to derive the Replica\'s config",null,[[["result",4]],["configsource",4]]],[5,"get_replica_logger","","Return a `ReplicaLogger` and its `AsyncGuard`",null,[[["config",3]]]],[5,"create_consensus_pool_dir","","Create the consensus pool directory (if none exists)",null,[[["config",3]]]],[5,"setup_crypto_registry","","",null,[[["metricsregistry",3],["option",4],["option",4],["config",3],["path",3],["replicalogger",6]]]],[5,"setup_crypto_provider","","Setup a crypto provider provided a `CryptoConfig`, a…",null,[[["metricsregistry",3],["option",4],["arc",3],["cryptoconfig",3],["replicalogger",6],["registryclient",8]],["cryptocomponent",6]]],[5,"setup_crypto_provider_with_node_id","","Similarly to `setup_crypto_provider` sets up a…",null,[[["arc",3],["cryptoconfig",3],["nodeid",6],["registryclient",8],["replicalogger",6]],["cryptocomponent",6]]],[0,"setup_p2p","ic_replica","",null,null],[5,"construct_p2p_stack","ic_replica::setup_p2p","",null,[[["cryptocomponent",6],["arc",3],["option",4],["arc",3],["nodeid",6],["config",3],["subnetconfig",3],["metricsregistry",3],["arc",3],["arc",3],["option",4],["replicalogger",6],["cupwithoriginalprotobuf",3],["transport",8],["subnettype",4],["subnetid",6],["registryclient",8]],["result",6]]],[0,"test_util","ic_replica","",null,null],[5,"setup_crypto_provider","ic_replica::test_util","",null,[[["cryptoconfig",3],["replicalogger",6],["arc",3],["registryclient",8],["nodeid",6]],["cryptocomponent",6]]],[11,"from","ic_replica::args","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"clap","","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"is_subcommand","","",0,[[]]]],"p":[[3,"ReplicaArgs"]]},\
"ic_replicated_state":{"doc":"","i":[[3,"CallContext","ic_replicated_state","Call context contains all context information related to…",null,null],[3,"CallContextManager","","Call context manager is an entity responsible for…",null,null],[3,"CyclesAccount","","Cycles account",null,null],[12,"consumed_cycles_since_replica_started","","Number of cycles consumed since the beginning of the…",0,null],[3,"CanisterQueues","","Wrapper around the induction pool (ingress and input…",null,null],[4,"CallContextAction","","The action the caller of `CallContext.on_canister_result`…",null,null],[13,"Reply","","The canister produced a reply for the request which is…",1,null],[12,"payload","ic_replicated_state::CallContextAction","",2,null],[12,"refund","","",2,null],[13,"Reject","ic_replicated_state","The canister produced a reject for the request which is…",1,null],[12,"payload","ic_replicated_state::CallContextAction","",3,null],[12,"refund","","",3,null],[13,"NoResponse","ic_replicated_state","The canister did not produce a response or a reject and…",1,null],[12,"refund","ic_replicated_state::CallContextAction","",4,null],[13,"Fail","ic_replicated_state","Message execution failed; the canister has not produced a…",1,null],[12,"error","ic_replicated_state::CallContextAction","",5,null],[12,"refund","","",5,null],[13,"NotYetResponded","ic_replicated_state","The canister did not produce a response or a reject yet…",1,null],[13,"AlreadyResponded","","The canister did not produce a response or a reject during…",1,null],[4,"CallOrigin","","",null,null],[13,"Ingress","","",6,null],[13,"CanisterUpdate","","",6,null],[13,"Query","","",6,null],[13,"CanisterQuery","","",6,null],[13,"Heartbeat","","",6,null],[4,"CyclesAccountError","","",null,null],[13,"CanisterOutOfCycles","","Canister is out of cycles.",7,null],[12,"available","ic_replicated_state::CyclesAccountError","",8,null],[12,"requested","","",8,null],[0,"canister_state","ic_replicated_state","",null,null],[3,"CanisterQueues","ic_replicated_state::canister_state","Wrapper around the induction pool (ingress and input…",null,null],[3,"SchedulerState","","State maintained by the scheduler.",null,null],[12,"last_full_execution_round","","The last full round that a canister got the chance to…",9,null],[12,"compute_allocation","","A canister\'s compute allocation. A higher compute…",9,null],[12,"accumulated_priority","","Keeps the current priority of this canister, accumulated…",9,null],[12,"query_allocation","","How much cycles is the canister allowed to spend in given…",9,null],[3,"CanisterState","","The full state of a single canister.",null,null],[12,"system_state","","See `SystemState` for documentation.",10,null],[12,"execution_state","","See `ExecutionState` for documentation.",10,null],[12,"scheduler_state","","See `SchedulerState` for documentation.",10,null],[3,"NumWasmPagesTag","","",null,null],[5,"num_bytes_from","","",null,[[["numwasmpages",6]],["numbytes",6]]],[0,"execution_state","","",null,null],[3,"EmbedderCache","ic_replicated_state::canister_state::execution_state","An arbitrary piece of data that an embedder can store…",null,null],[3,"ExportedFunctions","","A set of the functions that a Wasm module exports.",null,null],[3,"ExecutionState","","The part of the canister state that can be accessed during…",null,null],[12,"canister_root","","The path where Canister memory is located. Needs to be…",11,null],[12,"session_nonce","","Session state Nonce. If occupied, runtime is already…",11,null],[12,"wasm_binary","","The instrumented and validated Wasm module.",11,null],[12,"embedder_cache","","The an arbitrary piece of data that an embedder can store…",11,null],[12,"page_map","","The persistent heap of the module.",11,null],[12,"exported_globals","","The state of exported globals. Internal globals are not…",11,null],[12,"heap_size","","The current size of Wasm heap. It can change when canister…",11,null],[12,"exports","","A set of the functions that a Wasm module exports.",11,null],[12,"last_executed_round","","Round number at which canister executed update type…",11,null],[12,"cow_mem_mgr","","The persistent cow memory of the canister.",11,null],[12,"mapped_state","","Mapped state of the current execution",11,null],[4,"Global","","An enum representing the possible values of a global…",null,null],[13,"I32","","",12,null],[13,"I64","","",12,null],[13,"F32","","",12,null],[13,"F64","","",12,null],[11,"new","","",13,[[]]],[11,"downcast","","",13,[[],["option",4]]],[11,"type_name","","",12,[[]]],[11,"new","","",14,[[["btreeset",3],["wasmmethod",4]]]],[11,"has_update_method","","",14,[[["string",3]]]],[11,"has_query_method","","",14,[[["string",3]]]],[11,"has_system_method","","",14,[[["systemmethod",4]]]],[11,"new","","Initializes a new execution state for a canister.",11,[[["vec",3],["pathbuf",3],["wasmvalidationlimits",3]],["hypervisorresult",6]]],[11,"memory_usage","","Returns the memory currently used by the `ExecutionState`.",11,[[],["numbytes",6]]],[11,"num_wasm_globals","","Returns the number of global variables in the Wasm module.",11,[[]]],[11,"push_ingress","ic_replicated_state","Pushes an ingress message into the induction pool.",15,[[["ingress",3]]]],[11,"filter_ingress_messages","","See IngressQueue::filter_messages() for documentation",15,[[]]],[11,"push_input","","Pushes a canister-to-canister message into the induction…",15,[[["requestorresponse",4],["queueindex",6]],["result",4]]],[11,"has_input","","Returns `true` if `ingress_queue` or at least one of the…",15,[[]]],[11,"has_output","","Returns `true` if at least one output queue is not empty;…",15,[[]]],[11,"pop_input","","Extracts the next inter-canister or ingress message (in…",15,[[],[["canisterinputmessage",4],["option",4]]]],[11,"push_output_request","","Pushes a `Request` type message into the relevant output…",15,[[["request",3]],["result",4]]],[11,"push_output_response","","Pushes a `Response` type message into the relevant output…",15,[[["response",3]]]],[11,"output_into_iter","","Returns an iterator that consumes all output messages.",15,[[["canisterid",3]]]],[0,"system_state","ic_replicated_state::canister_state","",null,null],[3,"CallContext","ic_replicated_state::canister_state::system_state","Call context contains all context information related to…",null,null],[3,"CallContextManager","","Call context manager is an entity responsible for…",null,null],[3,"CyclesAccount","","Cycles account",null,null],[12,"consumed_cycles_since_replica_started","","Number of cycles consumed since the beginning of the…",0,null],[3,"CanisterMetrics","","Canister-specific metrics on scheduling, maintained by the…",null,null],[12,"scheduled_as_first","","",16,null],[12,"skipped_round_due_to_no_messages","","",16,null],[12,"executed","","",16,null],[12,"interruped_during_execution","","",16,null],[12,"consumed_cycles_since_replica_started","","",16,null],[3,"SystemState","","State that is controlled and owned by the system (IC).",null,null],[12,"controller","","",17,null],[12,"canister_id","","",17,null],[12,"queues","","",17,null],[12,"stable_memory_size","","",17,null],[12,"stable_memory","","",17,null],[12,"cycles_account","","",17,null],[12,"memory_allocation","","The canister\'s memory allocation. A canister is allowed to…",17,null],[12,"freeze_threshold","","",17,null],[12,"status","","The status of the canister: Running, Stopping, or Stopped.…",17,null],[12,"certified_data","","Certified data blob allows canisters to certify parts of…",17,null],[12,"canister_metrics","","",17,null],[4,"CallContextAction","","The action the caller of `CallContext.on_canister_result`…",null,null],[13,"Reply","","The canister produced a reply for the request which is…",1,null],[12,"payload","ic_replicated_state::canister_state::system_state::CallContextAction","",2,null],[12,"refund","","",2,null],[13,"Reject","ic_replicated_state::canister_state::system_state","The canister produced a reject for the request which is…",1,null],[12,"payload","ic_replicated_state::canister_state::system_state::CallContextAction","",3,null],[12,"refund","","",3,null],[13,"NoResponse","ic_replicated_state::canister_state::system_state","The canister did not produce a response or a reject and…",1,null],[12,"refund","ic_replicated_state::canister_state::system_state::CallContextAction","",4,null],[13,"Fail","ic_replicated_state::canister_state::system_state","Message execution failed; the canister has not produced a…",1,null],[12,"error","ic_replicated_state::canister_state::system_state::CallContextAction","",5,null],[12,"refund","","",5,null],[13,"NotYetResponded","ic_replicated_state::canister_state::system_state","The canister did not produce a response or a reject yet…",1,null],[13,"AlreadyResponded","","The canister did not produce a response or a reject during…",1,null],[4,"CallOrigin","","",null,null],[13,"Ingress","","",6,null],[13,"CanisterUpdate","","",6,null],[13,"Query","","",6,null],[13,"CanisterQuery","","",6,null],[13,"Heartbeat","","",6,null],[4,"CyclesAccountError","","",null,null],[13,"CanisterOutOfCycles","","Canister is out of cycles.",7,null],[12,"available","ic_replicated_state::canister_state::system_state::CyclesAccountError","",8,null],[12,"requested","","",8,null],[4,"CanisterStatus","ic_replicated_state::canister_state::system_state","A wrapper around the different canister statuses.",null,null],[13,"Running","","",18,null],[12,"call_context_manager","ic_replicated_state::canister_state::system_state::CanisterStatus","",19,null],[13,"Stopping","ic_replicated_state::canister_state::system_state","",18,null],[12,"call_context_manager","ic_replicated_state::canister_state::system_state::CanisterStatus","",20,null],[12,"stop_contexts","","Info about the messages that requested the canister to…",20,null],[13,"Stopped","ic_replicated_state::canister_state::system_state","",18,null],[11,"new","ic_replicated_state","",21,[[["callorigin",4],["cycles",3]]]],[11,"available_cycles","","Returns the available amount of cycles in this call context.",21,[[],["cycles",3]]],[11,"withdraw_cycles","","Updates the available cycles in the call context based on…",21,[[["cycles",3]],[["result",4],["callcontexterror",4]]]],[11,"call_origin","","",21,[[],["callorigin",4]]],[11,"is_deleted","","",21,[[]]],[11,"mark_deleted","","Mark the call context as deleted.",21,[[]]],[11,"has_responded","","",21,[[]]],[11,"mark_responded","","Mark the call context as responded.",21,[[]]],[11,"new_call_context","","Must be used to create a new call context at the beginning…",22,[[["callorigin",4],["cycles",3]],["callcontextid",6]]],[11,"call_contexts","","Returns the currently open `CallContext`s maintained by…",22,[[],["btreemap",3]]],[11,"call_contexts_mut","","",22,[[],["btreemap",3]]],[11,"call_context","","Returns a reference to the call context with…",22,[[["callcontextid",6]],[["option",4],["callcontext",3]]]],[11,"call_context_mut","","Returns a mutable reference to the call context with…",22,[[["callcontextid",6]],[["option",4],["callcontext",3]]]],[11,"callbacks","","Returns the `Callback`s maintained by this…",22,[[],["btreemap",3]]],[11,"on_canister_result","","Accepts a canister result and produces an action that…",22,[[["result",4],["hypervisorerror",4],["option",4],["callcontextid",6]],["callcontextaction",4]]],[11,"register_callback","","Registers a callback for an outgoing call.",22,[[["callback",3]],["callbackid",6]]],[11,"peek_callback","","Returns a copy of the callback for the given callback_id",22,[[["callbackid",6]],[["callback",3],["option",4]]]],[11,"unregister_callback","","If we get a response for one of the outstanding calls, we…",22,[[["callbackid",6]],[["option",4],["callback",3]]]],[11,"unregister_call_context","","",22,[[["callcontextid",6]],[["callcontext",3],["option",4]]]],[11,"call_origin","","Returns the call origin, which is either the message id of…",22,[[["callcontextid",6]],[["callorigin",4],["option",4]]]],[11,"call_responded","","Tells if a call context was already responded or not.",22,[[["callcontextid",6]],["option",4]]],[11,"outstanding_calls","","",22,[[["callcontextid",6]]]],[11,"new","","",0,[[["cycles",3]]]],[11,"cycles_balance","","Returns the current cycles balance of the canister.",0,[[],["cycles",3]]],[11,"withdraw_with_threshold","","Subtracts `cycles` worth of cycles from the canister\'s…",0,[[["cycles",3]],[["result",4],["cyclesaccounterror",4]]]],[11,"consume_with_threshold","","Subtracts and consumes the cycles. This call should be…",0,[[["cycles",3]],[["result",4],["cyclesaccounterror",4]]]],[11,"add_cycles","","Adds `cycles` to the canister\'s balance.",0,[[["cycles",3]]]],[11,"refund_cycles","","",0,[[["cycles",3]]]],[11,"new_running","ic_replicated_state::canister_state::system_state","",18,[[]]],[11,"new_running","","",17,[[["canisterid",3],["principalid",3],["cycles",3],["numseconds",6]]]],[11,"new_stopping","","",17,[[["canisterid",3],["principalid",3],["cycles",3],["numseconds",6]]]],[11,"new_stopped","","",17,[[["canisterid",3],["principalid",3],["cycles",3],["numseconds",6]]]],[11,"new","","",17,[[["canisterstatus",4],["canisterid",3],["principalid",3],["cycles",3],["numseconds",6]]]],[11,"new_for_start","","Create a SystemState only having a canister_id -- this is…",17,[[["canisterid",3]]]],[11,"canister_id","","",17,[[],["canisterid",3]]],[11,"controller","","",17,[[],["principalid",3]]],[11,"call_context_manager","","",17,[[],[["option",4],["callcontextmanager",3]]]],[11,"call_context_manager_mut","","",17,[[],[["callcontextmanager",3],["option",4]]]],[11,"push_output_request","","Pushes a `Request` type message into the relevant output…",17,[[["request",3]],["result",4]]],[11,"push_output_response","","Pushes a `Response` type message into the relevant output…",17,[[["response",3]]]],[11,"pop_input","","Extracts the next inter-canister or ingress message (in…",17,[[],[["canisterinputmessage",4],["option",4]]]],[11,"has_input","","Returns true if there are messages in the input queues,…",17,[[]]],[11,"push_input","","Pushes a `RequestOrResponse` into the induction pool.",17,[[["requestorresponse",4],["queueindex",6]],["result",4]]],[11,"queues_mut","","",17,[[],["canisterqueues",3]]],[11,"ready_to_stop","","Returns a boolean whether the system state is ready to be…",17,[[]]],[11,"status_string","","",17,[[]]],[11,"filter_ingress_messages","","See IngressQueue::filter_messages() for documentation",17,[[]]],[11,"memory_usage","","Returns the memory that is currently used by the…",17,[[],["numbytes",6]]],[11,"add_stop_context","","",17,[[["stopcanistercontext",4]]]],[11,"clear_stable_memory","","Clears stable memory of this canister.",17,[[]]],[0,"testing","ic_replicated_state::canister_state","",null,null],[8,"CanisterQueuesTesting","ic_replicated_state::canister_state::testing","Exposes public testing-only `CanisterQueues` methods to be…",null,null],[10,"ingress_queue_size","","Returns the number of messages in `ingress_queue`.",23,[[]]],[10,"pop_canister_output","","Pops the next message from the output queue associated…",23,[[["canisterid",3]],["option",4]]],[10,"output_queues_len","","Returns the number of output queues, empty or not.",23,[[]]],[10,"output_message_count","","Returns the total number of messages in the output queues.",23,[[]]],[8,"CanisterStateTesting","","Exposes public testing-only `CanisterState` methods to be…",null,null],[10,"ingress_queue_size","","Returns the number of messages in the ingress queue.",24,[[]]],[10,"pop_canister_output","","Pops the next message from the output queue associated…",24,[[["canisterid",3]],["option",4]]],[10,"output_queues_len","","Returns the number of output queues, empty or not.",24,[[]]],[6,"NumWasmPages","ic_replicated_state::canister_state","Count of number of Wasm Pages (which can be of different…",null,null],[6,"SessionNonce","","A session is represented by an array of bytes and a…",null,null],[17,"QUEUE_INDEX_NONE","","\\\"None\\\" queue index used internally by Message Routing for…",null,null],[11,"new","","",10,[[["option",4],["systemstate",3],["executionstate",3],["schedulerstate",3]]]],[11,"canister_id","","",10,[[],["canisterid",3]]],[11,"controller","","",10,[[],["principalid",3]]],[11,"push_input","","See `SystemState::push_input` for documentation.",10,[[["requestorresponse",4],["queueindex",6]],["result",4]]],[11,"pop_input","","See `SystemState::pop_input` for documentation.",10,[[],[["canisterinputmessage",4],["option",4]]]],[11,"has_input","","See `SystemState::has_input` for documentation.",10,[[]]],[11,"has_output","","Returns true if there is at least one message in the…",10,[[]]],[11,"push_output_request","","See `SystemState::push_output_request` for documentation.",10,[[["request",3]],["result",4]]],[11,"push_output_response","","See `SystemState::push_output_response` for documentation.",10,[[["response",3]]]],[11,"push_ingress","","Unconditionally pushes an ingress message into the input…",10,[[["ingress",3]]]],[11,"output_into_iter","","See `CanisterQueues::output_into_iter` for documentation.",10,[[]]],[11,"into_parts","","",10,[[]]],[11,"from_parts","","",10,[[["option",4],["systemstate",3],["executionstate",3],["schedulerstate",3]]]],[11,"memory_usage","","The amount of memory currently being used by the canister.",10,[[],["numbytes",6]]],[11,"memory_allocation","","Returns the current memory allocation of the canister in…",10,[[],[["numbytes",6],["option",4]]]],[11,"compute_allocation","","Returns the current compute allocation for the canister.",10,[[],["computeallocation",3]]],[11,"exports_update_method","","Returns true if the canister contains an exported update…",10,[[["string",3]]]],[11,"exports_query_method","","Returns true if the canister contains an exported query…",10,[[["string",3]]]],[11,"exports_system_method","","Returns true if the canister contains an exported system…",10,[[["systemmethod",4]]]],[11,"num_wasm_globals","","Returns the number of global variables in the Wasm module.",10,[[]]],[11,"status","","",10,[[],["canisterstatustype",4]]],[0,"metadata_state","ic_replicated_state","",null,null],[3,"SystemMetadata","ic_replicated_state::metadata_state","Replicated system metadata. Used primarily for…",null,null],[12,"ingress_history","","History of ingress messages as they traversed through the…",25,null],[12,"streams","","CrossNet stream state indexed by the destination subnet id.",25,null],[12,"generated_id_counter","","A counter used for generating new canister ids. Used for…",25,null],[12,"prev_state_hash","","The hash of the previous partial canonical state. The…",25,null],[12,"batch_time","","The Consensus-determined time this batch was created.",25,null],[12,"network_topology","","",25,null],[12,"own_subnet_id","","",25,null],[12,"own_subnet_type","","",25,null],[12,"subnet_call_context_manager","","Asynchronously handled subnet messages.",25,null],[12,"state_sync_version","","The version of StateSync protocol that should be used to…",25,null],[12,"certification_version","","The version of certification procedure that should be used…",25,null],[12,"heap_delta_estimate","","When canisters execute and modify their heap, we track the…",25,null],[3,"NetworkTopology","","",null,null],[12,"subnets","","",26,null],[12,"routing_table","","",26,null],[12,"nns_subnet_id","","",26,null],[3,"SubnetTopology","","",null,null],[12,"public_key","","The public key of the subnet (a DER-encoded BLS key, see…",27,null],[12,"nodes","","",27,null],[12,"subnet_type","","",27,null],[3,"NodeTopology","","",null,null],[12,"ip_address","","",28,null],[12,"http_port","","",28,null],[3,"SubnetCallContextManager","","",null,null],[12,"contexts","","",29,null],[3,"Stream","","Stream is the state of bi-directional communication…",null,null],[12,"messages","","",30,null],[12,"signals_end","","Index of the next expected reverse stream message.",30,null],[3,"IngressHistoryState","","State associated with the history of statuses of ingress…",null,null],[4,"SubnetCallContext","","",null,null],[13,"SetupInitialDKGContext","","",31,null],[12,"request","ic_replicated_state::metadata_state::SubnetCallContext","",32,null],[12,"nodes_in_target_subnet","","",32,null],[12,"target_id","","",32,null],[12,"registry_version","","",32,null],[6,"Streams","ic_replicated_state::metadata_state","",null,null],[11,"new","","Creates a new empty system metadata state.",25,[[["subnetid",6],["subnettype",4]]]],[11,"time","","",25,[[],["time",3]]],[11,"duration_between_batches","","Returns the difference in time between blocks. If the time…",25,[[["time",3]],["duration",3]]],[11,"push","","",29,[[["subnetcallcontext",4]]]],[11,"slice","","Creates a slice starting from index `from` and containing…",30,[[["option",4],["streamindex",6]],["streamslice",3]]],[11,"header","","Creates a header for this stream.",30,[[],["streamheader",3]]],[11,"new","","",33,[[]]],[11,"insert","","Inserts a new entry in the ingress history.",33,[[["ingressstatus",4],["time",3],["messageid",3]]]],[11,"statuses","","Returns an iterator over response statuses, sorted…",33,[[]]],[11,"pruning_times","","Returns an iterator over pruning times statuses, sorted…",33,[[]]],[11,"get","","Retrieves an entry from the ingress history given a…",33,[[["messageid",3]],[["ingressstatus",4],["option",4]]]],[11,"len","","Returns the number of statuses kept in the ingress history.",33,[[]]],[11,"is_empty","","Returns true if the ingress history is empty.",33,[[]]],[11,"prune","","Removes ingress history entries that are associated with a…",33,[[["time",3]]]],[0,"page_map","ic_replicated_state","",null,null],[3,"PAGE_SIZE","ic_replicated_state::page_map","Size of an OS memory page in bytes.",null,null],[3,"PageIndexTag","","",null,null],[3,"TrackedPage","","Tracked page is ref-counted immutable memory page.",null,null],[3,"PageDelta","","`PageDelta` represents a changeset of the module heap.",null,null],[3,"PageMap","","PageMap is a data structure that represents an image of a…",null,null],[3,"Buffer","","Buffer provides a file-like interface to a PageMap.",null,null],[4,"PersistenceError","","Errors that can happen when one saves or loads a PageMap.",null,null],[13,"FileSystemError","","I/O error while interacting with the filesystem.",34,null],[12,"path","ic_replicated_state::page_map::PersistenceError","",35,null],[12,"context","","",35,null],[12,"internal_error","","",35,null],[13,"MmapError","ic_replicated_state::page_map","Error trying to memory map a file.",34,null],[12,"path","ic_replicated_state::page_map::PersistenceError","",36,null],[12,"len","","",36,null],[12,"internal_error","","",36,null],[13,"InvalidHeapFile","ic_replicated_state::page_map","File is not a multiple of the page size.",34,null],[12,"path","ic_replicated_state::page_map::PersistenceError","",37,null],[12,"file_size","","",37,null],[12,"page_size","","",37,null],[13,"BadPageSize","ic_replicated_state::page_map","(Slice) size is not equal to page size.",34,null],[12,"expected","ic_replicated_state::page_map::PersistenceError","",38,null],[12,"actual","","",38,null],[5,"allocate_pages","ic_replicated_state::page_map","Makes tracked copies of the provided pages. The pages will…",null,[[],[["vec",3],["trackedpage",3]]]],[5,"allocated_pages_count","","Returns the total number of tracked pages allocated at the…",null,[[]]],[0,"int_map","","This module provides an implementation of a persistent map…",null,null],[3,"IntMap","ic_replicated_state::page_map::int_map","Purely functional persistent sorted map with an integer key.",null,null],[3,"IntMapIter","","Iterates over an IntMap, visiting keys in sorted order.",null,null],[11,"new","","Creates a new empty map.",39,[[]]],[11,"get","","Looks up a value by integer key.",39,[[],["option",4]]],[11,"insert","","Inserts a new entry into this map.",39,[[]]],[11,"union","","Unions two maps, preferring entries from self in case of a…",39,[[]]],[11,"iter","","Returns an iterator over key-value pairs. The keys are…",39,[[],["intmapiter",3]]],[11,"len","","Returns the number of entries in this map.",39,[[]]],[11,"is_empty","","Returns true if this map is empty.",39,[[]]],[6,"PageIndex","ic_replicated_state::page_map","0-based index of the host virtual memory page (i.e. not…",null,null],[11,"contents","","Returns the contents of the page. The length of the slice…",40,[[]]],[11,"is_empty","","Returns true if the delta doesn\'t contain any pages.",41,[[]]],[11,"len","","Returns the number of pages in the delta.",41,[[]]],[11,"get_page","","Gets content of the page at the specified index.",41,[[["pageindex",6]],["option",4]]],[11,"update","","Modifies this delta in-place by applying all the entries…",41,[[["pagedelta",3]]]],[11,"extend","","Unions two page deltas into a single delta. If both deltas…",41,[[["pagedelta",3]]]],[11,"iter","","Enumerates all the pages in this delta.",41,[[]]],[11,"persist","","Persists this delta to the specified destination.",41,[[["path",3]],[["persistenceerror",4],["result",4]]]],[11,"persist_and_flush","","Persists this delta to the specified destination and…",41,[[["path",3]],[["persistenceerror",4],["result",4]]]],[11,"is_invalid_heap_file","","",34,[[]]],[11,"new","","Creates a new page map that always returns zeroed pages.",42,[[]]],[11,"open","","Creates a page map backed by the provided heap file.",42,[[["path",3]],[["result",4],["persistenceerror",4]]]],[11,"update","","Modifies this page map by appending the given delta to it.",42,[[["pagedelta",3]]]],[11,"has_deltas","","Returns true if this page map has pages stored only in…",42,[[]]],[11,"persist_delta","","Persists the heap delta contained in this page map to the…",42,[[["path",3]],[["persistenceerror",4],["result",4]]]],[11,"persist_and_flush_delta","","Persists the heap delta contained in this page map to the…",42,[[["path",3]],[["persistenceerror",4],["result",4]]]],[11,"take_round_delta","","Extracts the delta accumulated since the beginning of the…",42,[[],["pagedelta",3]]],[11,"host_pages_iter","","Returns the iterator over host pages managed by this…",42,[[]]],[11,"get_page","","Returns the page with the specified `page_index`.",42,[[["pageindex",6]]]],[11,"strip_delta","","Removes the page delta from this page map.",42,[[],["pagedelta",3]]],[11,"num_host_pages","","Returns the length of the modified prefix in host pages.",42,[[]]],[11,"new","","Constructs a new buffer backed by the specified page map.",43,[[["pagemap",3]]]],[11,"read","","Reads the contents of this buffer at the specified offset…",43,[[]]],[11,"write","","Overwrites the contents of this buffer at the specified…",43,[[]]],[11,"into_page_map","","Consumes this buffer and converts it back into a page map.",43,[[],["pagemap",3]]],[0,"replicated_state","ic_replicated_state","",null,null],[3,"ReplicatedState","ic_replicated_state::replicated_state","ReplicatedState is the deterministic replicated state of…",null,null],[12,"canister_states","","States of all canisters, indexed by canister ids.",44,null],[12,"metadata","","Deterministic processing metadata.",44,null],[12,"subnet_queues","","Queues for holding messages sent/received by the subnet.",44,null],[12,"consensus_queue","","Queue for holding responses arriving from Consensus.",44,null],[12,"root","","",44,null],[4,"StateError","","",null,null],[13,"CanisterNotFound","","Message enqueuing failed due to no matching canister ID.",45,null],[13,"QueueFull","","Message enqueuing failed due to full in/out queue.",45,null],[12,"capacity","ic_replicated_state::replicated_state::StateError","",46,null],[13,"CanisterStopped","ic_replicated_state::replicated_state","Canister is stopped, not accepting any messages.",45,null],[13,"CanisterStopping","","Canister is stopping, only accepting responses.",45,null],[13,"CanisterOutOfCycles","","Canister is out of cycles.",45,null],[12,"canister_id","ic_replicated_state::replicated_state::StateError","",47,null],[12,"available","","",47,null],[12,"requested","","",47,null],[13,"UnknownSubnetMethod","ic_replicated_state::replicated_state","Message enqueuing failed due to calling an unknown subnet…",45,null],[13,"InvalidSubnetPayload","","Message enqueuing failed due to calling a subnet method…",45,null],[17,"LABEL_VALUE_CANISTER_NOT_FOUND","","",null,null],[17,"LABEL_VALUE_QUEUE_FULL","","",null,null],[17,"LABEL_VALUE_CANISTER_STOPPED","","",null,null],[17,"LABEL_VALUE_CANISTER_STOPPING","","",null,null],[17,"LABEL_VALUE_CANISTER_OUT_OF_CYCLES","","",null,null],[17,"LABEL_VALUE_UNKNOWN_SUBNET_METHOD","","",null,null],[17,"LABEL_VALUE_INVALID_SUBNET_PAYLOAD","","",null,null],[11,"to_label_value","","Returns a string representation of the `StateError`…",45,[[]]],[11,"new_rooted_at","","Creates a new empty node state.",44,[[["subnetid",6],["pathbuf",3],["subnettype",4]],["replicatedstate",3]]],[11,"path","","",44,[[],["path",3]]],[11,"canister_state","","",44,[[["canisterid",3]],[["option",4],["canisterstate",3]]]],[11,"canister_state_mut","","",44,[[["canisterid",3]],[["option",4],["canisterstate",3]]]],[11,"take_canister_state","","",44,[[["canisterid",3]],[["canisterstate",3],["option",4]]]],[11,"take_canister_states","","",44,[[],[["canisterstate",3],["canisterid",3],["btreemap",3]]]],[11,"put_canister_state","","Insert the canister state into the replicated state. If a…",44,[[["canisterstate",3]]]],[11,"put_canister_states","","",44,[[["canisterstate",3],["canisterid",3],["btreemap",3]]]],[11,"canisters_iter","","Returns an iterator over canister states, ordered by…",44,[[],[["canisterstate",3],["values",3],["canisterid",3]]]],[11,"canisters_iter_mut","","Returns a mutable iterator over canister states, ordered…",44,[[],[["valuesmut",3],["canisterid",3],["canisterstate",3]]]],[11,"system_metadata","","",44,[[],["systemmetadata",3]]],[11,"set_system_metadata","","",44,[[["systemmetadata",3]]]],[11,"get_ingress_status","","",44,[[["messageid",3]],["ingressstatus",4]]],[11,"get_ingress_history","","",44,[[],["ingresshistorystate",3]]],[11,"set_ingress_status","","",44,[[["ingressstatus",4],["messageid",3]]]],[11,"prune_ingress_history","","",44,[[]]],[11,"take_streams","","Removes the Streams from this ReplicatedState.",44,[[],["streams",6]]],[11,"put_streams","","Atomically updates streams to the provided ones.",44,[[["streams",6]]]],[11,"streams","","Returns a reference to all streams.",44,[[],["streams",6]]],[11,"subnets_with_available_streams","","Returns all subnets for which a stream is available.",44,[[],[["subnetid",6],["vec",3]]]],[11,"get_stream","","Retrieves a reference to the stream from this subnet to…",44,[[["subnetid",6]],[["option",4],["stream",3]]]],[11,"get_mut_stream","","Retrieves a mutable reference to the stream from this…",44,[[["subnetid",6]],[["option",4],["stream",3]]]],[11,"modify_streams","","",44,[[["fnonce",8]]]],[11,"total_compute_allocation","","Returns the sum of reserved compute allocations of all…",44,[[]]],[11,"total_memory_allocation_used","","",44,[[],["numbytes",6]]],[11,"push_input","","Pushes a `RequestOrResponse` into the induction pool. The…",44,[[["requestorresponse",4],["queueindex",6]],["result",4]]],[11,"time","","",44,[[],["time",3]]],[11,"induct_messages_on_same_subnet","","Iterates over all canisters on the subnet, checking if a…",44,[[["replicalogger",6]]]],[0,"stable_memory","ic_replicated_state","",null,null],[3,"StableMemory","ic_replicated_state::stable_memory","An implementation of stable memory",null,null],[4,"StableMemoryError","","",null,null],[13,"StableMemoryOutOfBounds","","Attempting to access stable memory beyond its allocated…",48,null],[13,"HeapOutOfBounds","","Attempting to access the heap beyond its allocated bounds.",48,null],[11,"from_page_map","","Creates a flat stable memory from a page map representation.",49,[[["pagemap",3],["numwasmpages",6]]]],[11,"page_count","","Returns the current size of the stable memory in…",49,[[]]],[11,"grow","","Tries to grow the memory by `additional_pages` more pages.",49,[[]]],[11,"read","","Copies the data referred to by `offset`/`size` out of the…",49,[[],[["stablememoryerror",4],["result",4]]]],[11,"write","","Copies the data referred to by `src`/`size` out of the…",49,[[],[["stablememoryerror",4],["result",4]]]],[11,"clear","","Clears everything in stable memory, including page…",49,[[]]],[11,"as_bytes","","",49,[[]]],[0,"testing","ic_replicated_state","",null,null],[8,"CanisterQueuesTesting","ic_replicated_state::testing","Exposes public testing-only `CanisterQueues` methods to be…",null,null],[10,"ingress_queue_size","","Returns the number of messages in `ingress_queue`.",23,[[]]],[10,"pop_canister_output","","Pops the next message from the output queue associated…",23,[[["canisterid",3]],["option",4]]],[10,"output_queues_len","","Returns the number of output queues, empty or not.",23,[[]]],[10,"output_message_count","","Returns the total number of messages in the output queues.",23,[[]]],[11,"from","ic_replicated_state","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"erased_serialize","","",21,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",21,[[]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"erased_serialize","","",22,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",22,[[]]],[11,"init","","",22,[[]]],[11,"deref","","",22,[[]]],[11,"deref_mut","","",22,[[]]],[11,"drop","","",22,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"erased_serialize","","",15,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",15,[[]]],[11,"init","","",15,[[]]],[11,"deref","","",15,[[]]],[11,"deref_mut","","",15,[[]]],[11,"drop","","",15,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"equivalent","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"equivalent","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","ic_replicated_state::canister_state","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"init","","",50,[[]]],[11,"deref","","",50,[[]]],[11,"deref_mut","","",50,[[]]],[11,"drop","","",50,[[]]],[11,"from","ic_replicated_state::canister_state::execution_state","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"erased_serialize","","",14,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",14,[[]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"erased_serialize","","",12,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"init","","",12,[[]]],[11,"deref","","",12,[[]]],[11,"deref_mut","","",12,[[]]],[11,"drop","","",12,[[]]],[11,"from","ic_replicated_state::canister_state::system_state","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"init","","",16,[[]]],[11,"deref","","",16,[[]]],[11,"deref_mut","","",16,[[]]],[11,"drop","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"init","","",17,[[]]],[11,"deref","","",17,[[]]],[11,"deref_mut","","",17,[[]]],[11,"drop","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"erased_serialize","","",18,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"init","","",18,[[]]],[11,"deref","","",18,[[]]],[11,"deref_mut","","",18,[[]]],[11,"drop","","",18,[[]]],[11,"from","ic_replicated_state::metadata_state","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"erased_serialize","","",25,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",25,[[]]],[11,"init","","",25,[[]]],[11,"deref","","",25,[[]]],[11,"deref_mut","","",25,[[]]],[11,"drop","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"erased_serialize","","",26,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",26,[[]]],[11,"init","","",26,[[]]],[11,"deref","","",26,[[]]],[11,"deref_mut","","",26,[[]]],[11,"drop","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"erased_serialize","","",27,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",27,[[]]],[11,"init","","",27,[[]]],[11,"deref","","",27,[[]]],[11,"deref_mut","","",27,[[]]],[11,"drop","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"erased_serialize","","",28,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",28,[[]]],[11,"init","","",28,[[]]],[11,"deref","","",28,[[]]],[11,"deref_mut","","",28,[[]]],[11,"drop","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"erased_serialize","","",29,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",29,[[]]],[11,"init","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"deref_mut","","",29,[[]]],[11,"drop","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"erased_serialize","","",30,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",30,[[]]],[11,"init","","",30,[[]]],[11,"deref","","",30,[[]]],[11,"deref_mut","","",30,[[]]],[11,"drop","","",30,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"erased_serialize","","",33,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",33,[[]]],[11,"init","","",33,[[]]],[11,"deref","","",33,[[]]],[11,"deref_mut","","",33,[[]]],[11,"drop","","",33,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"erased_serialize","","",31,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",31,[[]]],[11,"init","","",31,[[]]],[11,"deref","","",31,[[]]],[11,"deref_mut","","",31,[[]]],[11,"drop","","",31,[[]]],[11,"from","ic_replicated_state::page_map","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"init","","",51,[[]]],[11,"deref","","",51,[[]]],[11,"deref_mut","","",51,[[]]],[11,"drop","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"init","","",52,[[]]],[11,"deref","","",52,[[]]],[11,"deref_mut","","",52,[[]]],[11,"drop","","",52,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"init","","",40,[[]]],[11,"deref","","",40,[[]]],[11,"deref_mut","","",40,[[]]],[11,"drop","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"init","","",41,[[]]],[11,"deref","","",41,[[]]],[11,"deref_mut","","",41,[[]]],[11,"drop","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"equivalent","","",42,[[]]],[11,"init","","",42,[[]]],[11,"deref","","",42,[[]]],[11,"deref_mut","","",42,[[]]],[11,"drop","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"init","","",43,[[]]],[11,"deref","","",43,[[]]],[11,"deref_mut","","",43,[[]]],[11,"drop","","",43,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"to_string","","",34,[[],["string",3]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"equivalent","","",34,[[]]],[11,"init","","",34,[[]]],[11,"deref","","",34,[[]]],[11,"deref_mut","","",34,[[]]],[11,"drop","","",34,[[]]],[11,"from","ic_replicated_state::page_map::int_map","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"init","","",39,[[]]],[11,"deref","","",39,[[]]],[11,"deref_mut","","",39,[[]]],[11,"drop","","",39,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"into_iter","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"par_bridge","","",53,[[],["iterbridge",3]]],[11,"init","","",53,[[]]],[11,"deref","","",53,[[]]],[11,"deref_mut","","",53,[[]]],[11,"drop","","",53,[[]]],[11,"from","ic_replicated_state::replicated_state","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"init","","",44,[[]]],[11,"deref","","",44,[[]]],[11,"deref_mut","","",44,[[]]],[11,"drop","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"erased_serialize","","",45,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",45,[[]]],[11,"init","","",45,[[]]],[11,"deref","","",45,[[]]],[11,"deref_mut","","",45,[[]]],[11,"drop","","",45,[[]]],[11,"from","ic_replicated_state::stable_memory","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"erased_serialize","","",49,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"equivalent","","",49,[[]]],[11,"init","","",49,[[]]],[11,"deref","","",49,[[]]],[11,"deref_mut","","",49,[[]]],[11,"drop","","",49,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"erased_serialize","","",48,[[["serializer",8]],[["error",3],["result",4],["ok",3]]]],[11,"init","","",48,[[]]],[11,"deref","","",48,[[]]],[11,"deref_mut","","",48,[[]]],[11,"drop","","",48,[[]]],[11,"initialize","ic_replicated_state::page_map","",51,[[["page_size",3]]]],[11,"deref","","",51,[[]]],[11,"ingress_queue_size","ic_replicated_state","",15,[[]]],[11,"pop_canister_output","","",15,[[["canisterid",3]],["option",4]]],[11,"output_queues_len","","",15,[[]]],[11,"output_message_count","","",15,[[]]],[11,"ingress_queue_size","ic_replicated_state::canister_state","",10,[[]]],[11,"pop_canister_output","","",10,[[["canisterid",3]],["option",4]]],[11,"output_queues_len","","",10,[[]]],[11,"from","ic_replicated_state","",6,[[["requestoringress",4]]]],[11,"from","","",0,[[["cyclesaccount",3]]]],[11,"from","ic_replicated_state::page_map","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","ic_replicated_state::metadata_state","",30,[[],["streamslice",3]]],[11,"next","ic_replicated_state::page_map::int_map","",53,[[],["option",4]]],[11,"clone","ic_replicated_state::canister_state::execution_state","",13,[[],["embeddercache",3]]],[11,"clone","","",12,[[],["global",4]]],[11,"clone","","",14,[[],["exportedfunctions",3]]],[11,"clone","","",11,[[],["executionstate",3]]],[11,"clone","ic_replicated_state","",15,[[],["canisterqueues",3]]],[11,"clone","","",21,[[],["callcontext",3]]],[11,"clone","","",1,[[],["callcontextaction",4]]],[11,"clone","","",22,[[],["callcontextmanager",3]]],[11,"clone","","",6,[[],["callorigin",4]]],[11,"clone","","",7,[[],["cyclesaccounterror",4]]],[11,"clone","","",0,[[],["cyclesaccount",3]]],[11,"clone","ic_replicated_state::canister_state::system_state","",16,[[],["canistermetrics",3]]],[11,"clone","","",17,[[],["systemstate",3]]],[11,"clone","","",18,[[],["canisterstatus",4]]],[11,"clone","ic_replicated_state::canister_state","",9,[[],["schedulerstate",3]]],[11,"clone","","",10,[[],["canisterstate",3]]],[11,"clone","ic_replicated_state::metadata_state","",25,[[],["systemmetadata",3]]],[11,"clone","","",26,[[],["networktopology",3]]],[11,"clone","","",27,[[],["subnettopology",3]]],[11,"clone","","",28,[[],["nodetopology",3]]],[11,"clone","","",29,[[],["subnetcallcontextmanager",3]]],[11,"clone","","",31,[[],["subnetcallcontext",4]]],[11,"clone","","",30,[[],["stream",3]]],[11,"clone","","",33,[[],["ingresshistorystate",3]]],[11,"clone","ic_replicated_state::page_map::int_map","",39,[[],["intmap",3]]],[11,"clone","ic_replicated_state::page_map","",40,[[],["trackedpage",3]]],[11,"clone","","",41,[[],["pagedelta",3]]],[11,"clone","","",34,[[],["persistenceerror",4]]],[11,"clone","","",42,[[],["pagemap",3]]],[11,"clone","ic_replicated_state::replicated_state","",45,[[],["stateerror",4]]],[11,"clone","","",44,[[],["replicatedstate",3]]],[11,"clone","ic_replicated_state::stable_memory","",48,[[],["stablememoryerror",4]]],[11,"clone","","",49,[[],["stablememory",3]]],[11,"default","ic_replicated_state","",15,[[],["canisterqueues",3]]],[11,"default","","",22,[[],["callcontextmanager",3]]],[11,"default","ic_replicated_state::canister_state::system_state","",16,[[],["canistermetrics",3]]],[11,"default","ic_replicated_state::canister_state","",9,[[]]],[11,"default","ic_replicated_state::metadata_state","",26,[[]]],[11,"default","","",27,[[],["subnettopology",3]]],[11,"default","","",28,[[],["nodetopology",3]]],[11,"default","","",29,[[],["subnetcallcontextmanager",3]]],[11,"default","","",30,[[],["stream",3]]],[11,"default","","",33,[[],["ingresshistorystate",3]]],[11,"default","ic_replicated_state::page_map::int_map","",39,[[]]],[11,"default","ic_replicated_state::page_map","",41,[[],["pagedelta",3]]],[11,"default","","",42,[[],["pagemap",3]]],[11,"default","ic_replicated_state::stable_memory","",49,[[]]],[11,"eq","ic_replicated_state::canister_state::execution_state","",12,[[["global",4]]]],[11,"ne","","",12,[[["global",4]]]],[11,"eq","","",14,[[["exportedfunctions",3]]]],[11,"ne","","",14,[[["exportedfunctions",3]]]],[11,"eq","","",11,[[]]],[11,"eq","ic_replicated_state","",15,[[["canisterqueues",3]]]],[11,"ne","","",15,[[["canisterqueues",3]]]],[11,"eq","","",21,[[["callcontext",3]]]],[11,"ne","","",21,[[["callcontext",3]]]],[11,"eq","","",1,[[["callcontextaction",4]]]],[11,"ne","","",1,[[["callcontextaction",4]]]],[11,"eq","","",22,[[["callcontextmanager",3]]]],[11,"ne","","",22,[[["callcontextmanager",3]]]],[11,"eq","","",6,[[["callorigin",4]]]],[11,"ne","","",6,[[["callorigin",4]]]],[11,"eq","","",7,[[["cyclesaccounterror",4]]]],[11,"ne","","",7,[[["cyclesaccounterror",4]]]],[11,"eq","","",0,[[["cyclesaccount",3]]]],[11,"ne","","",0,[[["cyclesaccount",3]]]],[11,"eq","ic_replicated_state::canister_state::system_state","",16,[[["canistermetrics",3]]]],[11,"ne","","",16,[[["canistermetrics",3]]]],[11,"eq","","",17,[[["systemstate",3]]]],[11,"ne","","",17,[[["systemstate",3]]]],[11,"eq","","",18,[[["canisterstatus",4]]]],[11,"ne","","",18,[[["canisterstatus",4]]]],[11,"eq","ic_replicated_state::canister_state","",9,[[["schedulerstate",3]]]],[11,"ne","","",9,[[["schedulerstate",3]]]],[11,"eq","","",10,[[["canisterstate",3]]]],[11,"ne","","",10,[[["canisterstate",3]]]],[11,"eq","ic_replicated_state::metadata_state","",25,[[["systemmetadata",3]]]],[11,"ne","","",25,[[["systemmetadata",3]]]],[11,"eq","","",26,[[["networktopology",3]]]],[11,"ne","","",26,[[["networktopology",3]]]],[11,"eq","","",27,[[["subnettopology",3]]]],[11,"ne","","",27,[[["subnettopology",3]]]],[11,"eq","","",28,[[["nodetopology",3]]]],[11,"ne","","",28,[[["nodetopology",3]]]],[11,"eq","","",29,[[["subnetcallcontextmanager",3]]]],[11,"ne","","",29,[[["subnetcallcontextmanager",3]]]],[11,"eq","","",31,[[["subnetcallcontext",4]]]],[11,"ne","","",31,[[["subnetcallcontext",4]]]],[11,"eq","","",30,[[["stream",3]]]],[11,"ne","","",30,[[["stream",3]]]],[11,"eq","","",33,[[["ingresshistorystate",3]]]],[11,"ne","","",33,[[["ingresshistorystate",3]]]],[11,"eq","ic_replicated_state::page_map","",34,[[["persistenceerror",4]]]],[11,"ne","","",34,[[["persistenceerror",4]]]],[11,"eq","","",42,[[["pagemap",3]]]],[11,"eq","ic_replicated_state::replicated_state","",45,[[["stateerror",4]]]],[11,"ne","","",45,[[["stateerror",4]]]],[11,"eq","","",44,[[]]],[11,"eq","ic_replicated_state::stable_memory","",49,[[["stablememory",3]]]],[11,"ne","","",49,[[["stablememory",3]]]],[11,"fmt","ic_replicated_state::canister_state::execution_state","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state::canister_state::system_state","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state::canister_state","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state::metadata_state","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state::page_map::int_map","",39,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state::page_map","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state::replicated_state","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state::stable_memory","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state","",7,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state::page_map","",34,[[["formatter",3]],["result",6]]],[11,"fmt","ic_replicated_state::replicated_state","",45,[[["formatter",3]],["result",6]]],[11,"hash","ic_replicated_state","",15,[[]]],[11,"hash","ic_replicated_state::page_map","",34,[[]]],[11,"hash","ic_replicated_state::replicated_state","",45,[[]]],[11,"from_iter","ic_replicated_state::canister_state::execution_state","",14,[[],["exportedfunctions",3]]],[11,"from_iter","ic_replicated_state::page_map::int_map","",39,[[]]],[11,"try_from","ic_replicated_state::canister_state::execution_state","",12,[[["global",3]],["result",4]]],[11,"try_from","","",14,[[["vec",3],["wasmmethod",3]],["result",4]]],[11,"try_from","ic_replicated_state","",15,[[["canisterqueues",3]],["result",4]]],[11,"try_from","","",21,[[["callcontext",3]],["result",4]]],[11,"try_from","","",6,[[["callorigin",4]],["result",4]]],[11,"try_from","","",22,[[["callcontextmanager",3]],["result",4]]],[11,"try_from","ic_replicated_state::canister_state::system_state","",18,[[["canisterstatus",4]],["result",4]]],[11,"try_from","ic_replicated_state::metadata_state","",26,[[["networktopology",3]],["result",4]]],[11,"try_from","","",27,[[["subnettopology",3]],["result",4]]],[11,"try_from","","",28,[[["nodetopology",3]],["result",4]]],[11,"try_from","","",25,[[["systemmetadata",3]],["result",4]]],[11,"try_from","","",29,[[["subnetcallcontextmanager",3]],["result",4]]],[11,"try_from","","",31,[[["subnetcallcontext",3]],["result",4]]],[11,"try_from","","",30,[[["stream",3]],["result",4]]],[11,"try_from","","",33,[[["ingresshistorystate",3]],["result",4]]],[11,"try_from","ic_replicated_state::page_map","",40,[[],[["trackedpage",3],["persistenceerror",4],["result",4]]]],[11,"try_from","ic_replicated_state::stable_memory","",49,[[["stablememory",3]],["result",4]]],[11,"source","ic_replicated_state::page_map","",34,[[],[["error",8],["option",4]]]],[11,"serialize","ic_replicated_state::canister_state::execution_state","",12,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","ic_replicated_state","",15,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","ic_replicated_state::canister_state::system_state","",18,[[],["result",4]]],[11,"serialize","ic_replicated_state::metadata_state","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","","",29,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","ic_replicated_state::replicated_state","",45,[[],["result",4]]],[11,"serialize","ic_replicated_state::stable_memory","",48,[[],["result",4]]],[11,"serialize","","",49,[[],["result",4]]],[11,"deserialize","ic_replicated_state::canister_state::execution_state","",12,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","ic_replicated_state","",15,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","ic_replicated_state::canister_state::system_state","",18,[[],["result",4]]],[11,"deserialize","ic_replicated_state::metadata_state","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","","",29,[[],["result",4]]],[11,"deserialize","","",31,[[],["result",4]]],[11,"deserialize","","",30,[[],["result",4]]],[11,"deserialize","","",33,[[],["result",4]]],[11,"deserialize","ic_replicated_state::replicated_state","",45,[[],["result",4]]],[11,"deserialize","ic_replicated_state::stable_memory","",48,[[],["result",4]]],[11,"deserialize","","",49,[[],["result",4]]]],"p":[[3,"CyclesAccount"],[4,"CallContextAction"],[13,"Reply"],[13,"Reject"],[13,"NoResponse"],[13,"Fail"],[4,"CallOrigin"],[4,"CyclesAccountError"],[13,"CanisterOutOfCycles"],[3,"SchedulerState"],[3,"CanisterState"],[3,"ExecutionState"],[4,"Global"],[3,"EmbedderCache"],[3,"ExportedFunctions"],[3,"CanisterQueues"],[3,"CanisterMetrics"],[3,"SystemState"],[4,"CanisterStatus"],[13,"Running"],[13,"Stopping"],[3,"CallContext"],[3,"CallContextManager"],[8,"CanisterQueuesTesting"],[8,"CanisterStateTesting"],[3,"SystemMetadata"],[3,"NetworkTopology"],[3,"SubnetTopology"],[3,"NodeTopology"],[3,"SubnetCallContextManager"],[3,"Stream"],[4,"SubnetCallContext"],[13,"SetupInitialDKGContext"],[3,"IngressHistoryState"],[4,"PersistenceError"],[13,"FileSystemError"],[13,"MmapError"],[13,"InvalidHeapFile"],[13,"BadPageSize"],[3,"IntMap"],[3,"TrackedPage"],[3,"PageDelta"],[3,"PageMap"],[3,"Buffer"],[3,"ReplicatedState"],[4,"StateError"],[13,"QueueFull"],[13,"CanisterOutOfCycles"],[4,"StableMemoryError"],[3,"StableMemory"],[3,"NumWasmPagesTag"],[3,"PAGE_SIZE"],[3,"PageIndexTag"],[3,"IntMapIter"]]},\
"ic_state_layout":{"doc":"","i":[[0,"error","ic_state_layout","",null,null],[4,"LayoutError","ic_state_layout::error","",null,null],[13,"IoError","","Wraps a `std::io::Error`, a message and the path of the…",0,null],[12,"path","ic_state_layout::error::LayoutError","",1,null],[12,"message","","",1,null],[12,"io_err","","",1,null],[13,"CorruptedLayout","ic_state_layout::error","The state root doesn\'t have the expected layout. It\'s…",0,null],[12,"path","ic_state_layout::error::LayoutError","",2,null],[12,"message","","",2,null],[13,"AlreadyExists","ic_state_layout::error","Checkpoint at the specified height already exists.",0,null],[13,"NotFound","","Checkpoint for the requested height not found.",0,null],[0,"state_layout","ic_state_layout","",null,null],[3,"ExecutionStateBits","ic_state_layout::state_layout","This struct contains bits of the `ExecutionState` that are…",null,null],[12,"exported_globals","","",3,null],[12,"heap_size","","",3,null],[12,"exports","","",3,null],[12,"last_executed_round","","",3,null],[3,"CanisterStateBits","","This struct contains bits of the `CanisterState` that are…",null,null],[12,"controller","","",4,null],[12,"last_full_execution_round","","",4,null],[12,"call_context_manager","","",4,null],[12,"compute_allocation","","",4,null],[12,"accumulated_priority","","",4,null],[12,"query_allocation","","",4,null],[12,"execution_state_bits","","",4,null],[12,"memory_allocation","","",4,null],[12,"freeze_threshold","","",4,null],[12,"cycles_account","","",4,null],[12,"icp_balance","","",4,null],[12,"status","","",4,null],[12,"scheduled_as_first","","",4,null],[12,"skipped_round_due_to_no_messages","","",4,null],[12,"executed","","",4,null],[12,"interruped_during_execution","","",4,null],[12,"certified_data","","",4,null],[12,"consumed_cycles_since_replica_started","","",4,null],[12,"stable_memory_size","","",4,null],[3,"StateLayout","","`StateLayout` provides convenience functions to construct…",null,null],[3,"CheckpointLayout","","",null,null],[3,"CanisterLayout","","",null,null],[3,"ProtoFileWith","","",null,null],[3,"WasmFile","","A value of type `WasmFile` declares that some path should…",null,null],[4,"ReadOnly","","`ReadOnly` is the access policy used for reading…",null,null],[4,"WriteOnly","","`WriteOnly` is the access policy used while we are…",null,null],[4,"RwPolicy","","`RwPolicy` is the access policy used for tip on disk state.",null,null],[6,"CompleteCheckpointLayout","","",null,null],[8,"CheckpointManager","","",null,null],[10,"raw_path","","Returns the base directory path managed by checkpoint…",5,[[],["path",3]]],[10,"tip_to_checkpoint","","Atomically creates a checkpoint from the \\\"tip\\\" directory.…",5,[[["path",3]],[["pathbuf",3],["result",6]]]],[10,"remove_checkpoint","","Removes a checkpoint identified by \\\"name\\\".",5,[[],["result",6]]],[10,"scratchpad_to_checkpoint","","Promotes the scratchpad at \\\"path\\\" to a checkpoint…",5,[[["path",3]],[["pathbuf",3],["result",6]]]],[10,"checkpoint_to_scratchpad","","Creates a mutable copy of a checkpoint in a the specified…",5,[[["path",3]],["result",6]]],[10,"get_checkpoint_path","","Gets the path for a checkpoint identified by \\\"name\\\".",5,[[],["pathbuf",3]]],[10,"mark_checkpoint_diverged","","Marks checkpoint identified by \\\"name\\\" as diverged.",5,[[],["result",6]]],[10,"backup_checkpoint","","Creates a backup of the checkpoint identified by \\\"name\\\".",5,[[],["result",6]]],[10,"list_diverged_checkpoints","","Returns the list of names of diverged checkpoints.",5,[[],[["vec",3],["result",6]]]],[10,"list_backups","","Returns the list of names of checkpoint backups.",5,[[],[["vec",3],["result",6]]]],[10,"get_diverged_checkpoint_path","","Returns a path to diverged checkpoint with the specified…",5,[[],["pathbuf",3]]],[10,"get_backup_path","","Returns a path to a backup the specified name.",5,[[],["pathbuf",3]]],[10,"remove_diverged_checkpoint","","Removes the diverged checkpoint with the specified name.",5,[[],["result",6]]],[10,"remove_backup","","Removes the backup with the specified name.",5,[[],["result",6]]],[10,"list_checkpoints","","List names of all the existing checkpoints.",5,[[],[["vec",3],["result",6]]]],[10,"reset_tip_to","","Atomically resets containts of \\\"tip\\\" directory to that of…",5,[[["pathbuf",3]],["result",6]]],[8,"AccessPolicy","","",null,null],[11,"check_dir","","`check_dir` specifies what to do the first time we enter a…",6,[[["path",3]],[["result",4],["layouterror",4]]]],[8,"ReadPolicy","","",null,null],[8,"WritePolicy","","",null,null],[8,"ReadWritePolicy","","",null,null],[11,"new","","Needs to be pub for criterion performance regression tests.",7,[[["pathbuf",3],["replicalogger",6]]]],[11,"raw_path","","Returns the the raw root path for state",7,[[],["path",3]]],[11,"tmp","","Returns the path to the temporary directory. This…",7,[[],[["pathbuf",3],["result",4],["layouterror",4]]]],[11,"tip","","Returns a layout object representing tip state in \\\"tip\\\"…",7,[[],[["layouterror",4],["result",4],["checkpointlayout",3]]]],[11,"states_metadata","","Returns the path to the serialized states metadata.",7,[[],["pathbuf",3]]],[11,"state_sync_scratchpad","","Returns scratchpad used during statesync",7,[[["height",6]],[["pathbuf",3],["result",4],["layouterror",4]]]],[11,"cleanup_tip","","",7,[[],[["result",4],["layouterror",4]]]],[11,"tip_to_checkpoint","","Creates a checkpoint from the \\\"tip\\\" state returning layout…",7,[[["checkpointlayout",3],["height",6],["rwpolicy",4]],[["layouterror",4],["checkpointlayout",3],["result",4]]]],[11,"scratchpad_to_checkpoint","","",7,[[["checkpointlayout",3],["height",6],["rwpolicy",4]],[["layouterror",4],["checkpointlayout",3],["result",4]]]],[11,"checkpoint_to_scratchpad","","",7,[[["height",6]],[["layouterror",4],["result",4],["checkpointlayout",3]]]],[11,"reset_tip_to","","Resets \\\"tip\\\" to a checkpoint identified by height.",7,[[["height",6]],[["result",4],["layouterror",4]]]],[11,"checkpoint","","Returns the layout of the checkpoint with the given height…",7,[[["height",6]],[["layouterror",4],["checkpointlayout",3],["result",4]]]],[11,"checkpoint_heights","","Returns a sorted list of `Height`s for which a checkpoint…",7,[[],[["layouterror",4],["vec",3],["result",4]]]],[11,"diverged_checkpoint_heights","","Returns a sorted list of `Height`s of checkpoints that…",7,[[],[["layouterror",4],["vec",3],["result",4]]]],[11,"backup_heights","","Returns a sorted list of heights of checkpoints that were…",7,[[],[["layouterror",4],["vec",3],["result",4]]]],[11,"diverged_checkpoint_path","","Returns a path to a diverged checkpoint given its height.",7,[[["height",6]],["pathbuf",3]]],[11,"backup_checkpoint_path","","Returns a path to a backed up state given its height.",7,[[["height",6]],["pathbuf",3]]],[11,"remove_checkpoint","","Removes a checkpoint for a given height if it exists.",7,[[["height",6]],[["result",4],["layouterror",4]]]],[11,"mark_checkpoint_diverged","","Marks the checkpoint with the specified height as diverged.",7,[[["height",6]],[["result",4],["layouterror",4]]]],[11,"remove_diverged_checkpoint","","Removes a diverged checkpoint given its height.",7,[[["height",6]],[["result",4],["layouterror",4]]]],[11,"backup_checkpoint","","Creates a copy of the checkpoint with the specified height…",7,[[["height",6]],[["result",4],["layouterror",4]]]],[11,"remove_backup","","Removes a backed up state given its height.",7,[[["height",6]],[["result",4],["layouterror",4]]]],[11,"tip_path","","",7,[[],["pathbuf",3]]],[11,"new","","",8,[[["pathbuf",3],["height",6]],[["result",4],["layouterror",4]]]],[11,"system_metadata","","",8,[[],[["systemmetadata",3],["protofilewith",3]]]],[11,"subnet_queues","","",8,[[],[["canisterqueues",3],["protofilewith",3]]]],[11,"canister_ids","","",8,[[],[["result",4],["vec",3],["layouterror",4]]]],[11,"canister","","",8,[[["canisterid",3]],[["layouterror",4],["result",4],["canisterlayout",3]]]],[11,"height","","",8,[[],["height",6]]],[11,"raw_path","","",8,[[],["path",3]]],[11,"new","","",9,[[["pathbuf",3]],[["result",4],["layouterror",4]]]],[11,"raw_path","","",9,[[],["pathbuf",3]]],[11,"queues","","",9,[[],[["canisterqueues",3],["protofilewith",3]]]],[11,"wasm","","",9,[[],["wasmfile",3]]],[11,"canister","","",9,[[],[["canisterstatebits",3],["protofilewith",3]]]],[11,"vmemory_0","","",9,[[],["pathbuf",3]]],[11,"stable_memory_blob","","",9,[[],["pathbuf",3]]],[11,"stable_memory_proto","","",9,[[],[["protofilewith",3],["stablememory",3]]]],[11,"tombstone","","",9,[[],["pathbuf",3]]],[11,"mark_deleted","","Marks this canister as deleted by creating a \'tombstone\'…",9,[[],[["result",4],["layouterror",4]]]],[11,"is_marked_deleted","","",9,[[]]],[11,"raw_path","","",10,[[],["path",3]]],[11,"serialize","","",10,[[],[["result",4],["layouterror",4]]]],[11,"deserialize","","",10,[[],[["result",4],["layouterror",4]]]],[11,"deserialize_opt","","",10,[[],[["layouterror",4],["result",4],["option",4]]]],[11,"deserialize","","",11,[[],[["layouterror",4],["binaryencodedwasm",3],["result",4]]]],[11,"serialize","","",11,[[["binaryencodedwasm",3]],[["result",4],["layouterror",4]]]],[0,"utils","ic_state_layout","",null,null],[5,"do_copy","ic_state_layout::utils","Copies `src` into `dst`.",null,[[["path",3],["replicalogger",6]],["result",6]]],[5,"do_copy_overwrite","","Copies `src` into `dst` using do_copy semantics…",null,[[["path",3],["replicalogger",6]],["result",6]]],[11,"from","ic_state_layout::error","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","ic_state_layout::state_layout","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"init","","",12,[[]]],[11,"deref","","",12,[[]]],[11,"deref_mut","","",12,[[]]],[11,"drop","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"check_dir","","For `WriteOnly` mode we want to ensure the directory…",13,[[["path",3]],[["result",4],["layouterror",4]]]],[11,"check_dir","","",14,[[["path",3]],[["result",4],["layouterror",4]]]],[11,"from","","",10,[[["pathbuf",3]]]],[11,"from","","",11,[[["pathbuf",3]]]],[11,"clone","","",7,[[],["statelayout",3]]],[11,"fmt","ic_state_layout::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_state_layout::state_layout","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","ic_state_layout::error","",0,[[["formatter",3]],["result",6]]],[11,"try_from","ic_state_layout::state_layout","",4,[[["canisterstatebits",3]],["result",4]]],[11,"try_from","","",3,[[["executionstatebits",3]],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]]],"p":[[4,"LayoutError"],[13,"IoError"],[13,"CorruptedLayout"],[3,"ExecutionStateBits"],[3,"CanisterStateBits"],[8,"CheckpointManager"],[8,"AccessPolicy"],[3,"StateLayout"],[3,"CheckpointLayout"],[3,"CanisterLayout"],[3,"ProtoFileWith"],[3,"WasmFile"],[4,"ReadOnly"],[4,"WriteOnly"],[4,"RwPolicy"]]},\
"ic_state_manager":{"doc":"","i":[[3,"StateManagerMetrics","ic_state_manager","",null,null],[3,"CheckpointRef","","CheckpointRef is a value indicating that a checkpoint is…",null,null],[3,"StateManagerImpl","","",null,null],[4,"CheckpointError","","",null,null],[13,"IoError","","Wraps a stringified `std::io::Error`, a message and the…",0,null],[12,"path","ic_state_manager::CheckpointError","",1,null],[12,"message","","",1,null],[12,"io_err","","",1,null],[13,"CorruptedLayout","ic_state_manager","The layout of state root on disk is corrupted.",0,null],[12,"path","ic_state_manager::CheckpointError","",2,null],[12,"message","","",2,null],[13,"ProtoError","ic_state_manager","Wraps a stringified…",0,null],[12,"path","ic_state_manager::CheckpointError","",3,null],[12,"field","","",3,null],[12,"proto_err","","",3,null],[13,"AlreadyExists","ic_state_manager","Checkpoint at the specified height already exists.",0,null],[13,"NotFound","","Checkpoint for the requested height not found.",0,null],[13,"Persistence","","Wraps a PageMap error.",0,null],[0,"checkpoint","","",null,null],[5,"make_checkpoint","ic_state_manager::checkpoint","Creates a checkpoint of the node state using specified…",null,[[["replicatedstate",3],["statelayout",3],["height",6]],[["replicatedstate",3],["checkpointerror",4],["result",4]]]],[5,"load_checkpoint","","loads the node state heighted with `height` using the…",null,[[["checkpointlayout",3],["subnettype",4]],[["replicatedstate",3],["checkpointerror",4],["result",4]]]],[5,"handle_disk_format_changes","","",null,[[["replicatedstate",3],["checkpointlayout",3]],[["checkpointerror",4],["result",4]]]],[5,"reopen_state_as_tip","","",null,[[["replicatedstate",3],["checkpointlayout",3]],[["checkpointerror",4],["result",4]]]],[0,"labeled_tree_visitor","ic_state_manager","",null,null],[3,"LabeledTreeVisitor","ic_state_manager::labeled_tree_visitor","Visitor that materializes the tree being traversed as a…",null,null],[0,"manifest","ic_state_manager","",null,null],[3,"DiffScript","ic_state_manager::manifest","A script describing how to turn an old state into a new…",null,null],[4,"ManifestValidationError","","",null,null],[13,"InvalidRootHash","","",4,null],[12,"expected_hash","ic_state_manager::manifest::ManifestValidationError","",5,null],[12,"actual_hash","","",5,null],[13,"InvalidFileHash","ic_state_manager::manifest","",4,null],[12,"relative_path","ic_state_manager::manifest::ManifestValidationError","",6,null],[12,"expected_hash","","",6,null],[12,"actual_hash","","",6,null],[4,"ChunkValidationError","ic_state_manager::manifest","",null,null],[13,"InvalidChunkHash","","",7,null],[12,"chunk_ix","ic_state_manager::manifest::ChunkValidationError","",8,null],[12,"expected_hash","","",8,null],[12,"actual_hash","","",8,null],[13,"InvalidChunkSize","ic_state_manager::manifest","",7,null],[12,"chunk_ix","ic_state_manager::manifest::ChunkValidationError","",9,null],[12,"expected_size","","",9,null],[12,"actual_size","","",9,null],[5,"compute_manifest","ic_state_manager::manifest","Computes manifest for the checkpoint located at…",null,[[["path",3]],[["checkpointerror",4],["result",4],["manifest",3]]]],[5,"validate_manifest","","Validates manifest contents and checks that the hash of…",null,[[["manifest",3],["cryptohashofstate",6]],[["manifestvalidationerror",4],["result",4]]]],[5,"validate_chunk","","Checks that the size and hash of the received chunk match…",null,[[["manifest",3]],[["result",4],["chunkvalidationerror",4]]]],[5,"manifest_hash","","Computes root hash of the manifest. See note [Manifest…",null,[[["manifest",3]]]],[5,"diff_manifest","","Computes diff between two manifests and get DiffScript.",null,[[["manifest",3]],["diffscript",3]]],[5,"filter_out_zero_chunks","","Filters out all-zero chunks in the manifest chunk table…",null,[[["manifest",3]],["hashset",3]]],[0,"hash","","",null,null],[5,"manifest_hasher","ic_state_manager::manifest::hash","",null,[[],["sha256",3]]],[5,"file_hasher","","",null,[[],["sha256",3]]],[5,"cow_file_hasher","","",null,[[],["sha256",3]]],[5,"chunk_hasher","","",null,[[],["sha256",3]]],[5,"cow_chunk_hasher","","",null,[[],["sha256",3]]],[6,"NewIndex","ic_state_manager::manifest","",null,null],[6,"OldIndex","","",null,null],[17,"STATE_SYNC_V1","","",null,null],[17,"CURRENT_STATE_SYNC_VERSION","","The version of StateSync protocol that should be used for…",null,null],[17,"DEFAULT_CHUNK_SIZE","","",null,null],[0,"state_sync","ic_state_manager","",null,null],[3,"StateSyncArtifact","ic_state_manager::state_sync","",null,null],[0,"stream_encoding","ic_state_manager","",null,null],[5,"encode_stream_slice","ic_state_manager::stream_encoding","Encodes a stream slice for the specified `subnet`,…",null,[[["streamindex",6],["option",4],["replicatedstate",3],["subnetid",6]]]],[5,"stream_slice_partial_tree","","Creates a partial tree (structure only, empty values) in…",null,[[["streamindex",6],["subnetid",6]],[["labeledtree",4],["vec",3]]]],[5,"encode_tree","","",null,[[["labeledtree",4],["vec",3]],["vec",3]]],[5,"decode_stream_slice","","Decodes a stream slice and the subnet it came from from a…",null,[[],[["decodestreamerror",4],["result",4]]]],[5,"decode_labeled_tree","","Decodes a labeled tree from a byte buffer.",null,[[],[["labeledtree",4],["result",4],["decodestreamerror",4]]]],[5,"decode_slice_from_tree","","Recovers a stream slice from its canonical form.",null,[[["labeledtree",4]],[["decodestreamerror",4],["result",4]]]],[0,"tree_diff","ic_state_manager","",null,null],[3,"PrettyPrintedChanges","ic_state_manager::tree_diff","A helper type to display changes in a nice way.",null,null],[12,"0","","",10,null],[4,"RoseHashTree","","`RoseHashTree` is a \\\"flattened\\\" version of the binary…",null,null],[13,"Leaf","","",11,null],[13,"Fork","","",11,null],[12,"digest","ic_state_manager::tree_diff::RoseHashTree","",12,null],[12,"children","","",12,null],[4,"Change","ic_state_manager::tree_diff","A change to perform on a sub-tree addressed by some path.",null,null],[13,"InsertLeaf","","Insert a leaf with the specified hash at the path. If the…",13,null],[13,"InsertEmptyFork","","Insert a fork with no children at the path. If the path…",13,null],[13,"DeleteSubtree","","Delete the whole subtree rooted at the path and the…",13,null],[5,"diff","","Computes a difference between 2 labeled hash trees.",null,[[["hashtree",4]],["changes",6]]],[6,"Changes","","A type representing changes between two trees.",null,null],[11,"crypto_hash","","",11,[[],["cryptohash",3]]],[0,"tree_hash","ic_state_manager","",null,null],[3,"HashingVisitor","ic_state_manager::tree_hash","A visitor that constructs a hash tree by traversing a…",null,null],[5,"hash_partial_state","","Compute the hash tree corresponding to the partial state.",null,[[["replicatedstate",3]],["hashtree",4]]],[5,"hash_state","","Compute the hash tree corresponding to the full replicated…",null,[[["replicatedstate",3]],["hashtree",4]]],[11,"new","ic_state_manager","",14,[[["arc",3],["replicalogger",6],["maliciousflags",3],["metricsregistry",3],["subnettype",4],["verifier",8],["subnetid",6],["config",3]]]],[11,"state_layout","","Returns `StateLayout` pointing to the directory managed by…",14,[[],["statelayout",3]]],[11,"create_chunkable_state","","Returns requested state as a Chunkable artifact for…",14,[[["statesyncartifactid",3]],[["box",3],["chunkable",8]]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"init","","",15,[[]]],[11,"deref","","",15,[[]]],[11,"deref_mut","","",15,[[]]],[11,"drop","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"init","","",16,[[]]],[11,"deref","","",16,[[]]],[11,"deref_mut","","",16,[[]]],[11,"drop","","",16,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","ic_state_manager::labeled_tree_visitor","",17,[[]]],[11,"into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"init","","",17,[[]]],[11,"deref","","",17,[[]]],[11,"deref_mut","","",17,[[]]],[11,"drop","","",17,[[]]],[11,"from","ic_state_manager::manifest","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"equivalent","","",18,[[]]],[11,"init","","",18,[[]]],[11,"deref","","",18,[[]]],[11,"deref_mut","","",18,[[]]],[11,"drop","","",18,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","ic_state_manager::state_sync","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"equivalent","","",19,[[]]],[11,"init","","",19,[[]]],[11,"deref","","",19,[[]]],[11,"deref_mut","","",19,[[]]],[11,"drop","","",19,[[]]],[11,"from","ic_state_manager::tree_diff","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"equivalent","","",11,[[]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"equivalent","","",13,[[]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","ic_state_manager::tree_hash","",20,[[]]],[11,"into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"init","","",20,[[]]],[11,"deref","","",20,[[]]],[11,"deref_mut","","",20,[[]]],[11,"drop","","",20,[[]]],[11,"from","ic_state_manager::tree_diff","",11,[[["hashtree",4]]]],[11,"from","ic_state_manager","",0,[[["persistenceerror",4]]]],[11,"from","","",0,[[["layouterror",4]]]],[11,"clone","ic_state_manager::state_sync","",19,[[],["statesyncartifact",3]]],[11,"clone","ic_state_manager::tree_diff","",11,[[],["rosehashtree",4]]],[11,"clone","","",13,[[],["change",4]]],[11,"clone","ic_state_manager","",15,[[],["statemanagermetrics",3]]],[11,"clone","","",16,[[],["checkpointref",3]]],[11,"clone","","",0,[[],["checkpointerror",4]]],[11,"default","ic_state_manager::labeled_tree_visitor","",17,[[],["labeledtreevisitor",3]]],[11,"default","ic_state_manager::tree_hash","",20,[[],["hashingvisitor",3]]],[11,"eq","ic_state_manager::manifest","",4,[[["manifestvalidationerror",4]]]],[11,"ne","","",4,[[["manifestvalidationerror",4]]]],[11,"eq","","",7,[[["chunkvalidationerror",4]]]],[11,"ne","","",7,[[["chunkvalidationerror",4]]]],[11,"eq","","",18,[[["diffscript",3]]]],[11,"ne","","",18,[[["diffscript",3]]]],[11,"eq","ic_state_manager::state_sync","",19,[[["statesyncartifact",3]]]],[11,"eq","ic_state_manager::tree_diff","",11,[[["rosehashtree",4]]]],[11,"ne","","",11,[[["rosehashtree",4]]]],[11,"eq","","",13,[[["change",4]]]],[11,"ne","","",13,[[["change",4]]]],[11,"eq","ic_state_manager","",0,[[["checkpointerror",4]]]],[11,"ne","","",0,[[["checkpointerror",4]]]],[11,"fmt","ic_state_manager::manifest","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","ic_state_manager::state_sync","",19,[[["formatter",3]],["result",6]]],[11,"fmt","ic_state_manager::tree_diff","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","ic_state_manager","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_state_manager::manifest","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","ic_state_manager::tree_diff","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","ic_state_manager","",0,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"source","","",0,[[],[["error",8],["option",4]]]],[11,"check_artifact_acceptance","","",14,[[["statesyncmessage",3],["nodeid",6]],[["artifactpoolerror",4],["result",4],["artifactacceptance",4]]]],[11,"get_validated_by_identifier","","",14,[[["statesyncartifactid",3]],[["statesyncmessage",3],["option",4]]]],[11,"has_artifact","","",14,[[["statesyncartifactid",3]]]],[11,"get_all_validated_by_filter","","",14,[[["statesyncfilter",3]],[["vec",3],["advert",3]]]],[11,"get_priority_function","","",14,[[],[["option",4],["box",3]]]],[11,"get_filter","","Get StateSync Filter for re-transmission purpose.",14,[[],["statesyncfilter",3]]],[11,"get_chunk_tracker","","Returns requested state as a Chunkable artifact for…",14,[[["statesyncartifactid",3]],[["box",3],["chunkable",8]]]],[11,"process_changes","","",14,[[["timesource",8],["unvalidatedartifact",3],["vec",3]]]],[11,"to_advert","ic_state_manager::state_sync","",19,[[["statesyncmessage",3]],[["statesyncartifact",3],["advert",3]]]],[11,"encode_certified_stream_slice","ic_state_manager","",14,[[["streamindex",6],["option",4],["option",4],["subnetid",6]],[["certifiedstreamslice",3],["encodestreamerror",4],["result",4]]]],[11,"decode_certified_stream_slice","","",14,[[["registryversion",6],["certifiedstreamslice",3],["subnetid",6]],[["result",4],["streamslice",3],["decodestreamerror",4]]]],[11,"decode_valid_certified_stream_slice","","",14,[[["certifiedstreamslice",3]],[["result",4],["streamslice",3],["decodestreamerror",4]]]],[11,"subnets_with_certified_streams","","",14,[[],[["vec",3],["subnetid",6]]]],[11,"get_state_hash_at","","Note that this function intentionally does not use…",14,[[["height",6]],[["option",4],["statemanagerresult",6]]]],[11,"take_tip","","",14,[[]]],[11,"take_tip_at","","",14,[[["height",6]],[["replicatedstate",3],["statemanagerresult",6]]]],[11,"fetch_state","","",14,[[["cryptohashofstate",6],["height",6]]]],[11,"list_state_hashes_to_certify","","",14,[[],["vec",3]]],[11,"deliver_state_certification","","",14,[[["certification",3]]]],[11,"list_state_heights","","Panics",14,[[["certificationmask",6]],[["vec",3],["height",6]]]],[11,"remove_states_below","","",14,[[["height",6]]]],[11,"commit_and_certify","","",14,[[["certificationscope",4],["height",6]]]],[11,"report_diverged_state","","",14,[[["height",6]]]],[11,"latest_state_height","","",14,[[],["height",6]]],[11,"latest_certified_height","","",14,[[],["height",6]]],[11,"get_latest_state","","",14,[[],[["labeled",3],["arc",3]]]],[11,"get_state_at","","",14,[[["height",6]],[["labeled",3],["statemanagerresult",6]]]],[11,"read_certified_state","","",14,[[["labeledtree",4]],["option",4]]],[11,"start_subtree","ic_state_manager::labeled_tree_visitor","",17,[[],["result",4]]],[11,"enter_edge","","",17,[[],[["result",4],["control",4]]]],[11,"end_subtree","","",17,[[],["result",4]]],[11,"visit_blob","","",17,[[],["result",4]]],[11,"visit_num","","",17,[[],["result",4]]],[11,"finish","","",17,[[]]],[11,"start_subtree","ic_state_manager::tree_hash","",20,[[],["result",4]]],[11,"enter_edge","","",20,[[],[["result",4],["control",4]]]],[11,"end_subtree","","",20,[[],["result",4]]],[11,"visit_num","","",20,[[],["result",4]]],[11,"visit_blob","","",20,[[],["result",4]]],[11,"finish","","",20,[[]]]],"p":[[4,"CheckpointError"],[13,"IoError"],[13,"CorruptedLayout"],[13,"ProtoError"],[4,"ManifestValidationError"],[13,"InvalidRootHash"],[13,"InvalidFileHash"],[4,"ChunkValidationError"],[13,"InvalidChunkHash"],[13,"InvalidChunkSize"],[3,"PrettyPrintedChanges"],[4,"RoseHashTree"],[13,"Fork"],[4,"Change"],[3,"StateManagerImpl"],[3,"StateManagerMetrics"],[3,"CheckpointRef"],[3,"LabeledTreeVisitor"],[3,"DiffScript"],[3,"StateSyncArtifact"],[3,"HashingVisitor"]]},\
"ic_sys":{"doc":"","i":[[3,"PAGE_SIZE","ic_sys","Size of an OS memory page in bytes.",null,null],[3,"IS_WSL","","",null,null],[0,"fs","","",null,null],[4,"FileCloneError","ic_sys::fs","Error indicating that a call to clone_file has failed.",null,null],[13,"OperationNotSupported","","The underlying file system doesn\'t support reflinks (file…",0,null],[13,"DifferentFileSystems","","Source and destination are not on the same filesystem.",0,null],[13,"IoError","","Unexpected IO error happened when we called the syscall…",0,null],[5,"clone_file","","Makes a copy-on-write copy of file located at src into…",null,[[["path",3]],[["filecloneerror",4],["result",4]]]],[0,"mmap","ic_sys","",null,null],[3,"ScopedMmap","ic_sys::mmap","`ScopedMmap` contains a memory region that is…",null,null],[11,"from_readonly_file","","Creates a new mapping from a file descriptor and length.",1,[[["asrawfd",8]],["result",6]]],[11,"from_path","","Creates a new mapping for a file at specified `path`.",1,[[["path",3],["asref",8]],["result",6]]],[11,"addr","","Returns start address of the memory mapping. Prefer using…",1,[[]]],[11,"len","","Returns the length of the allocated region in bytes.",1,[[]]],[11,"is_empty","","Returns true if the memory region has zero length.",1,[[]]],[11,"as_slice","","Returns a byte slice view of the memory mapping.",1,[[]]],[0,"utility_command","ic_sys","",null,null],[3,"UtilityCommand","ic_sys::utility_command","An invocation of a program, possibly including some input…",null,null],[4,"UtilityCommandError","","",null,null],[13,"IoError","","",2,null],[13,"Failed","","",2,null],[6,"UtilityCommandResult","","",null,null],[11,"new","","A utility command executing `program` with arguments `args`.",3,[[["vec",3],["string",3]]]],[11,"with_input","","",3,[[["vec",3]]]],[11,"execute","","Execute the command and capture the output.",3,[[],[["vec",3],["utilitycommandresult",6]]]],[11,"read_public_key","","Create the utility command that, when called, reads the…",3,[[["option",4]]]],[11,"sign_message","","",3,[[["vec",3],["option",4]]]],[11,"try_to_attach_hsm","","Try to attach the USB HSM, if the VSOCK_AGENT_PATH binary…",3,[[]]],[11,"try_to_detach_hsm","","Try to detach the USB HSM, if the VSOCK_AGENT_PATH binary…",3,[[]]],[11,"from","ic_sys","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","ic_sys::fs","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","ic_sys::mmap","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"encode_hex","","",1,[[]]],[11,"encode_hex_upper","","",1,[[]]],[11,"from","ic_sys::utility_command","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"drop","ic_sys::mmap","",1,[[]]],[11,"as_ref","","",1,[[]]],[11,"clone","ic_sys::utility_command","",2,[[],["utilitycommanderror",4]]],[11,"clone","","",3,[[],["utilitycommand",3]]],[11,"cmp","","",3,[[["utilitycommand",3]],["ordering",4]]],[11,"eq","","",3,[[["utilitycommand",3]]]],[11,"ne","","",3,[[["utilitycommand",3]]]],[11,"partial_cmp","","",3,[[["utilitycommand",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["utilitycommand",3]]]],[11,"le","","",3,[[["utilitycommand",3]]]],[11,"gt","","",3,[[["utilitycommand",3]]]],[11,"ge","","",3,[[["utilitycommand",3]]]],[11,"deref","ic_sys","",4,[[]]],[11,"deref","","",5,[[]]],[11,"fmt","ic_sys::fs","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_sys::utility_command","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","ic_sys::fs","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_sys::utility_command","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"hash","","",3,[[]]],[11,"initialize","ic_sys","",4,[[]]],[11,"initialize","","",5,[[]]]],"p":[[4,"FileCloneError"],[3,"ScopedMmap"],[4,"UtilityCommandError"],[3,"UtilityCommand"],[3,"PAGE_SIZE"],[3,"IS_WSL"]]},\
"ic_system_api":{"doc":"","i":[[3,"SystemApiImpl","ic_system_api","Struct that implements the SystemApi trait. This trait…",null,null],[4,"ApiType","","",null,null],[13,"Start","","",0,null],[13,"Init","","",0,null],[12,"time","ic_system_api::ApiType","",1,null],[12,"incoming_payload","","",1,null],[12,"caller","","",1,null],[13,"Update","ic_system_api","",0,null],[12,"time","ic_system_api::ApiType","",2,null],[12,"incoming_payload","","",2,null],[12,"incoming_cycles","","",2,null],[12,"caller","","",2,null],[12,"call_context_id","","",2,null],[12,"response_data","","",2,null],[12,"response_status","","",2,null],[12,"own_subnet_id","","",2,null],[12,"own_subnet_type","","",2,null],[12,"routing_table","","",2,null],[12,"subnet_records","","",2,null],[12,"outgoing_request","","Optional outgoing request under construction. If `None` no…",2,null],[12,"max_reply_size","","",2,null],[13,"ReplicatedQuery","ic_system_api","",0,null],[12,"time","ic_system_api::ApiType","",3,null],[12,"incoming_payload","","",3,null],[12,"caller","","",3,null],[12,"response_data","","",3,null],[12,"response_status","","",3,null],[12,"data_certificate","","",3,null],[12,"max_reply_size","","",3,null],[13,"NonReplicatedQuery","ic_system_api","",0,null],[12,"time","ic_system_api::ApiType","",4,null],[12,"incoming_payload","","",4,null],[12,"caller","","",4,null],[12,"call_context_id","","",4,null],[12,"data_certificate","","",4,null],[12,"own_subnet_id","","",4,null],[12,"routing_table","","",4,null],[12,"outgoing_request","","Optional outgoing request under construction. If `None` no…",4,null],[12,"response_data","","",4,null],[12,"response_status","","",4,null],[12,"max_reply_size","","",4,null],[13,"ReplyCallback","ic_system_api","",0,null],[12,"time","ic_system_api::ApiType","",5,null],[12,"incoming_payload","","",5,null],[12,"incoming_cycles","","",5,null],[12,"call_context_id","","",5,null],[12,"response_data","","",5,null],[12,"response_status","","",5,null],[12,"own_subnet_id","","",5,null],[12,"own_subnet_type","","",5,null],[12,"routing_table","","",5,null],[12,"subnet_records","","",5,null],[12,"outgoing_request","","Optional outgoing request under construction. If `None` no…",5,null],[12,"max_reply_size","","",5,null],[13,"RejectCallback","ic_system_api","",0,null],[12,"time","ic_system_api::ApiType","",6,null],[12,"reject_context","","",6,null],[12,"incoming_cycles","","",6,null],[12,"call_context_id","","",6,null],[12,"response_data","","",6,null],[12,"response_status","","",6,null],[12,"own_subnet_id","","",6,null],[12,"own_subnet_type","","",6,null],[12,"routing_table","","",6,null],[12,"subnet_records","","",6,null],[12,"outgoing_request","","Optional outgoing request under construction. If `None` no…",6,null],[12,"max_reply_size","","",6,null],[13,"PreUpgrade","ic_system_api","",0,null],[12,"caller","ic_system_api::ApiType","",7,null],[12,"time","","",7,null],[13,"InspectMessage","ic_system_api","For executing canister_inspect_message method that allows…",0,null],[12,"caller","ic_system_api::ApiType","",8,null],[12,"method_name","","",8,null],[12,"incoming_payload","","",8,null],[12,"time","","",8,null],[12,"message_accepted","","",8,null],[13,"Heartbeat","ic_system_api","",0,null],[12,"time","ic_system_api::ApiType","",9,null],[12,"call_context_id","","",9,null],[12,"own_subnet_id","","",9,null],[12,"own_subnet_type","","",9,null],[12,"routing_table","","",9,null],[12,"subnet_records","","",9,null],[12,"outgoing_request","","Optional outgoing request under construction. If `None` no…",9,null],[13,"Cleanup","ic_system_api","For executing the `call_on_cleanup` callback.",0,null],[12,"time","ic_system_api::ApiType","",10,null],[8,"SystemStateAccessor","ic_system_api","The abstract interface through which canister user code…",null,null],[10,"canister_id","","Obtains the canister ID.",11,[[],["canisterid",3]]],[10,"controller","","Obtains the controller of this canister.",11,[[],["principalid",3]]],[10,"mint_cycles","","Increases the balance of the canister by `amount`",11,[[["cycles",3]],["hypervisorresult",6]]],[10,"msg_cycles_accept","","Accepts cycles from given call context.",11,[[["callcontextid",6],["cycles",3]],["cycles",3]]],[10,"msg_cycles_available","","Determines cycles given in call context.",11,[[["callcontextid",6]],[["cycles",3],["hypervisorresult",6]]]],[10,"stable_size","","Determines size of stable memory in Web assembly pages.",11,[[]]],[10,"stable_grow","","Grows stable memory by specified amount.",11,[[]]],[10,"stable_read","","Reads from stable memory back to heap.",11,[[],[["result",4],["stablememoryerror",4]]]],[10,"stable_write","","Writes from heap to stable memory.",11,[[],[["result",4],["stablememoryerror",4]]]],[10,"canister_cycles_balance","","Current cycles balance of the canister.",11,[[],["cycles",3]]],[10,"canister_cycles_withdraw","","Withdraws cycles from canister\'s balance.",11,[[["numbytes",6],["computeallocation",3],["cycles",3]],["hypervisorresult",6]]],[10,"canister_cycles_refund","","(Re-)add cycles to canister. This is intended to be used…",11,[[["cycles",3]]]],[10,"set_certified_data","","Set certified data.",11,[[["vec",3]]]],[10,"register_callback","","Registers callback for call return.",11,[[["callback",3]],["callbackid",6]]],[10,"unregister_callback","","Unregister callback for call return.",11,[[["callbackid",6]],[["option",4],["callback",3]]]],[10,"push_output_request","","Pushes outgoing request.",11,[[["numbytes",6],["computeallocation",3],["request",3]],["result",4]]],[10,"canister_status","","Current status of canister.",11,[[],["canisterstatus",4]]],[8,"PauseHandler","","Interface for canister execution to pause itself in…",null,null],[10,"pause","","Pause execution of calling canister until return of this…",12,[[],["numinstructions",6]]],[11,"start","","",0,[[]]],[11,"init","","",0,[[["vec",3],["principalid",3],["time",3]]]],[11,"heartbeat","","",0,[[["routingtable",3],["btreemap",3],["callcontextid",6],["subnettype",4],["arc",3],["time",3],["arc",3],["subnetid",6]]]],[11,"update","","",0,[[["routingtable",3],["cycles",3],["btreemap",3],["vec",3],["principalid",3],["subnetid",6],["subnettype",4],["callcontextid",6],["time",3],["arc",3],["arc",3]]]],[11,"replicated_query","","",0,[[["option",4],["time",3],["vec",3],["principalid",3]]]],[11,"non_replicated_query","","",0,[[["routingtable",3],["vec",3],["principalid",3],["subnetid",6],["arc",3],["callcontextid",6],["time",3],["option",4]]]],[11,"reply_callback","","",0,[[["routingtable",3],["cycles",3],["btreemap",3],["vec",3],["subnetid",6],["subnettype",4],["callcontextid",6],["time",3],["arc",3],["arc",3]]]],[11,"reject_callback","","",0,[[["routingtable",3],["cycles",3],["btreemap",3],["rejectcontext",3],["subnetid",6],["subnettype",4],["callcontextid",6],["time",3],["arc",3],["arc",3]]]],[11,"pre_upgrade","","",0,[[["principalid",3],["time",3]]]],[11,"inspect_message","","",0,[[["string",3],["time",3],["principalid",3],["vec",3]]]],[11,"new","","",13,[[["pausehandler",8],["subnetavailablememory",3],["apitype",4],["numbytes",6],["numinstructions",6],["computeallocation",3],["box",3]]]],[11,"take_execution_result","","",13,[[],[["hypervisorresult",6],["option",4]]]],[11,"release_system_state_accessor","","",13,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"clone","","",0,[[],["apitype",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"set_execution_error","","",13,[[["hypervisorerror",4]]]],[11,"get_execution_error","","",13,[[],[["option",4],["hypervisorerror",4]]]],[11,"get_available_num_instructions","","",13,[[],["numinstructions",6]]],[11,"set_available_num_instructions","","",13,[[["numinstructions",6]]]],[11,"get_stable_memory_delta_pages","","",13,[[]]],[11,"ic0_msg_caller_copy","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_caller_size","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_arg_data_size","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_arg_data_copy","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_method_name_size","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_method_name_copy","","",13,[[],["hypervisorresult",6]]],[11,"ic0_accept_message","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_reply_data_append","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_reply","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_reject","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_reject_code","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_reject_msg_size","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_reject_msg_copy","","",13,[[],["hypervisorresult",6]]],[11,"ic0_canister_self_size","","",13,[[],["hypervisorresult",6]]],[11,"ic0_canister_self_copy","","",13,[[],["hypervisorresult",6]]],[11,"ic0_controller_size","","",13,[[],["hypervisorresult",6]]],[11,"ic0_controller_copy","","",13,[[],["hypervisorresult",6]]],[11,"ic0_debug_print","","",13,[[]]],[11,"ic0_exec","","",13,[[["vec",3]],["hypervisorerror",4]]],[11,"ic0_trap","","",13,[[],["hypervisorerror",4]]],[11,"ic0_call_simple","","",13,[[],["hypervisorresult",6]]],[11,"ic0_call_new","","",13,[[],["hypervisorresult",6]]],[11,"ic0_call_data_append","","",13,[[],["hypervisorresult",6]]],[11,"ic0_call_on_cleanup","","",13,[[],["hypervisorresult",6]]],[11,"ic0_call_cycles_add","","",13,[[],["hypervisorresult",6]]],[11,"ic0_call_perform","","",13,[[],["hypervisorresult",6]]],[11,"ic0_stable_size","","",13,[[],["hypervisorresult",6]]],[11,"ic0_stable_grow","","",13,[[],["hypervisorresult",6]]],[11,"ic0_stable_read","","",13,[[],["hypervisorresult",6]]],[11,"ic0_stable_write","","",13,[[],["hypervisorresult",6]]],[11,"ic0_time","","",13,[[],[["hypervisorresult",6],["time",3]]]],[11,"out_of_instructions","","",13,[[],[["hypervisorresult",6],["numinstructions",6]]]],[11,"update_available_memory","","",13,[[],["hypervisorresult",6]]],[11,"ic0_canister_cycle_balance","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_cycles_available","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_cycles_refunded","","",13,[[],["hypervisorresult",6]]],[11,"ic0_msg_cycles_accept","","",13,[[],["hypervisorresult",6]]],[11,"ic0_data_certificate_present","","",13,[[],["hypervisorresult",6]]],[11,"ic0_data_certificate_size","","",13,[[],["hypervisorresult",6]]],[11,"ic0_data_certificate_copy","","",13,[[],["hypervisorresult",6]]],[11,"ic0_certified_data_set","","",13,[[],["hypervisorresult",6]]],[11,"ic0_canister_status","","",13,[[],["hypervisorresult",6]]],[11,"ic0_mint_cycles","","",13,[[],["hypervisorresult",6]]]],"p":[[4,"ApiType"],[13,"Init"],[13,"Update"],[13,"ReplicatedQuery"],[13,"NonReplicatedQuery"],[13,"ReplyCallback"],[13,"RejectCallback"],[13,"PreUpgrade"],[13,"InspectMessage"],[13,"Heartbeat"],[13,"Cleanup"],[8,"SystemStateAccessor"],[8,"PauseHandler"],[3,"SystemApiImpl"]]},\
"ic_transport":{"doc":"Transport component for the internet computer","i":[[0,"transport","ic_transport","Transport client interface.",null,null],[5,"create_transport","ic_transport::transport","Creates a new instance of `TransportImpl`.",null,[[["replicalogger",6],["registryversion",6],["nodeid",6],["transportconfig",3],["handle",3],["tlshandshake",8],["metricsregistry",3],["arc",3]],[["transport",8],["arc",3]]]],[0,"utils","ic_transport","Helper functionality for transport.",null,null]],"p":[]},\
"ic_types":{"doc":"This crate contains assorted types that other component…","i":[[5,"subnet_id_into_protobuf","ic_types","Converts a SubnetId into its protobuf definition.…",null,[[["principalid",3],["id",3],["subnettag",3]],["subnetid",3]]],[5,"subnet_id_try_from_protobuf","","From its protobuf definition convert to a SubnetId.…",null,[[["subnetid",3]],[["result",4],["principalidblobparseerror",4],["id",3]]]],[3,"CanisterId","","A type representing a canister\'s [`PrincipalId`].",null,null],[4,"CanisterIdBlobParseError","","Represents an error that can occur when parsing a blob…",null,null],[13,"PrincipalIdBlobParseError","","",0,null],[13,"CanisterIdError","","",0,null],[4,"CanisterIdError","","Represents an error that can occur when constructing a…",null,null],[13,"InvalidPrincipalId","","An invalid [`PrincipalId`] was given.",1,null],[13,"PrincipalIdParseError","","The input string could not be parsed into a [`PrincipalId`].",1,null],[4,"CanisterStatusType","","Indicates whether the canister is running, stopping, or…",null,null],[13,"Running","","",2,null],[13,"Stopping","","",2,null],[13,"Stopped","","",2,null],[6,"NodeId","","A type representing a node\'s [`PrincipalId`].",null,null],[3,"NodeTag","","",null,null],[6,"NumBytes","","This type models a non-negative number of bytes.",null,null],[3,"PrincipalId","","The type representing principals as described in the…",null,null],[4,"PrincipalIdBlobParseError","","Represents an error that can occur when parsing a blob…",null,null],[13,"TooLong","","",3,null],[4,"PrincipalIdParseError","","Represents an error that can occur when parsing a string…",null,null],[13,"TooLong","","",4,null],[13,"TooShort","","",4,null],[13,"NotBase32","","",4,null],[13,"Wrong","","",4,null],[12,"expected","ic_types::PrincipalIdParseError","",5,null],[6,"RegistryVersion","ic_types","A type representing the registry\'s version.",null,null],[6,"SubnetId","","A type representing a subnet\'s [`PrincipalId`].",null,null],[6,"NodeIndex","","The index of a node.",null,null],[3,"UserTag","","",null,null],[3,"IDkgId","","The ID for interactive DKG.",null,null],[12,"instance_id","","",6,null],[12,"subnet_id","","",6,null],[3,"HeightTag","","",null,null],[3,"NumInstructionsTag","","",null,null],[3,"QueueIndexTag","","",null,null],[3,"RandomnessTag","","",null,null],[3,"ExecutionRoundTag","","",null,null],[3,"AccumulatedPriority","","`AccumulatedPriority` is a part of the SchedulerState. It…",null,null],[3,"QueryAllocation","","Type to track how much budget the IC can spend on…",null,null],[3,"InvalidQueryAllocationError","","The error returned when an invalid [`QueryAllocation`] is…",null,null],[12,"min","","",7,null],[12,"max","","",7,null],[12,"given","","",7,null],[3,"ComputeAllocation","","`ComputeAllocation` is a percent between 0 and 100…",null,null],[3,"InvalidComputeAllocationError","","The error that occurs when an end-user specifies an…",null,null],[3,"MemoryAllocation","","`MemoryAllocation` is a number of bytes between 0 and 2^48…",null,null],[3,"InvalidMemoryAllocationError","","The error that occurs when an end-user specifies an…",null,null],[12,"min","","",8,null],[12,"max","","",8,null],[12,"given","","",8,null],[3,"InstallCodeContext","","",null,null],[12,"sender","","",9,null],[12,"mode","","",9,null],[12,"canister_id","","",9,null],[12,"wasm_module","","",9,null],[12,"arg","","",9,null],[12,"compute_allocation","","",9,null],[12,"memory_allocation","","",9,null],[12,"query_allocation","","",9,null],[4,"CanonicalPartialStateTag","","",null,null],[4,"CanonicalStateTag","","",null,null],[4,"InstallCodeContextError","","Errors that can occur when converting from (sender,…",null,null],[13,"ComputeAllocation","","",10,null],[13,"MemoryAllocation","","",10,null],[13,"QueryAllocation","","",10,null],[13,"InvalidCanisterId","","",10,null],[5,"user_id_into_protobuf","","Converts a UserId into its protobuf definition. Normally,…",null,[[["userid",6]],["userid",3]]],[5,"user_id_try_from_protobuf","","From its protobuf definition convert to a UserId.…",null,[[["userid",3]],[["userid",6],["result",4],["principalidblobparseerror",4]]]],[5,"node_id_into_protobuf","","Converts a NodeId into its protobuf definition. Normally,…",null,[[["nodeid",6]],["nodeid",3]]],[5,"node_id_try_from_protobuf","","From its protobuf definition convert to a NodeId.…",null,[[["nodeid",3]],[["nodeid",6],["result",4],["principalidblobparseerror",4]]]],[5,"freeze_threshold_cycles","","Figure out how many cycles a canister should have so that…",null,[[["cycles",3],["numseconds",6],["numbytes",6]],["cycles",3]]],[0,"artifact","","Artifact related types.",null,null],[3,"SignedIngress","ic_types::artifact","Describes the signed ingress message that was received…",null,null],[3,"ArtifactTagIter","","",null,null],[3,"ArtifactFilter","","A collection of \\\"filters\\\" used by the gossip protocol for…",null,null],[12,"consensus_filter","","",11,null],[12,"ingress_filter","","",11,null],[12,"certification_filter","","",11,null],[12,"state_sync_filter","","",11,null],[12,"no_filter","","",11,null],[3,"PriorityIter","","",null,null],[3,"Advert","","A helper type that represents a type-indexed Advert.",null,null],[12,"id","","",12,null],[12,"attribute","","",12,null],[12,"size","","",12,null],[12,"integrity_hash","","",12,null],[3,"ConsensusMessageId","","Consensus message identifier carries both an message hash…",null,null],[12,"hash","","",13,null],[12,"height","","",13,null],[3,"ConsensusMessageFilter","","Consensus message filter is by height.",null,null],[12,"height","","",14,null],[3,"IngressMessageId","","[`IngressMessageId`] includes expiry time in addition to…",null,null],[12,"message_id","","",15,null],[3,"IngressMessageAttribute","","Dummy definition of ingress message attribute for now.",null,null],[3,"CertificationMessageId","","Certification message identifier carries both message hash…",null,null],[12,"hash","","",16,null],[12,"height","","",16,null],[3,"CertificationMessageFilter","","Certification message filter is by height.",null,null],[12,"height","","",17,null],[3,"DkgMessageAttribute","","",null,null],[12,"interval_start_height","","",18,null],[3,"StateSyncArtifactId","","Identifier of a state sync artifact.",null,null],[12,"height","","",19,null],[12,"hash","","",19,null],[3,"StateSyncMessage","","State sync message.",null,null],[12,"height","","",20,null],[12,"root_hash","","",20,null],[12,"checkpoint_root","","Absolute path to the checkpoint root directory.",20,null],[12,"manifest","","The manifest containing the summary of the content.",20,null],[12,"get_state_sync_chunk","","",20,null],[3,"StateSyncAttribute","","State sync atrribute.",null,null],[12,"height","","",21,null],[12,"root_hash","","",21,null],[3,"StateSyncFilter","","State sync filter is by height.",null,null],[12,"height","","",22,null],[4,"Artifact","","The artifact type",null,null],[13,"ConsensusMessage","","",23,null],[13,"IngressMessage","","",23,null],[13,"CertificationMessage","","",23,null],[13,"DkgMessage","","",23,null],[13,"FileTreeSync","","",23,null],[13,"StateSync","","",23,null],[4,"ArtifactAttribute","","Artifact attribute type.",null,null],[13,"ConsensusMessage","","",24,null],[13,"IngressMessage","","",24,null],[13,"DkgMessage","","",24,null],[13,"CertificationMessage","","",24,null],[13,"FileTreeSync","","",24,null],[13,"StateSync","","",24,null],[4,"ArtifactId","","Artifact identifier type.",null,null],[13,"ConsensusMessage","","",25,null],[13,"IngressMessage","","",25,null],[13,"CertificationMessage","","",25,null],[13,"DkgMessage","","",25,null],[13,"FileTreeSync","","",25,null],[13,"StateSync","","",25,null],[4,"ArtifactTag","","Artifact tags is used to select an artifact subtype when…",null,null],[13,"ConsensusArtifact","","",26,null],[13,"IngressArtifact","","",26,null],[13,"CertificationArtifact","","",26,null],[13,"DkgArtifact","","",26,null],[13,"FileTreeSyncArtifact","","",26,null],[13,"StateSyncArtifact","","",26,null],[4,"Priority","","Priority of artifact.",null,null],[13,"Drop","","Drop the advert, the IC doesn\'t need the corresponding…",27,null],[13,"Stash","","Stash the advert. Processing of this advert is suspended,…",27,null],[13,"Later","","Low priority adverts to be considered for download, given…",27,null],[13,"Fetch","","Normal priority adverts.",27,null],[13,"FetchNow","","High priority adverts.",27,null],[4,"CertificationMessageAttribute","","The certification message attribute used by the priority…",null,null],[13,"Certification","","",28,null],[13,"CertificationShare","","",28,null],[6,"PriorityFn","","Priority function used by `ArtifactClient`.",null,null],[6,"ArtifactPriorityFn","","Wraps individual `PriorityFn`s, used by `ArtifactManager`.",null,null],[6,"IngressMessageFilter","","Ingress messages are filtered by their expiry time.",null,null],[6,"DkgMessageId","","Identifier of a DKG message.",null,null],[6,"FileTreeSyncAttribute","","File tree sync attribute.",null,null],[8,"ArtifactKind","","Related artifact sub-types (Message/Id/Attribute/Filter)…",null,null],[18,"TAG","","",29,null],[16,"Id","","",29,null],[16,"Message","","",29,null],[16,"SerializeAs","","",29,null],[16,"Attribute","","",29,null],[16,"Filter","","",29,null],[10,"to_advert","","Returns the advert of the given message.",29,[[],["advert",3]]],[11,"check_advert","","Checks if the given advert matches what is computed from…",29,[[["advert",3]],[["advert",3],["result",4]]]],[11,"new","","Create a new IngressMessageId",15,[[["time",3],["messageid",3]]]],[11,"expiry","","",15,[[],["time",3]]],[11,"new","","",30,[[["signedingress",3]]]],[0,"batch","ic_types","Contains Batch, Payload, and specific Payload types that…",null,null],[3,"Batch","ic_types::batch","The `Batch` provided to Message Routing for deterministic…",null,null],[12,"batch_number","","The sequence number attached to the batch.",31,null],[12,"requires_full_state_hash","","Whether the state obtained by executing this batch needs…",31,null],[12,"payload","","The payload to be processed.",31,null],[12,"randomness","","A source of randomness for processing the Batch.",31,null],[12,"registry_version","","The version of the registry to be referenced when…",31,null],[12,"time","","A clock time to be used for processing messages.",31,null],[12,"consensus_responses","","Responses to subnet calls that reqire consensus\'…",31,null],[3,"ValidationContext","","The context built by Consensus for deterministic…",null,null],[12,"registry_version","","The registry version to be associated with the payload.",32,null],[12,"certified_height","","The certified state height necessary for the validation of…",32,null],[12,"time","","The clock time being used for the payload.",32,null],[3,"BatchPayload","","The payload of a batch.",null,null],[12,"ingress","","",33,null],[12,"xnet","","",33,null],[3,"XNetPayload","","Payload that contains XNet messages.",null,null],[12,"stream_slices","","",34,null],[3,"IngressPayload","","Payload that contains Ingress messages",null,null],[4,"IngressPayloadError","","Possible errors when accessing messages in an…",null,null],[13,"IndexOutOfBound","","",35,null],[13,"IngressPositionOutOfBound","","",35,null],[13,"DeserializationFailure","","",35,null],[13,"MismatchedMessageIdAtIndex","","",35,null],[4,"InvalidIngressPayload","","Possible errors when converting from an [`IngressPayload`]…",null,null],[13,"DeserializationError","","",36,null],[13,"MismatchedMessageId","","",36,null],[6,"IngressAndXNetMessages","","Return ingress messages, xnet messages, and consensus…",null,null],[11,"new","","",33,[[["ingresspayload",3],["xnetpayload",3]]]],[11,"into_messages","","Extract and return the set of ingress and xnet messages in…",33,[[],[["ingressandxnetmessages",6],["result",4],["invalidingresspayload",4]]]],[11,"is_empty","","",33,[[]]],[11,"message_count","","Return the number of ingress messages contained in this…",37,[[]]],[11,"message_ids","","Return all MessageIds in the payload.",37,[[],[["ingressmessageid",3],["vec",3]]]],[11,"is_empty","","Return true if the payload is empty.",37,[[]]],[11,"get","","Return the ingress message at a given index, which is…",37,[[],[["result",4],["ingresspayloaderror",4]]]],[0,"chunkable","ic_types","[`Chunkable`] Artifact Trait.",null,null],[3,"ArtifactChunk","ic_types::chunkable","An artifact chunk.",null,null],[12,"chunk_id","","",38,null],[12,"witness","","",38,null],[12,"artifact_chunk_data","","",38,null],[4,"ArtifactErrorCode","","Error codes returned by the `Chunkable` interface.",null,null],[13,"ChunksMoreNeeded","","",39,null],[13,"ChunkVerificationFailed","","",39,null],[4,"ArtifactChunkData","","The data contained in an artifact chunk.",null,null],[13,"UnitChunkData","","",40,null],[13,"SemiStructuredChunkData","","",40,null],[4,"SingleChunked","","Artifact types composed of a single chunk.",null,null],[13,"Consensus","","",41,null],[13,"Ingress","","",41,null],[13,"Certification","","",41,null],[13,"Dkg","","",41,null],[6,"ChunkId","","The chunk type.",null,null],[8,"ChunkableArtifact","","Interface providing access to artifact chunks.",null,null],[10,"get_chunk","","Retrieves the artifact chunk with the given ID.",42,[[["chunkid",6],["box",3]],[["artifactchunk",3],["option",4]]]],[8,"Chunkable","","Basic chunking interface for [`SingleChunked`] artifact…",null,null],[10,"get_artifact_hash","","",43,[[],["cryptohash",3]]],[10,"chunks_to_download","","",43,[[],[["iterator",8],["box",3]]]],[10,"get_artifact_identifier","","",43,[[],["cryptohash",3]]],[10,"add_chunk","","",43,[[["artifactchunk",3]],[["result",4],["artifact",4],["artifacterrorcode",4]]]],[10,"is_complete","","",43,[[]]],[10,"get_chunk_size","","",43,[[["chunkid",6]]]],[0,"consensus","ic_types","Defines types used internally by consensus components.",null,null],[3,"Payload","ic_types::consensus","A lazily loaded `BlockPayload` that is also internally…",null,null],[3,"BasicSignature","","BasicSignature captures basic signature on a value and the…",null,null],[12,"signature","","",44,null],[12,"signer","","",44,null],[3,"ThresholdSignature","","ThresholdSignature captures a threshold signature on a…",null,null],[12,"signature","","",45,null],[12,"signer","","",45,null],[3,"ThresholdSignatureShare","","ThresholdSignatureShare captures a share of a threshold…",null,null],[12,"signature","","",46,null],[12,"signer","","",46,null],[3,"MultiSignature","","MultiSignature captures a cryptographic multi-signature,…",null,null],[12,"signature","","",47,null],[12,"signers","","",47,null],[3,"MultiSignatureShare","","MultiSignatureShare is a signature from one replica.…",null,null],[12,"signature","","",48,null],[12,"signer","","",48,null],[3,"Rank","","Rank is used to indicate the priority of a block maker,…",null,null],[12,"0","","",49,null],[3,"Block","","Block is the type that is used to create blocks out of…",null,null],[12,"parent","","the parent block that this block extends, forming a block…",50,null],[12,"payload","","the payload of the block",50,null],[12,"height","","the height of the block, which is the height of the parent…",50,null],[12,"rank","","rank indicates the rank of the block maker that created…",50,null],[12,"context","","the context with respect to which this block should be…",50,null],[3,"NotarizationContent","","NotarizationContent holds the values that are signed in a…",null,null],[12,"height","","",51,null],[12,"block","","",51,null],[3,"FinalizationContent","","FinalizationContent holds the values that are signed in a…",null,null],[12,"height","","",52,null],[12,"block","","",52,null],[3,"RandomBeaconContent","","RandomBeaconContent holds the content that is signed in…",null,null],[12,"height","","",53,null],[12,"parent","","",53,null],[3,"RandomTapeContent","","RandomTapeContent holds the content that is signed in the…",null,null],[12,"height","","",54,null],[4,"BlockPayload","","Block payload is either DKG summary or (BatchPayload, DKG…",null,null],[13,"Summary","","A BlockPayload::Summary contains only a DKG Summary",55,null],[13,"BatchAndDealings","","A BlockPayload::BatchAndDealings contains batch payload…",55,null],[4,"ConsensusMessage","","The enum encompassing all of the consensus artifacts…",null,null],[13,"RandomBeacon","","",56,null],[13,"Finalization","","",56,null],[13,"Notarization","","",56,null],[13,"BlockProposal","","",56,null],[13,"RandomBeaconShare","","",56,null],[13,"NotarizationShare","","",56,null],[13,"FinalizationShare","","",56,null],[13,"RandomTape","","",56,null],[13,"RandomTapeShare","","",56,null],[13,"CatchUpPackage","","",56,null],[13,"CatchUpPackageShare","","",56,null],[4,"ConsensusMessageHash","","ConsensusMessageHash has the same variants as…",null,null],[13,"RandomBeacon","","",57,null],[13,"Finalization","","",57,null],[13,"Notarization","","",57,null],[13,"BlockProposal","","",57,null],[13,"RandomBeaconShare","","",57,null],[13,"NotarizationShare","","",57,null],[13,"FinalizationShare","","",57,null],[13,"RandomTape","","",57,null],[13,"RandomTapeShare","","",57,null],[13,"CatchUpPackage","","",57,null],[13,"CatchUpPackageShare","","",57,null],[4,"ConsensusMessageAttribute","","ConsensusMessageAttribute has the same variants as…",null,null],[13,"RandomBeacon","","",58,null],[13,"Finalization","","",58,null],[13,"Notarization","","",58,null],[13,"BlockProposal","","",58,null],[13,"RandomBeaconShare","","",58,null],[13,"NotarizationShare","","",58,null],[13,"FinalizationShare","","",58,null],[13,"RandomTape","","",58,null],[13,"RandomTapeShare","","",58,null],[13,"CatchUpPackage","","",58,null],[13,"CatchUpPackageShare","","",58,null],[4,"Committee","","Indicates one of the consensus committees that are…",null,null],[13,"LowThreshold","","LowThreshold indicates the committee that creates…",59,null],[13,"HighThreshold","","HighThreshold indicates the committee that creates…",59,null],[13,"Notarization","","Notarization indicates the committee that creates…",59,null],[5,"get_committee_size","","Compute the size of the committee given the total amount…",null,[[]]],[5,"get_faults_tolerated","","Returns the upper limit of faulty participants for `n`…",null,[[]]],[0,"catchup","","Defines types that allow outdated replicas to catch up to…",null,null],[3,"CatchUpContentT","ic_types::consensus::catchup","A generic struct shared between CatchUpContent and…",null,null],[12,"block","","A finalized Block that contains DKG summary. We call its…",60,null],[12,"random_beacon","","The RandomBeacon that is used at the catchup height.",60,null],[12,"state_hash","","Hash of the subnet execution state that has been fully…",60,null],[3,"CatchUpPackageParam","","The parameters used to request `CatchUpPackage` (by…",null,null],[3,"CatchUpContentProtobufBytes","","CatchUpContentProtobufBytes holds bytes that represent a…",null,null],[12,"0","","",61,null],[3,"CUPWithOriginalProtobuf","","A catch up package paired with the original protobuf. Note…",null,null],[12,"cup","","The CUP as `CatchUpPackage`",62,null],[12,"protobuf","","The CUP as protobuf message",62,null],[6,"CatchUpContent","","CatchUpContent contains all necessary data to bootstrap a…",null,null],[6,"CatchUpPackage","","CatchUpPackage is signed by a threshold public key. Its…",null,null],[6,"CatchUpContentHash","","CatchUpContentHash is the type of a hashed `CatchUpContent`",null,null],[6,"CatchUpShareContent","","Content of CatchUpPackageShare uses the block hash to keep…",null,null],[6,"CatchUpPackageShare","","CatchUpPackageShare is signed by individual members in a…",null,null],[11,"new","","Create a new CatchUpContent",60,[[["hashedrandombeacon",6],["cryptohashofstate",6],["hashedblock",6]]]],[11,"registry_version","","Return the registry version as recorded in the DKG summary…",60,[[],["registryversion",6]]],[11,"from_share_content","","Create a CatchupContent from a",60,[[["catchupsharecontent",6],["block",3]]]],[11,"new","","Create a new CatchUpContent",63,[[["hashedrandombeacon",6],["cryptohashofstate",6],["hashedblock",6]]]],[11,"registry_version","","Return the registry version as recorded in the DKG summary…",63,[[],["registryversion",6]]],[11,"from_share_content","","Create a CatchupContent from a",63,[[["catchupsharecontent",6],["block",3]]]],[11,"from_cup","","Create a CUPWithOriginalProtobuf from a CatchUpPackage",62,[[["catchuppackage",6]]]],[0,"certification","ic_types::consensus","Defines types used for certification.",null,null],[3,"CertificationContent","ic_types::consensus::certification","CertificationContent holds the data signed by certification",null,null],[12,"hash","","The hash of the relevant parts of the replicated state",64,null],[3,"Certification","","A Certification is a CertificationContent that is…",null,null],[12,"height","","the height that the CertificationContent belongs to",65,null],[12,"signed","","the signature on the CertificationContent",65,null],[3,"CertificationShare","","A certification share is the signature of a single replica…",null,null],[12,"height","","the height that the CertificationContent belongs to",66,null],[12,"signed","","the signature on the CertificationContent",66,null],[4,"CertificationMessage","","CertificationMessage captures the different types of…",null,null],[13,"Certification","","Certification captures a full certification on behalf of a…",67,null],[13,"CertificationShare","","CertificationShare captures a share of a certification…",67,null],[4,"CertificationMessageHash","","CertificationMessageHash contains the hash of a…",null,null],[13,"Certification","","Certification captures the hash of a full certification on…",68,null],[13,"CertificationShare","","CertificationShare captures the hash of a share of a…",68,null],[11,"new","","Create a new CertificationContent given a…",64,[[["cryptohashofpartialstate",6]]]],[0,"dkg","ic_types::consensus","Defines types used for distributed key generation.",null,null],[3,"DealingContent","ic_types::consensus::dkg","Holds the content of a DKG dealing",null,null],[12,"dealing","","the cryptographic data of the dealing",69,null],[12,"dkg_id","","The id of the DKG instance this dealing belongs to",69,null],[3,"Summary","","The DKG summary will be present as the DKG payload at…",null,null],[12,"registry_version","","The registry version used to create this summary.",70,null],[12,"configs","","The crypto configs of the currently computed DKGs, indexed…",70,null],[12,"interval_length","","The length of the current interval in rounds (following…",70,null],[12,"next_interval_length","","The length of the next interval in rounds (following the…",70,null],[12,"height","","The height of the block conatining that summary.",70,null],[3,"Dealings","","Dealings contains dealing messages and the height at which…",null,null],[12,"start_height","","The height of the DKG interval that this object belongs to",71,null],[12,"messages","","The dealing messages",71,null],[4,"Payload","","The DKG payload is either the DKG Summary, if this payload…",null,null],[13,"Summary","","DKG Summary payload",72,null],[13,"Dealings","","DKG Dealings payload",72,null],[6,"Message","","Contains a Node\'s contribution to a DKG dealing.",null,null],[6,"DealingMessages","","DealingMessages is a vector of DKG messages",null,null],[11,"new","","Create a new DealingContent",69,[[["nidkgid",3],["nidkgdealing",3]]]],[11,"new","","Create a new Summary",70,[[["nidkgtranscript",3],["nidkgconfig",3],["result",4],["height",6],["nidkgtag",4],["btreemap",3],["registryversion",6],["nidkgid",3],["btreemap",3],["vec",3]]]],[11,"with_current_transcripts","","Adds provided transcripts as current transcripts to the…",70,[[["nidkgtag",4],["nidkgtranscript",3],["btreemap",3]]]],[11,"current_transcript","","Returns a reference to the current transcript for the…",70,[[["nidkgtag",4]],["nidkgtranscript",3]]],[11,"current_transcripts","","Returns a reference to the current transcripts.",70,[[],["btreemap",3]]],[11,"next_transcript","","Returns a reference to the next transcript for the given…",70,[[["nidkgtag",4]],[["nidkgtranscript",3],["option",4]]]],[11,"next_transcripts","","Returns a reference to the next transcripts.",70,[[],["btreemap",3]]],[11,"into_transcripts","","Return the set of transcripts (current and next) for all…",70,[[],[["vec",3],["nidkgtranscript",3]]]],[11,"into_next_transcripts","","Return the set of next transcripts for all tags. If for…",70,[[],[["nidkgtag",4],["nidkgtranscript",3],["btreemap",3]]]],[11,"current_interval_includes","","Returns `true` if the provided height is included in the…",70,[[["height",6]]]],[11,"next_interval_includes","","Returns `true` if the provided height is included in the…",70,[[["height",6]]]],[11,"get_next_start_height","","Returns the start height of the next interval. This would…",70,[[],["height",6]]],[11,"transcripts_for_new_subnets","","Returns the transcripts for new subnets",70,[[],["btreemap",3]]],[11,"new_empty","","Return an empty DealingsPayload using the given…",71,[[["height",6]]]],[11,"new","","Return an new DealingsPayload.",71,[[["height",6],["dealingmessages",6]]]],[0,"hashed","ic_types::consensus","An object that is hashable can be bundled together with…",null,null],[3,"Hashed","ic_types::consensus::hashed","Bundle of both a value and its hash. Once created it…",null,null],[11,"new","","Create a `<Hashed<H, V>` object by apply a hash function…",73,[[["fnonce",8]]]],[11,"get_hash","","Return the hash field as reference.",73,[[]]],[11,"get_value","","Return the value field as reference.",73,[[]]],[11,"decompose","","Destruct a `Hashed<H, V>` into a tuple of hash and value.",73,[[]]],[11,"recompose","","Create a `Hashed<H, V>` from a hash and value",73,[[]]],[11,"into_inner","","Destruct a `Hashed<H, V>` and extract only its value.",73,[[]]],[11,"is_empty","ic_types::consensus","Return true if it is a normal block and empty",55,[[]]],[11,"is_summary","","Return true if the given payload is a summary block.",55,[[]]],[11,"as_summary","","Returns a reference to DKG summary. Panics if called on a…",55,[[],["summary",3]]],[11,"into_summary","","Returns the DKG summary. Panics if called on a normal…",55,[[],["summary",3]]],[11,"as_dealings","","Returns a reference to DKG dealings. Panics if called on a…",55,[[],["dealings",3]]],[11,"into_dealings","","Returns DKG dealings. Panics if called on a summary payload.",55,[[],["dealings",3]]],[11,"as_batch_payload","","Return a reference to batch payload. Panics if called on a…",55,[[],["batchpayload",3]]],[11,"into_batch_payload","","Return the batch payload. Panics if called on a summary…",55,[[],["batchpayload",3]]],[11,"payload_type","","Return the payload type.",55,[[],["payloadtype",4]]],[11,"dkg_interval_start_height","","Return start height of the DKG interval that this payload…",55,[[],["height",6]]],[11,"new","","Return a Payload using the given hash function and a…",74,[[["fnonce",8],["blockpayload",4],["send",8]]]],[11,"new_with","","Return a Payload with the given hash, and an intialization…",74,[[["fnonce",8],["box",3],["cryptohashof",6],["blockpayload",4],["payloadtype",4]]]],[11,"get_hash","","Return the crypto hash of the enclosed `BlockPayload`.",74,[[],["cryptohashof",6]]],[11,"is_summary","","Return true if the given payload is a summary block.",74,[[]]],[11,"payload_type","","Return the payload type of the block.",74,[[],["payloadtype",4]]],[0,"thunk","","A `Thunk<T>` represents delayed initialization of a value…",null,null],[3,"Thunk","ic_types::consensus::thunk","A lazily initialized value of type `T` that is only…",null,null],[11,"new","","Return a `Thunk<T>` object with an initialization function…",75,[[["fnonce",8],["box",3]]]],[11,"into_inner","","Convert a `Thunk<T>` object into its inner value of type…",75,[[]]],[6,"BasicSigned","ic_types::consensus","BasicSigned captures a value of type T and a…",null,null],[6,"HashedBlock","","HashedBlock contains a Block together with its hash",null,null],[6,"BlockProposal","","A BlockProposal is a HashedBlock that is signed by the…",null,null],[6,"Notarization","","A notarization is a multi-signature on a NotarizationContent",null,null],[6,"NotarizationShare","","A notarization share is a multi-signature share on a…",null,null],[6,"Finalization","","A finalization is a multi-signature on a…",null,null],[6,"FinalizationShare","","A finalization share is a multi-signature share on a…",null,null],[6,"HashedRandomBeacon","","HashedRandomBeacon holds a RandomBeacon and its hash",null,null],[6,"RandomBeacon","","A RandomBeacon is a RandomBeaconContent signed using a…",null,null],[6,"RandomBeaconShare","","RandomBeaconShare is a threshold signature share on a…",null,null],[6,"RandomTape","","A RandomTape is a RandomTapeContent signed using a…",null,null],[6,"RandomTapeShare","","RandomTapeShare is a threshold signature share on a…",null,null],[6,"Threshold","","Threshold indicates how many replicas of a committee need…",null,null],[8,"HasHeight","","Abstract messages with height attribute",null,null],[10,"height","","",76,[[],["height",6]]],[8,"HasBlockHash","","Abstract messages with block hash",null,null],[10,"block_hash","","",77,[[],["cryptohashof",6]]],[8,"HasRank","","Abstract messages with rank attribute",null,null],[10,"rank","","",78,[[],["rank",3]]],[8,"HasCommittee","","Abstract messages with committee attribute",null,null],[10,"committee","","",79,[[],["committee",4]]],[8,"HasVersion","","Abstract messages with version attribute",null,null],[10,"version","","",80,[[],["replicaversion",3]]],[8,"ContentEq","","Useful to compare equality by content, for example…",null,null],[10,"content_eq","","content_eq compares two values and returns true if their…",81,[[]]],[11,"new","","Create a new block",50,[[["cryptohashof",6],["validationcontext",3],["payload",3],["height",6],["block",3],["rank",3]]]],[11,"log_entry","","Create a BlockLogEntry from this block",50,[[["string",3]],["blocklogentry",3]]],[11,"new","","Create a new notarization content from a height and a…",51,[[["cryptohashof",6],["height",6],["block",3]]]],[11,"new","","",52,[[["cryptohashof",6],["height",6],["block",3]]]],[11,"new","","Create a new RandomBeaconContent with a given height and…",53,[[["randombeacon",6],["height",6],["cryptohashof",6]]]],[11,"new","","Create a new RandomTapeContent from a given height",54,[[["height",6]]]],[11,"digest","","",57,[[],["cryptohash",3]]],[11,"from_attribute","","",57,[[["cryptohash",3],["consensusmessageattribute",4]]]],[0,"crypto","ic_types","Defines crypto component types.",null,null],[3,"KeyId","ic_types::crypto","An id of a key. These ids are used to refer to entries in…",null,null],[12,"0","","",82,null],[3,"CryptoHash","","A cryptographic hash.",null,null],[12,"0","","",83,null],[3,"Signed","","Signed contains the signed content and its signature.",null,null],[12,"content","","",84,null],[12,"signature","","",84,null],[3,"KeyPurposeIter","","",null,null],[3,"AlgorithmIdIter","","",null,null],[3,"UserPublicKey","","A public key of a user interacting with the IC.",null,null],[12,"key","","",85,null],[12,"algorithm_id","","",85,null],[3,"NodePublicKey","","A public key of an IC node.",null,null],[12,"key","","",86,null],[12,"proof_of_possession","","",86,null],[3,"IcpPublicKey","","An ICP public key.",null,null],[12,"key","","",87,null],[3,"CommitteeMemberPublicKey","","A public key of a committee member.",null,null],[12,"key","","",88,null],[12,"proof_of_possession","","",88,null],[3,"BasicSig","","A basic signature.",null,null],[12,"0","","",89,null],[3,"IndividualMultiSig","","An individual multi-signature.",null,null],[12,"0","","",90,null],[3,"CombinedMultiSig","","A combined multi-signature.",null,null],[12,"0","","",91,null],[3,"ThresholdSigShare","","A threshold signature share.",null,null],[12,"0","","",92,null],[3,"CombinedThresholdSig","","A combined threshold signature.",null,null],[12,"0","","",93,null],[3,"CanisterSig","","A canister signature (ICCSA).",null,null],[12,"0","","",94,null],[4,"KeyPurpose","","A purpose of a key. This is used for storing and…",null,null],[13,"Placeholder","","",95,null],[13,"NodeSigning","","",95,null],[13,"QueryResponseSigning","","",95,null],[13,"DkgDealingEncryption","","",95,null],[13,"CommitteeSigning","","",95,null],[4,"AlgorithmId","","An algorithm ID. This is used to specify the signature…",null,null],[13,"Placeholder","","",96,null],[13,"MultiBls12_381","","",96,null],[13,"ThresBls12_381","","",96,null],[13,"SchnorrSecp256k1","","",96,null],[13,"StaticDhSecp256k1","","",96,null],[13,"HashSha256","","",96,null],[13,"Tls","","",96,null],[13,"Ed25519","","",96,null],[13,"Secp256k1","","",96,null],[13,"Groth20_Bls12_381","","",96,null],[13,"NiDkg_Groth20_Bls12_381","","",96,null],[13,"EcdsaP256","","",96,null],[13,"EcdsaSecp256k1","","",96,null],[13,"IcCanisterSignature","","",96,null],[4,"PublicKey","","A public key.",null,null],[13,"UserPublicKey","","",97,null],[13,"NodePublicKey","","",97,null],[13,"IcpPublicKey","","",97,null],[13,"CommitteeMemberPublicKey","","",97,null],[4,"CryptoError","","An error returned by the crypto component.",null,null],[13,"InvalidArgument","","The arguments are semantically incorrect. This error is…",98,null],[12,"message","ic_types::crypto::CryptoError","",99,null],[13,"PublicKeyNotFound","ic_types::crypto","Public key for given (entity, purpose) pair not found at…",98,null],[12,"node_id","ic_types::crypto::CryptoError","",100,null],[12,"key_purpose","","",100,null],[12,"registry_version","","",100,null],[13,"TlsCertNotFound","ic_types::crypto","TLS cert for given node_id not found at given registry…",98,null],[12,"node_id","ic_types::crypto::CryptoError","",101,null],[12,"registry_version","","",101,null],[13,"SecretKeyNotFound","ic_types::crypto","Secret key not found in SecretKeyStore.",98,null],[12,"algorithm","ic_types::crypto::CryptoError","",102,null],[12,"key_id","","",102,null],[13,"TlsSecretKeyNotFound","ic_types::crypto","TLS secret key not found in SecretKeyStore.",98,null],[12,"certificate_der","ic_types::crypto::CryptoError","",103,null],[13,"MalformedSecretKey","ic_types::crypto","Secret key could not be parsed or is otherwise invalid.",98,null],[12,"algorithm","ic_types::crypto::CryptoError","",104,null],[12,"internal_error","","",104,null],[13,"MalformedPublicKey","ic_types::crypto","Public key could not be parsed or is otherwise invalid.",98,null],[12,"algorithm","ic_types::crypto::CryptoError","",105,null],[12,"key_bytes","","",105,null],[12,"internal_error","","",105,null],[13,"MalformedSignature","ic_types::crypto","Signature could not be parsed or is otherwise invalid.",98,null],[12,"algorithm","ic_types::crypto::CryptoError","",106,null],[12,"sig_bytes","","",106,null],[12,"internal_error","","",106,null],[13,"MalformedPop","ic_types::crypto","Pop could not be parsed or is otherwise invalid.",98,null],[12,"algorithm","ic_types::crypto::CryptoError","",107,null],[12,"pop_bytes","","",107,null],[12,"internal_error","","",107,null],[13,"SignatureVerification","ic_types::crypto","Signature could not be verified.",98,null],[12,"algorithm","ic_types::crypto::CryptoError","",108,null],[12,"public_key_bytes","","",108,null],[12,"sig_bytes","","",108,null],[12,"internal_error","","",108,null],[13,"PopVerification","ic_types::crypto","Pop could not be verified.",98,null],[12,"algorithm","ic_types::crypto::CryptoError","",109,null],[12,"public_key_bytes","","",109,null],[12,"pop_bytes","","",109,null],[12,"internal_error","","",109,null],[13,"InconsistentAlgorithms","ic_types::crypto","Multi-signature: inconsistent (multiple) algorithms.",98,null],[12,"algorithms","ic_types::crypto::CryptoError","",110,null],[12,"key_purpose","","",110,null],[12,"registry_version","","",110,null],[13,"AlgorithmNotSupported","ic_types::crypto","Algorithm not supported.",98,null],[12,"algorithm","ic_types::crypto::CryptoError","",111,null],[12,"reason","","",111,null],[13,"RegistryClient","ic_types::crypto","Error querying the registry.",98,null],[13,"ThresholdSigDataNotFound","","Threshold signature data store did not contain the…",98,null],[12,"dkg_id","ic_types::crypto::CryptoError","",112,null],[13,"DkgTranscriptNotFound","ic_types::crypto","DKG transcript for given subnet ID not found at given…",98,null],[12,"subnet_id","ic_types::crypto::CryptoError","",113,null],[12,"registry_version","","",113,null],[13,"RootSubnetPublicKeyNotFound","ic_types::crypto","Root subnet public key not found at given registry version.",98,null],[12,"registry_version","ic_types::crypto::CryptoError","",114,null],[0,"dkg","ic_types::crypto","Defines interactive distributed key generation (DKG) types.",null,null],[3,"Config","ic_types::crypto::dkg","Configures interactive DKG.",null,null],[12,"dkg_id","","",115,null],[12,"dealers","","",115,null],[12,"receivers","","",115,null],[12,"threshold","","",115,null],[12,"resharing_transcript","","",115,null],[3,"Dealers","","A set of dealers for interactive DKG.",null,null],[3,"DkgConfig","","A validated configuration for interactive DKG. This…",null,null],[3,"DkgConfigData","","The non-validated config parameter object to be passed to…",null,null],[12,"dkg_id","","",116,null],[12,"dealers","","",116,null],[12,"receivers","","",116,null],[12,"threshold","","",116,null],[12,"resharing_transcript","","",116,null],[3,"Receivers","","A set of receivers for interactive DKG.",null,null],[3,"EncryptionPublicKey","","An encryption public key for interactive DKG.",null,null],[3,"Dealing","","A dealing for interactive DKG.",null,null],[12,"0","","",117,null],[3,"Transcript","","An interactive DKG transcript.",null,null],[12,"dkg_id","","",118,null],[12,"committee","","",118,null],[12,"transcript_bytes","","",118,null],[3,"TranscriptBytes","","An interactive DKG transcript as bytes.",null,null],[12,"0","","",119,null],[3,"Response","","The dealer\'s response in the interactive DKG protocol. See…",null,null],[12,"0","","",120,null],[3,"EncryptionPublicKeyWithPop","","An encryption public key together with its proof of…",null,null],[12,"key","","",121,null],[12,"proof_of_possession","","",121,null],[3,"EncryptionPublicKeyPop","","The encryption public key proof of posession.",null,null],[12,"0","","",122,null],[11,"new","","A `DkgConfig` can only be created if the following…",123,[[["dkgconfigdata",3]],[["dkgconfigvalidationerror",4],["result",4]]]],[11,"dkg_id","","",123,[[],["idkgid",3]]],[11,"dealers","","",123,[[],["dealers",3]]],[11,"receivers","","",123,[[],["receivers",3]]],[11,"threshold","","",123,[[],["dkgthreshold",3]]],[11,"resharing_transcript","","",123,[[],["option",4]]],[11,"new","","`Dealers` can only be created if the following invariants…",124,[[["nodeid",6],["vec",3]],[["dkgconfigvalidationerror",4],["result",4]]]],[11,"get","","",124,[[],["vec",3]]],[11,"iter","","",124,[[],[["iter",3],["nodeid",6]]]],[11,"count","","The count equals `dealers.len()`.",124,[[],["numberofnodes",6]]],[11,"new","","`Receivers` can only be created if the following…",125,[[["nodeid",6],["vec",3]],[["dkgconfigvalidationerror",4],["result",4]]]],[11,"get","","",125,[[]]],[11,"iter","","",125,[[],[["iter",3],["nodeid",6]]]],[11,"count","","The count equals receivers.len().",125,[[],["numberofnodes",6]]],[0,"error","ic_types::crypto","Defines crypto error types.",null,null],[3,"InvalidArgumentError","ic_types::crypto::error","Occurs if an argument is invalid.",null,null],[12,"message","","",126,null],[3,"MalformedPublicKeyError","","Occurs if a public key is malformed.",null,null],[12,"algorithm","","",127,null],[12,"key_bytes","","",127,null],[12,"internal_error","","",127,null],[3,"MalformedDataError","","Malformed X for other types of X.",null,null],[12,"algorithm","","",128,null],[12,"internal_error","","",128,null],[12,"data","","",128,null],[3,"KeyNotFoundError","","The secret key was not found in the secret key store.",null,null],[12,"internal_error","","",129,null],[12,"key_id","","",129,null],[0,"conversions","","Convert error types",null,null],[0,"threshold_sig","ic_types::crypto","Defines threshold signature types.",null,null],[4,"ThresholdSigPublicKeyBytesConversionError","ic_types::crypto::threshold_sig","Converting a threshold signature public key to bytes failed.",null,null],[13,"Malformed","","",130,null],[12,"key_bytes","ic_types::crypto::threshold_sig::ThresholdSigPublicKeyBytesConversionError","",131,null],[12,"internal_error","","",131,null],[3,"ThresholdSigPublicKey","ic_types::crypto::threshold_sig","A threshold signature public key.",null,null],[0,"errors","","Errors that may occur in the context of threshold…",null,null],[0,"threshold_sig_data_not_found_error","ic_types::crypto::threshold_sig::errors","An error that occurs if the threshold signature data has…",null,null],[4,"ThresholdSigDataNotFoundError","ic_types::crypto::threshold_sig::errors::threshold_sig_data_not_found_error","Occurs if the threshold signature data has not been loaded…",null,null],[13,"ThresholdSigDataNotFound","","",132,null],[12,"dkg_id","ic_types::crypto::threshold_sig::errors::threshold_sig_data_not_found_error::ThresholdSigDataNotFoundError","",133,null],[0,"threshold_sign_error","ic_types::crypto::threshold_sig::errors","An error that may occur when threshold signing.",null,null],[4,"ThresholdSignError","ic_types::crypto::threshold_sig::errors::threshold_sign_error","A threshold signing error.",null,null],[13,"ThresholdSigDataNotFound","","",134,null],[13,"SecretKeyNotFound","","",134,null],[12,"dkg_id","ic_types::crypto::threshold_sig::errors::threshold_sign_error::ThresholdSignError","",135,null],[12,"algorithm","","",135,null],[12,"key_id","","",135,null],[0,"ni_dkg","ic_types::crypto::threshold_sig","Types for non-interactive distributed key generation…",null,null],[3,"NiDkgTagIter","ic_types::crypto::threshold_sig::ni_dkg","",null,null],[3,"NiDkgTargetId","","An ID for a remote `NiDkgTargetSubnet`.",null,null],[3,"NiDkgDealing","","A dealer\'s contribution (called dealing) to distributed…",null,null],[12,"internal_dealing","","",136,null],[3,"NiDkgTranscript","","Summarizes a distributed key generation.",null,null],[12,"dkg_id","","",137,null],[12,"threshold","","",137,null],[12,"committee","","",137,null],[12,"registry_version","","",137,null],[12,"internal_csp_transcript","","",137,null],[4,"NiDkgTag","","Allows to distinguish protocol executions in high and low…",null,null],[13,"LowThreshold","","",138,null],[13,"HighThreshold","","",138,null],[4,"NiDkgTargetSubnet","","The subnet for which the DKG generates keys.",null,null],[13,"Local","","`Local` means the subnet creates keys for itself.",139,null],[13,"Remote","","`Remote` means the subnet creates keys for another subnet.…",139,null],[4,"DkgId","","An ID identifying a DKG epoch.",null,null],[13,"IDkgId","","",140,null],[13,"NiDkgId","","",140,null],[0,"config","","Types related to the non-interactive DKG configuration.",null,null],[3,"NiDkgConfig","ic_types::crypto::threshold_sig::ni_dkg::config","A validated configuration for non-interactive DKG. This…",null,null],[3,"NiDkgConfigData","","The non-validated config parameter object to be passed to…",null,null],[12,"dkg_id","","",141,null],[12,"max_corrupt_dealers","","",141,null],[12,"dealers","","",141,null],[12,"max_corrupt_receivers","","",141,null],[12,"receivers","","",141,null],[12,"threshold","","",141,null],[12,"registry_version","","",141,null],[12,"resharing_transcript","","If the transcript of the previous DKG phase is present,…",141,null],[3,"NiDkgThreshold","","The minimum number of nodes required to generate a valid…",null,null],[0,"dealers","","Types related to dealers for non-interactive DKG.",null,null],[3,"NiDkgDealers","ic_types::crypto::threshold_sig::ni_dkg::config::dealers","A set of dealers for non-interactive DKG. Satisfies…",null,null],[11,"new","","`NiDkgDealers` can only be created if the following…",142,[[["nodeid",6],["btreeset",3]],[["result",4],["nidkgconfigvalidationerror",4]]]],[11,"position","","Returns the position of the given `node_id` in the…",142,[[["nodeid",6]],[["option",4],["nodeindex",6]]]],[11,"get","","",142,[[],["btreeset",3]]],[11,"iter","","Returns nodes with the standard indexing.",142,[[]]],[11,"count","","",142,[[],["numberofnodes",6]]],[0,"errors","ic_types::crypto::threshold_sig::ni_dkg::config","Errors that may occur in the context of validating…",null,null],[3,"NiDkgThresholdZeroError","ic_types::crypto::threshold_sig::ni_dkg::config::errors","Occurs if the threshold is zero.",null,null],[4,"NiDkgConfigValidationError","","Occurs if a non-interactive DKG configuration is invalid.",null,null],[13,"ThresholdZero","","",143,null],[13,"DealersEmpty","","",143,null],[13,"ReceiversEmpty","","",143,null],[13,"TooManyReceivers","","",143,null],[12,"receivers_count","ic_types::crypto::threshold_sig::ni_dkg::config::errors::NiDkgConfigValidationError","",144,null],[13,"TooManyDealers","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",143,null],[12,"dealers_count","ic_types::crypto::threshold_sig::ni_dkg::config::errors::NiDkgConfigValidationError","",145,null],[13,"InsufficientThreshold","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",143,null],[12,"threshold","ic_types::crypto::threshold_sig::ni_dkg::config::errors::NiDkgConfigValidationError","",146,null],[12,"max_corrupt_receivers","","",146,null],[13,"InsufficientDealers","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",143,null],[12,"dealer_count","ic_types::crypto::threshold_sig::ni_dkg::config::errors::NiDkgConfigValidationError","",147,null],[12,"max_corrupt_dealers","","",147,null],[13,"InsufficientReceivers","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",143,null],[12,"receiver_count","ic_types::crypto::threshold_sig::ni_dkg::config::errors::NiDkgConfigValidationError","",148,null],[12,"max_corrupt_receivers","","",148,null],[12,"threshold","","",148,null],[13,"DealersNotInResharingCommittee","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",143,null],[12,"dealers_missing","ic_types::crypto::threshold_sig::ni_dkg::config::errors::NiDkgConfigValidationError","",149,null],[12,"dealers_existing","","",149,null],[12,"resharing_committee","","",149,null],[13,"InsufficientDealersForResharingThreshold","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",143,null],[12,"dealer_count","ic_types::crypto::threshold_sig::ni_dkg::config::errors::NiDkgConfigValidationError","",150,null],[12,"resharing_threshold","","",150,null],[0,"receivers","ic_types::crypto::threshold_sig::ni_dkg::config","Types related to receivers for non-interactive DKG.",null,null],[3,"NiDkgReceivers","ic_types::crypto::threshold_sig::ni_dkg::config::receivers","A set of receivers for non-interactive DKG. Satisfies…",null,null],[11,"new","","`NiDkgReceivers` can only be created if the following…",151,[[["nodeid",6],["btreeset",3]],[["result",4],["nidkgconfigvalidationerror",4]]]],[11,"position","","Returns the position of the given `node_id` in the…",151,[[["nodeid",6]],[["option",4],["nodeindex",6]]]],[11,"get","","",151,[[],["btreeset",3]]],[11,"iter","","Returns nodes with the standard indexing.",151,[[]]],[11,"count","","",151,[[],["numberofnodes",6]]],[11,"new","ic_types::crypto::threshold_sig::ni_dkg::config","Creates a new non-interactive DKG config.",152,[[["nidkgconfigdata",3]],[["result",4],["nidkgconfigvalidationerror",4]]]],[11,"dkg_id","","",152,[[],["nidkgid",3]]],[11,"max_corrupt_dealers","","",152,[[],["numberofnodes",6]]],[11,"dealers","","",152,[[],["nidkgdealers",3]]],[11,"max_corrupt_receivers","","",152,[[],["numberofnodes",6]]],[11,"receivers","","",152,[[],["nidkgreceivers",3]]],[11,"threshold","","",152,[[],["nidkgthreshold",3]]],[11,"registry_version","","",152,[[],["registryversion",6]]],[11,"resharing_transcript","","",152,[[],["option",4]]],[11,"new","","A `DkgThreshold` can only be created if the following…",153,[[["numberofnodes",6]],[["result",4],["nidkgthresholdzeroerror",3]]]],[11,"get","","",153,[[],["numberofnodes",6]]],[0,"errors","ic_types::crypto::threshold_sig::ni_dkg","Errors for non-interactive DKG.",null,null],[3,"NotADealerError","ic_types::crypto::threshold_sig::ni_dkg::errors","Occurs if a node ID that should be a dealer is not a dealer.",null,null],[12,"node_id","","",154,null],[3,"FsEncryptionPublicKeyNotInRegistryError","","Occurs if the forward-secure encryption public key cannot…",null,null],[12,"registry_version","","",155,null],[12,"node_id","","",155,null],[3,"MalformedFsEncryptionPublicKeyError","","Occurs if the forward-secure encryption public key is…",null,null],[12,"internal_error","","",156,null],[0,"create_dealing_error","","Errors related to dealing creation.",null,null],[4,"DkgCreateDealingError","ic_types::crypto::threshold_sig::ni_dkg::errors::create_dealing_error","Occurs if creating a dealing using…",null,null],[13,"NotADealer","","",157,null],[13,"FsEncryptionPublicKeyNotInRegistry","","",157,null],[13,"Registry","","",157,null],[13,"MalformedFsEncryptionPublicKey","","",157,null],[13,"FsDecryptionKeyNotInSecretKeyStore","","",157,null],[13,"InvalidTranscript","","",157,null],[0,"create_transcript_error","ic_types::crypto::threshold_sig::ni_dkg::errors","Errors related to transcript creation.",null,null],[4,"DkgCreateTranscriptError","ic_types::crypto::threshold_sig::ni_dkg::errors::create_transcript_error","Occurs if creating a transcript using…",null,null],[13,"InsufficientDealings","","",158,null],[13,"MalformedResharingTranscriptInConfig","","",158,null],[0,"key_removal_error","ic_types::crypto::threshold_sig::ni_dkg::errors","Errors related to key removal.",null,null],[4,"DkgKeyRemovalError","ic_types::crypto::threshold_sig::ni_dkg::errors::key_removal_error","Occurs if key removal using…",null,null],[13,"InputValidationError","","",159,null],[13,"FsEncryptionPublicKeyNotInRegistry","","",159,null],[13,"MalformedFsEncryptionPublicKey","","",159,null],[13,"Registry","","",159,null],[13,"FsKeyNotInSecretKeyStoreError","","",159,null],[0,"load_transcript_error","ic_types::crypto::threshold_sig::ni_dkg::errors","Errors related to loading the transcript.",null,null],[4,"DkgLoadTranscriptError","ic_types::crypto::threshold_sig::ni_dkg::errors::load_transcript_error","Occurs if loading a transcript using…",null,null],[13,"FsEncryptionPublicKeyNotInRegistry","","",160,null],[13,"Registry","","",160,null],[13,"InvalidTranscript","","",160,null],[13,"MalformedFsEncryptionPublicKey","","",160,null],[0,"transcripts_to_retain_validation_error","ic_types::crypto::threshold_sig::ni_dkg::errors","Errors related to transcripts that should be retained.",null,null],[4,"TranscriptsToRetainValidationError","ic_types::crypto::threshold_sig::ni_dkg::errors::transcripts_to_retain_validation_error","Occurs if creating `TranscriptsToRetain` using its…",null,null],[13,"NoLowTranscripts","","",161,null],[13,"NoHighTranscripts","","",161,null],[0,"verify_dealing_error","ic_types::crypto::threshold_sig::ni_dkg::errors","Errors related to verifying a dealing.",null,null],[4,"DkgVerifyDealingError","ic_types::crypto::threshold_sig::ni_dkg::errors::verify_dealing_error","Occurs if verifying a dealing using…",null,null],[13,"NotADealer","","",162,null],[13,"FsEncryptionPublicKeyNotInRegistry","","",162,null],[13,"Registry","","",162,null],[13,"MalformedFsEncryptionPublicKey","","",162,null],[13,"MalformedResharingTranscriptInConfig","","",162,null],[13,"InvalidDealingError","","",162,null],[0,"id","ic_types::crypto::threshold_sig::ni_dkg","Types related to the non-interactive DKG ID.",null,null],[3,"NiDkgId","ic_types::crypto::threshold_sig::ni_dkg::id","The ID for non-interactive DKG. Identifies a DKG epoch.",null,null],[12,"start_block_height","","This field refers to the height of the block denoting the…",163,null],[12,"dealer_subnet","","The id of the subnet performing the DKG computation.",163,null],[12,"dkg_tag","","Differentiator for the threshold level of DKGs.",163,null],[12,"target_subnet","","Indicates which subnet will use the result of this DKG.",163,null],[3,"InvalidNiDkgTargetIdSizeError","","Occurs if the target ID size is invalid.",null,null],[4,"NiDkgIdFromProtoError","","Occurs if the `NiDkgId` cannot be obtained from the…",null,null],[13,"InvalidPrincipalId","","",164,null],[13,"InvalidDkgTag","","",164,null],[13,"InvalidRemoteTargetIdSize","","",164,null],[5,"ni_dkg_target_id","","Creates a target ID for the given data.",null,[[],[["nidkgtargetid",3],["invalidnidkgtargetidsizeerror",3],["result",4]]]],[11,"from_option_protobuf","","",163,[[["nidkgid",3],["option",4]],[["result",4],["string",3]]]],[0,"transcripts_to_retain","ic_types::crypto::threshold_sig::ni_dkg","Types related to transcripts that should be retained…",null,null],[3,"TranscriptsToRetain","ic_types::crypto::threshold_sig::ni_dkg::transcripts_to_retain","Transcripts that should be retained when using…",null,null],[11,"new","","Creates `TranscriptsToRetain`. See the errors listed below…",165,[[["nidkgtranscript",3],["hashset",3]],[["transcriptstoretainvalidationerror",4],["result",4]]]],[11,"public_keys","","Returns the public keys corresponding to the transcripts.",165,[[],[["csppubliccoefficients",6],["btreeset",3]]]],[11,"min_registry_version","","Returns the minimum registry version of all transcripts",165,[[],["registryversion",6]]],[11,"display_dkg_ids_and_registry_versions","","Returns a string representation of `TranscriptsToRetain`.…",165,[[],["string",3]]],[18,"SIZE","ic_types::crypto::threshold_sig::ni_dkg","",166,null],[11,"new","","",166,[[]]],[11,"to_vec","","",166,[[],["vec",3]]],[11,"dummy_dealing_for_tests","","",136,[[],["nidkgdealing",3]]],[11,"dummy_transcript_for_tests_with_params","","",137,[[["nidkgtag",4],["nodeid",6],["vec",3]]]],[11,"dummy_transcript_for_tests","","",137,[[]]],[11,"public_key","","Computes the threshold-committee public key from the…",137,[[],["thresholdsigpublickey",3]]],[18,"SIZE","ic_types::crypto::threshold_sig","",167,null],[11,"into_bytes","","",167,[[]]],[6,"CryptoHashOf","ic_types::crypto","A cryptographic hash for content of type `T`",null,null],[6,"CryptoResult","","A `Result` with an error of type `CryptoError`.",null,null],[6,"BasicSigOf","","A basic signature for content of type `T`",null,null],[6,"IndividualMultiSigOf","","An individual multi-signature for content of type `T`",null,null],[6,"CombinedMultiSigOf","","A combined multi-signature for content of type `T`",null,null],[6,"ThresholdSigShareOf","","A threshold signature share for content of type `T`",null,null],[6,"CombinedThresholdSigOf","","A combined threshold signature for content of type `T`",null,null],[6,"CanisterSigOf","","A canister signature for content of type `T`",null,null],[8,"SignedBytesWithoutDomainSeparator","","Signed bytes, not containing a domain separator. Also…",null,null],[10,"as_signed_bytes_without_domain_separator","","Returns a bytes-representation of the object for digital…",168,[[],["vec",3]]],[11,"get","","",82,[[]]],[11,"is_public_key_not_found","","",98,[[]]],[11,"is_secret_key_not_found","","",98,[[]]],[11,"is_malformed_secret_key","","",98,[[]]],[11,"is_malformed_public_key","","",98,[[]]],[11,"is_malformed_signature","","",98,[[]]],[11,"is_signature_verification_error","","",98,[[]]],[11,"is_pop_verification_error","","",98,[[]]],[11,"is_inconsistent_algorithms","","",98,[[]]],[11,"is_algorithm_not_supported","","",98,[[]]],[11,"is_registry_client_error","","",98,[[]]],[11,"is_threshold_sig_data_not_found","","",98,[[]]],[11,"is_dkg_transcript_not_found","","",98,[[]]],[0,"filetree_sync","ic_types","File tree sync artifact.",null,null],[3,"FileTreeSyncArtifact","ic_types::filetree_sync","Artifact to be be delivered to the artifact pool when file…",null,null],[12,"absolute_path","","",169,null],[12,"id","","",169,null],[3,"FileTreeSyncChunksTracker","","File tree sync tracker.",null,null],[12,"state","","",170,null],[12,"received_chunks","","",170,null],[12,"absolute_path","","",170,null],[4,"UnderConstructionState","","Represents the state under construction for a file tree…",null,null],[13,"WaitForManifest","","",171,null],[13,"SyncFromDir","","",171,null],[6,"FileTreeSyncId","","Unique identifier to describe a FSTreeSyncObject",null,null],[0,"funds","ic_types","Defines types that are useful when handling funds on the IC.",null,null],[3,"Cycles","ic_types::funds","Struct to handle cycles on the IC. They are maintained as…",null,null],[3,"Funds","","A struct to hold various types of funds.",null,null],[11,"new","","",172,[[]]],[11,"get","","",172,[[]]],[0,"icp","","",null,null],[3,"ICP","ic_types::funds::icp","ICP represents the ICP tokens on the IC.",null,null],[3,"Tap","","A tap is used for minting ICP. In the future, this could…",null,null],[3,"Sink","","A sink is used for burning ICP. In the future, this could…",null,null],[4,"ICPError","","",null,null],[13,"OutOfICP","","",173,null],[12,"available","ic_types::funds::icp::ICPError","",174,null],[12,"requested","","",174,null],[11,"zero","ic_types::funds::icp","Returns a new object with zero ICP.",175,[[]]],[11,"balance","","Returns the current balance.",175,[[]]],[11,"add","","Adds the requested number of ICP to the current object.",175,[[["icp",3]]]],[11,"take","","Returns the entire amount contained in the current object.",175,[[],["icp",3]]],[11,"withdraw","","Withdraws the requested number of ICP from the current…",175,[[],[["result",4],["icp",3],["icperror",4]]]],[11,"withdraw_with_threshold","","Withdraws the requested number of ICP from the current…",175,[[],[["result",4],["icp",3],["icperror",4]]]],[11,"mint","","",176,[[],["icp",3]]],[11,"burn","","",177,[[["icp",3]]]],[11,"new","ic_types::funds","",178,[[["cycles",3],["icp",3]]]],[11,"zero","","Returns a new `Funds` object containing zero funds.",178,[[]]],[11,"cycles","","Returns the amount of cycles contained.",178,[[],["cycles",3]]],[11,"cycles_mut","","",178,[[],["cycles",3]]],[11,"take_cycles","","Takes the cycles contained and sets the remaining cycles…",178,[[],["cycles",3]]],[11,"add_cycles","","Adds the given cycles to the current funds.",178,[[["cycles",3]]]],[11,"icp","","",178,[[],["icp",3]]],[11,"icp_mut","","",178,[[],["icp",3]]],[11,"take_icp","","Takes all the ICP out of the current `Funds`.",178,[[],["icp",3]]],[11,"add_icp","","Adds the given ICP to the current funds.",178,[[["icp",3]]]],[11,"take","","Extracts the funds from the current object into a new…",178,[[],["funds",3]]],[0,"ic00","ic_types","Data types used for encoding/decoding the Candid payloads…",null,null],[3,"CanisterIdRecord","ic_types::ic00","Struct used for encoding/decoding `(record {canister_id})`.",null,null],[3,"CanisterSettingsArgs","","Struct used for encoding/decoding `(record { controller :…",null,null],[12,"controller","","",179,null],[12,"compute_allocation","","",179,null],[12,"memory_allocation","","",179,null],[12,"freezing_threshold","","",179,null],[3,"CanisterStatusResult","","The deprecated version of CanisterStatusResult that is…",null,null],[3,"CanisterStatusResultV2","","Struct used for encoding/decoding `(record { status :…",null,null],[3,"CreateCanisterArgs","","Struct used for encoding/decoding `(record { settings :…",null,null],[12,"settings","","",180,null],[3,"EmptyBlob","","Represents the empty blob.",null,null],[3,"InstallCodeArgs","","Struct used for encoding/decoding `(record { mode :…",null,null],[12,"mode","","",181,null],[12,"canister_id","","",181,null],[12,"wasm_module","","",181,null],[12,"arg","","",181,null],[12,"compute_allocation","","",181,null],[12,"memory_allocation","","",181,null],[12,"query_allocation","","",181,null],[4,"Method","","Methods exported by ic:00.",null,null],[13,"CanisterStatus","","",182,null],[13,"CreateCanister","","",182,null],[13,"DeleteCanister","","",182,null],[13,"DepositCycles","","",182,null],[13,"DepositFunds","","",182,null],[13,"InstallCode","","",182,null],[13,"RawRand","","",182,null],[13,"SetController","","",182,null],[13,"SetupInitialDKG","","",182,null],[13,"StartCanister","","",182,null],[13,"StopCanister","","",182,null],[13,"UninstallCode","","",182,null],[13,"UpdateSettings","","",182,null],[13,"ProvisionalCreateCanisterWithCycles","","",182,null],[13,"ProvisionalTopUpCanister","","",182,null],[8,"Payload","","A trait to be implemented by all structs that are used as…",null,null],[11,"encode","","",183,[[],["vec",3]]],[11,"decode","","",183,[[],[["result",4],["error",4]]]],[3,"ProvisionalCreateCanisterWithCyclesArgs","","Struct used for encoding/decoding `(record { amount : opt…",null,null],[12,"amount","","",184,null],[12,"settings","","",184,null],[3,"ProvisionalTopUpCanisterArgs","","Struct used for encoding/decoding `(record { canister_id :…",null,null],[3,"SetControllerArgs","","Struct used for encoding/decoding `(record { canister_id :…",null,null],[3,"SetupInitialDKGArgs","","Struct used for encoding/decoding `(record { node_ids :…",null,null],[3,"SetupInitialDKGResponse","","Represents the response for a request to setup an initial…",null,null],[12,"low_threshold_transcript_record","","",185,null],[12,"high_threshold_transcript_record","","",185,null],[12,"fresh_subnet_id","","",185,null],[12,"subnet_threshold_public_key","","",185,null],[3,"UpdateSettingsArgs","","Struct used for encoding/decoding `(record { canister_id :…",null,null],[12,"canister_id","","",186,null],[12,"settings","","",186,null],[17,"IC_00","","The id of the management canister.",null,null],[0,"ingress","ic_types","Ingress types.",null,null],[4,"IngressStatus","ic_types::ingress","The status of an ingress message.",null,null],[13,"Received","","The message was successfully inducted into the input queue…",187,null],[12,"receiver","ic_types::ingress::IngressStatus","",188,null],[12,"user_id","","",188,null],[12,"time","","",188,null],[13,"Completed","ic_types::ingress","The message was executed and the execution yielded a…",187,null],[12,"receiver","ic_types::ingress::IngressStatus","",189,null],[12,"user_id","","",189,null],[12,"result","","",189,null],[12,"time","","",189,null],[13,"Failed","ic_types::ingress","The message was executed and the execution triggered an…",187,null],[12,"receiver","ic_types::ingress::IngressStatus","",190,null],[12,"user_id","","",190,null],[12,"error","","",190,null],[12,"time","","",190,null],[13,"Processing","ic_types::ingress","The message is currently being processed.",187,null],[12,"receiver","ic_types::ingress::IngressStatus","",191,null],[12,"user_id","","",191,null],[12,"time","","",191,null],[13,"Unknown","ic_types::ingress","The system has no knowledge of this message. It may have…",187,null],[4,"WasmResult","","This struct describes the different types that executing a…",null,null],[13,"Reply","","Raw response, returned in a \\\"happy\\\" case",192,null],[13,"Reject","","Returned with an error message when the canister decides…",192,null],[17,"MAX_INGRESS_TTL","","This constant defines the maximum amount of time an…",null,null],[17,"PERMITTED_DRIFT","","Duration subtracted from `MAX_INGRESS_TTL` by…",null,null],[11,"user_id","","",187,[[],[["option",4],["userid",6]]]],[11,"receiver","","",187,[[],[["option",4],["canisterid",3]]]],[11,"as_str","","Returns the name of this status as specified in the…",187,[[]]],[11,"bytes","","Returns the bytes in the result.",192,[[],["vec",3]]],[0,"malicious_behaviour","ic_types","Defines [`MaliciousBehaviour`] that allows to control…",null,null],[3,"MaliciousBehaviour","ic_types::malicious_behaviour","When testing our system we need to make some nodes act…",null,null],[12,"allow_malicious_behaviour","","",193,null],[12,"malicious_flags","","",193,null],[11,"new","","",193,[[]]],[11,"maliciously_seg_fault","","",193,[[]]],[11,"set_maliciously_seg_fault","","",193,[[]]],[11,"set_maliciously_gossip_drop_requests","","",193,[[]]],[11,"set_maliciously_gossip_artifact_not_found","","",193,[[]]],[11,"set_maliciously_gossip_send_many_artifacts","","",193,[[]]],[11,"set_maliciously_gossip_send_invalid_artifacts","","",193,[[]]],[11,"set_maliciously_gossip_send_late_artifacts","","",193,[[]]],[11,"set_maliciously_propose_equivocating_blocks","","",193,[[]]],[11,"set_maliciously_propose_empty_blocks","","",193,[[]]],[11,"set_maliciously_notarize_all","","",193,[[]]],[11,"set_maliciously_finalize_all","","",193,[[]]],[11,"set_maliciously_tweak_dkg","","",193,[[]]],[11,"set_maliciously_certify_invalid_hash","","",193,[[]]],[11,"set_maliciously_malfunctioning_xnet_endpoint","","",193,[[]]],[11,"set_maliciously_disable_execution","","",193,[[]]],[11,"set_maliciously_corrupt_own_state_at_heights","","",193,[[]]],[0,"malicious_flags","ic_types","Defines flags that can change a network\'s behavior.",null,null],[3,"MaliciousFlags","ic_types::malicious_flags","Groups all available malicious flags.",null,null],[12,"maliciously_gossip_drop_requests","","",194,null],[12,"maliciously_gossip_artifact_not_found","","",194,null],[12,"maliciously_gossip_send_many_artifacts","","",194,null],[12,"maliciously_gossip_send_invalid_artifacts","","",194,null],[12,"maliciously_gossip_send_late_artifacts","","",194,null],[12,"maliciously_propose_equivocating_blocks","","",194,null],[12,"maliciously_propose_empty_blocks","","",194,null],[12,"maliciously_finalize_all","","",194,null],[12,"maliciously_notarize_all","","",194,null],[12,"maliciously_tweak_dkg","","",194,null],[12,"maliciously_certify_invalid_hash","","",194,null],[12,"maliciously_malfunctioning_xnet_endpoint","","",194,null],[12,"maliciously_disable_execution","","",194,null],[12,"maliciously_disable_http_handler_ingress_validation","","If this flag is set, the result of validate_message() is…",194,null],[12,"maliciously_corrupt_own_state_at_heights","","",194,null],[11,"is_consensus_malicious","","This function is to distinguish maliciousness gated by…",194,[[]]],[0,"messages","ic_types","Types related to various messages that the Internet…",null,null],[4,"CanisterInstallMode","ic_types::messages","The mode with which a canister is installed.",null,null],[13,"Install","","A fresh install of a new canister.",195,null],[13,"Reinstall","","Reinstalling a canister that was already installed.",195,null],[13,"Upgrade","","Upgrade an existing canister.",195,null],[3,"Blob","","A binary \\\"blob\\\", i.e. a byte array.",null,null],[12,"0","","",196,null],[3,"Certificate","","A `Certificate` as defined in…",null,null],[12,"tree","","",197,null],[12,"signature","","",197,null],[12,"delegation","","",197,null],[3,"CertificateDelegation","","This enum is defined as a filler to make the encoding of…",null,null],[12,"subnet_id","","",198,null],[12,"certificate","","",198,null],[3,"Delegation","","Describes a delegation map as defined in…",null,null],[3,"HttpCanisterUpdate","","Describes the fields of a canister update call as defined…",null,null],[12,"canister_id","","",199,null],[12,"method_name","","",199,null],[12,"arg","","",199,null],[12,"sender","","",199,null],[12,"ingress_expiry","","Indicates when the message should expire. Represented as…",199,null],[12,"nonce","","",199,null],[3,"HttpQueryResponseReply","","The body of the `QueryResponse`",null,null],[12,"arg","","",200,null],[3,"HttpReadState","","A `read_state` request as defined in…",null,null],[12,"sender","","",201,null],[12,"paths","","",201,null],[12,"nonce","","",201,null],[12,"ingress_expiry","","",201,null],[3,"HttpReadStateResponse","","The response to a `read_state` request.",null,null],[12,"certificate","","The CBOR-encoded `Certificate`.",202,null],[3,"HttpRequest","","A strongly-typed version of [`HttpRequestEnvelope`].",null,null],[3,"HttpRequestEnvelope","","A request envelope as defined in…",null,null],[12,"content","","",203,null],[12,"sender_pubkey","","",203,null],[12,"sender_sig","","",203,null],[12,"sender_delegation","","",203,null],[3,"HttpStatusResponse","","The response to `/api/v1/status`.",null,null],[12,"ic_api_version","","",204,null],[12,"root_key","","",204,null],[12,"impl_version","","",204,null],[12,"impl_hash","","",204,null],[3,"HttpUserQuery","","Describes the fields of a canister query call (a query…",null,null],[12,"canister_id","","",205,null],[12,"method_name","","",205,null],[12,"arg","","",205,null],[12,"sender","","",205,null],[12,"ingress_expiry","","Indicates when the message should expire. Represented as…",205,null],[12,"nonce","","",205,null],[3,"SignedDelegation","","Describes a delegation as defined in…",null,null],[3,"Ingress","","A message sent from an end user to a canister.",null,null],[12,"source","","",206,null],[12,"receiver","","",206,null],[12,"method_name","","",206,null],[12,"method_payload","","",206,null],[12,"message_id","","",206,null],[12,"expiry_time","","",206,null],[3,"SignedIngress","","Describes the signed ingress message that was received…",null,null],[3,"SignedIngressContent","","The contents of a signed ingress message.",null,null],[3,"RejectContext","","The context attached when an inter-canister message is…",null,null],[12,"code","","",207,null],[12,"message","","",207,null],[3,"Request","","Canister-to-canister request message.",null,null],[12,"receiver","","",208,null],[12,"sender","","",208,null],[12,"sender_reply_callback","","",208,null],[12,"payment","","",208,null],[12,"method_name","","",208,null],[12,"method_payload","","",208,null],[3,"Response","","Canister-to-canister response message.",null,null],[12,"originator","","",209,null],[12,"respondent","","",209,null],[12,"originator_reply_callback","","",209,null],[12,"refund","","",209,null],[12,"response_payload","","",209,null],[3,"MessageId","","The ID used to uniquely identify a user\'s ingress message.",null,null],[3,"UserQuery","","Represents a Query that is sent by an end user to a…",null,null],[12,"source","","",210,null],[12,"receiver","","",210,null],[12,"method_name","","",210,null],[12,"method_payload","","",210,null],[12,"ingress_expiry","","",210,null],[12,"nonce","","",210,null],[3,"ReadState","","A `read_state` request sent from the user.",null,null],[12,"source","","",211,null],[12,"paths","","",211,null],[12,"ingress_expiry","","",211,null],[12,"nonce","","",211,null],[3,"WebAuthnEnvelope","","The challenge signed with web authentication is contained…",null,null],[3,"WebAuthnSignature","","Verification of a signature that was generated with web…",null,null],[3,"UserSignature","","An end user\'s signature.",null,null],[12,"signature","","The actual signature. End users should sign the…",212,null],[12,"signer_pubkey","","The user\'s public key whose corresponding private key…",212,null],[12,"sender_delegation","","",212,null],[3,"SignedRequestBytes","","Bytes representation of signed HTTP requests, using CBOR…",null,null],[4,"Authentication","","The authentication associated with an HTTP request.",null,null],[13,"Authenticated","","",213,null],[13,"Anonymous","","",213,null],[4,"HttpQueryResponse","","The response to `/api/v1/read` with `request_type` set to…",null,null],[13,"Replied","","",214,null],[12,"reply","ic_types::messages::HttpQueryResponse","",215,null],[13,"Rejected","ic_types::messages","",214,null],[12,"reject_code","ic_types::messages::HttpQueryResponse","",216,null],[12,"reject_message","","",216,null],[4,"HttpReadContent","ic_types::messages","Describes the contents of a /api/v1/read request.",null,null],[13,"Query","","",217,null],[12,"query","ic_types::messages::HttpReadContent","",218,null],[13,"ReadState","ic_types::messages","",217,null],[12,"read_state","ic_types::messages::HttpReadContent","",219,null],[4,"HttpReply","ic_types::messages","The reply to an update call.",null,null],[13,"CodeCall","","",220,null],[12,"arg","ic_types::messages::HttpReply","",221,null],[13,"Empty","ic_types::messages","",220,null],[4,"HttpResponseStatus","","The status of an update call.",null,null],[13,"Unknown","","",222,null],[13,"Received","","",222,null],[13,"Processing","","",222,null],[13,"Replied","","",222,null],[12,"reply","ic_types::messages::HttpResponseStatus","",223,null],[13,"Rejected","ic_types::messages","",222,null],[12,"reject_code","ic_types::messages::HttpResponseStatus","",224,null],[12,"reject_message","","",224,null],[4,"HttpSubmitContent","ic_types::messages","Describes the contents of a /api/v1/submit request.",null,null],[13,"Call","","",225,null],[12,"update","ic_types::messages::HttpSubmitContent","",226,null],[4,"RawHttpRequestVal","ic_types::messages","The different types of values supported in `RawHttpRequest`.",null,null],[13,"Bytes","","",227,null],[13,"String","","",227,null],[13,"U64","","",227,null],[13,"Array","","",227,null],[4,"ReadContent","","Internal representation of the content of a `api/v1/read`…",null,null],[13,"Query","","",228,null],[13,"ReadState","","",228,null],[4,"Payload","","A union of all possible message payloads.",null,null],[13,"Data","","Opaque payload data of the current message.",229,null],[13,"Reject","","Reject information of the current message (which can only…",229,null],[4,"RequestOrResponse","","Canister-to-canister message.",null,null],[13,"Request","","",230,null],[13,"Response","","",230,null],[4,"MessageIdError","","Errors returned when converting to a [`MessageId`] from a…",null,null],[13,"InvalidLength","","Conversion to MessageId failed because the source did not…",231,null],[12,"given_length","ic_types::messages::MessageIdError","",232,null],[12,"expected_length","","",232,null],[4,"StopCanisterContext","ic_types::messages","Stores info needed for processing and tracking requests to…",null,null],[13,"Ingress","","",233,null],[12,"sender","ic_types::messages::StopCanisterContext","",234,null],[12,"message_id","","",234,null],[13,"Canister","ic_types::messages","",233,null],[12,"sender","ic_types::messages::StopCanisterContext","",235,null],[12,"reply_callback","","",235,null],[12,"funds","","The funds that the request to stop the canister contained.…",235,null],[4,"HttpHandlerError","ic_types::messages","Errors returned by `HttpHandler` when processing ingress…",null,null],[13,"InvalidMessageId","","",236,null],[13,"InvalidIngressExpiry","","",236,null],[13,"InvalidDelegationExpiry","","",236,null],[13,"InvalidPrincipalId","","",236,null],[13,"MissingPubkeyOrSignature","","",236,null],[13,"InvalidEncoding","","",236,null],[5,"is_subnet_message","","",null,[[["signedingresscontent",3],["subnetid",6]]]],[11,"representation_independent_hash","","Returns the representation-independent hash.",199,[[]]],[11,"id","","",199,[[],["messageid",3]]],[11,"representation_independent_hash","","Returns the representation-independent hash.",225,[[]]],[11,"ingress_expiry","","",225,[[]]],[11,"representation_independent_hash","","Returns the representation-independent hash.",217,[[]]],[11,"id","","",217,[[],["messageid",3]]],[11,"representation_independent_hash","","Returns the representation-independent hash.",205,[[]]],[11,"representation_independent_hash","","Returns the representation-independent hash.",201,[[]]],[11,"id","","",237,[[],["messageid",3]]],[11,"sender","","",237,[[],["userid",6]]],[11,"ingress_expiry","","",237,[[]]],[11,"nonce","","",237,[[],[["vec",3],["option",4]]]],[11,"content","","",237,[[]]],[11,"take_content","","",237,[[]]],[11,"authentication","","",237,[[],["authentication",4]]],[11,"new","","",238,[[["vec",3],["time",3]]]],[11,"new_with_targets","","",238,[[["vec",3],["vec",3],["time",3],["canisterid",3]]]],[11,"pubkey","","",238,[[],["vec",3]]],[11,"expiration","","",238,[[],["time",3]]],[11,"targets","","",238,[[],[["result",4],["option",4],["string",3]]]],[11,"new","","",239,[[["delegation",3],["vec",3]]]],[11,"delegation","","",239,[[],["delegation",3]]],[11,"take_delegation","","",239,[[],["delegation",3]]],[11,"signature","","",239,[[],["blob",3]]],[11,"sender","","",240,[[],["userid",6]]],[11,"canister_id","","",240,[[],["canisterid",3]]],[11,"method_name","","",240,[[]]],[11,"arg","","",240,[[]]],[11,"nonce","","",240,[[],[["vec",3],["option",4]]]],[11,"binary","ic_types::artifact","",241,[[],["signedrequestbytes",3]]],[11,"content","","",241,[[],["signedingresscontent",3]]],[11,"authentication","","",241,[[],["authentication",4]]],[11,"canister_id","","",241,[[],["canisterid",3]]],[11,"method_name","","",241,[[],["string",3]]],[11,"method_arg","","",241,[[]]],[11,"log_entry","","",241,[[],["ingressmessagelogentry",3]]],[11,"expiry_time","","",241,[[],["time",3]]],[11,"id","","",241,[[],["messageid",3]]],[11,"sender","","",241,[[],["userid",6]]],[11,"nonce","","",241,[[],[["vec",3],["option",4]]]],[11,"sender","ic_types::messages","Returns the sender of this `Request`.",208,[[],["canisterid",3]]],[11,"take_funds","","Takes the payment out of this `Request`.",208,[[],["funds",3]]],[11,"method_payload","","Returns this `Request`s payload.",208,[[]]],[11,"payload_size_bytes","","Returns the size of the user-controlled part of this…",208,[[],["numbytes",6]]],[11,"new","","",207,[[["rejectcode",4],["string",3]]]],[11,"code","","",207,[[],["rejectcode",4]]],[11,"message","","",207,[[],["string",3]]],[11,"size_of","","Returns the size of this `RejectContext` in bytes.",207,[[],["numbytes",6]]],[11,"size_of","","Returns the size of this `Payload` in bytes.",229,[[],["numbytes",6]]],[11,"receiver","","",230,[[],["canisterid",3]]],[11,"sender","","",230,[[],["canisterid",3]]],[11,"as_bytes","","",242,[[]]],[11,"id","","",210,[[],["messageid",3]]],[11,"id","","",211,[[],["messageid",3]]],[11,"new","","",243,[[["blob",3]]]],[11,"authenticator_data","","",243,[[],["blob",3]]],[11,"client_data_json","","",243,[[],["blob",3]]],[11,"signature","","",243,[[],["blob",3]]],[11,"challenge","","",244,[[],["vec",3]]],[6,"CallContextId","","Identifies an incoming call.",null,null],[6,"CallbackId","","A value used as an opaque nonce to couple outgoing calls…",null,null],[17,"EXPECTED_MESSAGE_ID_LENGTH","","The length of a [`MessageId`] is 32:…",null,null],[17,"MAX_INTER_CANISTER_PAYLOAD_IN_BYTES","","This sets the upper bound on how big a single…",null,null],[17,"MAX_XNET_PAYLOAD_IN_BYTES","","The maximum size of an inter-canister request or response…",null,null],[8,"HasCanisterId","","A trait implemented by HTTP requests that contain a…",null,null],[10,"canister_id","","",245,[[],["canisterid",3]]],[8,"HttpRequestContent","","Common attributes that all HTTP request contents should…",null,null],[10,"id","","",246,[[],["messageid",3]]],[10,"sender","","",246,[[],["userid",6]]],[10,"ingress_expiry","","",246,[[]]],[10,"nonce","","",246,[[],[["vec",3],["option",4]]]],[11,"sender","","",233,[[],["principalid",3]]],[11,"take_funds","","",233,[[],["funds",3]]],[11,"is_empty","","Return true if the bytes is empty or false otherwise.",247,[[]]],[11,"len","","Return the length (number of bytes).",247,[[]]],[0,"methods","ic_types","This module contains a collection of types and structs…",null,null],[3,"WasmClosure","ic_types::methods","A Wasm closure pointing to the Wasm function table.",null,null],[12,"func_idx","","",248,null],[12,"env","","",248,null],[3,"Callback","","References to functions executed when a response is…",null,null],[12,"call_context_id","","",249,null],[12,"cycles_sent","","The number of cycles that were sent in the original request.",249,null],[12,"on_reply","","A closure to be executed if the call succeeded.",249,null],[12,"on_reject","","A closure to be executed if the call was rejected.",249,null],[12,"on_cleanup","","An optional closure to be executed if the execution of…",249,null],[4,"WasmMethod","","Represents the types of methods that a Wasm module can…",null,null],[13,"Update","","An exported update method along with its name.",250,null],[13,"Query","","An exported query method along with its name.",250,null],[13,"System","","An exported system method. Unlike query or update method,…",250,null],[4,"SystemMethod","","The various system methods available to canisters.",null,null],[13,"CanisterStart","","A system method for initializing a Wasm module.",251,null],[13,"CanisterInit","","A system method that is run when initializing a canister.",251,null],[13,"CanisterPreUpgrade","","A system method that is run at the beginning of a canister…",251,null],[13,"CanisterPostUpgrade","","A system method that is run at the end of a canister…",251,null],[13,"CanisterInspectMessage","","A system method that is run pre-consensus to ask the…",251,null],[13,"CanisterHeartbeat","","A system method that is run at regular intervals for cron…",251,null],[13,"Empty","","This is introduced as temporary scaffolding to aid in…",251,null],[4,"FuncRef","","A reference to a callable function/method in a Wasm…",null,null],[13,"Method","","A method that a canister can export.",252,null],[13,"UpdateClosure","","A closure (index + env) pointing to the Wasm function…",252,null],[13,"QueryClosure","","",252,null],[11,"name","","",250,[[],["string",3]]],[11,"new","","",248,[[]]],[11,"new","","",249,[[["callcontextid",6],["cycles",3],["wasmclosure",3],["option",4]]]],[11,"to_commit","","We utilize the function reference `FuncRef` to decide if a…",252,[[]]],[0,"nominal_cycles","ic_types","Cycles struct to be used for metrics collection.",null,null],[3,"NominalCycles","ic_types::nominal_cycles","Struct to handle cycles that we want to track in metrics.…",null,null],[11,"new","","",253,[[]]],[11,"from_cycles","","",253,[[["cycles",3]]]],[11,"from_parts","","",253,[[]]],[11,"get","","",253,[[]]],[11,"into_parts","","",253,[[]]],[11,"high64","","",253,[[]]],[11,"low64","","",253,[[]]],[0,"p2p","ic_types","Defines types used by the P2P component.",null,null],[3,"GossipAdvert","ic_types::p2p","This is sent to peers to indicate that a node has a…",null,null],[12,"attribute","","",254,null],[12,"size","","",254,null],[12,"artifact_id","","",254,null],[12,"integrity_hash","","the root hash of the Merkle tree of chunks forming the…",254,null],[5,"build_default_gossip_config","","Helper function to build a gossip config using default…",null,[[],["gossipconfig",3]]],[17,"MAX_ARTIFACT_STREAMS_PER_PEER","","Maximum number of artifact chunks that can be downloaded…",null,null],[17,"MAX_CHUNK_WAIT_MS","","Timeout interval (in milliseconds) within which a chunk…",null,null],[17,"MAX_DUPLICITY","","Maximum number of peers that one artifact chunk can be…",null,null],[17,"MAX_CHUNK_SIZE","","Maximum size in bytes of an artifact chunk. Used to…",null,null],[17,"RECEIVE_CHECK_PEER_SET_SIZE","","Size of each receive check hash set for each peer",null,null],[17,"PFN_EVALUATION_PERIOD_MS","","Period for priority function evaluation in milliseconds",null,null],[17,"REGISTRY_POLL_PERIOD_MS","","Period for polling the registry for changes in milliseconds",null,null],[17,"RETRANSMISSION_REQUEST_MS","","Period for sending a retransmission request in milliseconds",null,null],[0,"registry","ic_types","Types for working with the registry.",null,null],[4,"RegistryError","ic_types::registry","Errors returned when requesting a value from the registry.",null,null],[13,"VersionTooOld","","Requested registry version is older than minimum known…",255,null],[12,"min","ic_types::registry::RegistryError","",256,null],[12,"max","","",256,null],[12,"requested","","",256,null],[13,"VersionTooNew","ic_types::registry","Requested registry version is newer than maximum known…",255,null],[12,"min","ic_types::registry::RegistryError","",257,null],[12,"max","","",257,null],[12,"requested","","",257,null],[13,"DuplicateKey","ic_types::registry","Duplicate registry key at given registry version.",255,null],[12,"kind","ic_types::registry::RegistryError","",258,null],[12,"key","","",258,null],[12,"version","","",258,null],[13,"Unreadable","ic_types::registry","Indicates a configuration error. Should contain a human…",255,null],[13,"ValidationError","","Validation error when deserializing registry. Optionally…",255,null],[12,"message","ic_types::registry::RegistryError","",259,null],[12,"source","","",259,null],[4,"RegistryDataProviderError","ic_types::registry","Errors returned by the registry data provider.",null,null],[13,"Timeout","","Timeout occurred when attempting to fetch updates from the…",260,null],[13,"Transfer","","Error when using registry transfer",260,null],[12,"source","ic_types::registry::RegistryDataProviderError","",261,null],[4,"RegistryClientError","ic_types::registry","Errors returned by the registry client.",null,null],[13,"VersionNotAvailable","","",262,null],[12,"version","ic_types::registry::RegistryClientError","",263,null],[13,"DataProviderQueryFailed","ic_types::registry","",262,null],[12,"source","ic_types::registry::RegistryClientError","",264,null],[13,"PollLockFailed","ic_types::registry","",262,null],[12,"error","ic_types::registry::RegistryClientError","",265,null],[0,"connection_endpoint","ic_types::registry","Defines `ConnectionEndpoint` as a URL.",null,null],[3,"ConnectionEndpoint","ic_types::registry::connection_endpoint","An endpoint is completely defined by a URL.",null,null],[4,"Protocol","","",null,null],[13,"Http1","","",266,null],[13,"Http1Tls13","","",266,null],[13,"P2p1Tls13","","",266,null],[4,"ConnectionEndpointTryFromProtoError","","Errors that can occur when converting from the protobuf…",null,null],[13,"InvalidScheme","","",267,null],[12,"scheme","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromProtoError","",268,null],[13,"InvalidPort","ic_types::registry::connection_endpoint","",267,null],[12,"port","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromProtoError","",269,null],[13,"InvalidIpAddr","ic_types::registry::connection_endpoint","",267,null],[12,"ip_addr","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromProtoError","",270,null],[13,"InvalidUrl","ic_types::registry::connection_endpoint","",267,null],[12,"source","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromProtoError","",271,null],[4,"ConnectionEndpointTryFromStringError","ic_types::registry::connection_endpoint","Errors that can occur when converting from a string to a…",null,null],[13,"InvalidUrl","","",272,null],[12,"url","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromStringError","",273,null],[12,"error","","",273,null],[13,"InvalidScheme","ic_types::registry::connection_endpoint","",272,null],[12,"scheme","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromStringError","",274,null],[4,"ConnectionEndpointTryFromError","ic_types::registry::connection_endpoint","Errors that can occur when converting from a URL to a…",null,null],[13,"InvalidScheme","","",275,null],[12,"scheme","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromError","",276,null],[13,"MissingHost","ic_types::registry::connection_endpoint","",275,null],[12,"url","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromError","",277,null],[13,"HostIsNotIpAddr","ic_types::registry::connection_endpoint","",275,null],[12,"url","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromError","",278,null],[12,"host","","",278,null],[13,"MissingPort","ic_types::registry::connection_endpoint","",275,null],[12,"url","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromError","",279,null],[13,"InvalidPort","ic_types::registry::connection_endpoint","",275,null],[12,"port","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromError","",280,null],[13,"InvalidIpAddr","ic_types::registry::connection_endpoint","",275,null],[12,"ip_addr","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromError","",281,null],[13,"InvalidUrl","ic_types::registry::connection_endpoint","",275,null],[12,"url","ic_types::registry::connection_endpoint::ConnectionEndpointTryFromError","",282,null],[12,"source","","",282,null],[11,"is_version_too_old","ic_types::registry","",255,[[]]],[11,"is_version_too_new","","",255,[[]]],[11,"is_duplicate_key","","",255,[[]]],[11,"is_validation_error","","",255,[[]]],[0,"replica_config","ic_types","Defines the [`ReplicaConfig`].",null,null],[3,"ReplicaConfig","ic_types::replica_config","The replica config.",null,null],[12,"node_id","","",283,null],[12,"subnet_id","","",283,null],[17,"NODE_INDEX_DEFAULT","","",null,null],[17,"SUBNET_ID_DEFAULT","","",null,null],[11,"new","","",283,[[["nodeid",6],["subnetid",6]],["replicaconfig",3]]],[0,"replica_version","ic_types","ReplicaVersion can be converted to/from string…",null,null],[3,"ReplicaVersion","ic_types::replica_version","",null,null],[3,"DefaultVersionAlreadySetError","","",null,null],[3,"ReplicaVersionParseError","","",null,null],[7,"REPLICA_BINARY_HASH","","",null,null],[11,"set_default_version","","Set the default value, which can only be set once. Return…",284,[[["replicaversion",3]],[["result",4],["defaultversionalreadyseterror",3]]]],[0,"state_sync","ic_types","State sync types.",null,null],[3,"FileInfo","ic_types::state_sync","An entry of the file table.",null,null],[12,"relative_path","","Path relative to the checkpoint root.",285,null],[12,"size_bytes","","Total size of the file in bytes.",285,null],[12,"hash","","SHA-256 hash of the file metadata and all entries from the…",285,null],[3,"ChunkInfo","","An entry of the chunk table.",null,null],[12,"file_index","","Index of the file in the file table.",286,null],[12,"size_bytes","","Total size of this chunk in bytes.",286,null],[12,"offset","","Offset of the chunk within the file.",286,null],[12,"hash","","SHA-256 hash of the chunk content. See note [Manifest Hash].",286,null],[3,"Manifest","","Manifest is a short description of the checkpoint contents.",null,null],[12,"version","","Which version of the hashing procedure should be used.",287,null],[12,"file_table","","",287,null],[12,"chunk_table","","",287,null],[5,"encode_manifest","","Serializes the manifest into a byte array.",null,[[["manifest",3]],["vec",3]]],[5,"decode_manifest","","Deserializes the manifest from a byte array.",null,[[],[["manifest",3],["string",3],["result",4]]]],[0,"proto","","Conversions from Rust to proto structs and back for…",null,null],[17,"MANIFEST_CHUNK","","Id of the manifest chunk in StateSync artifact.",null,null],[0,"time","ic_types","Defines the [`Time`] type used by the Internet Computer.",null,null],[3,"Time","ic_types::time","Time since UNIX_EPOCH (in nanoseconds). Just like…",null,null],[5,"current_time","","Returns the current time.",null,[[],["time",3]]],[5,"current_time_and_expiry_time","","A utility function to help set the expiry time when…",null,[[]]],[17,"UNIX_EPOCH","","The unix epoch.",null,null],[11,"as_nanos_since_unix_epoch","","Number of nanoseconds since UNIX EPOCH",288,[[]]],[11,"from_nanos_since_unix_epoch","","",288,[[]]],[0,"transport","ic_types","Transport layer public types.",null,null],[3,"FlowTagType","ic_types::transport","",null,null],[3,"TransportPayload","","The payload for the transport layer.",null,null],[12,"0","","",289,null],[3,"Bytes","","Represents a blob.",null,null],[12,"0","","",290,null],[3,"FlowId","","FlowId is the unique key for the flows being managed",null,null],[12,"client_type","","Client type",291,null],[12,"peer_id","","Peer Id",291,null],[12,"flow_tag","","Per-peer flow tag",291,null],[3,"TransportConfig","","The transport format specified in the ic.json",null,null],[12,"node_ip","","",292,null],[12,"p2p_flows","","P2P specific config. In future, this will be made more…",292,null],[3,"TransportFlowConfig","","Per-flow config",null,null],[12,"flow_tag","","The flow tag. This should be unique per transport client.",293,null],[12,"server_port","","Server port for the flow connection. This should be unique…",293,null],[12,"queue_size","","Flow queue size",293,null],[3,"TransportFlowInfo","","Information that can be used to identify a transport flow.",null,null],[12,"peer_id","","The peer for the connection",294,null],[12,"flow_tag","","The flow tag for the connection",294,null],[4,"TransportNotification","","A transport notification.",null,null],[13,"TransportStateChange","","",295,null],[13,"TransportError","","",295,null],[4,"TransportClientType","","The type of a transport client.",null,null],[13,"P2P","","P2P/Gossip module.",296,null],[13,"XnetCom","","Cross net module.",296,null],[4,"TransportStateChange","","State changes that can happen in the transport layer.",null,null],[13,"PeerFlowUp","","Peer flow was established",297,null],[13,"PeerFlowDown","","Peer flow went down",297,null],[4,"TransportError","","Errors that are returned by the transport layer.",null,null],[13,"TransportSendError","","",298,null],[4,"TransportErrorCode","","Error codes returned by transport manager functions.",null,null],[13,"TransportClientAlreadyRegistered","","Found an active client of the same type.",299,null],[13,"TransportClientNotFound","","Unable to find a registered client for the given client…",299,null],[13,"PeerAlreadyRegistered","","Found an active client of the same type.",299,null],[13,"PeerNotFound","","Unable to find the peer specified by the API.",299,null],[13,"FlowAlreadyEnabled","","Flow already enabled",299,null],[13,"FlowNotFound","","Flow not found",299,null],[13,"FlowConnectionUp","","Trying to enable a flow that already has a valid connection",299,null],[13,"TransportClientConfigNotFound","","Unable to find config for the client type.",299,null],[13,"TransportBusy","","Failed to enqueue/submit a message/request. The error code…",299,null],[13,"ConnectionWriteFailed","","Write to connection failed due to OS error. The string has…",299,null],[13,"ConnectionReadFailed","","Read from connection failed due to OS error. The string…",299,null],[13,"SerializationFailed","","Failed to serialize",299,null],[13,"DeserializationFailed","","Failed to deserialize",299,null],[13,"RegistryMissingConfig","","Registry has missing entries for one of…",299,null],[13,"RegistryMultiIP","","Registry has multiple IPs across advert/request/artifact…",299,null],[13,"RegistryInvalidPortNumber","","Registry has invalid port number",299,null],[13,"MessageQueueRoutingFailed","","Unable to route the message -> queue, based on the config.",299,null],[13,"TransportQueueFull","","Transport queue is full.",299,null],[13,"TransportQueueStopped","","The queue is being shut down.",299,null],[13,"ConnectionEventHandlerNotFound","","Connection event handler not registered.",299,null],[13,"MessageSerializationFailed","","Failed to serialize the message for send.",299,null],[13,"MessageConnectionRoutingFailed","","Unable to route the message -> connection, based on the…",299,null],[13,"ConnectionNotFound","","Unable to find a connection to send the message.",299,null],[13,"SocketWriteFailed","","Failed to write to socket.",299,null],[13,"ServerSocketCreateFailed","","Server socket creation failed.",299,null],[13,"ServerSocketAddrReuseFailed","","Failed to set the address reuse flag on the server socket.",299,null],[13,"ServerSocketPortReuseFailed","","Failed to set the port reuse flag on the server socket.",299,null],[13,"ServerSocketBindFailed","","Failed to bind to server port.",299,null],[13,"ServerSocketListenFailed","","Failed to listen on the server socket.",299,null],[13,"ServerSocketConversionFailed","","Failed to convert server listener.",299,null],[13,"ClientSocketCreateFailed","","Client socket creation failed.",299,null],[13,"ClientSocketBindFailed","","Client socket bind failed.",299,null],[13,"SocketNoDelayFailed","","Failed to set the NO_DELAY option",299,null],[13,"ServerDown","","Server not accepting connections on the specified port.",299,null],[13,"ConnectOsError","","connect() failed with unhandled OS error.",299,null],[13,"RegistryDuplicateNodeId","","Duplicate node Ids in node registry.",299,null],[13,"RegistryDuplicateNodeIP","","Duplicate node IPs in node registry.",299,null],[13,"RegistryDuplicateEndpoint","","Duplicate <node IP, port> in node registry.",299,null],[13,"RegistryInvalidNodeIP","","Invalid IP address in node registry.",299,null],[13,"NodeIpResolutionFailed","","NodeId -> IP resolution failed.",299,null],[13,"NodeServerEndpointResolutionFailed","","NodeId -> server endpoint resolution failed.",299,null],[13,"WrapperCertParsingFailed","","Failed to parse the PEM certificate",299,null],[13,"NodeIdMissing","","NodeId missing from the certificate",299,null],[13,"NodeIdParsingFailed","","Failed to parse the NodeId from the certificate",299,null],[13,"NodeIdMalformed","","NodeId in the certificate was not in the expected format",299,null],[13,"DomainNameMissing","","Domain name missing from the certificate",299,null],[13,"DomainNameTooMany","","Too many domain names in the certificate",299,null],[13,"DomainNameMalformed","","Domain name in the certificate was not in the expected…",299,null],[13,"PublicKeyParsingFailed","","Failed to get the public key from the certificate",299,null],[13,"RegistryTlsConfigNotUniform","","TLS is not uniformly configured across all the registry…",299,null],[13,"InvalidNodeIdInCertificate","","The NodeId in the certificate is incorrect",299,null],[13,"PeerTlsInfoNotFound","","Failed to find peer TLS info",299,null],[13,"PeerTlsInfoMismatch","","Peer cert did not match the expected value in the registry",299,null],[13,"ConfigPrivateKeyParsingFailed","","The private key file specified in the config could not be…",299,null],[13,"ConfigPrivateKeyFileReadFailed","","The private key file specified in the config could not be…",299,null],[13,"ConfigCertParsingFailed","","The private key file specified in the config could not be…",299,null],[13,"ConfigCertFileReadFailed","","The private key file specified in the config could not be…",299,null],[13,"SetNodeKeyFailed","","Failed to initialize the node key prior to the TLS handshake",299,null],[13,"SetNodeCertFailed","","Failed to initialize the certificate prior to the TLS…",299,null],[13,"AddPeerCertFailed","","Failed to add peer certificate prior to the TLS handshake",299,null],[13,"AcceptorInitFailed","","Failed to initialize the acceptor",299,null],[13,"ConnectorInitFailed","","Failed to initialize the connector",299,null],[13,"ConnectorConfigFailed","","Failed to configure the client side TLS connector",299,null],[13,"SenderErrorIndicated","","Received an error from sender",299,null],[13,"InvalidSockAddr","","Failed to get socket address",299,null],[13,"NodeRecordDuplicateFlowTag","","Duplicate flow tags in NodeRecord",299,null],[13,"NodeRecordMissingConnectionEndpoint","","Missing connection endpoint in NodeRecord",299,null],[13,"TimeoutExpired","","Timeout expired",299,null],[6,"FlowTag","","A tag attached to a flow.",null,null],[11,"new","","",291,[[["transportclienttype",4],["nodeid",6],["flowtag",6]]]],[0,"user_error","ic_types","User-facing error types.",null,null],[4,"ErrorCode","ic_types::user_error","User-facing error codes.",null,null],[13,"SubnetOversubscribed","","",300,null],[13,"CanisterOutputQueueFull","","",300,null],[13,"IngressMessageTimeout","","",300,null],[13,"CanisterNotFound","","",300,null],[13,"CanisterMethodNotFound","","",300,null],[13,"CanisterAlreadyInstalled","","",300,null],[13,"CanisterWasmModuleNotFound","","",300,null],[13,"CanisterEmpty","","",300,null],[13,"InsufficientTransferFunds","","",300,null],[13,"InsufficientMemoryAllocation","","",300,null],[13,"InsufficientCyclesForCreateCanister","","",300,null],[13,"SubnetNotFound","","",300,null],[13,"CanisterOutOfCycles","","",300,null],[13,"CanisterTrapped","","",300,null],[13,"CanisterCalledTrap","","",300,null],[13,"CanisterContractViolation","","",300,null],[13,"CanisterInvalidWasm","","",300,null],[13,"CanisterDidNotReply","","",300,null],[13,"CanisterOutOfMemory","","",300,null],[13,"CanisterStopped","","",300,null],[13,"CanisterStopping","","",300,null],[13,"CanisterNotStopped","","",300,null],[13,"CanisterStoppingCancelled","","",300,null],[13,"CanisterInvalidController","","",300,null],[13,"CanisterFunctionNotFound","","",300,null],[13,"CanisterNonEmpty","","",300,null],[13,"CertifiedStateUnavailable","","",300,null],[13,"CanisterRejectedMessage","","",300,null],[13,"InterCanisterQueryLoopDetected","","",300,null],[13,"UnknownManagementMessage","","",300,null],[13,"InvalidManagementPayload","","",300,null],[13,"InsufficientCyclesInCall","","",300,null],[4,"RejectCode","","Reject codes are integers that canisters should pass to…",null,null],[13,"SysFatal","","",301,null],[13,"SysTransient","","",301,null],[13,"DestinationInvalid","","",301,null],[13,"CanisterReject","","",301,null],[13,"CanisterError","","",301,null],[3,"UserError","","The error that is sent back to users of IC if something…",null,null],[0,"xnet","ic_types","Types used by the Xnet component.",null,null],[3,"StreamIndexTag","ic_types::xnet","",null,null],[3,"StreamIndexedQueue","","A gap-free `StreamIndex`-ed queue for the messages and…",null,null],[3,"StreamHeader","","StreamHeader contains a digest of information about the…",null,null],[12,"begin","","",302,null],[12,"end","","",302,null],[12,"signals_end","","Index of the next expected reverse stream message.",302,null],[3,"StreamSlice","","A continuous slice of messages pulled from a remote…",null,null],[3,"CertifiedStreamSlice","","A slice of the stream of messages produced by the other…",null,null],[12,"payload","","Serialized part of the state tree containing the stream…",303,null],[12,"merkle_proof","","The witness that can be used to recompute the root hash…",303,null],[12,"certification","","The certification of the root hash.",303,null],[3,"SessionTag","","",null,null],[3,"QueueId","","A QueueId. Identifies a message queue by destination,…",null,null],[12,"dst_canister","","",304,null],[12,"src_canister","","",304,null],[12,"session_id","","",304,null],[0,"proto","","Protocol buffer equivalents to the various structs that…",null,null],[0,"testing","","",null,null],[8,"StreamSliceTesting","ic_types::xnet::testing","Provides test-only methods for `StreamSlice`.",null,null],[10,"push_message","","Pushes a message onto the slice.",305,[[["requestorresponse",4]]]],[10,"header_mut","","",305,[[],["streamheader",3]]],[6,"StreamIndex","ic_types::xnet","Index into a subnet-to-subnet message stream; used in the…",null,null],[6,"SessionId","","Identifies a session between a given pair of…",null,null],[11,"with_begin","","Constructs a `StreamIndexedQueue` beginning at the given…",306,[[["streamindex",6]]]],[11,"slice","","Extracts a slice of the given queue beginning at…",306,[[["option",4],["streamindex",6]],["streamindexedqueue",3]]],[11,"begin","","Returns the index of the first item in the queue.",306,[[],["streamindex",6]]],[11,"end","","Returns the index that will be assigned to the next item…",306,[[],["streamindex",6]]],[11,"push","","Enqueues an item into the queue, assigning it the next…",306,[[]]],[11,"pop","","Pops the next item with its index, if one is available.",306,[[],["option",4]]],[11,"get","","Retrieves the item with the given index.",306,[[["streamindex",6]],["option",4]]],[11,"discard_before","","Discards all items before the given index.",306,[[["streamindex",6]]]],[11,"len","","Returns the size of the queue.",306,[[]]],[11,"is_empty","","Returns `true` if the queue is empty.",306,[[]]],[11,"iter","","Returns an iterator over the items in the queue, with…",306,[[]]],[11,"new","","",307,[[["streamheader",3],["streamindexedqueue",3],["requestorresponse",4]]]],[11,"from_parts","","",307,[[["streamheader",3],["option",4],["streamindexedqueue",3]]]],[11,"header","","",307,[[],["streamheader",3]]],[11,"messages","","",307,[[],[["streamindexedqueue",3],["option",4]]]],[11,"pop_message","","",307,[[],["option",4]]],[6,"UserId","ic_types","An end-user\'s [`PrincipalId`].",null,null],[6,"NumberOfNodes","","A non-negative amount of nodes, typically used in DKG.",null,null],[6,"Height","","The block height.",null,null],[6,"NumInstructions","","Represents an amount of weighted instructions that can be…",null,null],[6,"QueueIndex","","Index into a queue; used in the context of `InputQueue` /…",null,null],[6,"Randomness","","Randomness produced by Consensus which is used in the…",null,null],[6,"ExecutionRound","","The id of an execution round in the scheduler.",null,null],[6,"CryptoHashOfPartialState","","A cryptographic hash of the part of the canonical…",null,null],[6,"CryptoHashOfState","","A cryptographic hash of a full canonical replicated state…",null,null],[8,"CountBytes","","Allow an object to report its own byte size. It is only…",null,null],[10,"count_bytes","","",308,[[]]],[11,"start_height","","",6,[[],["height",6]]],[11,"value","","",309,[[]]],[11,"zero","","Returns a 0 `QueryAllocation`.",310,[[],["queryallocation",3]]],[11,"max_per_message","","Returns the maximum allowed query allocation per message.",310,[[],["queryallocation",3]]],[11,"get","","",310,[[]]],[11,"new","","",7,[[]]],[11,"as_percent","","Returns the raw percent contained in this…",311,[[]]],[11,"zero","","",311,[[]]],[11,"new","","",312,[[]]],[11,"min","","",312,[[]]],[11,"max","","",312,[[]]],[11,"given","","",312,[[]]],[11,"get","","",313,[[],["numbytes",6]]],[11,"new","","",8,[[["numbytes",6]]]],[11,"from","","",314,[[]]],[11,"into","","",314,[[]]],[11,"to_owned","","",314,[[]]],[11,"clone_into","","",314,[[]]],[11,"to_string","","",314,[[],["string",3]]],[11,"try_from","","",314,[[],["result",4]]],[11,"try_into","","",314,[[],["result",4]]],[11,"borrow","","",314,[[]]],[11,"borrow_mut","","",314,[[]]],[11,"type_id","","",314,[[],["typeid",3]]],[11,"erased_serialize","","",314,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",314,[[]]],[11,"encode_hex","","",314,[[]]],[11,"encode_hex_upper","","",314,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",2,[[]]],[11,"from","","",315,[[]]],[11,"into","","",315,[[]]],[11,"try_from","","",315,[[],["result",4]]],[11,"try_into","","",315,[[],["result",4]]],[11,"borrow","","",315,[[]]],[11,"borrow_mut","","",315,[[]]],[11,"type_id","","",315,[[],["typeid",3]]],[11,"vzip","","",315,[[]]],[11,"from","","",316,[[]]],[11,"into","","",316,[[]]],[11,"to_owned","","",316,[[]]],[11,"clone_into","","",316,[[]]],[11,"to_string","","",316,[[],["string",3]]],[11,"try_from","","",316,[[],["result",4]]],[11,"try_into","","",316,[[],["result",4]]],[11,"borrow","","",316,[[]]],[11,"borrow_mut","","",316,[[]]],[11,"type_id","","",316,[[],["typeid",3]]],[11,"proxy_encode","","",316,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",316,[[],[["proxydecodeerror",4],["result",4]]]],[11,"erased_serialize","","",316,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",316,[[]]],[11,"encode_hex","","",316,[[]]],[11,"encode_hex_upper","","",316,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",4,[[]]],[11,"from","","",317,[[]]],[11,"into","","",317,[[]]],[11,"try_from","","",317,[[],["result",4]]],[11,"try_into","","",317,[[],["result",4]]],[11,"borrow","","",317,[[]]],[11,"borrow_mut","","",317,[[]]],[11,"type_id","","",317,[[],["typeid",3]]],[11,"vzip","","",317,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",6,[[]]],[11,"from","","",318,[[]]],[11,"into","","",318,[[]]],[11,"try_from","","",318,[[],["result",4]]],[11,"try_into","","",318,[[],["result",4]]],[11,"borrow","","",318,[[]]],[11,"borrow_mut","","",318,[[]]],[11,"type_id","","",318,[[],["typeid",3]]],[11,"vzip","","",318,[[]]],[11,"from","","",319,[[]]],[11,"into","","",319,[[]]],[11,"try_from","","",319,[[],["result",4]]],[11,"try_into","","",319,[[],["result",4]]],[11,"borrow","","",319,[[]]],[11,"borrow_mut","","",319,[[]]],[11,"type_id","","",319,[[],["typeid",3]]],[11,"vzip","","",319,[[]]],[11,"from","","",320,[[]]],[11,"into","","",320,[[]]],[11,"try_from","","",320,[[],["result",4]]],[11,"try_into","","",320,[[],["result",4]]],[11,"borrow","","",320,[[]]],[11,"borrow_mut","","",320,[[]]],[11,"type_id","","",320,[[],["typeid",3]]],[11,"vzip","","",320,[[]]],[11,"from","","",321,[[]]],[11,"into","","",321,[[]]],[11,"try_from","","",321,[[],["result",4]]],[11,"try_into","","",321,[[],["result",4]]],[11,"borrow","","",321,[[]]],[11,"borrow_mut","","",321,[[]]],[11,"type_id","","",321,[[],["typeid",3]]],[11,"vzip","","",321,[[]]],[11,"from","","",322,[[]]],[11,"into","","",322,[[]]],[11,"try_from","","",322,[[],["result",4]]],[11,"try_into","","",322,[[],["result",4]]],[11,"borrow","","",322,[[]]],[11,"borrow_mut","","",322,[[]]],[11,"type_id","","",322,[[],["typeid",3]]],[11,"vzip","","",322,[[]]],[11,"from","","",309,[[]]],[11,"into","","",309,[[]]],[11,"to_owned","","",309,[[]]],[11,"clone_into","","",309,[[]]],[11,"try_from","","",309,[[],["result",4]]],[11,"try_into","","",309,[[],["result",4]]],[11,"borrow","","",309,[[]]],[11,"borrow_mut","","",309,[[]]],[11,"type_id","","",309,[[],["typeid",3]]],[11,"erased_serialize","","",309,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",309,[[]]],[11,"from","","",310,[[]]],[11,"into","","",310,[[]]],[11,"to_owned","","",310,[[]]],[11,"clone_into","","",310,[[]]],[11,"to_string","","",310,[[],["string",3]]],[11,"try_from","","",310,[[],["result",4]]],[11,"try_into","","",310,[[],["result",4]]],[11,"borrow","","",310,[[]]],[11,"borrow_mut","","",310,[[]]],[11,"type_id","","",310,[[],["typeid",3]]],[11,"erased_serialize","","",310,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",310,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",311,[[]]],[11,"into","","",311,[[]]],[11,"to_owned","","",311,[[]]],[11,"clone_into","","",311,[[]]],[11,"to_string","","",311,[[],["string",3]]],[11,"try_from","","",311,[[],["result",4]]],[11,"try_into","","",311,[[],["result",4]]],[11,"borrow","","",311,[[]]],[11,"borrow_mut","","",311,[[]]],[11,"type_id","","",311,[[],["typeid",3]]],[11,"erased_serialize","","",311,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",311,[[]]],[11,"from","","",312,[[]]],[11,"into","","",312,[[]]],[11,"to_owned","","",312,[[]]],[11,"clone_into","","",312,[[]]],[11,"try_from","","",312,[[],["result",4]]],[11,"try_into","","",312,[[],["result",4]]],[11,"borrow","","",312,[[]]],[11,"borrow_mut","","",312,[[]]],[11,"type_id","","",312,[[],["typeid",3]]],[11,"vzip","","",312,[[]]],[11,"from","","",313,[[]]],[11,"into","","",313,[[]]],[11,"to_owned","","",313,[[]]],[11,"clone_into","","",313,[[]]],[11,"to_string","","",313,[[],["string",3]]],[11,"try_from","","",313,[[],["result",4]]],[11,"try_into","","",313,[[],["result",4]]],[11,"borrow","","",313,[[]]],[11,"borrow_mut","","",313,[[]]],[11,"type_id","","",313,[[],["typeid",3]]],[11,"erased_serialize","","",313,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",313,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",323,[[]]],[11,"into","","",323,[[]]],[11,"try_from","","",323,[[],["result",4]]],[11,"try_into","","",323,[[],["result",4]]],[11,"borrow","","",323,[[]]],[11,"borrow_mut","","",323,[[]]],[11,"type_id","","",323,[[],["typeid",3]]],[11,"vzip","","",323,[[]]],[11,"from","","",324,[[]]],[11,"into","","",324,[[]]],[11,"try_from","","",324,[[],["result",4]]],[11,"try_into","","",324,[[],["result",4]]],[11,"borrow","","",324,[[]]],[11,"borrow_mut","","",324,[[]]],[11,"type_id","","",324,[[],["typeid",3]]],[11,"vzip","","",324,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","ic_types::artifact","",241,[[]]],[11,"into","","",241,[[]]],[11,"to_owned","","",241,[[]]],[11,"clone_into","","",241,[[]]],[11,"try_from","","",241,[[],["result",4]]],[11,"try_into","","",241,[[],["result",4]]],[11,"borrow","","",241,[[]]],[11,"borrow_mut","","",241,[[]]],[11,"type_id","","",241,[[],["typeid",3]]],[11,"erased_serialize","","",241,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",241,[[]]],[11,"from","","",325,[[]]],[11,"into","","",325,[[]]],[11,"into_iter","","",325,[[]]],[11,"to_owned","","",325,[[]]],[11,"clone_into","","",325,[[]]],[11,"try_from","","",325,[[],["result",4]]],[11,"try_into","","",325,[[],["result",4]]],[11,"borrow","","",325,[[]]],[11,"borrow_mut","","",325,[[]]],[11,"type_id","","",325,[[],["typeid",3]]],[11,"vzip","","",325,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",326,[[]]],[11,"into","","",326,[[]]],[11,"into_iter","","",326,[[]]],[11,"to_owned","","",326,[[]]],[11,"clone_into","","",326,[[]]],[11,"try_from","","",326,[[],["result",4]]],[11,"try_into","","",326,[[],["result",4]]],[11,"borrow","","",326,[[]]],[11,"borrow_mut","","",326,[[]]],[11,"type_id","","",326,[[],["typeid",3]]],[11,"vzip","","",326,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"erased_serialize","","",12,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"erased_serialize","","",13,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"erased_serialize","","",14,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"erased_serialize","","",15,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",15,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"erased_serialize","","",30,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",30,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"erased_serialize","","",16,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"erased_serialize","","",17,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"erased_serialize","","",18,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"erased_serialize","","",19,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"erased_serialize","","",20,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"erased_serialize","","",21,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"erased_serialize","","",23,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"erased_serialize","","",24,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"erased_serialize","","",25,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"erased_serialize","","",27,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"erased_serialize","","",28,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",28,[[]]],[11,"from","ic_types::batch","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"erased_serialize","","",32,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"erased_serialize","","",33,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"erased_serialize","","",34,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",34,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"erased_serialize","","",37,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",37,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","ic_types::chunkable","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","ic_types::consensus","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"erased_serialize","","",74,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",74,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"erased_serialize","","",44,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"erased_serialize","","",45,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"erased_serialize","","",46,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"erased_serialize","","",47,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"erased_serialize","","",48,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"erased_serialize","","",49,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"erased_serialize","","",50,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"erased_serialize","","",51,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"erased_serialize","","",52,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",52,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"erased_serialize","","",53,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"erased_serialize","","",54,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"erased_serialize","","",55,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"erased_serialize","","",56,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"erased_serialize","","",57,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"erased_serialize","","",58,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","ic_types::consensus::catchup","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"erased_serialize","","",60,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",60,[[]]],[11,"from","","",327,[[]]],[11,"into","","",327,[[]]],[11,"to_owned","","",327,[[]]],[11,"clone_into","","",327,[[]]],[11,"try_from","","",327,[[],["result",4]]],[11,"try_into","","",327,[[],["result",4]]],[11,"borrow","","",327,[[]]],[11,"borrow_mut","","",327,[[]]],[11,"type_id","","",327,[[],["typeid",3]]],[11,"erased_serialize","","",327,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",327,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"erased_serialize","","",61,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",61,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"erased_serialize","","",62,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",62,[[]]],[11,"from","ic_types::consensus::certification","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"erased_serialize","","",64,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"erased_serialize","","",65,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",65,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"erased_serialize","","",66,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",66,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"erased_serialize","","",67,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",67,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"erased_serialize","","",68,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",68,[[]]],[11,"from","ic_types::consensus::dkg","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"erased_serialize","","",69,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"erased_serialize","","",70,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"erased_serialize","","",71,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",71,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"erased_serialize","","",72,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",72,[[]]],[11,"from","ic_types::consensus::hashed","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"erased_serialize","","",73,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",73,[[]]],[11,"encode_hex","","",73,[[]]],[11,"encode_hex_upper","","",73,[[]]],[11,"from","ic_types::consensus::thunk","",75,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"erased_serialize","","",75,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",75,[[]]],[11,"encode_hex","","",75,[[]]],[11,"encode_hex_upper","","",75,[[]]],[11,"from","ic_types::crypto","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"to_string","","",82,[[],["string",3]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"erased_serialize","","",82,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",82,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"erased_serialize","","",83,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",83,[[]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"erased_serialize","","",84,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",84,[[]]],[11,"from","","",328,[[]]],[11,"into","","",328,[[]]],[11,"into_iter","","",328,[[]]],[11,"to_owned","","",328,[[]]],[11,"clone_into","","",328,[[]]],[11,"try_from","","",328,[[],["result",4]]],[11,"try_into","","",328,[[],["result",4]]],[11,"borrow","","",328,[[]]],[11,"borrow_mut","","",328,[[]]],[11,"type_id","","",328,[[],["typeid",3]]],[11,"vzip","","",328,[[]]],[11,"from","","",329,[[]]],[11,"into","","",329,[[]]],[11,"into_iter","","",329,[[]]],[11,"to_owned","","",329,[[]]],[11,"clone_into","","",329,[[]]],[11,"try_from","","",329,[[],["result",4]]],[11,"try_into","","",329,[[],["result",4]]],[11,"borrow","","",329,[[]]],[11,"borrow_mut","","",329,[[]]],[11,"type_id","","",329,[[],["typeid",3]]],[11,"vzip","","",329,[[]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"to_string","","",85,[[],["string",3]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"erased_serialize","","",85,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",85,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"vzip","","",87,[[]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"erased_serialize","","",88,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",88,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"erased_serialize","","",89,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",89,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"erased_serialize","","",90,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",90,[[]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"erased_serialize","","",91,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",91,[[]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"erased_serialize","","",92,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",92,[[]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"erased_serialize","","",93,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",93,[[]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"erased_serialize","","",94,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",94,[[]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"erased_serialize","","",95,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",95,[[]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"erased_serialize","","",96,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",96,[[]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"to_string","","",98,[[],["string",3]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"erased_serialize","","",98,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",98,[[]]],[11,"from","ic_types::crypto::dkg","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"erased_serialize","","",115,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",115,[[]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"erased_serialize","","",124,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",124,[[]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"erased_serialize","","",123,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",123,[[]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"vzip","","",116,[[]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"erased_serialize","","",125,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",125,[[]]],[11,"from","","",330,[[]]],[11,"into","","",330,[[]]],[11,"to_owned","","",330,[[]]],[11,"clone_into","","",330,[[]]],[11,"try_from","","",330,[[],["result",4]]],[11,"try_into","","",330,[[],["result",4]]],[11,"borrow","","",330,[[]]],[11,"borrow_mut","","",330,[[]]],[11,"type_id","","",330,[[],["typeid",3]]],[11,"erased_serialize","","",330,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",330,[[]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"erased_serialize","","",117,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",117,[[]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"erased_serialize","","",118,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",118,[[]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"erased_serialize","","",119,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",119,[[]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"erased_serialize","","",120,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",120,[[]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"erased_serialize","","",121,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",121,[[]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"erased_serialize","","",122,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",122,[[]]],[11,"from","ic_types::crypto::error","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"to_string","","",126,[[],["string",3]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"vzip","","",126,[[]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"to_string","","",127,[[],["string",3]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"vzip","","",127,[[]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"to_string","","",128,[[],["string",3]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"vzip","","",128,[[]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"to_string","","",129,[[],["string",3]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"vzip","","",129,[[]]],[11,"from","ic_types::crypto::threshold_sig","",130,[[]]],[11,"into","","",130,[[]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"to_string","","",130,[[],["string",3]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"vzip","","",130,[[]]],[11,"from","","",167,[[]]],[11,"into","","",167,[[]]],[11,"to_owned","","",167,[[]]],[11,"clone_into","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"erased_serialize","","",167,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",167,[[]]],[11,"from","ic_types::crypto::threshold_sig::errors::threshold_sig_data_not_found_error","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"to_string","","",132,[[],["string",3]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"vzip","","",132,[[]]],[11,"from","ic_types::crypto::threshold_sig::errors::threshold_sign_error","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"to_string","","",134,[[],["string",3]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"vzip","","",134,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg","",331,[[]]],[11,"into","","",331,[[]]],[11,"into_iter","","",331,[[]]],[11,"to_owned","","",331,[[]]],[11,"clone_into","","",331,[[]]],[11,"try_from","","",331,[[],["result",4]]],[11,"try_into","","",331,[[],["result",4]]],[11,"borrow","","",331,[[]]],[11,"borrow_mut","","",331,[[]]],[11,"type_id","","",331,[[],["typeid",3]]],[11,"vzip","","",331,[[]]],[11,"from","","",166,[[]]],[11,"into","","",166,[[]]],[11,"to_owned","","",166,[[]]],[11,"clone_into","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"erased_serialize","","",166,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",166,[[]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"to_string","","",136,[[],["string",3]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"erased_serialize","","",136,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",136,[[]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"to_string","","",137,[[],["string",3]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"erased_serialize","","",137,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",137,[[]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"erased_serialize","","",138,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",138,[[]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"to_string","","",139,[[],["string",3]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"erased_serialize","","",139,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",139,[[]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"to_owned","","",140,[[]]],[11,"clone_into","","",140,[[]]],[11,"to_string","","",140,[[],["string",3]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"erased_serialize","","",140,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",140,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::config","",152,[[]]],[11,"into","","",152,[[]]],[11,"to_owned","","",152,[[]]],[11,"clone_into","","",152,[[]]],[11,"to_string","","",152,[[],["string",3]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"erased_serialize","","",152,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",152,[[]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"erased_serialize","","",141,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",141,[[]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"to_owned","","",153,[[]]],[11,"clone_into","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"erased_serialize","","",153,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",153,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::config::dealers","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"erased_serialize","","",142,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",142,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",332,[[]]],[11,"into","","",332,[[]]],[11,"to_owned","","",332,[[]]],[11,"clone_into","","",332,[[]]],[11,"try_from","","",332,[[],["result",4]]],[11,"try_into","","",332,[[],["result",4]]],[11,"borrow","","",332,[[]]],[11,"borrow_mut","","",332,[[]]],[11,"type_id","","",332,[[],["typeid",3]]],[11,"vzip","","",332,[[]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"to_string","","",143,[[],["string",3]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"vzip","","",143,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::config::receivers","",151,[[]]],[11,"into","","",151,[[]]],[11,"to_owned","","",151,[[]]],[11,"clone_into","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"erased_serialize","","",151,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",151,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::errors","",154,[[]]],[11,"into","","",154,[[]]],[11,"to_owned","","",154,[[]]],[11,"clone_into","","",154,[[]]],[11,"to_string","","",154,[[],["string",3]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"vzip","","",154,[[]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"to_owned","","",155,[[]]],[11,"clone_into","","",155,[[]]],[11,"to_string","","",155,[[],["string",3]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"vzip","","",155,[[]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"to_owned","","",156,[[]]],[11,"clone_into","","",156,[[]]],[11,"to_string","","",156,[[],["string",3]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"vzip","","",156,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::errors::create_dealing_error","",157,[[]]],[11,"into","","",157,[[]]],[11,"to_owned","","",157,[[]]],[11,"clone_into","","",157,[[]]],[11,"to_string","","",157,[[],["string",3]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"vzip","","",157,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::errors::create_transcript_error","",158,[[]]],[11,"into","","",158,[[]]],[11,"to_owned","","",158,[[]]],[11,"clone_into","","",158,[[]]],[11,"to_string","","",158,[[],["string",3]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"vzip","","",158,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::errors::key_removal_error","",159,[[]]],[11,"into","","",159,[[]]],[11,"to_owned","","",159,[[]]],[11,"clone_into","","",159,[[]]],[11,"to_string","","",159,[[],["string",3]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"vzip","","",159,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::errors::load_transcript_error","",160,[[]]],[11,"into","","",160,[[]]],[11,"to_owned","","",160,[[]]],[11,"clone_into","","",160,[[]]],[11,"to_string","","",160,[[],["string",3]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"vzip","","",160,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::errors::transcripts_to_retain_validation_error","",161,[[]]],[11,"into","","",161,[[]]],[11,"to_owned","","",161,[[]]],[11,"clone_into","","",161,[[]]],[11,"to_string","","",161,[[],["string",3]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"vzip","","",161,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::errors::verify_dealing_error","",162,[[]]],[11,"into","","",162,[[]]],[11,"to_owned","","",162,[[]]],[11,"clone_into","","",162,[[]]],[11,"to_string","","",162,[[],["string",3]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"vzip","","",162,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[]]],[11,"into","","",163,[[]]],[11,"to_owned","","",163,[[]]],[11,"clone_into","","",163,[[]]],[11,"to_string","","",163,[[],["string",3]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"erased_serialize","","",163,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",163,[[]]],[11,"from","","",333,[[]]],[11,"into","","",333,[[]]],[11,"try_from","","",333,[[],["result",4]]],[11,"try_into","","",333,[[],["result",4]]],[11,"borrow","","",333,[[]]],[11,"borrow_mut","","",333,[[]]],[11,"type_id","","",333,[[],["typeid",3]]],[11,"vzip","","",333,[[]]],[11,"from","","",164,[[]]],[11,"into","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"vzip","","",164,[[]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::transcripts_to_retain","",165,[[]]],[11,"into","","",165,[[]]],[11,"to_owned","","",165,[[]]],[11,"clone_into","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"try_into","","",165,[[],["result",4]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"vzip","","",165,[[]]],[11,"from","ic_types::filetree_sync","",169,[[]]],[11,"into","","",169,[[]]],[11,"to_owned","","",169,[[]]],[11,"clone_into","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"try_into","","",169,[[],["result",4]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"erased_serialize","","",169,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",169,[[]]],[11,"from","","",170,[[]]],[11,"into","","",170,[[]]],[11,"to_owned","","",170,[[]]],[11,"clone_into","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"try_into","","",170,[[],["result",4]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"erased_serialize","","",170,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",170,[[]]],[11,"from","","",171,[[]]],[11,"into","","",171,[[]]],[11,"to_owned","","",171,[[]]],[11,"clone_into","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"try_into","","",171,[[],["result",4]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"erased_serialize","","",171,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",171,[[]]],[11,"from","ic_types::funds","",172,[[]]],[11,"into","","",172,[[]]],[11,"to_owned","","",172,[[]]],[11,"clone_into","","",172,[[]]],[11,"to_string","","",172,[[],["string",3]]],[11,"try_from","","",172,[[],["result",4]]],[11,"try_into","","",172,[[],["result",4]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"erased_serialize","","",172,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",172,[[]]],[11,"from","","",178,[[]]],[11,"into","","",178,[[]]],[11,"to_owned","","",178,[[]]],[11,"clone_into","","",178,[[]]],[11,"try_from","","",178,[[],["result",4]]],[11,"try_into","","",178,[[],["result",4]]],[11,"borrow","","",178,[[]]],[11,"borrow_mut","","",178,[[]]],[11,"type_id","","",178,[[],["typeid",3]]],[11,"erased_serialize","","",178,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",178,[[]]],[11,"from","ic_types::funds::icp","",175,[[]]],[11,"into","","",175,[[]]],[11,"to_owned","","",175,[[]]],[11,"clone_into","","",175,[[]]],[11,"to_string","","",175,[[],["string",3]]],[11,"try_from","","",175,[[],["result",4]]],[11,"try_into","","",175,[[],["result",4]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"erased_serialize","","",175,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",175,[[]]],[11,"from","","",176,[[]]],[11,"into","","",176,[[]]],[11,"try_from","","",176,[[],["result",4]]],[11,"try_into","","",176,[[],["result",4]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"vzip","","",176,[[]]],[11,"from","","",177,[[]]],[11,"into","","",177,[[]]],[11,"try_from","","",177,[[],["result",4]]],[11,"try_into","","",177,[[],["result",4]]],[11,"borrow","","",177,[[]]],[11,"borrow_mut","","",177,[[]]],[11,"type_id","","",177,[[],["typeid",3]]],[11,"vzip","","",177,[[]]],[11,"from","","",173,[[]]],[11,"into","","",173,[[]]],[11,"to_owned","","",173,[[]]],[11,"clone_into","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"try_into","","",173,[[],["result",4]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"vzip","","",173,[[]]],[11,"from","ic_types::ic00","",334,[[]]],[11,"into","","",334,[[]]],[11,"try_from","","",334,[[],["result",4]]],[11,"try_into","","",334,[[],["result",4]]],[11,"borrow","","",334,[[]]],[11,"borrow_mut","","",334,[[]]],[11,"type_id","","",334,[[],["typeid",3]]],[11,"vzip","","",334,[[]]],[11,"from","","",179,[[]]],[11,"into","","",179,[[]]],[11,"to_owned","","",179,[[]]],[11,"clone_into","","",179,[[]]],[11,"try_from","","",179,[[],["result",4]]],[11,"try_into","","",179,[[],["result",4]]],[11,"borrow","","",179,[[]]],[11,"borrow_mut","","",179,[[]]],[11,"type_id","","",179,[[],["typeid",3]]],[11,"vzip","","",179,[[]]],[11,"from","","",335,[[]]],[11,"into","","",335,[[]]],[11,"try_from","","",335,[[],["result",4]]],[11,"try_into","","",335,[[],["result",4]]],[11,"borrow","","",335,[[]]],[11,"borrow_mut","","",335,[[]]],[11,"type_id","","",335,[[],["typeid",3]]],[11,"vzip","","",335,[[]]],[11,"from","","",336,[[]]],[11,"into","","",336,[[]]],[11,"try_from","","",336,[[],["result",4]]],[11,"try_into","","",336,[[],["result",4]]],[11,"borrow","","",336,[[]]],[11,"borrow_mut","","",336,[[]]],[11,"type_id","","",336,[[],["typeid",3]]],[11,"vzip","","",336,[[]]],[11,"from","","",180,[[]]],[11,"into","","",180,[[]]],[11,"to_owned","","",180,[[]]],[11,"clone_into","","",180,[[]]],[11,"try_from","","",180,[[],["result",4]]],[11,"try_into","","",180,[[],["result",4]]],[11,"borrow","","",180,[[]]],[11,"borrow_mut","","",180,[[]]],[11,"type_id","","",180,[[],["typeid",3]]],[11,"vzip","","",180,[[]]],[11,"from","","",337,[[]]],[11,"into","","",337,[[]]],[11,"try_from","","",337,[[],["result",4]]],[11,"try_into","","",337,[[],["result",4]]],[11,"borrow","","",337,[[]]],[11,"borrow_mut","","",337,[[]]],[11,"type_id","","",337,[[],["typeid",3]]],[11,"vzip","","",337,[[]]],[11,"from","","",181,[[]]],[11,"into","","",181,[[]]],[11,"to_owned","","",181,[[]]],[11,"clone_into","","",181,[[]]],[11,"to_string","","",181,[[],["string",3]]],[11,"try_from","","",181,[[],["result",4]]],[11,"try_into","","",181,[[],["result",4]]],[11,"borrow","","",181,[[]]],[11,"borrow_mut","","",181,[[]]],[11,"type_id","","",181,[[],["typeid",3]]],[11,"vzip","","",181,[[]]],[11,"from","","",182,[[]]],[11,"into","","",182,[[]]],[11,"to_owned","","",182,[[]]],[11,"clone_into","","",182,[[]]],[11,"to_string","","",182,[[],["string",3]]],[11,"try_from","","",182,[[],["result",4]]],[11,"try_into","","",182,[[],["result",4]]],[11,"borrow","","",182,[[]]],[11,"borrow_mut","","",182,[[]]],[11,"type_id","","",182,[[],["typeid",3]]],[11,"vzip","","",182,[[]]],[11,"from","","",184,[[]]],[11,"into","","",184,[[]]],[11,"try_from","","",184,[[],["result",4]]],[11,"try_into","","",184,[[],["result",4]]],[11,"borrow","","",184,[[]]],[11,"borrow_mut","","",184,[[]]],[11,"type_id","","",184,[[],["typeid",3]]],[11,"vzip","","",184,[[]]],[11,"from","","",338,[[]]],[11,"into","","",338,[[]]],[11,"try_from","","",338,[[],["result",4]]],[11,"try_into","","",338,[[],["result",4]]],[11,"borrow","","",338,[[]]],[11,"borrow_mut","","",338,[[]]],[11,"type_id","","",338,[[],["typeid",3]]],[11,"vzip","","",338,[[]]],[11,"from","","",339,[[]]],[11,"into","","",339,[[]]],[11,"try_from","","",339,[[],["result",4]]],[11,"try_into","","",339,[[],["result",4]]],[11,"borrow","","",339,[[]]],[11,"borrow_mut","","",339,[[]]],[11,"type_id","","",339,[[],["typeid",3]]],[11,"vzip","","",339,[[]]],[11,"from","","",340,[[]]],[11,"into","","",340,[[]]],[11,"try_from","","",340,[[],["result",4]]],[11,"try_into","","",340,[[],["result",4]]],[11,"borrow","","",340,[[]]],[11,"borrow_mut","","",340,[[]]],[11,"type_id","","",340,[[],["typeid",3]]],[11,"vzip","","",340,[[]]],[11,"from","","",185,[[]]],[11,"into","","",185,[[]]],[11,"try_from","","",185,[[],["result",4]]],[11,"try_into","","",185,[[],["result",4]]],[11,"borrow","","",185,[[]]],[11,"borrow_mut","","",185,[[]]],[11,"type_id","","",185,[[],["typeid",3]]],[11,"vzip","","",185,[[]]],[11,"from","","",186,[[]]],[11,"into","","",186,[[]]],[11,"try_from","","",186,[[],["result",4]]],[11,"try_into","","",186,[[],["result",4]]],[11,"borrow","","",186,[[]]],[11,"borrow_mut","","",186,[[]]],[11,"type_id","","",186,[[],["typeid",3]]],[11,"vzip","","",186,[[]]],[11,"from","ic_types::ingress","",187,[[]]],[11,"into","","",187,[[]]],[11,"to_owned","","",187,[[]]],[11,"clone_into","","",187,[[]]],[11,"try_from","","",187,[[],["result",4]]],[11,"try_into","","",187,[[],["result",4]]],[11,"borrow","","",187,[[]]],[11,"borrow_mut","","",187,[[]]],[11,"type_id","","",187,[[],["typeid",3]]],[11,"erased_serialize","","",187,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",187,[[]]],[11,"from","","",192,[[]]],[11,"into","","",192,[[]]],[11,"to_owned","","",192,[[]]],[11,"clone_into","","",192,[[]]],[11,"try_from","","",192,[[],["result",4]]],[11,"try_into","","",192,[[],["result",4]]],[11,"borrow","","",192,[[]]],[11,"borrow_mut","","",192,[[]]],[11,"type_id","","",192,[[],["typeid",3]]],[11,"erased_serialize","","",192,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",192,[[]]],[11,"from","ic_types::malicious_behaviour","",193,[[]]],[11,"into","","",193,[[]]],[11,"to_owned","","",193,[[]]],[11,"clone_into","","",193,[[]]],[11,"try_from","","",193,[[],["result",4]]],[11,"try_into","","",193,[[],["result",4]]],[11,"borrow","","",193,[[]]],[11,"borrow_mut","","",193,[[]]],[11,"type_id","","",193,[[],["typeid",3]]],[11,"erased_serialize","","",193,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",193,[[]]],[11,"from","ic_types::malicious_flags","",194,[[]]],[11,"into","","",194,[[]]],[11,"to_owned","","",194,[[]]],[11,"clone_into","","",194,[[]]],[11,"try_from","","",194,[[],["result",4]]],[11,"try_into","","",194,[[],["result",4]]],[11,"borrow","","",194,[[]]],[11,"borrow_mut","","",194,[[]]],[11,"type_id","","",194,[[],["typeid",3]]],[11,"erased_serialize","","",194,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",194,[[]]],[11,"from","ic_types::messages","",195,[[]]],[11,"into","","",195,[[]]],[11,"to_owned","","",195,[[]]],[11,"clone_into","","",195,[[]]],[11,"try_from","","",195,[[],["result",4]]],[11,"try_into","","",195,[[],["result",4]]],[11,"borrow","","",195,[[]]],[11,"borrow_mut","","",195,[[]]],[11,"type_id","","",195,[[],["typeid",3]]],[11,"erased_serialize","","",195,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",195,[[]]],[11,"from","","",196,[[]]],[11,"into","","",196,[[]]],[11,"to_owned","","",196,[[]]],[11,"clone_into","","",196,[[]]],[11,"to_string","","",196,[[],["string",3]]],[11,"try_from","","",196,[[],["result",4]]],[11,"try_into","","",196,[[],["result",4]]],[11,"borrow","","",196,[[]]],[11,"borrow_mut","","",196,[[]]],[11,"type_id","","",196,[[],["typeid",3]]],[11,"erased_serialize","","",196,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",196,[[]]],[11,"from","","",197,[[]]],[11,"into","","",197,[[]]],[11,"to_owned","","",197,[[]]],[11,"clone_into","","",197,[[]]],[11,"try_from","","",197,[[],["result",4]]],[11,"try_into","","",197,[[],["result",4]]],[11,"borrow","","",197,[[]]],[11,"borrow_mut","","",197,[[]]],[11,"type_id","","",197,[[],["typeid",3]]],[11,"erased_serialize","","",197,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",197,[[]]],[11,"from","","",198,[[]]],[11,"into","","",198,[[]]],[11,"to_owned","","",198,[[]]],[11,"clone_into","","",198,[[]]],[11,"try_from","","",198,[[],["result",4]]],[11,"try_into","","",198,[[],["result",4]]],[11,"borrow","","",198,[[]]],[11,"borrow_mut","","",198,[[]]],[11,"type_id","","",198,[[],["typeid",3]]],[11,"erased_serialize","","",198,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",198,[[]]],[11,"from","","",238,[[]]],[11,"into","","",238,[[]]],[11,"to_owned","","",238,[[]]],[11,"clone_into","","",238,[[]]],[11,"try_from","","",238,[[],["result",4]]],[11,"try_into","","",238,[[],["result",4]]],[11,"borrow","","",238,[[]]],[11,"borrow_mut","","",238,[[]]],[11,"type_id","","",238,[[],["typeid",3]]],[11,"erased_serialize","","",238,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",238,[[]]],[11,"from","","",199,[[]]],[11,"into","","",199,[[]]],[11,"to_owned","","",199,[[]]],[11,"clone_into","","",199,[[]]],[11,"try_from","","",199,[[],["result",4]]],[11,"try_into","","",199,[[],["result",4]]],[11,"borrow","","",199,[[]]],[11,"borrow_mut","","",199,[[]]],[11,"type_id","","",199,[[],["typeid",3]]],[11,"erased_serialize","","",199,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",199,[[]]],[11,"from","","",200,[[]]],[11,"into","","",200,[[]]],[11,"to_owned","","",200,[[]]],[11,"clone_into","","",200,[[]]],[11,"try_from","","",200,[[],["result",4]]],[11,"try_into","","",200,[[],["result",4]]],[11,"borrow","","",200,[[]]],[11,"borrow_mut","","",200,[[]]],[11,"type_id","","",200,[[],["typeid",3]]],[11,"erased_serialize","","",200,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",200,[[]]],[11,"from","","",201,[[]]],[11,"into","","",201,[[]]],[11,"to_owned","","",201,[[]]],[11,"clone_into","","",201,[[]]],[11,"try_from","","",201,[[],["result",4]]],[11,"try_into","","",201,[[],["result",4]]],[11,"borrow","","",201,[[]]],[11,"borrow_mut","","",201,[[]]],[11,"type_id","","",201,[[],["typeid",3]]],[11,"erased_serialize","","",201,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",201,[[]]],[11,"from","","",202,[[]]],[11,"into","","",202,[[]]],[11,"to_owned","","",202,[[]]],[11,"clone_into","","",202,[[]]],[11,"try_from","","",202,[[],["result",4]]],[11,"try_into","","",202,[[],["result",4]]],[11,"borrow","","",202,[[]]],[11,"borrow_mut","","",202,[[]]],[11,"type_id","","",202,[[],["typeid",3]]],[11,"erased_serialize","","",202,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",202,[[]]],[11,"from","","",237,[[]]],[11,"into","","",237,[[]]],[11,"to_owned","","",237,[[]]],[11,"clone_into","","",237,[[]]],[11,"try_from","","",237,[[],["result",4]]],[11,"try_into","","",237,[[],["result",4]]],[11,"borrow","","",237,[[]]],[11,"borrow_mut","","",237,[[]]],[11,"type_id","","",237,[[],["typeid",3]]],[11,"erased_serialize","","",237,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",237,[[]]],[11,"from","","",203,[[]]],[11,"into","","",203,[[]]],[11,"to_owned","","",203,[[]]],[11,"clone_into","","",203,[[]]],[11,"try_from","","",203,[[],["result",4]]],[11,"try_into","","",203,[[],["result",4]]],[11,"borrow","","",203,[[]]],[11,"borrow_mut","","",203,[[]]],[11,"type_id","","",203,[[],["typeid",3]]],[11,"erased_serialize","","",203,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",203,[[]]],[11,"from","","",204,[[]]],[11,"into","","",204,[[]]],[11,"to_owned","","",204,[[]]],[11,"clone_into","","",204,[[]]],[11,"try_from","","",204,[[],["result",4]]],[11,"try_into","","",204,[[],["result",4]]],[11,"borrow","","",204,[[]]],[11,"borrow_mut","","",204,[[]]],[11,"type_id","","",204,[[],["typeid",3]]],[11,"erased_serialize","","",204,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",204,[[]]],[11,"from","","",205,[[]]],[11,"into","","",205,[[]]],[11,"to_owned","","",205,[[]]],[11,"clone_into","","",205,[[]]],[11,"try_from","","",205,[[],["result",4]]],[11,"try_into","","",205,[[],["result",4]]],[11,"borrow","","",205,[[]]],[11,"borrow_mut","","",205,[[]]],[11,"type_id","","",205,[[],["typeid",3]]],[11,"erased_serialize","","",205,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",205,[[]]],[11,"from","","",239,[[]]],[11,"into","","",239,[[]]],[11,"to_owned","","",239,[[]]],[11,"clone_into","","",239,[[]]],[11,"try_from","","",239,[[],["result",4]]],[11,"try_into","","",239,[[],["result",4]]],[11,"borrow","","",239,[[]]],[11,"borrow_mut","","",239,[[]]],[11,"type_id","","",239,[[],["typeid",3]]],[11,"erased_serialize","","",239,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",239,[[]]],[11,"from","","",206,[[]]],[11,"into","","",206,[[]]],[11,"to_owned","","",206,[[]]],[11,"clone_into","","",206,[[]]],[11,"try_from","","",206,[[],["result",4]]],[11,"try_into","","",206,[[],["result",4]]],[11,"borrow","","",206,[[]]],[11,"borrow_mut","","",206,[[]]],[11,"type_id","","",206,[[],["typeid",3]]],[11,"erased_serialize","","",206,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",206,[[]]],[11,"from","","",240,[[]]],[11,"into","","",240,[[]]],[11,"to_owned","","",240,[[]]],[11,"clone_into","","",240,[[]]],[11,"try_from","","",240,[[],["result",4]]],[11,"try_into","","",240,[[],["result",4]]],[11,"borrow","","",240,[[]]],[11,"borrow_mut","","",240,[[]]],[11,"type_id","","",240,[[],["typeid",3]]],[11,"erased_serialize","","",240,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",240,[[]]],[11,"from","","",207,[[]]],[11,"into","","",207,[[]]],[11,"to_owned","","",207,[[]]],[11,"clone_into","","",207,[[]]],[11,"try_from","","",207,[[],["result",4]]],[11,"try_into","","",207,[[],["result",4]]],[11,"borrow","","",207,[[]]],[11,"borrow_mut","","",207,[[]]],[11,"type_id","","",207,[[],["typeid",3]]],[11,"erased_serialize","","",207,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",207,[[]]],[11,"from","","",208,[[]]],[11,"into","","",208,[[]]],[11,"to_owned","","",208,[[]]],[11,"clone_into","","",208,[[]]],[11,"try_from","","",208,[[],["result",4]]],[11,"try_into","","",208,[[],["result",4]]],[11,"borrow","","",208,[[]]],[11,"borrow_mut","","",208,[[]]],[11,"type_id","","",208,[[],["typeid",3]]],[11,"erased_serialize","","",208,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",208,[[]]],[11,"from","","",209,[[]]],[11,"into","","",209,[[]]],[11,"to_owned","","",209,[[]]],[11,"clone_into","","",209,[[]]],[11,"try_from","","",209,[[],["result",4]]],[11,"try_into","","",209,[[],["result",4]]],[11,"borrow","","",209,[[]]],[11,"borrow_mut","","",209,[[]]],[11,"type_id","","",209,[[],["typeid",3]]],[11,"erased_serialize","","",209,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",209,[[]]],[11,"from","","",242,[[]]],[11,"into","","",242,[[]]],[11,"to_owned","","",242,[[]]],[11,"clone_into","","",242,[[]]],[11,"to_string","","",242,[[],["string",3]]],[11,"try_from","","",242,[[],["result",4]]],[11,"try_into","","",242,[[],["result",4]]],[11,"borrow","","",242,[[]]],[11,"borrow_mut","","",242,[[]]],[11,"type_id","","",242,[[],["typeid",3]]],[11,"erased_serialize","","",242,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",242,[[]]],[11,"encode_hex","","",242,[[]]],[11,"encode_hex_upper","","",242,[[]]],[11,"from","","",210,[[]]],[11,"into","","",210,[[]]],[11,"to_owned","","",210,[[]]],[11,"clone_into","","",210,[[]]],[11,"try_from","","",210,[[],["result",4]]],[11,"try_into","","",210,[[],["result",4]]],[11,"borrow","","",210,[[]]],[11,"borrow_mut","","",210,[[]]],[11,"type_id","","",210,[[],["typeid",3]]],[11,"vzip","","",210,[[]]],[11,"from","","",211,[[]]],[11,"into","","",211,[[]]],[11,"to_owned","","",211,[[]]],[11,"clone_into","","",211,[[]]],[11,"try_from","","",211,[[],["result",4]]],[11,"try_into","","",211,[[],["result",4]]],[11,"borrow","","",211,[[]]],[11,"borrow_mut","","",211,[[]]],[11,"type_id","","",211,[[],["typeid",3]]],[11,"vzip","","",211,[[]]],[11,"from","","",244,[[]]],[11,"into","","",244,[[]]],[11,"to_owned","","",244,[[]]],[11,"clone_into","","",244,[[]]],[11,"try_from","","",244,[[],["result",4]]],[11,"try_into","","",244,[[],["result",4]]],[11,"borrow","","",244,[[]]],[11,"borrow_mut","","",244,[[]]],[11,"type_id","","",244,[[],["typeid",3]]],[11,"vzip","","",244,[[]]],[11,"from","","",243,[[]]],[11,"into","","",243,[[]]],[11,"to_owned","","",243,[[]]],[11,"clone_into","","",243,[[]]],[11,"try_from","","",243,[[],["result",4]]],[11,"try_into","","",243,[[],["result",4]]],[11,"borrow","","",243,[[]]],[11,"borrow_mut","","",243,[[]]],[11,"type_id","","",243,[[],["typeid",3]]],[11,"erased_serialize","","",243,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",243,[[]]],[11,"from","","",212,[[]]],[11,"into","","",212,[[]]],[11,"to_owned","","",212,[[]]],[11,"clone_into","","",212,[[]]],[11,"try_from","","",212,[[],["result",4]]],[11,"try_into","","",212,[[],["result",4]]],[11,"borrow","","",212,[[]]],[11,"borrow_mut","","",212,[[]]],[11,"type_id","","",212,[[],["typeid",3]]],[11,"erased_serialize","","",212,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",212,[[]]],[11,"from","","",247,[[]]],[11,"into","","",247,[[]]],[11,"to_owned","","",247,[[]]],[11,"clone_into","","",247,[[]]],[11,"try_from","","",247,[[],["result",4]]],[11,"try_into","","",247,[[],["result",4]]],[11,"borrow","","",247,[[]]],[11,"borrow_mut","","",247,[[]]],[11,"type_id","","",247,[[],["typeid",3]]],[11,"erased_serialize","","",247,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",247,[[]]],[11,"encode_hex","","",247,[[]]],[11,"encode_hex_upper","","",247,[[]]],[11,"from","","",213,[[]]],[11,"into","","",213,[[]]],[11,"to_owned","","",213,[[]]],[11,"clone_into","","",213,[[]]],[11,"try_from","","",213,[[],["result",4]]],[11,"try_into","","",213,[[],["result",4]]],[11,"borrow","","",213,[[]]],[11,"borrow_mut","","",213,[[]]],[11,"type_id","","",213,[[],["typeid",3]]],[11,"erased_serialize","","",213,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",213,[[]]],[11,"from","","",214,[[]]],[11,"into","","",214,[[]]],[11,"to_owned","","",214,[[]]],[11,"clone_into","","",214,[[]]],[11,"try_from","","",214,[[],["result",4]]],[11,"try_into","","",214,[[],["result",4]]],[11,"borrow","","",214,[[]]],[11,"borrow_mut","","",214,[[]]],[11,"type_id","","",214,[[],["typeid",3]]],[11,"erased_serialize","","",214,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",214,[[]]],[11,"from","","",217,[[]]],[11,"into","","",217,[[]]],[11,"to_owned","","",217,[[]]],[11,"clone_into","","",217,[[]]],[11,"try_from","","",217,[[],["result",4]]],[11,"try_into","","",217,[[],["result",4]]],[11,"borrow","","",217,[[]]],[11,"borrow_mut","","",217,[[]]],[11,"type_id","","",217,[[],["typeid",3]]],[11,"erased_serialize","","",217,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",217,[[]]],[11,"from","","",220,[[]]],[11,"into","","",220,[[]]],[11,"to_owned","","",220,[[]]],[11,"clone_into","","",220,[[]]],[11,"try_from","","",220,[[],["result",4]]],[11,"try_into","","",220,[[],["result",4]]],[11,"borrow","","",220,[[]]],[11,"borrow_mut","","",220,[[]]],[11,"type_id","","",220,[[],["typeid",3]]],[11,"erased_serialize","","",220,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",220,[[]]],[11,"from","","",222,[[]]],[11,"into","","",222,[[]]],[11,"to_owned","","",222,[[]]],[11,"clone_into","","",222,[[]]],[11,"try_from","","",222,[[],["result",4]]],[11,"try_into","","",222,[[],["result",4]]],[11,"borrow","","",222,[[]]],[11,"borrow_mut","","",222,[[]]],[11,"type_id","","",222,[[],["typeid",3]]],[11,"erased_serialize","","",222,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",222,[[]]],[11,"from","","",225,[[]]],[11,"into","","",225,[[]]],[11,"to_owned","","",225,[[]]],[11,"clone_into","","",225,[[]]],[11,"try_from","","",225,[[],["result",4]]],[11,"try_into","","",225,[[],["result",4]]],[11,"borrow","","",225,[[]]],[11,"borrow_mut","","",225,[[]]],[11,"type_id","","",225,[[],["typeid",3]]],[11,"erased_serialize","","",225,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",225,[[]]],[11,"from","","",227,[[]]],[11,"into","","",227,[[]]],[11,"to_owned","","",227,[[]]],[11,"clone_into","","",227,[[]]],[11,"try_from","","",227,[[],["result",4]]],[11,"try_into","","",227,[[],["result",4]]],[11,"borrow","","",227,[[]]],[11,"borrow_mut","","",227,[[]]],[11,"type_id","","",227,[[],["typeid",3]]],[11,"erased_serialize","","",227,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",227,[[]]],[11,"from","","",228,[[]]],[11,"into","","",228,[[]]],[11,"to_owned","","",228,[[]]],[11,"clone_into","","",228,[[]]],[11,"try_from","","",228,[[],["result",4]]],[11,"try_into","","",228,[[],["result",4]]],[11,"borrow","","",228,[[]]],[11,"borrow_mut","","",228,[[]]],[11,"type_id","","",228,[[],["typeid",3]]],[11,"vzip","","",228,[[]]],[11,"from","","",229,[[]]],[11,"into","","",229,[[]]],[11,"to_owned","","",229,[[]]],[11,"clone_into","","",229,[[]]],[11,"try_from","","",229,[[],["result",4]]],[11,"try_into","","",229,[[],["result",4]]],[11,"borrow","","",229,[[]]],[11,"borrow_mut","","",229,[[]]],[11,"type_id","","",229,[[],["typeid",3]]],[11,"erased_serialize","","",229,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",229,[[]]],[11,"from","","",230,[[]]],[11,"into","","",230,[[]]],[11,"to_owned","","",230,[[]]],[11,"clone_into","","",230,[[]]],[11,"try_from","","",230,[[],["result",4]]],[11,"try_into","","",230,[[],["result",4]]],[11,"borrow","","",230,[[]]],[11,"borrow_mut","","",230,[[]]],[11,"type_id","","",230,[[],["typeid",3]]],[11,"erased_serialize","","",230,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",230,[[]]],[11,"from","","",231,[[]]],[11,"into","","",231,[[]]],[11,"to_owned","","",231,[[]]],[11,"clone_into","","",231,[[]]],[11,"to_string","","",231,[[],["string",3]]],[11,"try_from","","",231,[[],["result",4]]],[11,"try_into","","",231,[[],["result",4]]],[11,"borrow","","",231,[[]]],[11,"borrow_mut","","",231,[[]]],[11,"type_id","","",231,[[],["typeid",3]]],[11,"erased_serialize","","",231,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",231,[[]]],[11,"from","","",233,[[]]],[11,"into","","",233,[[]]],[11,"to_owned","","",233,[[]]],[11,"clone_into","","",233,[[]]],[11,"try_from","","",233,[[],["result",4]]],[11,"try_into","","",233,[[],["result",4]]],[11,"borrow","","",233,[[]]],[11,"borrow_mut","","",233,[[]]],[11,"type_id","","",233,[[],["typeid",3]]],[11,"erased_serialize","","",233,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",233,[[]]],[11,"from","","",236,[[]]],[11,"into","","",236,[[]]],[11,"to_owned","","",236,[[]]],[11,"clone_into","","",236,[[]]],[11,"to_string","","",236,[[],["string",3]]],[11,"try_from","","",236,[[],["result",4]]],[11,"try_into","","",236,[[],["result",4]]],[11,"borrow","","",236,[[]]],[11,"borrow_mut","","",236,[[]]],[11,"type_id","","",236,[[],["typeid",3]]],[11,"erased_serialize","","",236,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",236,[[]]],[11,"from","ic_types::methods","",248,[[]]],[11,"into","","",248,[[]]],[11,"to_owned","","",248,[[]]],[11,"clone_into","","",248,[[]]],[11,"try_from","","",248,[[],["result",4]]],[11,"try_into","","",248,[[],["result",4]]],[11,"borrow","","",248,[[]]],[11,"borrow_mut","","",248,[[]]],[11,"type_id","","",248,[[],["typeid",3]]],[11,"erased_serialize","","",248,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",248,[[]]],[11,"from","","",249,[[]]],[11,"into","","",249,[[]]],[11,"to_owned","","",249,[[]]],[11,"clone_into","","",249,[[]]],[11,"try_from","","",249,[[],["result",4]]],[11,"try_into","","",249,[[],["result",4]]],[11,"borrow","","",249,[[]]],[11,"borrow_mut","","",249,[[]]],[11,"type_id","","",249,[[],["typeid",3]]],[11,"erased_serialize","","",249,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",249,[[]]],[11,"from","","",250,[[]]],[11,"into","","",250,[[]]],[11,"to_owned","","",250,[[]]],[11,"clone_into","","",250,[[]]],[11,"to_string","","",250,[[],["string",3]]],[11,"try_from","","",250,[[],["result",4]]],[11,"try_into","","",250,[[],["result",4]]],[11,"borrow","","",250,[[]]],[11,"borrow_mut","","",250,[[]]],[11,"type_id","","",250,[[],["typeid",3]]],[11,"erased_serialize","","",250,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",250,[[]]],[11,"from","","",251,[[]]],[11,"into","","",251,[[]]],[11,"to_owned","","",251,[[]]],[11,"clone_into","","",251,[[]]],[11,"to_string","","",251,[[],["string",3]]],[11,"try_from","","",251,[[],["result",4]]],[11,"try_into","","",251,[[],["result",4]]],[11,"borrow","","",251,[[]]],[11,"borrow_mut","","",251,[[]]],[11,"type_id","","",251,[[],["typeid",3]]],[11,"erased_serialize","","",251,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",251,[[]]],[11,"from","","",252,[[]]],[11,"into","","",252,[[]]],[11,"to_owned","","",252,[[]]],[11,"clone_into","","",252,[[]]],[11,"try_from","","",252,[[],["result",4]]],[11,"try_into","","",252,[[],["result",4]]],[11,"borrow","","",252,[[]]],[11,"borrow_mut","","",252,[[]]],[11,"type_id","","",252,[[],["typeid",3]]],[11,"erased_serialize","","",252,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",252,[[]]],[11,"from","ic_types::nominal_cycles","",253,[[]]],[11,"into","","",253,[[]]],[11,"to_owned","","",253,[[]]],[11,"clone_into","","",253,[[]]],[11,"to_string","","",253,[[],["string",3]]],[11,"try_from","","",253,[[],["result",4]]],[11,"try_into","","",253,[[],["result",4]]],[11,"borrow","","",253,[[]]],[11,"borrow_mut","","",253,[[]]],[11,"type_id","","",253,[[],["typeid",3]]],[11,"erased_serialize","","",253,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",253,[[]]],[11,"from","ic_types::p2p","",254,[[]]],[11,"into","","",254,[[]]],[11,"to_owned","","",254,[[]]],[11,"clone_into","","",254,[[]]],[11,"try_from","","",254,[[],["result",4]]],[11,"try_into","","",254,[[],["result",4]]],[11,"borrow","","",254,[[]]],[11,"borrow_mut","","",254,[[]]],[11,"type_id","","",254,[[],["typeid",3]]],[11,"erased_serialize","","",254,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",254,[[]]],[11,"from","ic_types::registry","",255,[[]]],[11,"into","","",255,[[]]],[11,"to_owned","","",255,[[]]],[11,"clone_into","","",255,[[]]],[11,"to_string","","",255,[[],["string",3]]],[11,"try_from","","",255,[[],["result",4]]],[11,"try_into","","",255,[[],["result",4]]],[11,"borrow","","",255,[[]]],[11,"borrow_mut","","",255,[[]]],[11,"type_id","","",255,[[],["typeid",3]]],[11,"erased_serialize","","",255,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",255,[[]]],[11,"from","","",260,[[]]],[11,"into","","",260,[[]]],[11,"to_owned","","",260,[[]]],[11,"clone_into","","",260,[[]]],[11,"to_string","","",260,[[],["string",3]]],[11,"try_from","","",260,[[],["result",4]]],[11,"try_into","","",260,[[],["result",4]]],[11,"borrow","","",260,[[]]],[11,"borrow_mut","","",260,[[]]],[11,"type_id","","",260,[[],["typeid",3]]],[11,"erased_serialize","","",260,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",260,[[]]],[11,"from","","",262,[[]]],[11,"into","","",262,[[]]],[11,"to_owned","","",262,[[]]],[11,"clone_into","","",262,[[]]],[11,"to_string","","",262,[[],["string",3]]],[11,"try_from","","",262,[[],["result",4]]],[11,"try_into","","",262,[[],["result",4]]],[11,"borrow","","",262,[[]]],[11,"borrow_mut","","",262,[[]]],[11,"type_id","","",262,[[],["typeid",3]]],[11,"erased_serialize","","",262,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",262,[[]]],[11,"from","ic_types::registry::connection_endpoint","",341,[[]]],[11,"into","","",341,[[]]],[11,"to_owned","","",341,[[]]],[11,"clone_into","","",341,[[]]],[11,"to_string","","",341,[[],["string",3]]],[11,"try_from","","",341,[[],["result",4]]],[11,"try_into","","",341,[[],["result",4]]],[11,"borrow","","",341,[[]]],[11,"borrow_mut","","",341,[[]]],[11,"type_id","","",341,[[],["typeid",3]]],[11,"erased_serialize","","",341,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",341,[[]]],[11,"from","","",266,[[]]],[11,"into","","",266,[[]]],[11,"to_string","","",266,[[],["string",3]]],[11,"try_from","","",266,[[],["result",4]]],[11,"try_into","","",266,[[],["result",4]]],[11,"borrow","","",266,[[]]],[11,"borrow_mut","","",266,[[]]],[11,"type_id","","",266,[[],["typeid",3]]],[11,"vzip","","",266,[[]]],[11,"from","","",267,[[]]],[11,"into","","",267,[[]]],[11,"to_owned","","",267,[[]]],[11,"clone_into","","",267,[[]]],[11,"to_string","","",267,[[],["string",3]]],[11,"try_from","","",267,[[],["result",4]]],[11,"try_into","","",267,[[],["result",4]]],[11,"borrow","","",267,[[]]],[11,"borrow_mut","","",267,[[]]],[11,"type_id","","",267,[[],["typeid",3]]],[11,"erased_serialize","","",267,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",267,[[]]],[11,"from","","",272,[[]]],[11,"into","","",272,[[]]],[11,"to_owned","","",272,[[]]],[11,"clone_into","","",272,[[]]],[11,"to_string","","",272,[[],["string",3]]],[11,"try_from","","",272,[[],["result",4]]],[11,"try_into","","",272,[[],["result",4]]],[11,"borrow","","",272,[[]]],[11,"borrow_mut","","",272,[[]]],[11,"type_id","","",272,[[],["typeid",3]]],[11,"erased_serialize","","",272,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",272,[[]]],[11,"from","","",275,[[]]],[11,"into","","",275,[[]]],[11,"to_string","","",275,[[],["string",3]]],[11,"try_from","","",275,[[],["result",4]]],[11,"try_into","","",275,[[],["result",4]]],[11,"borrow","","",275,[[]]],[11,"borrow_mut","","",275,[[]]],[11,"type_id","","",275,[[],["typeid",3]]],[11,"vzip","","",275,[[]]],[11,"from","ic_types::replica_config","",283,[[]]],[11,"into","","",283,[[]]],[11,"to_owned","","",283,[[]]],[11,"clone_into","","",283,[[]]],[11,"try_from","","",283,[[],["result",4]]],[11,"try_into","","",283,[[],["result",4]]],[11,"borrow","","",283,[[]]],[11,"borrow_mut","","",283,[[]]],[11,"type_id","","",283,[[],["typeid",3]]],[11,"erased_serialize","","",283,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",283,[[]]],[11,"from","ic_types::replica_version","",284,[[]]],[11,"into","","",284,[[]]],[11,"to_owned","","",284,[[]]],[11,"clone_into","","",284,[[]]],[11,"to_string","","",284,[[],["string",3]]],[11,"try_from","","",284,[[],["result",4]]],[11,"try_into","","",284,[[],["result",4]]],[11,"borrow","","",284,[[]]],[11,"borrow_mut","","",284,[[]]],[11,"type_id","","",284,[[],["typeid",3]]],[11,"erased_serialize","","",284,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",284,[[]]],[11,"from","","",342,[[]]],[11,"into","","",342,[[]]],[11,"try_from","","",342,[[],["result",4]]],[11,"try_into","","",342,[[],["result",4]]],[11,"borrow","","",342,[[]]],[11,"borrow_mut","","",342,[[]]],[11,"type_id","","",342,[[],["typeid",3]]],[11,"vzip","","",342,[[]]],[11,"from","","",343,[[]]],[11,"into","","",343,[[]]],[11,"to_string","","",343,[[],["string",3]]],[11,"try_from","","",343,[[],["result",4]]],[11,"try_into","","",343,[[],["result",4]]],[11,"borrow","","",343,[[]]],[11,"borrow_mut","","",343,[[]]],[11,"type_id","","",343,[[],["typeid",3]]],[11,"vzip","","",343,[[]]],[11,"from","ic_types::state_sync","",285,[[]]],[11,"into","","",285,[[]]],[11,"to_owned","","",285,[[]]],[11,"clone_into","","",285,[[]]],[11,"try_from","","",285,[[],["result",4]]],[11,"try_into","","",285,[[],["result",4]]],[11,"borrow","","",285,[[]]],[11,"borrow_mut","","",285,[[]]],[11,"type_id","","",285,[[],["typeid",3]]],[11,"erased_serialize","","",285,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",285,[[]]],[11,"from","","",286,[[]]],[11,"into","","",286,[[]]],[11,"to_owned","","",286,[[]]],[11,"clone_into","","",286,[[]]],[11,"try_from","","",286,[[],["result",4]]],[11,"try_into","","",286,[[],["result",4]]],[11,"borrow","","",286,[[]]],[11,"borrow_mut","","",286,[[]]],[11,"type_id","","",286,[[],["typeid",3]]],[11,"erased_serialize","","",286,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",286,[[]]],[11,"from","","",287,[[]]],[11,"into","","",287,[[]]],[11,"to_owned","","",287,[[]]],[11,"clone_into","","",287,[[]]],[11,"to_string","","",287,[[],["string",3]]],[11,"try_from","","",287,[[],["result",4]]],[11,"try_into","","",287,[[],["result",4]]],[11,"borrow","","",287,[[]]],[11,"borrow_mut","","",287,[[]]],[11,"type_id","","",287,[[],["typeid",3]]],[11,"erased_serialize","","",287,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",287,[[]]],[11,"from","ic_types::time","",288,[[]]],[11,"into","","",288,[[]]],[11,"to_owned","","",288,[[]]],[11,"clone_into","","",288,[[]]],[11,"to_string","","",288,[[],["string",3]]],[11,"try_from","","",288,[[],["result",4]]],[11,"try_into","","",288,[[],["result",4]]],[11,"borrow","","",288,[[]]],[11,"borrow_mut","","",288,[[]]],[11,"type_id","","",288,[[],["typeid",3]]],[11,"erased_serialize","","",288,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",288,[[]]],[11,"from","ic_types::transport","",344,[[]]],[11,"into","","",344,[[]]],[11,"to_owned","","",344,[[]]],[11,"clone_into","","",344,[[]]],[11,"try_from","","",344,[[],["result",4]]],[11,"try_into","","",344,[[],["result",4]]],[11,"borrow","","",344,[[]]],[11,"borrow_mut","","",344,[[]]],[11,"type_id","","",344,[[],["typeid",3]]],[11,"erased_serialize","","",344,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",344,[[]]],[11,"from","","",289,[[]]],[11,"into","","",289,[[]]],[11,"to_owned","","",289,[[]]],[11,"clone_into","","",289,[[]]],[11,"try_from","","",289,[[],["result",4]]],[11,"try_into","","",289,[[],["result",4]]],[11,"borrow","","",289,[[]]],[11,"borrow_mut","","",289,[[]]],[11,"type_id","","",289,[[],["typeid",3]]],[11,"erased_serialize","","",289,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",289,[[]]],[11,"from","","",290,[[]]],[11,"into","","",290,[[]]],[11,"to_owned","","",290,[[]]],[11,"clone_into","","",290,[[]]],[11,"try_from","","",290,[[],["result",4]]],[11,"try_into","","",290,[[],["result",4]]],[11,"borrow","","",290,[[]]],[11,"borrow_mut","","",290,[[]]],[11,"type_id","","",290,[[],["typeid",3]]],[11,"erased_serialize","","",290,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",290,[[]]],[11,"from","","",291,[[]]],[11,"into","","",291,[[]]],[11,"to_owned","","",291,[[]]],[11,"clone_into","","",291,[[]]],[11,"try_from","","",291,[[],["result",4]]],[11,"try_into","","",291,[[],["result",4]]],[11,"borrow","","",291,[[]]],[11,"borrow_mut","","",291,[[]]],[11,"type_id","","",291,[[],["typeid",3]]],[11,"erased_serialize","","",291,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",291,[[]]],[11,"from","","",292,[[]]],[11,"into","","",292,[[]]],[11,"to_owned","","",292,[[]]],[11,"clone_into","","",292,[[]]],[11,"try_from","","",292,[[],["result",4]]],[11,"try_into","","",292,[[],["result",4]]],[11,"borrow","","",292,[[]]],[11,"borrow_mut","","",292,[[]]],[11,"type_id","","",292,[[],["typeid",3]]],[11,"erased_serialize","","",292,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",292,[[]]],[11,"from","","",293,[[]]],[11,"into","","",293,[[]]],[11,"to_owned","","",293,[[]]],[11,"clone_into","","",293,[[]]],[11,"try_from","","",293,[[],["result",4]]],[11,"try_into","","",293,[[],["result",4]]],[11,"borrow","","",293,[[]]],[11,"borrow_mut","","",293,[[]]],[11,"type_id","","",293,[[],["typeid",3]]],[11,"erased_serialize","","",293,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",293,[[]]],[11,"from","","",294,[[]]],[11,"into","","",294,[[]]],[11,"to_owned","","",294,[[]]],[11,"clone_into","","",294,[[]]],[11,"try_from","","",294,[[],["result",4]]],[11,"try_into","","",294,[[],["result",4]]],[11,"borrow","","",294,[[]]],[11,"borrow_mut","","",294,[[]]],[11,"type_id","","",294,[[],["typeid",3]]],[11,"erased_serialize","","",294,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",294,[[]]],[11,"from","","",295,[[]]],[11,"into","","",295,[[]]],[11,"try_from","","",295,[[],["result",4]]],[11,"try_into","","",295,[[],["result",4]]],[11,"borrow","","",295,[[]]],[11,"borrow_mut","","",295,[[]]],[11,"type_id","","",295,[[],["typeid",3]]],[11,"vzip","","",295,[[]]],[11,"from","","",296,[[]]],[11,"into","","",296,[[]]],[11,"to_owned","","",296,[[]]],[11,"clone_into","","",296,[[]]],[11,"try_from","","",296,[[],["result",4]]],[11,"try_into","","",296,[[],["result",4]]],[11,"borrow","","",296,[[]]],[11,"borrow_mut","","",296,[[]]],[11,"type_id","","",296,[[],["typeid",3]]],[11,"erased_serialize","","",296,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",296,[[]]],[11,"from","","",297,[[]]],[11,"into","","",297,[[]]],[11,"to_owned","","",297,[[]]],[11,"clone_into","","",297,[[]]],[11,"try_from","","",297,[[],["result",4]]],[11,"try_into","","",297,[[],["result",4]]],[11,"borrow","","",297,[[]]],[11,"borrow_mut","","",297,[[]]],[11,"type_id","","",297,[[],["typeid",3]]],[11,"erased_serialize","","",297,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",297,[[]]],[11,"from","","",298,[[]]],[11,"into","","",298,[[]]],[11,"to_owned","","",298,[[]]],[11,"clone_into","","",298,[[]]],[11,"try_from","","",298,[[],["result",4]]],[11,"try_into","","",298,[[],["result",4]]],[11,"borrow","","",298,[[]]],[11,"borrow_mut","","",298,[[]]],[11,"type_id","","",298,[[],["typeid",3]]],[11,"erased_serialize","","",298,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",298,[[]]],[11,"from","","",299,[[]]],[11,"into","","",299,[[]]],[11,"to_owned","","",299,[[]]],[11,"clone_into","","",299,[[]]],[11,"try_from","","",299,[[],["result",4]]],[11,"try_into","","",299,[[],["result",4]]],[11,"borrow","","",299,[[]]],[11,"borrow_mut","","",299,[[]]],[11,"type_id","","",299,[[],["typeid",3]]],[11,"erased_serialize","","",299,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",299,[[]]],[11,"from","ic_types::user_error","",300,[[]]],[11,"into","","",300,[[]]],[11,"to_owned","","",300,[[]]],[11,"clone_into","","",300,[[]]],[11,"to_string","","",300,[[],["string",3]]],[11,"try_from","","",300,[[],["result",4]]],[11,"try_into","","",300,[[],["result",4]]],[11,"borrow","","",300,[[]]],[11,"borrow_mut","","",300,[[]]],[11,"type_id","","",300,[[],["typeid",3]]],[11,"erased_serialize","","",300,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",300,[[]]],[11,"from","","",301,[[]]],[11,"into","","",301,[[]]],[11,"to_owned","","",301,[[]]],[11,"clone_into","","",301,[[]]],[11,"to_string","","",301,[[],["string",3]]],[11,"try_from","","",301,[[],["result",4]]],[11,"try_into","","",301,[[],["result",4]]],[11,"borrow","","",301,[[]]],[11,"borrow_mut","","",301,[[]]],[11,"type_id","","",301,[[],["typeid",3]]],[11,"erased_serialize","","",301,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",301,[[]]],[11,"from","","",345,[[]]],[11,"into","","",345,[[]]],[11,"to_owned","","",345,[[]]],[11,"clone_into","","",345,[[]]],[11,"to_string","","",345,[[],["string",3]]],[11,"try_from","","",345,[[],["result",4]]],[11,"try_into","","",345,[[],["result",4]]],[11,"borrow","","",345,[[]]],[11,"borrow_mut","","",345,[[]]],[11,"type_id","","",345,[[],["typeid",3]]],[11,"erased_serialize","","",345,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",345,[[]]],[11,"from","ic_types::xnet","",346,[[]]],[11,"into","","",346,[[]]],[11,"try_from","","",346,[[],["result",4]]],[11,"try_into","","",346,[[],["result",4]]],[11,"borrow","","",346,[[]]],[11,"borrow_mut","","",346,[[]]],[11,"type_id","","",346,[[],["typeid",3]]],[11,"vzip","","",346,[[]]],[11,"from","","",306,[[]]],[11,"into","","",306,[[]]],[11,"to_owned","","",306,[[]]],[11,"clone_into","","",306,[[]]],[11,"try_from","","",306,[[],["result",4]]],[11,"try_into","","",306,[[],["result",4]]],[11,"borrow","","",306,[[]]],[11,"borrow_mut","","",306,[[]]],[11,"type_id","","",306,[[],["typeid",3]]],[11,"erased_serialize","","",306,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",306,[[]]],[11,"from","","",302,[[]]],[11,"into","","",302,[[]]],[11,"to_owned","","",302,[[]]],[11,"clone_into","","",302,[[]]],[11,"try_from","","",302,[[],["result",4]]],[11,"try_into","","",302,[[],["result",4]]],[11,"borrow","","",302,[[]]],[11,"borrow_mut","","",302,[[]]],[11,"type_id","","",302,[[],["typeid",3]]],[11,"erased_serialize","","",302,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",302,[[]]],[11,"from","","",307,[[]]],[11,"into","","",307,[[]]],[11,"to_owned","","",307,[[]]],[11,"clone_into","","",307,[[]]],[11,"try_from","","",307,[[],["result",4]]],[11,"try_into","","",307,[[],["result",4]]],[11,"borrow","","",307,[[]]],[11,"borrow_mut","","",307,[[]]],[11,"type_id","","",307,[[],["typeid",3]]],[11,"erased_serialize","","",307,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",307,[[]]],[11,"from","","",303,[[]]],[11,"into","","",303,[[]]],[11,"to_owned","","",303,[[]]],[11,"clone_into","","",303,[[]]],[11,"try_from","","",303,[[],["result",4]]],[11,"try_into","","",303,[[],["result",4]]],[11,"borrow","","",303,[[]]],[11,"borrow_mut","","",303,[[]]],[11,"type_id","","",303,[[],["typeid",3]]],[11,"erased_serialize","","",303,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",303,[[]]],[11,"from","","",347,[[]]],[11,"into","","",347,[[]]],[11,"try_from","","",347,[[],["result",4]]],[11,"try_into","","",347,[[],["result",4]]],[11,"borrow","","",347,[[]]],[11,"borrow_mut","","",347,[[]]],[11,"type_id","","",347,[[],["typeid",3]]],[11,"vzip","","",347,[[]]],[11,"from","","",304,[[]]],[11,"into","","",304,[[]]],[11,"to_owned","","",304,[[]]],[11,"clone_into","","",304,[[]]],[11,"try_from","","",304,[[],["result",4]]],[11,"try_into","","",304,[[],["result",4]]],[11,"borrow","","",304,[[]]],[11,"borrow_mut","","",304,[[]]],[11,"type_id","","",304,[[],["typeid",3]]],[11,"erased_serialize","","",304,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"vzip","","",304,[[]]],[11,"eq","ic_types::crypto::threshold_sig","",130,[[["thresholdsigpublickeybytesconversionerror",4]]]],[11,"ne","","",130,[[["thresholdsigpublickeybytesconversionerror",4]]]],[11,"fmt","","",130,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",130,[[]]],[11,"fmt","","",130,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","","",130,[[],["thresholdsigpublickeybytesconversionerror",4]]],[11,"eq","ic_types::ic00","",335,[[["canisterstatusresult",3]]]],[11,"ne","","",335,[[["canisterstatusresult",3]]]],[11,"eq","","",336,[[["canisterstatusresultv2",3]]]],[11,"ne","","",336,[[["canisterstatusresultv2",3]]]],[11,"default","","",179,[[],["canistersettingsargs",3]]],[11,"default","","",180,[[],["createcanisterargs",3]]],[11,"to_string","","",182,[[],["string",3]]],[11,"from","","",334,[[["canisterid",3]],["canisteridrecord",3]]],[11,"fmt","","",181,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",182,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",335,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",336,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",184,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",179,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",181,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",338,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",334,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",185,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",340,[[["formatter",3]],[["result",4],["error",3]]]],[11,"_ty","","",184,[[],["type",4]]],[11,"id","","",184,[[],["typeid",3]]],[11,"idl_serialize","","",184,[[],["result",4]]],[11,"_ty","","",337,[[],["type",4]]],[11,"id","","",337,[[],["typeid",3]]],[11,"idl_serialize","","",337,[[],["result",4]]],[11,"_ty","","",180,[[],["type",4]]],[11,"id","","",180,[[],["typeid",3]]],[11,"idl_serialize","","",180,[[],["result",4]]],[11,"_ty","","",339,[[],["type",4]]],[11,"id","","",339,[[],["typeid",3]]],[11,"idl_serialize","","",339,[[],["result",4]]],[11,"_ty","","",340,[[],["type",4]]],[11,"id","","",340,[[],["typeid",3]]],[11,"idl_serialize","","",340,[[],["result",4]]],[11,"_ty","","",336,[[],["type",4]]],[11,"id","","",336,[[],["typeid",3]]],[11,"idl_serialize","","",336,[[],["result",4]]],[11,"_ty","","",181,[[],["type",4]]],[11,"id","","",181,[[],["typeid",3]]],[11,"idl_serialize","","",181,[[],["result",4]]],[11,"_ty","","",334,[[],["type",4]]],[11,"id","","",334,[[],["typeid",3]]],[11,"idl_serialize","","",334,[[],["result",4]]],[11,"_ty","","",186,[[],["type",4]]],[11,"id","","",186,[[],["typeid",3]]],[11,"idl_serialize","","",186,[[],["result",4]]],[11,"_ty","","",335,[[],["type",4]]],[11,"id","","",335,[[],["typeid",3]]],[11,"idl_serialize","","",335,[[],["result",4]]],[11,"_ty","","",338,[[],["type",4]]],[11,"id","","",338,[[],["typeid",3]]],[11,"idl_serialize","","",338,[[],["result",4]]],[11,"_ty","","",179,[[],["type",4]]],[11,"id","","",179,[[],["typeid",3]]],[11,"idl_serialize","","",179,[[],["result",4]]],[11,"clone","","",180,[[],["createcanisterargs",3]]],[11,"clone","","",182,[[],["method",4]]],[11,"clone","","",179,[[],["canistersettingsargs",3]]],[11,"clone","","",181,[[],["installcodeargs",3]]],[11,"from_str","","",182,[[],[["method",4],["result",4]]]],[11,"deserialize","","",340,[[],[["setupinitialdkgargs",3],["result",4]]]],[11,"deserialize","","",339,[[],[["result",4],["setcontrollerargs",3]]]],[11,"deserialize","","",338,[[],[["result",4],["provisionaltopupcanisterargs",3]]]],[11,"deserialize","","",337,[[],[["result",4],["emptyblob",3]]]],[11,"deserialize","","",334,[[],[["canisteridrecord",3],["result",4]]]],[11,"deserialize","","",336,[[],[["result",4],["canisterstatusresultv2",3]]]],[11,"deserialize","","",184,[[],[["result",4],["provisionalcreatecanisterwithcyclesargs",3]]]],[11,"deserialize","","",181,[[],[["installcodeargs",3],["result",4]]]],[11,"deserialize","","",335,[[],[["result",4],["canisterstatusresult",3]]]],[11,"deserialize","","",179,[[],[["result",4],["canistersettingsargs",3]]]],[11,"deserialize","","",180,[[],[["createcanisterargs",3],["result",4]]]],[11,"deserialize","","",186,[[],[["result",4],["updatesettingsargs",3]]]],[11,"iter","","",182,[[],["methoditer",3]]],[11,"eq","ic_types::messages","",195,[[["canisterinstallmode",4]]]],[11,"eq","ic_types","",314,[[["canisterid",3]]]],[11,"ne","","",314,[[["canisterid",3]]]],[11,"eq","","",3,[[["principalidblobparseerror",4]]]],[11,"ne","","",3,[[["principalidblobparseerror",4]]]],[11,"eq","","",2,[[["canisterstatustype",4]]]],[11,"eq","","",4,[[["principalidparseerror",4]]]],[11,"ne","","",4,[[["principalidparseerror",4]]]],[11,"eq","","",316,[[["principalid",3]]]],[11,"ne","","",316,[[["principalid",3]]]],[11,"eq","","",1,[[["canisteriderror",4]]]],[11,"ne","","",1,[[["canisteriderror",4]]]],[11,"partial_cmp","","",316,[[["principalid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",316,[[["principalid",3]]]],[11,"le","","",316,[[["principalid",3]]]],[11,"gt","","",316,[[["principalid",3]]]],[11,"ge","","",316,[[["principalid",3]]]],[11,"partial_cmp","","",314,[[["canisterid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",314,[[["canisterid",3]]]],[11,"le","","",314,[[["canisterid",3]]]],[11,"gt","","",314,[[["canisterid",3]]]],[11,"ge","","",314,[[["canisterid",3]]]],[11,"default","","",316,[[],["principalid",3]]],[11,"default","ic_types::messages","",195,[[],["canisterinstallmode",4]]],[11,"from","ic_types","",316,[[["canisterid",3]],["principalid",3]]],[11,"from","","",314,[[],["canisterid",3]]],[11,"from","","",316,[[["principalid",3]],["principalid",3]]],[11,"from","","",314,[[["principalid",3],["id",3],["subnettag",3]],["canisterid",3]]],[11,"cmp","","",316,[[["principalid",3]],["ordering",4]]],[11,"cmp","","",314,[[["canisterid",3]],["ordering",4]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",316,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",314,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",2,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",314,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",316,[[]]],[11,"hash","ic_types::messages","",195,[[]]],[11,"fmt","ic_types","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ic_types::messages","",195,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ic_types","",316,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",314,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",2,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"into","","",316,[[],["vec",3]]],[11,"as_ref","","",316,[[]]],[11,"as_ref","","",314,[[]]],[11,"as_ref","","",314,[[],["principalid",3]]],[11,"_ty","ic_types::messages","",195,[[],["type",4]]],[11,"id","","",195,[[],["typeid",3]]],[11,"idl_serialize","","",195,[[],["result",4]]],[11,"_ty","ic_types","",2,[[],["type",4]]],[11,"id","","",2,[[],["typeid",3]]],[11,"idl_serialize","","",2,[[],["result",4]]],[11,"_ty","","",314,[[],["type",4]]],[11,"id","","",314,[[],["typeid",3]]],[11,"idl_serialize","","",314,[[],["result",4]]],[11,"id","","",316,[[],["typeid",3]]],[11,"_ty","","",316,[[],["type",4]]],[11,"idl_serialize","","",316,[[],["result",4]]],[11,"clone","","",2,[[],["canisterstatustype",4]]],[11,"clone","","",316,[[],["principalid",3]]],[11,"clone","","",314,[[],["canisterid",3]]],[11,"clone","","",1,[[],["canisteriderror",4]]],[11,"clone","ic_types::messages","",195,[[],["canisterinstallmode",4]]],[11,"clone","ic_types","",0,[[],["canisteridblobparseerror",4]]],[11,"clone","","",3,[[],["principalidblobparseerror",4]]],[11,"clone","","",4,[[],["principalidparseerror",4]]],[11,"serialize","ic_types::messages","",195,[[],["result",4]]],[11,"serialize","ic_types","",314,[[],["result",4]]],[11,"serialize","","",316,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"from_str","","",316,[[],[["result",4],["principalid",3]]]],[11,"from_str","ic_types::messages","",195,[[],[["result",4],["canisterinstallmode",4]]]],[11,"from_str","ic_types","",314,[[],[["result",4],["canisterid",3]]]],[11,"encode_raw","","",316,[[]]],[11,"merge_field","","",316,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",316,[[]]],[11,"clear","","",316,[[]]],[11,"deserialize","","",2,[[],[["result",4],["canisterstatustype",4]]]],[11,"deserialize","ic_types::messages","",195,[[],[["result",4],["canisterinstallmode",4]]]],[11,"deserialize","ic_types","",4,[[],[["result",4],["principalidparseerror",4]]]],[11,"deserialize","","",316,[[],[["principalid",3],["result",4]]]],[11,"deserialize","","",314,[[],[["result",4],["canisterid",3]]]],[11,"deserialize","","",1,[[],[["result",4],["canisteriderror",4]]]],[11,"deserialize","","",3,[[],[["result",4],["principalidblobparseerror",4]]]],[11,"try_from","","",316,[[],[["principalid",3],["result",4]]]],[11,"try_from","","",314,[[["vec",3]],[["canisterid",3],["result",4]]]],[11,"try_from","","",314,[[["vec",3]],[["canisterid",3],["result",4]]]],[11,"try_from","","",314,[[],[["canisterid",3],["result",4]]]],[11,"try_from","","",316,[[["principalid",3]],[["principalid",3],["result",4]]]],[11,"try_from","","",316,[[["vec",3]],[["principalid",3],["result",4]]]],[11,"try_from","","",314,[[["principalid",3]],[["result",4],["canisterid",3]]]],[11,"try_from","","",314,[[["canisterid",3]],[["result",4],["canisterid",3]]]],[11,"try_from","","",316,[[["vec",3]],[["principalid",3],["result",4]]]],[11,"try_from","ic_types::messages","",195,[[["string",3]],[["canisterinstallmode",4],["result",4]]]],[11,"source","ic_types::user_error","",345,[[],[["error",8],["option",4]]]],[11,"eq","","",345,[[["usererror",3]]]],[11,"ne","","",345,[[["usererror",3]]]],[11,"eq","","",301,[[["rejectcode",4]]]],[11,"eq","","",300,[[["errorcode",4]]]],[11,"to_string","","",301,[[],["string",3]]],[11,"from","","",345,[[["error",4]],["usererror",3]]],[11,"from","","",301,[[["errorcode",4]],["rejectcode",4]]],[11,"fmt","","",300,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",345,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",345,[[]]],[11,"hash","","",301,[[]]],[11,"hash","","",300,[[]]],[11,"fmt","","",345,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",301,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",300,[[["formatter",3]],[["result",4],["error",3]]]],[11,"serialize","","",345,[[],["result",4]]],[11,"serialize","","",300,[[],["result",4]]],[11,"serialize","","",301,[[],["result",4]]],[11,"clone","","",301,[[],["rejectcode",4]]],[11,"clone","","",300,[[],["errorcode",4]]],[11,"clone","","",345,[[],["usererror",3]]],[11,"iter","","",300,[[],["errorcodeiter",3]]],[11,"deserialize","","",345,[[],[["usererror",3],["result",4]]]],[11,"deserialize","","",300,[[],[["errorcode",4],["result",4]]]],[11,"deserialize","","",301,[[],[["result",4],["rejectcode",4]]]],[11,"try_from","","",301,[[],[["rejectcode",4],["result",4]]]],[11,"try_from","","",300,[[],[["result",4],["errorcode",4]]]],[11,"get_chunk","ic_types::consensus","",56,[[["chunkid",6],["box",3]],[["artifactchunk",3],["option",4]]]],[11,"get_chunk","ic_types::artifact","",241,[[["chunkid",6],["box",3]],[["artifactchunk",3],["option",4]]]],[11,"get_chunk","ic_types::consensus::certification","",67,[[["chunkid",6],["box",3]],[["artifactchunk",3],["option",4]]]],[11,"get_chunk","ic_types","",348,[[["chunkid",6],["box",3]],[["artifactchunk",3],["option",4]]]],[11,"get_chunk","ic_types::artifact","",20,[[["chunkid",6],["box",3]],[["artifactchunk",3],["option",4]]]],[11,"get_chunk","ic_types::filetree_sync","",169,[[["chunkid",6],["box",3]],[["artifactchunk",3],["option",4]]]],[11,"get_artifact_hash","ic_types::chunkable","",41,[[],["cryptohash",3]]],[11,"chunks_to_download","","",41,[[],[["iterator",8],["box",3]]]],[11,"get_artifact_identifier","","",41,[[],["cryptohash",3]]],[11,"add_chunk","","",41,[[["artifactchunk",3]],[["result",4],["artifact",4],["artifacterrorcode",4]]]],[11,"is_complete","","",41,[[]]],[11,"get_chunk_size","","",41,[[["chunkid",6]]]],[11,"get_artifact_hash","ic_types::filetree_sync","",170,[[],["cryptohash",3]]],[11,"chunks_to_download","","",170,[[],[["iterator",8],["box",3]]]],[11,"get_artifact_identifier","","",170,[[],["cryptohash",3]]],[11,"add_chunk","","",170,[[["artifactchunk",3]],[["result",4],["artifact",4],["artifacterrorcode",4]]]],[11,"is_complete","","",170,[[]]],[11,"get_chunk_size","","",170,[[["chunkid",6]]]],[11,"height","ic_types::consensus::catchup","",60,[[],["height",6]]],[11,"height","ic_types::consensus::certification","",67,[[],["height",6]]],[11,"height","","",65,[[],["height",6]]],[11,"height","","",66,[[],["height",6]]],[11,"height","ic_types::crypto","",84,[[],["height",6]]],[11,"height","ic_types::consensus","",50,[[],["height",6]]],[11,"height","ic_types::consensus::hashed","",73,[[],["height",6]]],[11,"height","ic_types::consensus","",51,[[],["height",6]]],[11,"height","","",52,[[],["height",6]]],[11,"height","","",53,[[],["height",6]]],[11,"height","","",54,[[],["height",6]]],[11,"height","","",56,[[],["height",6]]],[11,"height","","",58,[[],["height",6]]],[11,"block_hash","ic_types::crypto","",84,[[],["cryptohashof",6]]],[11,"block_hash","ic_types","",349,[[],["cryptohashof",6]]],[11,"block_hash","ic_types::consensus","",51,[[],["cryptohashof",6]]],[11,"block_hash","","",52,[[],["cryptohashof",6]]],[11,"rank","ic_types::crypto","",84,[[],["rank",3]]],[11,"rank","ic_types::consensus","",50,[[],["rank",3]]],[11,"rank","ic_types::consensus::hashed","",73,[[],["rank",3]]],[11,"committee","ic_types::consensus::catchup","",60,[[],["committee",4]]],[11,"committee","ic_types::consensus::certification","",65,[[],["committee",4]]],[11,"committee","ic_types::crypto","",84,[[],["committee",4]]],[11,"committee","ic_types::consensus","",51,[[],["committee",4]]],[11,"committee","","",52,[[],["committee",4]]],[11,"committee","","",53,[[],["committee",4]]],[11,"committee","","",54,[[],["committee",4]]],[11,"version","ic_types::consensus::catchup","",60,[[],["replicaversion",3]]],[11,"version","ic_types::consensus::dkg","",69,[[],["replicaversion",3]]],[11,"version","ic_types::crypto","",84,[[],["replicaversion",3]]],[11,"version","ic_types::consensus","",50,[[],["replicaversion",3]]],[11,"version","ic_types::consensus::hashed","",73,[[],["replicaversion",3]]],[11,"version","ic_types::consensus","",51,[[],["replicaversion",3]]],[11,"version","","",52,[[],["replicaversion",3]]],[11,"version","","",53,[[],["replicaversion",3]]],[11,"version","","",54,[[],["replicaversion",3]]],[11,"version","","",56,[[],["replicaversion",3]]],[11,"content_eq","ic_types::crypto","",84,[[]]],[11,"content_eq","ic_types::consensus","",56,[[["consensusmessage",4]]]],[11,"as_signed_bytes_without_domain_separator","ic_types","",63,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","ic_types::consensus::catchup","",61,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","ic_types::consensus::certification","",64,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","ic_types::consensus::dkg","",69,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","ic_types::consensus","",50,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","","",51,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","","",52,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","","",53,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","","",54,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","ic_types::messages","",238,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","","",242,[[],["vec",3]]],[11,"as_signed_bytes_without_domain_separator","","",244,[[],["vec",3]]],[11,"id","","",228,[[],["messageid",3]]],[11,"sender","","",228,[[],["userid",6]]],[11,"ingress_expiry","","",228,[[]]],[11,"nonce","","",228,[[],[["vec",3],["option",4]]]],[11,"id","","",240,[[],["messageid",3]]],[11,"sender","","",240,[[],["userid",6]]],[11,"ingress_expiry","","",240,[[]]],[11,"nonce","","",240,[[],[["vec",3],["option",4]]]],[11,"canister_id","","",240,[[],["canisterid",3]]],[11,"canister_id","","",210,[[],["canisterid",3]]],[11,"push_message","ic_types::xnet","",307,[[["requestorresponse",4]]]],[11,"header_mut","","",307,[[],["streamheader",3]]],[11,"count_bytes","ic_types::batch","Returns the approximate amount of bytes in xnet payload.",34,[[]]],[11,"count_bytes","","",37,[[]]],[11,"count_bytes","ic_types::consensus::certification","",65,[[]]],[11,"count_bytes","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[]]],[11,"count_bytes","ic_types::consensus","",45,[[]]],[11,"count_bytes","ic_types::crypto","",84,[[]]],[11,"count_bytes","","",97,[[]]],[11,"count_bytes","","",85,[[]]],[11,"count_bytes","","",86,[[]]],[11,"count_bytes","","",87,[[]]],[11,"count_bytes","","",88,[[]]],[11,"count_bytes","","",89,[[]]],[11,"count_bytes","ic_types","",350,[[]]],[11,"count_bytes","ic_types::crypto","",90,[[]]],[11,"count_bytes","ic_types","",351,[[]]],[11,"count_bytes","ic_types::crypto","",91,[[]]],[11,"count_bytes","ic_types","",352,[[]]],[11,"count_bytes","ic_types::artifact","",241,[[]]],[11,"count_bytes","ic_types::messages","",242,[[]]],[11,"count_bytes","","",243,[[]]],[11,"count_bytes","ic_types::xnet","",303,[[]]],[11,"count_bytes","ic_types::time","",288,[[]]],[11,"drop","ic_types::funds::icp","",175,[[]]],[11,"as_mut","ic_types::artifact","",11,[[],["consensusmessagefilter",3]]],[11,"as_mut","","",11,[[],["ingressmessagefilter",6]]],[11,"as_mut","","",11,[[],["certificationmessagefilter",3]]],[11,"as_mut","","",11,[[],["statesyncfilter",3]]],[11,"as_mut","","",11,[[]]],[11,"as_mut","ic_types::consensus::hashed","",73,[[]]],[11,"as_ref","ic_types::artifact","",11,[[],["consensusmessagefilter",3]]],[11,"as_ref","","",11,[[],["ingressmessagefilter",6]]],[11,"as_ref","","",11,[[],["certificationmessagefilter",3]]],[11,"as_ref","","",11,[[],["statesyncfilter",3]]],[11,"as_ref","","",11,[[]]],[11,"as_ref","ic_types::consensus::certification","",67,[[],["certificationcontent",3]]],[11,"as_ref","ic_types::consensus::hashed","",73,[[]]],[11,"as_ref","ic_types::consensus","",74,[[],["blockpayload",4]]],[11,"as_ref","ic_types::consensus::thunk","",75,[[]]],[11,"as_ref","ic_types","",353,[[],["block",3]]],[11,"as_ref","ic_types::artifact","",241,[[],["httprequest",3]]],[11,"as_ref","ic_types::messages","",242,[[]]],[11,"as_ref","","",247,[[]]],[11,"as_ref","ic_types::replica_version","",284,[[]]],[11,"from","ic_types::artifact","",23,[[["consensusmessage",4]],["artifact",4]]],[11,"from","","",23,[[["filetreesyncartifact",3]],["artifact",4]]],[11,"from","","",23,[[["dkgmessage",6]],["artifact",4]]],[11,"from","","",23,[[["signedrequestbytes",3]],["artifact",4]]],[11,"from","","",23,[[["certificationmessage",4]],["artifact",4]]],[11,"from","","",23,[[["statesyncmessage",3]],["artifact",4]]],[11,"from","","",24,[[["dkgmessageattribute",3]],["artifactattribute",4]]],[11,"from","","",24,[[["statesyncattribute",3]],["artifactattribute",4]]],[11,"from","","",24,[[["ingressmessageattribute",3]],["artifactattribute",4]]],[11,"from","","",24,[[["certificationmessageattribute",4]],["artifactattribute",4]]],[11,"from","","",24,[[["filetreesyncattribute",6]],["artifactattribute",4]]],[11,"from","","",24,[[["consensusmessageattribute",4]],["artifactattribute",4]]],[11,"from","","",25,[[["consensusmessageid",3]],["artifactid",4]]],[11,"from","","",25,[[["statesyncartifactid",3]],["artifactid",4]]],[11,"from","","",25,[[["dkgmessageid",6]],["artifactid",4]]],[11,"from","","",25,[[["ingressmessageid",3]],["artifactid",4]]],[11,"from","","",25,[[["certificationmessageid",3]],["artifactid",4]]],[11,"from","","",25,[[["filetreesyncid",6]],["artifactid",4]]],[11,"from","","",26,[[["artifactid",4]],["artifacttag",4]]],[11,"from","","",26,[[["artifact",4]],["artifacttag",4]]],[11,"from","ic_types::p2p","",254,[[["advert",3]],["gossipadvert",3]]],[11,"from","ic_types::artifact","",15,[[["signedingress",3]]]],[11,"from","ic_types::messages","",242,[[["ingressmessageid",3]],["messageid",3]]],[11,"from","ic_types::batch","",37,[[["signedingress",3],["vec",3]],["ingresspayload",3]]],[11,"from","ic_types","",354,[[["catchupcontent",6]]]],[11,"from","ic_types::consensus::catchup","",327,[[["catchuppackage",6]]]],[11,"from","","",327,[[["cupwithoriginalprotobuf",3]]]],[11,"from","ic_types::consensus::certification","",67,[[["certification",3]]]],[11,"from","","",67,[[["certificationshare",3]]]],[11,"from","","",64,[[["certificationcontent",3]]]],[11,"from","ic_types::consensus","",55,[[["payload",3]],["blockpayload",4]]],[11,"from","","",55,[[["summary",3]],["blockpayload",4]]],[11,"from","","",55,[[],["blockpayload",4]]],[11,"from","","",55,[[["payload",4]],["blockpayload",4]]],[11,"from","ic_types::consensus::thunk","",75,[[]]],[11,"from","ic_types::consensus","",50,[[["blockproposal",6]],["block",3]]],[11,"from","","",58,[[["consensusmessage",4]],["consensusmessageattribute",4]]],[11,"from","ic_types::crypto::dkg","",330,[[["cspencryptionpublickey",3]]]],[11,"from","ic_types::crypto","",98,[[["invalidargumenterror",3]],["cryptoerror",4]]],[11,"from","ic_types::crypto::error","",128,[[["malformedpublickeyerror",3]]]],[11,"from","ic_types::crypto","",98,[[["thresholdsigdatanotfounderror",4]]]],[11,"from","","",98,[[["thresholdsignerror",4]]]],[11,"from","ic_types::crypto::threshold_sig::errors::threshold_sign_error","",134,[[["thresholdsigdatanotfounderror",4]]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",143,[[["nidkgthresholdzeroerror",3]]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::errors::verify_dealing_error","",162,[[["registryclienterror",4]]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg::errors","",156,[[["malformedfsencryptionpublickeyerror",3]]]],[11,"from","ic_types::crypto::threshold_sig::ni_dkg","",136,[[["cspnidkgdealing",4]]]],[11,"from","ic_types::crypto::threshold_sig","",167,[[["cspthresholdsigpublickey",4]]]],[11,"from","","",167,[[["nidkgtranscript",3]]]],[11,"from","","",167,[[["publickeybytes",3]]]],[11,"from","ic_types::crypto","",82,[[]]],[11,"from","","",96,[[["cspthresholdsigpublickey",4]]]],[11,"from","","",96,[[["csppubliccoefficients",6]]]],[11,"from","","",95,[[]]],[11,"from","","",96,[[]]],[11,"from","","",96,[[["keypurpose",4]]]],[11,"from","","",98,[[["thresholdsigpublickeybytesconversionerror",4]]]],[11,"from","","",98,[[["registryclienterror",4]]]],[11,"from","ic_types::funds","",172,[[]]],[11,"from","","",172,[[]]],[11,"from","","",172,[[]]],[11,"from","","",172,[[["vec",3]]]],[11,"from","","",172,[[["pbcycles",3]]]],[11,"from","","",178,[[["cycles",3]]]],[11,"from","ic_types::ingress","",192,[[["wasmresult",4]]]],[11,"from","ic_types::messages","",196,[[],["blob",3]]],[11,"from","","",247,[[["signedingress",3]]]],[11,"from","","",240,[[["signedingress",3]],["signedingresscontent",3]]],[11,"from","","",206,[[["signedingress",3]]]],[11,"from","","",206,[[["signedingresscontent",3]]]],[11,"from","","",207,[[["usererror",3]]]],[11,"from","","",229,[[["result",4],["option",4],["usererror",3]]]],[11,"from","","",230,[[["request",3]]]],[11,"from","","",230,[[["response",3]]]],[11,"from","","",242,[[]]],[11,"from","","",236,[[["error",3]]]],[11,"from","","",236,[[["canisteriderror",4]]]],[11,"from","","",247,[[["vec",3]]]],[11,"from","ic_types::nominal_cycles","",253,[[]]],[11,"from","ic_types::registry::connection_endpoint","",266,[[["pbprotocol",4]]]],[11,"from","","Convert SocketAddr to ConnectionEndpoint by assuming that…",341,[[["socketaddr",4]]]],[11,"from","","",266,[[["connectionendpoint",3]]]],[11,"from","ic_types::registry","",262,[[["registrydataprovidererror",4]]]],[11,"from","ic_types","",309,[[]]],[11,"from","","",310,[[["numinstructions",6]],["queryallocation",3]]],[11,"from","ic_types::user_error","",345,[[["installcodecontexterror",4]]]],[11,"from","ic_types","",10,[[["invalidcomputeallocationerror",3]]]],[11,"from","","",10,[[["invalidqueryallocationerror",3]]]],[11,"from","","",10,[[["invalidmemoryallocationerror",3]]]],[11,"into","ic_types::funds","",172,[[],["vec",3]]],[11,"into","","",172,[[]]],[11,"into","ic_types","",310,[[],["numinstructions",6]]],[11,"next_back","ic_types::artifact","",325,[[],["option",4]]],[11,"next_back","","",326,[[],["option",4]]],[11,"next_back","ic_types::crypto::threshold_sig::ni_dkg","",331,[[],["option",4]]],[11,"next_back","ic_types::crypto","",328,[[],["option",4]]],[11,"next_back","","",329,[[],["option",4]]],[11,"len","ic_types::artifact","",325,[[]]],[11,"len","","",326,[[]]],[11,"len","ic_types::crypto::threshold_sig::ni_dkg","",331,[[]]],[11,"len","ic_types::crypto","",328,[[]]],[11,"len","","",329,[[]]],[11,"next","ic_types::artifact","",325,[[],["option",4]]],[11,"size_hint","","",325,[[]]],[11,"nth","","",325,[[],["option",4]]],[11,"next","","",326,[[],["option",4]]],[11,"size_hint","","",326,[[]]],[11,"nth","","",326,[[],["option",4]]],[11,"next","ic_types::crypto::threshold_sig::ni_dkg","",331,[[],["option",4]]],[11,"size_hint","","",331,[[]]],[11,"nth","","",331,[[],["option",4]]],[11,"next","ic_types::crypto","",328,[[],["option",4]]],[11,"size_hint","","",328,[[]]],[11,"nth","","",328,[[],["option",4]]],[11,"next","","",329,[[],["option",4]]],[11,"size_hint","","",329,[[]]],[11,"nth","","",329,[[],["option",4]]],[11,"clone","ic_types::artifact","",23,[[],["artifact",4]]],[11,"clone","","",24,[[],["artifactattribute",4]]],[11,"clone","","",25,[[],["artifactid",4]]],[11,"clone","","",325,[[],["artifacttagiter",3]]],[11,"clone","","",26,[[],["artifacttag",4]]],[11,"clone","","",11,[[],["artifactfilter",3]]],[11,"clone","","",27,[[],["priority",4]]],[11,"clone","","",326,[[],["priorityiter",3]]],[11,"clone","","",12,[[],["advert",3]]],[11,"clone","","",13,[[],["consensusmessageid",3]]],[11,"clone","","",14,[[],["consensusmessagefilter",3]]],[11,"clone","","",15,[[],["ingressmessageid",3]]],[11,"clone","","",30,[[],["ingressmessageattribute",3]]],[11,"clone","","",16,[[],["certificationmessageid",3]]],[11,"clone","","",28,[[],["certificationmessageattribute",4]]],[11,"clone","","",17,[[],["certificationmessagefilter",3]]],[11,"clone","","",18,[[],["dkgmessageattribute",3]]],[11,"clone","","",19,[[],["statesyncartifactid",3]]],[11,"clone","","",20,[[],["statesyncmessage",3]]],[11,"clone","","",21,[[],["statesyncattribute",3]]],[11,"clone","","",22,[[],["statesyncfilter",3]]],[11,"clone","ic_types::batch","",31,[[],["batch",3]]],[11,"clone","","",32,[[],["validationcontext",3]]],[11,"clone","","",33,[[],["batchpayload",3]]],[11,"clone","","",34,[[],["xnetpayload",3]]],[11,"clone","","",37,[[],["ingresspayload",3]]],[11,"clone","ic_types::chunkable","",39,[[],["artifacterrorcode",4]]],[11,"clone","","",40,[[],["artifactchunkdata",4]]],[11,"clone","","",38,[[],["artifactchunk",3]]],[11,"clone","ic_types::consensus::catchup","",60,[[],["catchupcontentt",3]]],[11,"clone","","",327,[[],["catchuppackageparam",3]]],[11,"clone","","",61,[[],["catchupcontentprotobufbytes",3]]],[11,"clone","","",62,[[],["cupwithoriginalprotobuf",3]]],[11,"clone","ic_types::consensus::certification","",67,[[],["certificationmessage",4]]],[11,"clone","","",68,[[],["certificationmessagehash",4]]],[11,"clone","","",64,[[],["certificationcontent",3]]],[11,"clone","","",65,[[],["certification",3]]],[11,"clone","","",66,[[],["certificationshare",3]]],[11,"clone","ic_types::consensus::dkg","",69,[[],["dealingcontent",3]]],[11,"clone","","",70,[[],["summary",3]]],[11,"clone","","",72,[[],["payload",4]]],[11,"clone","","",71,[[],["dealings",3]]],[11,"clone","ic_types::consensus::hashed","",73,[[],["hashed",3]]],[11,"clone","ic_types::consensus","",55,[[],["blockpayload",4]]],[11,"clone","","",74,[[],["payload",3]]],[11,"clone","","",44,[[],["basicsignature",3]]],[11,"clone","","",45,[[],["thresholdsignature",3]]],[11,"clone","","",46,[[],["thresholdsignatureshare",3]]],[11,"clone","","",47,[[],["multisignature",3]]],[11,"clone","","",48,[[],["multisignatureshare",3]]],[11,"clone","","",49,[[],["rank",3]]],[11,"clone","","",50,[[],["block",3]]],[11,"clone","","",51,[[],["notarizationcontent",3]]],[11,"clone","","",52,[[],["finalizationcontent",3]]],[11,"clone","","",53,[[],["randombeaconcontent",3]]],[11,"clone","","",54,[[],["randomtapecontent",3]]],[11,"clone","","",56,[[],["consensusmessage",4]]],[11,"clone","","",57,[[],["consensusmessagehash",4]]],[11,"clone","","",58,[[],["consensusmessageattribute",4]]],[11,"clone","ic_types::crypto::dkg","",115,[[],["config",3]]],[11,"clone","","",123,[[],["dkgconfig",3]]],[11,"clone","","",124,[[],["dealers",3]]],[11,"clone","","",125,[[],["receivers",3]]],[11,"clone","","",330,[[],["encryptionpublickey",3]]],[11,"clone","","",117,[[],["dealing",3]]],[11,"clone","","",118,[[],["transcript",3]]],[11,"clone","","",119,[[],["transcriptbytes",3]]],[11,"clone","","",120,[[],["response",3]]],[11,"clone","","",121,[[],["encryptionpublickeywithpop",3]]],[11,"clone","","",122,[[],["encryptionpublickeypop",3]]],[11,"clone","ic_types::crypto::error","",126,[[],["invalidargumenterror",3]]],[11,"clone","","",127,[[],["malformedpublickeyerror",3]]],[11,"clone","","",128,[[],["malformeddataerror",3]]],[11,"clone","","",129,[[],["keynotfounderror",3]]],[11,"clone","ic_types::crypto::threshold_sig::errors::threshold_sig_data_not_found_error","",132,[[],["thresholdsigdatanotfounderror",4]]],[11,"clone","ic_types::crypto::threshold_sig::errors::threshold_sign_error","",134,[[],["thresholdsignerror",4]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::config::dealers","",142,[[],["nidkgdealers",3]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",332,[[],["nidkgthresholdzeroerror",3]]],[11,"clone","","",143,[[],["nidkgconfigvalidationerror",4]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::config::receivers","",151,[[],["nidkgreceivers",3]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::config","",152,[[],["nidkgconfig",3]]],[11,"clone","","",141,[[],["nidkgconfigdata",3]]],[11,"clone","","",153,[[],["nidkgthreshold",3]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::errors::create_dealing_error","",157,[[],["dkgcreatedealingerror",4]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::errors::create_transcript_error","",158,[[],["dkgcreatetranscripterror",4]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::errors::key_removal_error","",159,[[],["dkgkeyremovalerror",4]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::errors::load_transcript_error","",160,[[],["dkgloadtranscripterror",4]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::errors::transcripts_to_retain_validation_error","",161,[[],["transcriptstoretainvalidationerror",4]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::errors::verify_dealing_error","",162,[[],["dkgverifydealingerror",4]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::errors","",154,[[],["notadealererror",3]]],[11,"clone","","",155,[[],["fsencryptionpublickeynotinregistryerror",3]]],[11,"clone","","",156,[[],["malformedfsencryptionpublickeyerror",3]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[],["nidkgid",3]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg::transcripts_to_retain","",165,[[],["transcriptstoretain",3]]],[11,"clone","ic_types::crypto::threshold_sig::ni_dkg","",138,[[],["nidkgtag",4]]],[11,"clone","","",331,[[],["nidkgtagiter",3]]],[11,"clone","","",139,[[],["nidkgtargetsubnet",4]]],[11,"clone","","",166,[[],["nidkgtargetid",3]]],[11,"clone","","",140,[[],["dkgid",4]]],[11,"clone","","",136,[[],["nidkgdealing",3]]],[11,"clone","","",137,[[],["nidkgtranscript",3]]],[11,"clone","ic_types::crypto::threshold_sig","",167,[[],["thresholdsigpublickey",3]]],[11,"clone","ic_types::crypto","",82,[[],["keyid",3]]],[11,"clone","","",83,[[],["cryptohash",3]]],[11,"clone","","",84,[[],["signed",3]]],[11,"clone","","",95,[[],["keypurpose",4]]],[11,"clone","","",328,[[],["keypurposeiter",3]]],[11,"clone","","",96,[[],["algorithmid",4]]],[11,"clone","","",329,[[],["algorithmiditer",3]]],[11,"clone","","",85,[[],["userpublickey",3]]],[11,"clone","","",88,[[],["committeememberpublickey",3]]],[11,"clone","","",98,[[],["cryptoerror",4]]],[11,"clone","","",89,[[],["basicsig",3]]],[11,"clone","","",90,[[],["individualmultisig",3]]],[11,"clone","","",91,[[],["combinedmultisig",3]]],[11,"clone","","",92,[[],["thresholdsigshare",3]]],[11,"clone","","",93,[[],["combinedthresholdsig",3]]],[11,"clone","","",94,[[],["canistersig",3]]],[11,"clone","ic_types::filetree_sync","",169,[[],["filetreesyncartifact",3]]],[11,"clone","","",171,[[],["underconstructionstate",4]]],[11,"clone","","",170,[[],["filetreesyncchunkstracker",3]]],[11,"clone","ic_types::funds","",172,[[],["cycles",3]]],[11,"clone","ic_types::funds::icp","",175,[[],["icp",3]]],[11,"clone","","",173,[[],["icperror",4]]],[11,"clone","ic_types::funds","",178,[[],["funds",3]]],[11,"clone","ic_types::ingress","",187,[[],["ingressstatus",4]]],[11,"clone","","",192,[[],["wasmresult",4]]],[11,"clone","ic_types::malicious_behaviour","",193,[[],["maliciousbehaviour",3]]],[11,"clone","ic_types::malicious_flags","",194,[[],["maliciousflags",3]]],[11,"clone","ic_types::messages","",196,[[],["blob",3]]],[11,"clone","","",199,[[],["httpcanisterupdate",3]]],[11,"clone","","",225,[[],["httpsubmitcontent",4]]],[11,"clone","","",205,[[],["httpuserquery",3]]],[11,"clone","","",201,[[],["httpreadstate",3]]],[11,"clone","","",217,[[],["httpreadcontent",4]]],[11,"clone","","",203,[[],["httprequestenvelope",3]]],[11,"clone","","",237,[[],["httprequest",3]]],[11,"clone","","",213,[[],["authentication",4]]],[11,"clone","","",228,[[],["readcontent",4]]],[11,"clone","","",238,[[],["delegation",3]]],[11,"clone","","",239,[[],["signeddelegation",3]]],[11,"clone","","",227,[[],["rawhttprequestval",4]]],[11,"clone","","",222,[[],["httpresponsestatus",4]]],[11,"clone","","",220,[[],["httpreply",4]]],[11,"clone","","",214,[[],["httpqueryresponse",4]]],[11,"clone","","",200,[[],["httpqueryresponsereply",3]]],[11,"clone","","",202,[[],["httpreadstateresponse",3]]],[11,"clone","","",197,[[],["certificate",3]]],[11,"clone","","",198,[[],["certificatedelegation",3]]],[11,"clone","","",204,[[],["httpstatusresponse",3]]],[11,"clone","","",240,[[],["signedingresscontent",3]]],[11,"clone","ic_types::artifact","",241,[[],["signedingress",3]]],[11,"clone","ic_types::messages","",206,[[],["ingress",3]]],[11,"clone","","",208,[[],["request",3]]],[11,"clone","","",207,[[],["rejectcontext",3]]],[11,"clone","","",229,[[],["payload",4]]],[11,"clone","","",209,[[],["response",3]]],[11,"clone","","",230,[[],["requestorresponse",4]]],[11,"clone","","",242,[[],["messageid",3]]],[11,"clone","","",231,[[],["messageiderror",4]]],[11,"clone","","",210,[[],["userquery",3]]],[11,"clone","","",211,[[],["readstate",3]]],[11,"clone","","",243,[[],["webauthnsignature",3]]],[11,"clone","","",244,[[],["webauthnenvelope",3]]],[11,"clone","","",212,[[],["usersignature",3]]],[11,"clone","","",233,[[],["stopcanistercontext",4]]],[11,"clone","","",236,[[],["httphandlererror",4]]],[11,"clone","","",247,[[],["signedrequestbytes",3]]],[11,"clone","ic_types::methods","",250,[[],["wasmmethod",4]]],[11,"clone","","",251,[[],["systemmethod",4]]],[11,"clone","","",248,[[],["wasmclosure",3]]],[11,"clone","","",249,[[],["callback",3]]],[11,"clone","","",252,[[],["funcref",4]]],[11,"clone","ic_types::nominal_cycles","",253,[[],["nominalcycles",3]]],[11,"clone","ic_types::p2p","",254,[[],["gossipadvert",3]]],[11,"clone","ic_types::registry::connection_endpoint","",341,[[],["connectionendpoint",3]]],[11,"clone","","",267,[[],["connectionendpointtryfromprotoerror",4]]],[11,"clone","","",272,[[],["connectionendpointtryfromstringerror",4]]],[11,"clone","ic_types::registry","",255,[[],["registryerror",4]]],[11,"clone","","",260,[[],["registrydataprovidererror",4]]],[11,"clone","","",262,[[],["registryclienterror",4]]],[11,"clone","ic_types::replica_config","",283,[[],["replicaconfig",3]]],[11,"clone","ic_types::replica_version","",284,[[],["replicaversion",3]]],[11,"clone","ic_types::state_sync","",285,[[],["fileinfo",3]]],[11,"clone","","",286,[[],["chunkinfo",3]]],[11,"clone","","",287,[[],["manifest",3]]],[11,"clone","ic_types::time","",288,[[],["time",3]]],[11,"clone","ic_types::transport","",344,[[],["flowtagtype",3]]],[11,"clone","","",289,[[],["transportpayload",3]]],[11,"clone","","",290,[[],["bytes",3]]],[11,"clone","","",296,[[],["transportclienttype",4]]],[11,"clone","","",291,[[],["flowid",3]]],[11,"clone","","",292,[[],["transportconfig",3]]],[11,"clone","","",293,[[],["transportflowconfig",3]]],[11,"clone","","",297,[[],["transportstatechange",4]]],[11,"clone","","",298,[[],["transporterror",4]]],[11,"clone","","",294,[[],["transportflowinfo",3]]],[11,"clone","","",299,[[],["transporterrorcode",4]]],[11,"clone","ic_types::xnet","",306,[[],["streamindexedqueue",3]]],[11,"clone","","",302,[[],["streamheader",3]]],[11,"clone","","",307,[[],["streamslice",3]]],[11,"clone","","",303,[[],["certifiedstreamslice",3]]],[11,"clone","","",304,[[],["queueid",3]]],[11,"clone","ic_types","",6,[[],["idkgid",3]]],[11,"clone","","",309,[[],["accumulatedpriority",3]]],[11,"clone","","",310,[[],["queryallocation",3]]],[11,"clone","","",7,[[],["invalidqueryallocationerror",3]]],[11,"clone","","",311,[[],["computeallocation",3]]],[11,"clone","","",312,[[],["invalidcomputeallocationerror",3]]],[11,"clone","","",313,[[],["memoryallocation",3]]],[11,"clone","","",8,[[],["invalidmemoryallocationerror",3]]],[11,"clone","","",9,[[],["installcodecontext",3]]],[11,"default","ic_types::artifact","",11,[[],["artifactfilter",3]]],[11,"default","","",14,[[],["consensusmessagefilter",3]]],[11,"default","","",17,[[],["certificationmessagefilter",3]]],[11,"default","","",22,[[],["statesyncfilter",3]]],[11,"default","ic_types::batch","",33,[[],["batchpayload",3]]],[11,"default","","",34,[[],["xnetpayload",3]]],[11,"default","","",37,[[],["ingresspayload",3]]],[11,"default","ic_types::crypto::dkg","",330,[[]]],[11,"default","","",121,[[]]],[11,"default","ic_types::filetree_sync","",169,[[],["filetreesyncartifact",3]]],[11,"default","","",170,[[]]],[11,"default","ic_types::malicious_behaviour","",193,[[]]],[11,"default","ic_types::malicious_flags","",194,[[],["maliciousflags",3]]],[11,"default","ic_types::messages","",196,[[],["blob",3]]],[11,"default","ic_types::nominal_cycles","",253,[[],["nominalcycles",3]]],[11,"default","ic_types::replica_config","",283,[[]]],[11,"default","ic_types::replica_version","",284,[[]]],[11,"default","ic_types::transport","",292,[[],["transportconfig",3]]],[11,"default","ic_types::xnet","",306,[[]]],[11,"default","ic_types","",309,[[]]],[11,"default","","",310,[[]]],[11,"default","","",311,[[]]],[11,"cmp","ic_types::artifact","",15,[[["ingressmessageid",3]],["ordering",4]]],[11,"cmp","ic_types::consensus::catchup","",60,[[["catchupcontentt",3]],["ordering",4]]],[11,"cmp","","",327,[[["catchuppackageparam",3]],["ordering",4]]],[11,"cmp","ic_types::consensus::certification","",64,[[["certificationcontent",3]],["ordering",4]]],[11,"cmp","ic_types::consensus::hashed","",73,[[["hashed",3]],["ordering",4]]],[11,"cmp","ic_types::consensus","",74,[[["payload",3]],["ordering",4]]],[11,"cmp","","",49,[[["rank",3]],["ordering",4]]],[11,"cmp","","",51,[[["notarizationcontent",3]],["ordering",4]]],[11,"cmp","","",52,[[["finalizationcontent",3]],["ordering",4]]],[11,"cmp","","",53,[[["randombeaconcontent",3]],["ordering",4]]],[11,"cmp","","",54,[[["randomtapecontent",3]],["ordering",4]]],[11,"cmp","ic_types::crypto::dkg","",330,[[["encryptionpublickey",3]],["ordering",4]]],[11,"cmp","","",118,[[["transcript",3]],["ordering",4]]],[11,"cmp","","",119,[[["transcriptbytes",3]],["ordering",4]]],[11,"cmp","","",121,[[["encryptionpublickeywithpop",3]],["ordering",4]]],[11,"cmp","","",122,[[["encryptionpublickeypop",3]],["ordering",4]]],[11,"cmp","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[["nidkgid",3]],["ordering",4]]],[11,"cmp","ic_types::crypto::threshold_sig::ni_dkg","",138,[[["nidkgtag",4]],["ordering",4]]],[11,"cmp","","",139,[[["nidkgtargetsubnet",4]],["ordering",4]]],[11,"cmp","","",166,[[["nidkgtargetid",3]],["ordering",4]]],[11,"cmp","","",140,[[["dkgid",4]],["ordering",4]]],[11,"cmp","ic_types::crypto::threshold_sig","",167,[[["thresholdsigpublickey",3]],["ordering",4]]],[11,"cmp","ic_types::crypto","",82,[[["keyid",3]],["ordering",4]]],[11,"cmp","","",83,[[["cryptohash",3]],["ordering",4]]],[11,"cmp","","",95,[[["keypurpose",4]],["ordering",4]]],[11,"cmp","","",96,[[["algorithmid",4]],["ordering",4]]],[11,"cmp","ic_types::funds","",172,[[["cycles",3]],["ordering",4]]],[11,"cmp","ic_types::messages","",242,[[["messageid",3]],["ordering",4]]],[11,"cmp","ic_types::methods","",250,[[["wasmmethod",4]],["ordering",4]]],[11,"cmp","","",251,[[["systemmethod",4]],["ordering",4]]],[11,"cmp","ic_types::nominal_cycles","",253,[[["nominalcycles",3]],["ordering",4]]],[11,"cmp","ic_types::replica_version","",284,[[["replicaversion",3]],["ordering",4]]],[11,"cmp","ic_types::time","",288,[[["time",3]],["ordering",4]]],[11,"cmp","ic_types::xnet","",304,[[["queueid",3]],["ordering",4]]],[11,"cmp","ic_types","",6,[[["idkgid",3]],["ordering",4]]],[11,"cmp","","",310,[[["queryallocation",3]],["ordering",4]]],[11,"eq","ic_types::artifact","",23,[[["artifact",4]]]],[11,"ne","","",23,[[["artifact",4]]]],[11,"eq","","",24,[[["artifactattribute",4]]]],[11,"ne","","",24,[[["artifactattribute",4]]]],[11,"eq","","",25,[[["artifactid",4]]]],[11,"ne","","",25,[[["artifactid",4]]]],[11,"eq","","",26,[[["artifacttag",4]]]],[11,"eq","","",11,[[["artifactfilter",3]]]],[11,"ne","","",11,[[["artifactfilter",3]]]],[11,"eq","","",27,[[["priority",4]]]],[11,"eq","","",12,[[["advert",3]]]],[11,"ne","","",12,[[["advert",3]]]],[11,"eq","","",13,[[["consensusmessageid",3]]]],[11,"ne","","",13,[[["consensusmessageid",3]]]],[11,"eq","","",14,[[["consensusmessagefilter",3]]]],[11,"ne","","",14,[[["consensusmessagefilter",3]]]],[11,"eq","","",15,[[["ingressmessageid",3]]]],[11,"ne","","",15,[[["ingressmessageid",3]]]],[11,"eq","","",30,[[["ingressmessageattribute",3]]]],[11,"eq","","",16,[[["certificationmessageid",3]]]],[11,"ne","","",16,[[["certificationmessageid",3]]]],[11,"eq","","",28,[[["certificationmessageattribute",4]]]],[11,"ne","","",28,[[["certificationmessageattribute",4]]]],[11,"eq","","",17,[[["certificationmessagefilter",3]]]],[11,"ne","","",17,[[["certificationmessagefilter",3]]]],[11,"eq","","",18,[[["dkgmessageattribute",3]]]],[11,"ne","","",18,[[["dkgmessageattribute",3]]]],[11,"eq","","",19,[[["statesyncartifactid",3]]]],[11,"ne","","",19,[[["statesyncartifactid",3]]]],[11,"eq","","",20,[[["statesyncmessage",3]]]],[11,"ne","","",20,[[["statesyncmessage",3]]]],[11,"eq","","",21,[[["statesyncattribute",3]]]],[11,"ne","","",21,[[["statesyncattribute",3]]]],[11,"eq","","",22,[[["statesyncfilter",3]]]],[11,"ne","","",22,[[["statesyncfilter",3]]]],[11,"eq","ic_types::batch","",31,[[["batch",3]]]],[11,"ne","","",31,[[["batch",3]]]],[11,"eq","","",32,[[["validationcontext",3]]]],[11,"ne","","",32,[[["validationcontext",3]]]],[11,"eq","","",33,[[["batchpayload",3]]]],[11,"ne","","",33,[[["batchpayload",3]]]],[11,"eq","","",34,[[["xnetpayload",3]]]],[11,"ne","","",34,[[["xnetpayload",3]]]],[11,"eq","","",37,[[["ingresspayload",3]]]],[11,"ne","","",37,[[["ingresspayload",3]]]],[11,"eq","ic_types::chunkable","",39,[[["artifacterrorcode",4]]]],[11,"eq","","",40,[[["artifactchunkdata",4]]]],[11,"ne","","",40,[[["artifactchunkdata",4]]]],[11,"eq","","",38,[[["artifactchunk",3]]]],[11,"ne","","",38,[[["artifactchunk",3]]]],[11,"eq","ic_types::consensus::catchup","",60,[[["catchupcontentt",3]]]],[11,"ne","","",60,[[["catchupcontentt",3]]]],[11,"eq","","",327,[[["catchuppackageparam",3]]]],[11,"ne","","",327,[[["catchuppackageparam",3]]]],[11,"eq","","",61,[[["catchupcontentprotobufbytes",3]]]],[11,"ne","","",61,[[["catchupcontentprotobufbytes",3]]]],[11,"eq","","",62,[[["cupwithoriginalprotobuf",3]]]],[11,"ne","","",62,[[["cupwithoriginalprotobuf",3]]]],[11,"eq","ic_types::consensus::certification","",67,[[["certificationmessage",4]]]],[11,"ne","","",67,[[["certificationmessage",4]]]],[11,"eq","","",68,[[["certificationmessagehash",4]]]],[11,"ne","","",68,[[["certificationmessagehash",4]]]],[11,"eq","","",64,[[["certificationcontent",3]]]],[11,"ne","","",64,[[["certificationcontent",3]]]],[11,"eq","","",65,[[["certification",3]]]],[11,"ne","","",65,[[["certification",3]]]],[11,"eq","","",66,[[["certificationshare",3]]]],[11,"ne","","",66,[[["certificationshare",3]]]],[11,"eq","ic_types::consensus::dkg","",69,[[["dealingcontent",3]]]],[11,"ne","","",69,[[["dealingcontent",3]]]],[11,"eq","","",70,[[["summary",3]]]],[11,"ne","","",70,[[["summary",3]]]],[11,"eq","","",72,[[["payload",4]]]],[11,"ne","","",72,[[["payload",4]]]],[11,"eq","","",71,[[["dealings",3]]]],[11,"ne","","",71,[[["dealings",3]]]],[11,"eq","ic_types::consensus::hashed","",73,[[["hashed",3]]]],[11,"eq","ic_types::consensus","",55,[[["blockpayload",4]]]],[11,"ne","","",55,[[["blockpayload",4]]]],[11,"eq","","",74,[[["payload",3]]]],[11,"ne","","",74,[[["payload",3]]]],[11,"eq","","",44,[[["basicsignature",3]]]],[11,"ne","","",44,[[["basicsignature",3]]]],[11,"eq","","",45,[[["thresholdsignature",3]]]],[11,"ne","","",45,[[["thresholdsignature",3]]]],[11,"eq","","",46,[[["thresholdsignatureshare",3]]]],[11,"ne","","",46,[[["thresholdsignatureshare",3]]]],[11,"eq","","",47,[[["multisignature",3]]]],[11,"ne","","",47,[[["multisignature",3]]]],[11,"eq","","",48,[[["multisignatureshare",3]]]],[11,"ne","","",48,[[["multisignatureshare",3]]]],[11,"eq","","",49,[[["rank",3]]]],[11,"ne","","",49,[[["rank",3]]]],[11,"eq","","",50,[[["block",3]]]],[11,"ne","","",50,[[["block",3]]]],[11,"eq","","",51,[[["notarizationcontent",3]]]],[11,"ne","","",51,[[["notarizationcontent",3]]]],[11,"eq","","",52,[[["finalizationcontent",3]]]],[11,"ne","","",52,[[["finalizationcontent",3]]]],[11,"eq","","",53,[[["randombeaconcontent",3]]]],[11,"ne","","",53,[[["randombeaconcontent",3]]]],[11,"eq","","",54,[[["randomtapecontent",3]]]],[11,"ne","","",54,[[["randomtapecontent",3]]]],[11,"eq","","",56,[[["consensusmessage",4]]]],[11,"ne","","",56,[[["consensusmessage",4]]]],[11,"eq","","",57,[[["consensusmessagehash",4]]]],[11,"ne","","",57,[[["consensusmessagehash",4]]]],[11,"eq","","",58,[[["consensusmessageattribute",4]]]],[11,"ne","","",58,[[["consensusmessageattribute",4]]]],[11,"eq","","",59,[[["committee",4]]]],[11,"eq","ic_types::crypto::dkg","",115,[[["config",3]]]],[11,"ne","","",115,[[["config",3]]]],[11,"eq","","",123,[[["dkgconfig",3]]]],[11,"ne","","",123,[[["dkgconfig",3]]]],[11,"eq","","",124,[[["dealers",3]]]],[11,"ne","","",124,[[["dealers",3]]]],[11,"eq","","",125,[[["receivers",3]]]],[11,"ne","","",125,[[["receivers",3]]]],[11,"eq","","",330,[[["encryptionpublickey",3]]]],[11,"ne","","",330,[[["encryptionpublickey",3]]]],[11,"eq","","",117,[[["dealing",3]]]],[11,"ne","","",117,[[["dealing",3]]]],[11,"eq","","",118,[[["transcript",3]]]],[11,"ne","","",118,[[["transcript",3]]]],[11,"eq","","",119,[[["transcriptbytes",3]]]],[11,"ne","","",119,[[["transcriptbytes",3]]]],[11,"eq","","",120,[[["response",3]]]],[11,"ne","","",120,[[["response",3]]]],[11,"eq","","",121,[[["encryptionpublickeywithpop",3]]]],[11,"ne","","",121,[[["encryptionpublickeywithpop",3]]]],[11,"eq","","",122,[[["encryptionpublickeypop",3]]]],[11,"ne","","",122,[[["encryptionpublickeypop",3]]]],[11,"eq","ic_types::crypto::error","",126,[[["invalidargumenterror",3]]]],[11,"ne","","",126,[[["invalidargumenterror",3]]]],[11,"eq","","",127,[[["malformedpublickeyerror",3]]]],[11,"ne","","",127,[[["malformedpublickeyerror",3]]]],[11,"eq","","",128,[[["malformeddataerror",3]]]],[11,"ne","","",128,[[["malformeddataerror",3]]]],[11,"eq","","",129,[[["keynotfounderror",3]]]],[11,"ne","","",129,[[["keynotfounderror",3]]]],[11,"eq","ic_types::crypto::threshold_sig::errors::threshold_sig_data_not_found_error","",132,[[["thresholdsigdatanotfounderror",4]]]],[11,"ne","","",132,[[["thresholdsigdatanotfounderror",4]]]],[11,"eq","ic_types::crypto::threshold_sig::errors::threshold_sign_error","",134,[[["thresholdsignerror",4]]]],[11,"ne","","",134,[[["thresholdsignerror",4]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::config::dealers","",142,[[["nidkgdealers",3]]]],[11,"ne","","",142,[[["nidkgdealers",3]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",332,[[["nidkgthresholdzeroerror",3]]]],[11,"eq","","",143,[[["nidkgconfigvalidationerror",4]]]],[11,"ne","","",143,[[["nidkgconfigvalidationerror",4]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::config::receivers","",151,[[["nidkgreceivers",3]]]],[11,"ne","","",151,[[["nidkgreceivers",3]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::config","",152,[[["nidkgconfig",3]]]],[11,"ne","","",152,[[["nidkgconfig",3]]]],[11,"eq","","",141,[[["nidkgconfigdata",3]]]],[11,"ne","","",141,[[["nidkgconfigdata",3]]]],[11,"eq","","",153,[[["nidkgthreshold",3]]]],[11,"ne","","",153,[[["nidkgthreshold",3]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::errors::create_dealing_error","",157,[[["dkgcreatedealingerror",4]]]],[11,"ne","","",157,[[["dkgcreatedealingerror",4]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::errors::create_transcript_error","",158,[[["dkgcreatetranscripterror",4]]]],[11,"ne","","",158,[[["dkgcreatetranscripterror",4]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::errors::key_removal_error","",159,[[["dkgkeyremovalerror",4]]]],[11,"ne","","",159,[[["dkgkeyremovalerror",4]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::errors::load_transcript_error","",160,[[["dkgloadtranscripterror",4]]]],[11,"ne","","",160,[[["dkgloadtranscripterror",4]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::errors::transcripts_to_retain_validation_error","",161,[[["transcriptstoretainvalidationerror",4]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::errors::verify_dealing_error","",162,[[["dkgverifydealingerror",4]]]],[11,"ne","","",162,[[["dkgverifydealingerror",4]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::errors","",154,[[["notadealererror",3]]]],[11,"ne","","",154,[[["notadealererror",3]]]],[11,"eq","","",155,[[["fsencryptionpublickeynotinregistryerror",3]]]],[11,"ne","","",155,[[["fsencryptionpublickeynotinregistryerror",3]]]],[11,"eq","","",156,[[["malformedfsencryptionpublickeyerror",3]]]],[11,"ne","","",156,[[["malformedfsencryptionpublickeyerror",3]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[["nidkgid",3]]]],[11,"ne","","",163,[[["nidkgid",3]]]],[11,"eq","","",333,[[["invalidnidkgtargetidsizeerror",3]]]],[11,"eq","","",164,[[["nidkgidfromprotoerror",4]]]],[11,"ne","","",164,[[["nidkgidfromprotoerror",4]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg::transcripts_to_retain","",165,[[["transcriptstoretain",3]]]],[11,"ne","","",165,[[["transcriptstoretain",3]]]],[11,"eq","ic_types::crypto::threshold_sig::ni_dkg","",138,[[["nidkgtag",4]]]],[11,"eq","","",139,[[["nidkgtargetsubnet",4]]]],[11,"ne","","",139,[[["nidkgtargetsubnet",4]]]],[11,"eq","","",166,[[["nidkgtargetid",3]]]],[11,"ne","","",166,[[["nidkgtargetid",3]]]],[11,"eq","","",140,[[["dkgid",4]]]],[11,"ne","","",140,[[["dkgid",4]]]],[11,"eq","","",136,[[["nidkgdealing",3]]]],[11,"ne","","",136,[[["nidkgdealing",3]]]],[11,"eq","","",137,[[["nidkgtranscript",3]]]],[11,"ne","","",137,[[["nidkgtranscript",3]]]],[11,"eq","ic_types::crypto::threshold_sig","",167,[[["thresholdsigpublickey",3]]]],[11,"ne","","",167,[[["thresholdsigpublickey",3]]]],[11,"eq","ic_types::crypto","",82,[[["keyid",3]]]],[11,"ne","","",82,[[["keyid",3]]]],[11,"eq","","",83,[[["cryptohash",3]]]],[11,"ne","","",83,[[["cryptohash",3]]]],[11,"eq","","",84,[[["signed",3]]]],[11,"ne","","",84,[[["signed",3]]]],[11,"eq","","",95,[[["keypurpose",4]]]],[11,"eq","","",96,[[["algorithmid",4]]]],[11,"eq","","",85,[[["userpublickey",3]]]],[11,"ne","","",85,[[["userpublickey",3]]]],[11,"eq","","",88,[[["committeememberpublickey",3]]]],[11,"ne","","",88,[[["committeememberpublickey",3]]]],[11,"eq","","",98,[[["cryptoerror",4]]]],[11,"ne","","",98,[[["cryptoerror",4]]]],[11,"eq","","",89,[[["basicsig",3]]]],[11,"ne","","",89,[[["basicsig",3]]]],[11,"eq","","",90,[[["individualmultisig",3]]]],[11,"ne","","",90,[[["individualmultisig",3]]]],[11,"eq","","",91,[[["combinedmultisig",3]]]],[11,"ne","","",91,[[["combinedmultisig",3]]]],[11,"eq","","",92,[[["thresholdsigshare",3]]]],[11,"ne","","",92,[[["thresholdsigshare",3]]]],[11,"eq","","",93,[[["combinedthresholdsig",3]]]],[11,"ne","","",93,[[["combinedthresholdsig",3]]]],[11,"eq","","",94,[[["canistersig",3]]]],[11,"ne","","",94,[[["canistersig",3]]]],[11,"eq","ic_types::filetree_sync","",169,[[["filetreesyncartifact",3]]]],[11,"ne","","",169,[[["filetreesyncartifact",3]]]],[11,"eq","","",171,[[["underconstructionstate",4]]]],[11,"ne","","",171,[[["underconstructionstate",4]]]],[11,"eq","","",170,[[["filetreesyncchunkstracker",3]]]],[11,"ne","","",170,[[["filetreesyncchunkstracker",3]]]],[11,"eq","ic_types::funds","",172,[[["cycles",3]]]],[11,"ne","","",172,[[["cycles",3]]]],[11,"eq","ic_types::funds::icp","",175,[[["icp",3]]]],[11,"ne","","",175,[[["icp",3]]]],[11,"eq","","",173,[[["icperror",4]]]],[11,"ne","","",173,[[["icperror",4]]]],[11,"eq","ic_types::funds","",178,[[["funds",3]]]],[11,"ne","","",178,[[["funds",3]]]],[11,"eq","ic_types::ingress","",187,[[["ingressstatus",4]]]],[11,"ne","","",187,[[["ingressstatus",4]]]],[11,"eq","","",192,[[["wasmresult",4]]]],[11,"ne","","",192,[[["wasmresult",4]]]],[11,"eq","ic_types::malicious_behaviour","",193,[[["maliciousbehaviour",3]]]],[11,"ne","","",193,[[["maliciousbehaviour",3]]]],[11,"eq","ic_types::malicious_flags","",194,[[["maliciousflags",3]]]],[11,"ne","","",194,[[["maliciousflags",3]]]],[11,"eq","ic_types::messages","",196,[[["blob",3]]]],[11,"ne","","",196,[[["blob",3]]]],[11,"eq","","",199,[[["httpcanisterupdate",3]]]],[11,"ne","","",199,[[["httpcanisterupdate",3]]]],[11,"eq","","",225,[[["httpsubmitcontent",4]]]],[11,"ne","","",225,[[["httpsubmitcontent",4]]]],[11,"eq","","",205,[[["httpuserquery",3]]]],[11,"ne","","",205,[[["httpuserquery",3]]]],[11,"eq","","",201,[[["httpreadstate",3]]]],[11,"ne","","",201,[[["httpreadstate",3]]]],[11,"eq","","",217,[[["httpreadcontent",4]]]],[11,"ne","","",217,[[["httpreadcontent",4]]]],[11,"eq","","",203,[[["httprequestenvelope",3]]]],[11,"ne","","",203,[[["httprequestenvelope",3]]]],[11,"eq","","",237,[[["httprequest",3]]]],[11,"ne","","",237,[[["httprequest",3]]]],[11,"eq","","",213,[[["authentication",4]]]],[11,"ne","","",213,[[["authentication",4]]]],[11,"eq","","",228,[[["readcontent",4]]]],[11,"ne","","",228,[[["readcontent",4]]]],[11,"eq","","",238,[[["delegation",3]]]],[11,"ne","","",238,[[["delegation",3]]]],[11,"eq","","",239,[[["signeddelegation",3]]]],[11,"ne","","",239,[[["signeddelegation",3]]]],[11,"eq","","",227,[[["rawhttprequestval",4]]]],[11,"ne","","",227,[[["rawhttprequestval",4]]]],[11,"eq","","",222,[[["httpresponsestatus",4]]]],[11,"ne","","",222,[[["httpresponsestatus",4]]]],[11,"eq","","",220,[[["httpreply",4]]]],[11,"ne","","",220,[[["httpreply",4]]]],[11,"eq","","",214,[[["httpqueryresponse",4]]]],[11,"ne","","",214,[[["httpqueryresponse",4]]]],[11,"eq","","",200,[[["httpqueryresponsereply",3]]]],[11,"ne","","",200,[[["httpqueryresponsereply",3]]]],[11,"eq","","",202,[[["httpreadstateresponse",3]]]],[11,"ne","","",202,[[["httpreadstateresponse",3]]]],[11,"eq","","",197,[[["certificate",3]]]],[11,"ne","","",197,[[["certificate",3]]]],[11,"eq","","",198,[[["certificatedelegation",3]]]],[11,"ne","","",198,[[["certificatedelegation",3]]]],[11,"eq","","",204,[[["httpstatusresponse",3]]]],[11,"ne","","",204,[[["httpstatusresponse",3]]]],[11,"eq","","",240,[[["signedingresscontent",3]]]],[11,"ne","","",240,[[["signedingresscontent",3]]]],[11,"eq","ic_types::artifact","",241,[[]]],[11,"eq","ic_types::messages","",206,[[["ingress",3]]]],[11,"ne","","",206,[[["ingress",3]]]],[11,"eq","","",208,[[["request",3]]]],[11,"ne","","",208,[[["request",3]]]],[11,"eq","","",207,[[["rejectcontext",3]]]],[11,"ne","","",207,[[["rejectcontext",3]]]],[11,"eq","","",229,[[["payload",4]]]],[11,"ne","","",229,[[["payload",4]]]],[11,"eq","","",209,[[["response",3]]]],[11,"ne","","",209,[[["response",3]]]],[11,"eq","","",230,[[["requestorresponse",4]]]],[11,"ne","","",230,[[["requestorresponse",4]]]],[11,"eq","","",242,[[["messageid",3]]]],[11,"ne","","",242,[[["messageid",3]]]],[11,"eq","","",210,[[["userquery",3]]]],[11,"ne","","",210,[[["userquery",3]]]],[11,"eq","","",211,[[["readstate",3]]]],[11,"ne","","",211,[[["readstate",3]]]],[11,"eq","","",243,[[["webauthnsignature",3]]]],[11,"ne","","",243,[[["webauthnsignature",3]]]],[11,"eq","","",244,[[["webauthnenvelope",3]]]],[11,"ne","","",244,[[["webauthnenvelope",3]]]],[11,"eq","","",212,[[["usersignature",3]]]],[11,"ne","","",212,[[["usersignature",3]]]],[11,"eq","","",233,[[["stopcanistercontext",4]]]],[11,"ne","","",233,[[["stopcanistercontext",4]]]],[11,"eq","","",247,[[["signedrequestbytes",3]]]],[11,"ne","","",247,[[["signedrequestbytes",3]]]],[11,"eq","ic_types::methods","",250,[[["wasmmethod",4]]]],[11,"ne","","",250,[[["wasmmethod",4]]]],[11,"eq","","",251,[[["systemmethod",4]]]],[11,"eq","","",248,[[["wasmclosure",3]]]],[11,"ne","","",248,[[["wasmclosure",3]]]],[11,"eq","","",249,[[["callback",3]]]],[11,"ne","","",249,[[["callback",3]]]],[11,"eq","ic_types::nominal_cycles","",253,[[["nominalcycles",3]]]],[11,"ne","","",253,[[["nominalcycles",3]]]],[11,"eq","ic_types::p2p","",254,[[["gossipadvert",3]]]],[11,"ne","","",254,[[["gossipadvert",3]]]],[11,"eq","ic_types::registry::connection_endpoint","",266,[[["protocol",4]]]],[11,"eq","","",341,[[["connectionendpoint",3]]]],[11,"ne","","",341,[[["connectionendpoint",3]]]],[11,"eq","ic_types::registry","",255,[[["registryerror",4]]]],[11,"ne","","",255,[[["registryerror",4]]]],[11,"eq","","",260,[[["registrydataprovidererror",4]]]],[11,"ne","","",260,[[["registrydataprovidererror",4]]]],[11,"eq","","",262,[[["registryclienterror",4]]]],[11,"ne","","",262,[[["registryclienterror",4]]]],[11,"eq","ic_types::replica_config","",283,[[["replicaconfig",3]]]],[11,"ne","","",283,[[["replicaconfig",3]]]],[11,"eq","ic_types::replica_version","",284,[[["replicaversion",3]]]],[11,"ne","","",284,[[["replicaversion",3]]]],[11,"eq","","",342,[[["defaultversionalreadyseterror",3]]]],[11,"eq","","",343,[[["replicaversionparseerror",3]]]],[11,"ne","","",343,[[["replicaversionparseerror",3]]]],[11,"eq","ic_types::state_sync","",285,[[["fileinfo",3]]]],[11,"ne","","",285,[[["fileinfo",3]]]],[11,"eq","","",286,[[["chunkinfo",3]]]],[11,"ne","","",286,[[["chunkinfo",3]]]],[11,"eq","","",287,[[["manifest",3]]]],[11,"ne","","",287,[[["manifest",3]]]],[11,"eq","ic_types::time","",288,[[["time",3]]]],[11,"ne","","",288,[[["time",3]]]],[11,"eq","ic_types::transport","",344,[[["flowtagtype",3]]]],[11,"eq","","",289,[[["transportpayload",3]]]],[11,"ne","","",289,[[["transportpayload",3]]]],[11,"eq","","",290,[[["bytes",3]]]],[11,"ne","","",290,[[["bytes",3]]]],[11,"eq","","",296,[[["transportclienttype",4]]]],[11,"eq","","",291,[[["flowid",3]]]],[11,"ne","","",291,[[["flowid",3]]]],[11,"eq","","",292,[[["transportconfig",3]]]],[11,"ne","","",292,[[["transportconfig",3]]]],[11,"eq","","",293,[[["transportflowconfig",3]]]],[11,"ne","","",293,[[["transportflowconfig",3]]]],[11,"eq","","",297,[[["transportstatechange",4]]]],[11,"ne","","",297,[[["transportstatechange",4]]]],[11,"eq","","",298,[[["transporterror",4]]]],[11,"ne","","",298,[[["transporterror",4]]]],[11,"eq","","",294,[[["transportflowinfo",3]]]],[11,"ne","","",294,[[["transportflowinfo",3]]]],[11,"eq","","",299,[[["transporterrorcode",4]]]],[11,"ne","","",299,[[["transporterrorcode",4]]]],[11,"eq","ic_types::xnet","",306,[[["streamindexedqueue",3]]]],[11,"ne","","",306,[[["streamindexedqueue",3]]]],[11,"eq","","",302,[[["streamheader",3]]]],[11,"ne","","",302,[[["streamheader",3]]]],[11,"eq","","",307,[[["streamslice",3]]]],[11,"ne","","",307,[[["streamslice",3]]]],[11,"eq","","",303,[[["certifiedstreamslice",3]]]],[11,"ne","","",303,[[["certifiedstreamslice",3]]]],[11,"eq","","",304,[[["queueid",3]]]],[11,"ne","","",304,[[["queueid",3]]]],[11,"eq","ic_types","",6,[[["idkgid",3]]]],[11,"ne","","",6,[[["idkgid",3]]]],[11,"eq","","",309,[[["accumulatedpriority",3]]]],[11,"ne","","",309,[[["accumulatedpriority",3]]]],[11,"eq","","",310,[[["queryallocation",3]]]],[11,"ne","","",310,[[["queryallocation",3]]]],[11,"eq","","",311,[[["computeallocation",3]]]],[11,"ne","","",311,[[["computeallocation",3]]]],[11,"eq","","",313,[[["memoryallocation",3]]]],[11,"ne","","",313,[[["memoryallocation",3]]]],[11,"partial_cmp","ic_types::artifact","",15,[[["ingressmessageid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",15,[[["ingressmessageid",3]]]],[11,"le","","",15,[[["ingressmessageid",3]]]],[11,"gt","","",15,[[["ingressmessageid",3]]]],[11,"ge","","",15,[[["ingressmessageid",3]]]],[11,"partial_cmp","ic_types::batch","",32,[[["validationcontext",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","ic_types::consensus::catchup","",60,[[["catchupcontentt",3]],[["option",4],["ordering",4]]]],[11,"lt","","",60,[[["catchupcontentt",3]]]],[11,"le","","",60,[[["catchupcontentt",3]]]],[11,"gt","","",60,[[["catchupcontentt",3]]]],[11,"ge","","",60,[[["catchupcontentt",3]]]],[11,"partial_cmp","","",327,[[["catchuppackageparam",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","ic_types::consensus::certification","",64,[[["certificationcontent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",64,[[["certificationcontent",3]]]],[11,"le","","",64,[[["certificationcontent",3]]]],[11,"gt","","",64,[[["certificationcontent",3]]]],[11,"ge","","",64,[[["certificationcontent",3]]]],[11,"partial_cmp","ic_types::consensus::hashed","",73,[[["hashed",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","ic_types::consensus","",74,[[["payload",3]],[["option",4],["ordering",4]]]],[11,"lt","","",74,[[["payload",3]]]],[11,"le","","",74,[[["payload",3]]]],[11,"gt","","",74,[[["payload",3]]]],[11,"ge","","",74,[[["payload",3]]]],[11,"partial_cmp","","",49,[[["rank",3]],[["option",4],["ordering",4]]]],[11,"lt","","",49,[[["rank",3]]]],[11,"le","","",49,[[["rank",3]]]],[11,"gt","","",49,[[["rank",3]]]],[11,"ge","","",49,[[["rank",3]]]],[11,"partial_cmp","","",51,[[["notarizationcontent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",51,[[["notarizationcontent",3]]]],[11,"le","","",51,[[["notarizationcontent",3]]]],[11,"gt","","",51,[[["notarizationcontent",3]]]],[11,"ge","","",51,[[["notarizationcontent",3]]]],[11,"partial_cmp","","",52,[[["finalizationcontent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",52,[[["finalizationcontent",3]]]],[11,"le","","",52,[[["finalizationcontent",3]]]],[11,"gt","","",52,[[["finalizationcontent",3]]]],[11,"ge","","",52,[[["finalizationcontent",3]]]],[11,"partial_cmp","","",53,[[["randombeaconcontent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",53,[[["randombeaconcontent",3]]]],[11,"le","","",53,[[["randombeaconcontent",3]]]],[11,"gt","","",53,[[["randombeaconcontent",3]]]],[11,"ge","","",53,[[["randombeaconcontent",3]]]],[11,"partial_cmp","","",54,[[["randomtapecontent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",54,[[["randomtapecontent",3]]]],[11,"le","","",54,[[["randomtapecontent",3]]]],[11,"gt","","",54,[[["randomtapecontent",3]]]],[11,"ge","","",54,[[["randomtapecontent",3]]]],[11,"partial_cmp","ic_types::crypto::dkg","",330,[[["encryptionpublickey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",330,[[["encryptionpublickey",3]]]],[11,"le","","",330,[[["encryptionpublickey",3]]]],[11,"gt","","",330,[[["encryptionpublickey",3]]]],[11,"ge","","",330,[[["encryptionpublickey",3]]]],[11,"partial_cmp","","",118,[[["transcript",3]],[["option",4],["ordering",4]]]],[11,"lt","","",118,[[["transcript",3]]]],[11,"le","","",118,[[["transcript",3]]]],[11,"gt","","",118,[[["transcript",3]]]],[11,"ge","","",118,[[["transcript",3]]]],[11,"partial_cmp","","",119,[[["transcriptbytes",3]],[["option",4],["ordering",4]]]],[11,"lt","","",119,[[["transcriptbytes",3]]]],[11,"le","","",119,[[["transcriptbytes",3]]]],[11,"gt","","",119,[[["transcriptbytes",3]]]],[11,"ge","","",119,[[["transcriptbytes",3]]]],[11,"partial_cmp","","",121,[[["encryptionpublickeywithpop",3]],[["option",4],["ordering",4]]]],[11,"lt","","",121,[[["encryptionpublickeywithpop",3]]]],[11,"le","","",121,[[["encryptionpublickeywithpop",3]]]],[11,"gt","","",121,[[["encryptionpublickeywithpop",3]]]],[11,"ge","","",121,[[["encryptionpublickeywithpop",3]]]],[11,"partial_cmp","","",122,[[["encryptionpublickeypop",3]],[["option",4],["ordering",4]]]],[11,"lt","","",122,[[["encryptionpublickeypop",3]]]],[11,"le","","",122,[[["encryptionpublickeypop",3]]]],[11,"gt","","",122,[[["encryptionpublickeypop",3]]]],[11,"ge","","",122,[[["encryptionpublickeypop",3]]]],[11,"partial_cmp","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[["nidkgid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",163,[[["nidkgid",3]]]],[11,"le","","",163,[[["nidkgid",3]]]],[11,"gt","","",163,[[["nidkgid",3]]]],[11,"ge","","",163,[[["nidkgid",3]]]],[11,"partial_cmp","ic_types::crypto::threshold_sig::ni_dkg","",138,[[["nidkgtag",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",139,[[["nidkgtargetsubnet",4]],[["option",4],["ordering",4]]]],[11,"lt","","",139,[[["nidkgtargetsubnet",4]]]],[11,"le","","",139,[[["nidkgtargetsubnet",4]]]],[11,"gt","","",139,[[["nidkgtargetsubnet",4]]]],[11,"ge","","",139,[[["nidkgtargetsubnet",4]]]],[11,"partial_cmp","","",166,[[["nidkgtargetid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",166,[[["nidkgtargetid",3]]]],[11,"le","","",166,[[["nidkgtargetid",3]]]],[11,"gt","","",166,[[["nidkgtargetid",3]]]],[11,"ge","","",166,[[["nidkgtargetid",3]]]],[11,"partial_cmp","","",140,[[["dkgid",4]],[["option",4],["ordering",4]]]],[11,"lt","","",140,[[["dkgid",4]]]],[11,"le","","",140,[[["dkgid",4]]]],[11,"gt","","",140,[[["dkgid",4]]]],[11,"ge","","",140,[[["dkgid",4]]]],[11,"partial_cmp","ic_types::crypto::threshold_sig","",167,[[["thresholdsigpublickey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",167,[[["thresholdsigpublickey",3]]]],[11,"le","","",167,[[["thresholdsigpublickey",3]]]],[11,"gt","","",167,[[["thresholdsigpublickey",3]]]],[11,"ge","","",167,[[["thresholdsigpublickey",3]]]],[11,"partial_cmp","ic_types::crypto","",82,[[["keyid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",82,[[["keyid",3]]]],[11,"le","","",82,[[["keyid",3]]]],[11,"gt","","",82,[[["keyid",3]]]],[11,"ge","","",82,[[["keyid",3]]]],[11,"partial_cmp","","",83,[[["cryptohash",3]],[["option",4],["ordering",4]]]],[11,"lt","","",83,[[["cryptohash",3]]]],[11,"le","","",83,[[["cryptohash",3]]]],[11,"gt","","",83,[[["cryptohash",3]]]],[11,"ge","","",83,[[["cryptohash",3]]]],[11,"partial_cmp","","",95,[[["keypurpose",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",96,[[["algorithmid",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_types::funds","",172,[[["cycles",3]],[["option",4],["ordering",4]]]],[11,"lt","","",172,[[["cycles",3]]]],[11,"le","","",172,[[["cycles",3]]]],[11,"gt","","",172,[[["cycles",3]]]],[11,"ge","","",172,[[["cycles",3]]]],[11,"partial_cmp","ic_types::funds::icp","",175,[[["icp",3]],[["option",4],["ordering",4]]]],[11,"lt","","",175,[[["icp",3]]]],[11,"le","","",175,[[["icp",3]]]],[11,"gt","","",175,[[["icp",3]]]],[11,"ge","","",175,[[["icp",3]]]],[11,"partial_cmp","ic_types::messages","",242,[[["messageid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",242,[[["messageid",3]]]],[11,"le","","",242,[[["messageid",3]]]],[11,"gt","","",242,[[["messageid",3]]]],[11,"ge","","",242,[[["messageid",3]]]],[11,"partial_cmp","ic_types::methods","",250,[[["wasmmethod",4]],[["option",4],["ordering",4]]]],[11,"lt","","",250,[[["wasmmethod",4]]]],[11,"le","","",250,[[["wasmmethod",4]]]],[11,"gt","","",250,[[["wasmmethod",4]]]],[11,"ge","","",250,[[["wasmmethod",4]]]],[11,"partial_cmp","","",251,[[["systemmethod",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ic_types::nominal_cycles","",253,[[["nominalcycles",3]],[["option",4],["ordering",4]]]],[11,"lt","","",253,[[["nominalcycles",3]]]],[11,"le","","",253,[[["nominalcycles",3]]]],[11,"gt","","",253,[[["nominalcycles",3]]]],[11,"ge","","",253,[[["nominalcycles",3]]]],[11,"partial_cmp","ic_types::replica_version","",284,[[["replicaversion",3]],[["option",4],["ordering",4]]]],[11,"lt","","",284,[[["replicaversion",3]]]],[11,"le","","",284,[[["replicaversion",3]]]],[11,"gt","","",284,[[["replicaversion",3]]]],[11,"ge","","",284,[[["replicaversion",3]]]],[11,"partial_cmp","ic_types::time","",288,[[["time",3]],[["option",4],["ordering",4]]]],[11,"lt","","",288,[[["time",3]]]],[11,"le","","",288,[[["time",3]]]],[11,"gt","","",288,[[["time",3]]]],[11,"ge","","",288,[[["time",3]]]],[11,"partial_cmp","ic_types::xnet","",304,[[["queueid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",304,[[["queueid",3]]]],[11,"le","","",304,[[["queueid",3]]]],[11,"gt","","",304,[[["queueid",3]]]],[11,"ge","","",304,[[["queueid",3]]]],[11,"partial_cmp","ic_types","",6,[[["idkgid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["idkgid",3]]]],[11,"le","","",6,[[["idkgid",3]]]],[11,"gt","","",6,[[["idkgid",3]]]],[11,"ge","","",6,[[["idkgid",3]]]],[11,"partial_cmp","","",310,[[["queryallocation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",310,[[["queryallocation",3]]]],[11,"le","","",310,[[["queryallocation",3]]]],[11,"gt","","",310,[[["queryallocation",3]]]],[11,"ge","","",310,[[["queryallocation",3]]]],[11,"deref","ic_types::messages","",196,[[]]],[11,"fmt","ic_types::artifact","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::batch","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::chunkable","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::consensus::catchup","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",327,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::consensus::certification","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::consensus::dkg","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::consensus::hashed","",73,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","ic_types::consensus","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::dkg","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","","",330,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::error","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",129,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::errors::threshold_sig_data_not_found_error","",132,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::errors::threshold_sign_error","",134,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::config::dealers","",142,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",332,[[["formatter",3]],["result",6]]],[11,"fmt","","",143,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::config::receivers","",151,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::config","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",141,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::create_dealing_error","",157,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::create_transcript_error","",158,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::key_removal_error","",159,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::load_transcript_error","",160,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::transcripts_to_retain_validation_error","",161,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::verify_dealing_error","",162,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[["formatter",3]],["result",6]]],[11,"fmt","","",333,[[["formatter",3]],["result",6]]],[11,"fmt","","",164,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::transcripts_to_retain","",165,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg","",138,[[["formatter",3]],["result",6]]],[11,"fmt","","",166,[[["formatter",3]],["result",6]]],[11,"fmt","","",139,[[["formatter",3]],["result",6]]],[11,"fmt","","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"fmt","","",137,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig","",167,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::filetree_sync","",169,[[["formatter",3]],["result",6]]],[11,"fmt","","",171,[[["formatter",3]],["result",6]]],[11,"fmt","","",170,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::funds","",172,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::funds::icp","",175,[[["formatter",3]],["result",6]]],[11,"fmt","","",173,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::funds","",178,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::ingress","",187,[[["formatter",3]],["result",6]]],[11,"fmt","","",192,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::malicious_behaviour","",193,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::malicious_flags","",194,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::messages","",196,[[["formatter",3]],["result",6]]],[11,"fmt","","",199,[[["formatter",3]],["result",6]]],[11,"fmt","","",225,[[["formatter",3]],["result",6]]],[11,"fmt","","",205,[[["formatter",3]],["result",6]]],[11,"fmt","","",201,[[["formatter",3]],["result",6]]],[11,"fmt","","",217,[[["formatter",3]],["result",6]]],[11,"fmt","","",203,[[["formatter",3]],["result",6]]],[11,"fmt","","",237,[[["formatter",3]],["result",6]]],[11,"fmt","","",213,[[["formatter",3]],["result",6]]],[11,"fmt","","",228,[[["formatter",3]],["result",6]]],[11,"fmt","","",238,[[["formatter",3]],["result",6]]],[11,"fmt","","",239,[[["formatter",3]],["result",6]]],[11,"fmt","","",227,[[["formatter",3]],["result",6]]],[11,"fmt","","",222,[[["formatter",3]],["result",6]]],[11,"fmt","","",220,[[["formatter",3]],["result",6]]],[11,"fmt","","",214,[[["formatter",3]],["result",6]]],[11,"fmt","","",200,[[["formatter",3]],["result",6]]],[11,"fmt","","",202,[[["formatter",3]],["result",6]]],[11,"fmt","","",197,[[["formatter",3]],["result",6]]],[11,"fmt","","",198,[[["formatter",3]],["result",6]]],[11,"fmt","","",204,[[["formatter",3]],["result",6]]],[11,"fmt","","",240,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::artifact","",241,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::messages","",206,[[["formatter",3]],["result",6]]],[11,"fmt","","",208,[[["formatter",3]],["result",6]]],[11,"fmt","","",207,[[["formatter",3]],["result",6]]],[11,"fmt","","",229,[[["formatter",3]],["result",6]]],[11,"fmt","","",209,[[["formatter",3]],["result",6]]],[11,"fmt","","",230,[[["formatter",3]],["result",6]]],[11,"fmt","","",242,[[["formatter",3]],["result",6]]],[11,"fmt","","",231,[[["formatter",3]],["result",6]]],[11,"fmt","","",210,[[["formatter",3]],["result",6]]],[11,"fmt","","",211,[[["formatter",3]],["result",6]]],[11,"fmt","","",243,[[["formatter",3]],["result",6]]],[11,"fmt","","",244,[[["formatter",3]],["result",6]]],[11,"fmt","","",212,[[["formatter",3]],["result",6]]],[11,"fmt","","",233,[[["formatter",3]],["result",6]]],[11,"fmt","","",236,[[["formatter",3]],["result",6]]],[11,"fmt","","",247,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::methods","",250,[[["formatter",3]],["result",6]]],[11,"fmt","","",251,[[["formatter",3]],["result",6]]],[11,"fmt","","",248,[[["formatter",3]],["result",6]]],[11,"fmt","","",249,[[["formatter",3]],["result",6]]],[11,"fmt","","",252,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::nominal_cycles","",253,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::p2p","",254,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::registry::connection_endpoint","",266,[[["formatter",3]],["result",6]]],[11,"fmt","","",341,[[["formatter",3]],["result",6]]],[11,"fmt","","",267,[[["formatter",3]],["result",6]]],[11,"fmt","","",272,[[["formatter",3]],["result",6]]],[11,"fmt","","",275,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::registry","",255,[[["formatter",3]],["result",6]]],[11,"fmt","","",260,[[["formatter",3]],["result",6]]],[11,"fmt","","",262,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::replica_config","",283,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::replica_version","",284,[[["formatter",3]],["result",6]]],[11,"fmt","","",342,[[["formatter",3]],["result",6]]],[11,"fmt","","",343,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::state_sync","",285,[[["formatter",3]],["result",6]]],[11,"fmt","","",286,[[["formatter",3]],["result",6]]],[11,"fmt","","",287,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::time","",288,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::transport","",344,[[["formatter",3]],["result",6]]],[11,"fmt","","",289,[[["formatter",3]],["result",6]]],[11,"fmt","","",295,[[["formatter",3]],["result",6]]],[11,"fmt","","",290,[[["formatter",3]],["result",6]]],[11,"fmt","","",296,[[["formatter",3]],["result",6]]],[11,"fmt","","",291,[[["formatter",3]],["result",6]]],[11,"fmt","","",292,[[["formatter",3]],["result",6]]],[11,"fmt","","",293,[[["formatter",3]],["result",6]]],[11,"fmt","","",297,[[["formatter",3]],["result",6]]],[11,"fmt","","",298,[[["formatter",3]],["result",6]]],[11,"fmt","","",294,[[["formatter",3]],["result",6]]],[11,"fmt","","",299,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::xnet","",306,[[["formatter",3]],["result",6]]],[11,"fmt","","",302,[[["formatter",3]],["result",6]]],[11,"fmt","","",307,[[["formatter",3]],["result",6]]],[11,"fmt","","",303,[[["formatter",3]],["result",6]]],[11,"fmt","","",304,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",309,[[["formatter",3]],["result",6]]],[11,"fmt","","",310,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",311,[[["formatter",3]],["result",6]]],[11,"fmt","","",312,[[["formatter",3]],["result",6]]],[11,"fmt","","",313,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::artifact","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::error","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",129,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::errors::threshold_sig_data_not_found_error","",132,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::errors::threshold_sign_error","",134,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::config::errors","",143,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::config","",152,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::create_dealing_error","",157,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::create_transcript_error","",158,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::key_removal_error","",159,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::load_transcript_error","",160,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::transcripts_to_retain_validation_error","",161,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors::verify_dealing_error","",162,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::errors","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto::threshold_sig::ni_dkg","",139,[[["formatter",3]],["result",6]]],[11,"fmt","","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"fmt","","",137,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::crypto","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::funds","",172,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::funds::icp","",175,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::messages","",196,[[["formatter",3]],["result",6]]],[11,"fmt","","",242,[[["formatter",3]],["result",6]]],[11,"fmt","","",231,[[["formatter",3]],["result",6]]],[11,"fmt","","",236,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::methods","",250,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",251,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","ic_types::nominal_cycles","",253,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::registry::connection_endpoint","",266,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",341,[[["formatter",3]],["result",6]]],[11,"fmt","","",267,[[["formatter",3]],["result",6]]],[11,"fmt","","",272,[[["formatter",3]],["result",6]]],[11,"fmt","","",275,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::registry","",255,[[["formatter",3]],["result",6]]],[11,"fmt","","",260,[[["formatter",3]],["result",6]]],[11,"fmt","","",262,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::replica_version","",284,[[["formatter",3]],["result",6]]],[11,"fmt","","",343,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::state_sync","",287,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types::time","",288,[[["formatter",3]],["result",6]]],[11,"fmt","ic_types","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",310,[[["formatter",3]],["result",6]]],[11,"fmt","","",311,[[["formatter",3]],["result",6]]],[11,"fmt","","",313,[[["formatter",3]],["result",6]]],[11,"sub","ic_types::funds","",172,[[]]],[11,"sub","ic_types::nominal_cycles","",253,[[]]],[11,"sub","ic_types::time","",288,[[["time",3]],["duration",3]]],[11,"sub","","",288,[[["duration",3]],["time",3]]],[11,"sub","ic_types","",310,[[]]],[11,"add","ic_types::funds","",172,[[]]],[11,"add","ic_types::nominal_cycles","",253,[[]]],[11,"add","ic_types::time","",288,[[["duration",3]],["time",3]]],[11,"add","ic_types","",310,[[]]],[11,"mul","ic_types::funds","",172,[[]]],[11,"mul","","",172,[[]]],[11,"mul","","",172,[[]]],[11,"mul","","",172,[[]]],[11,"add_assign","","",172,[[]]],[11,"add_assign","ic_types::nominal_cycles","",253,[[]]],[11,"add_assign","ic_types::time","",288,[[["duration",3]]]],[11,"sub_assign","ic_types::funds","",172,[[]]],[11,"sub_assign","ic_types::nominal_cycles","",253,[[]]],[11,"mul_assign","ic_types::funds","",172,[[]]],[11,"hash","ic_types::artifact","",23,[[]]],[11,"hash","","",24,[[]]],[11,"hash","","",25,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",30,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",28,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","ic_types::batch","",32,[[]]],[11,"hash","","",33,[[]]],[11,"hash","","",34,[[]]],[11,"hash","","",37,[[]]],[11,"hash","ic_types::chunkable","",39,[[]]],[11,"hash","","",40,[[]]],[11,"hash","","",38,[[]]],[11,"hash","ic_types::consensus::catchup","",60,[[]]],[11,"hash","","",61,[[]]],[11,"hash","","",62,[[]]],[11,"hash","ic_types::consensus::certification","",67,[[]]],[11,"hash","","",68,[[]]],[11,"hash","","",64,[[]]],[11,"hash","","",65,[[]]],[11,"hash","","",66,[[]]],[11,"hash","ic_types::consensus::dkg","",69,[[]]],[11,"hash","","",70,[[]]],[11,"hash","","",72,[[]]],[11,"hash","","",71,[[]]],[11,"hash","ic_types::consensus::hashed","",73,[[]]],[11,"hash","ic_types::consensus","",55,[[]]],[11,"hash","","",74,[[]]],[11,"hash","","",44,[[]]],[11,"hash","","",45,[[]]],[11,"hash","","",46,[[]]],[11,"hash","","",47,[[]]],[11,"hash","","",48,[[]]],[11,"hash","","",49,[[]]],[11,"hash","","",50,[[]]],[11,"hash","","",51,[[]]],[11,"hash","","",52,[[]]],[11,"hash","","",53,[[]]],[11,"hash","","",54,[[]]],[11,"hash","","",56,[[]]],[11,"hash","","",57,[[]]],[11,"hash","","",58,[[]]],[11,"hash","ic_types::crypto::dkg","",115,[[]]],[11,"hash","","",123,[[]]],[11,"hash","","",124,[[]]],[11,"hash","","",125,[[]]],[11,"hash","","",330,[[]]],[11,"hash","","",117,[[]]],[11,"hash","","",118,[[]]],[11,"hash","","",119,[[]]],[11,"hash","","",120,[[]]],[11,"hash","","",121,[[]]],[11,"hash","","",122,[[]]],[11,"hash","ic_types::crypto::error","",126,[[]]],[11,"hash","","",127,[[]]],[11,"hash","","",128,[[]]],[11,"hash","","",129,[[]]],[11,"hash","ic_types::crypto::threshold_sig::errors::threshold_sig_data_not_found_error","",132,[[]]],[11,"hash","ic_types::crypto::threshold_sig::errors::threshold_sign_error","",134,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::config::dealers","",142,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::config::receivers","",151,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::config","",152,[[]]],[11,"hash","","",141,[[]]],[11,"hash","","",153,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::errors::create_dealing_error","",157,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::errors::create_transcript_error","",158,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::errors::key_removal_error","",159,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::errors::load_transcript_error","",160,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::errors::transcripts_to_retain_validation_error","",161,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::errors::verify_dealing_error","",162,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::errors","",154,[[]]],[11,"hash","","",155,[[]]],[11,"hash","","",156,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[]]],[11,"hash","ic_types::crypto::threshold_sig::ni_dkg","",138,[[]]],[11,"hash","","",139,[[]]],[11,"hash","","",166,[[]]],[11,"hash","","",140,[[]]],[11,"hash","","",136,[[]]],[11,"hash","","",137,[[]]],[11,"hash","ic_types::crypto::threshold_sig","",167,[[]]],[11,"hash","ic_types::crypto","",82,[[]]],[11,"hash","","",83,[[]]],[11,"hash","","",84,[[]]],[11,"hash","","",95,[[]]],[11,"hash","","",96,[[]]],[11,"hash","","",85,[[]]],[11,"hash","","",88,[[]]],[11,"hash","","",98,[[]]],[11,"hash","","",89,[[]]],[11,"hash","","",90,[[]]],[11,"hash","","",91,[[]]],[11,"hash","","",92,[[]]],[11,"hash","","",93,[[]]],[11,"hash","","",94,[[]]],[11,"hash","ic_types::filetree_sync","",169,[[]]],[11,"hash","","",171,[[]]],[11,"hash","","",170,[[]]],[11,"hash","ic_types::funds","",172,[[]]],[11,"hash","ic_types::funds::icp","",175,[[]]],[11,"hash","ic_types::funds","",178,[[]]],[11,"hash","ic_types::ingress","",187,[[]]],[11,"hash","","",192,[[]]],[11,"hash","ic_types::messages","",196,[[]]],[11,"hash","","",199,[[]]],[11,"hash","","",237,[[]]],[11,"hash","","",213,[[]]],[11,"hash","","",238,[[]]],[11,"hash","","",239,[[]]],[11,"hash","","",227,[[]]],[11,"hash","","",240,[[]]],[11,"hash","ic_types::artifact","",241,[[]]],[11,"hash","ic_types::messages","",206,[[]]],[11,"hash","","",208,[[]]],[11,"hash","","",207,[[]]],[11,"hash","","",229,[[]]],[11,"hash","","",209,[[]]],[11,"hash","","",230,[[]]],[11,"hash","","",242,[[]]],[11,"hash","","",243,[[]]],[11,"hash","","",212,[[]]],[11,"hash","","",247,[[]]],[11,"hash","ic_types::nominal_cycles","",253,[[]]],[11,"hash","ic_types::p2p","",254,[[]]],[11,"hash","ic_types::registry::connection_endpoint","",341,[[]]],[11,"hash","ic_types::registry","",255,[[]]],[11,"hash","","",260,[[]]],[11,"hash","","",262,[[]]],[11,"hash","ic_types::replica_version","",284,[[]]],[11,"hash","ic_types::state_sync","",285,[[]]],[11,"hash","","",286,[[]]],[11,"hash","","",287,[[]]],[11,"hash","ic_types::time","",288,[[]]],[11,"hash","ic_types::transport","",344,[[]]],[11,"hash","","",289,[[]]],[11,"hash","","",290,[[]]],[11,"hash","","",296,[[]]],[11,"hash","","",291,[[]]],[11,"hash","","",292,[[]]],[11,"hash","","",293,[[]]],[11,"hash","","",297,[[]]],[11,"hash","","",298,[[]]],[11,"hash","","",294,[[]]],[11,"hash","","",299,[[]]],[11,"hash","ic_types::xnet","",306,[[]]],[11,"hash","","",302,[[]]],[11,"hash","","",307,[[]]],[11,"hash","","",303,[[]]],[11,"hash","","",304,[[]]],[11,"hash","ic_types","",6,[[]]],[11,"hash","","",310,[[]]],[11,"hash","","",311,[[]]],[11,"hash","","",313,[[]]],[11,"try_from","ic_types::messages","",247,[[["artifact",4]],["result",4]]],[11,"try_from","ic_types::consensus","",56,[[["artifact",4]],["result",4]]],[11,"try_from","ic_types::filetree_sync","",169,[[["artifact",4]],["result",4]]],[11,"try_from","ic_types::consensus::certification","",67,[[["artifact",4]],["result",4]]],[11,"try_from","ic_types","",348,[[["artifact",4]],["result",4]]],[11,"try_from","ic_types::artifact","",20,[[["artifact",4]],["result",4]]],[11,"try_from","","",18,[[["artifactattribute",4]],["result",4]]],[11,"try_from","ic_types","",355,[[["artifactattribute",4]],["result",4]]],[11,"try_from","ic_types::artifact","",21,[[["artifactattribute",4]],["result",4]]],[11,"try_from","","",28,[[["artifactattribute",4]],["result",4]]],[11,"try_from","ic_types::consensus","",58,[[["artifactattribute",4]],["result",4]]],[11,"try_from","ic_types::artifact","",30,[[["artifactattribute",4]],["result",4]]],[11,"try_from","ic_types","",356,[[["artifactid",4]],["result",4]]],[11,"try_from","","",357,[[["artifactid",4]],["result",4]]],[11,"try_from","ic_types::artifact","",19,[[["artifactid",4]],["result",4]]],[11,"try_from","","",13,[[["artifactid",4]],["result",4]]],[11,"try_from","","",16,[[["artifactid",4]],["result",4]]],[11,"try_from","","",15,[[["artifactid",4]],["result",4]]],[11,"try_from","","",12,[[["gossipadvert",3]],[["advert",3],["result",4]]]],[11,"try_from","","",11,[[["artifactfilter",3]],["result",4]]],[11,"try_from","","",14,[[["consensusmessagefilter",3]],["result",4]]],[11,"try_from","","",17,[[["certificationmessagefilter",3]],["result",4]]],[11,"try_from","","",22,[[["statesyncfilter",3]],["result",4]]],[11,"try_from","ic_types::batch","",34,[[["xnetpayload",3]],["result",4]]],[11,"try_from","","",37,[[["ingresspayload",3]],["result",4]]],[11,"try_from","ic_types::chunkable","",38,[[["artifactchunk",3]],["result",4]]],[11,"try_from","ic_types","",63,[[["catchupcontent",3]],[["result",4],["catchupcontent",6],["string",3]]]],[11,"try_from","","",358,[[["catchuppackage",3]],[["string",3],["catchuppackage",6],["result",4]]]],[11,"try_from","ic_types::consensus::certification","",65,[[["certificationmessage",4]],["result",4]]],[11,"try_from","","",66,[[["certificationmessage",4]],["result",4]]],[11,"try_from","ic_types","",348,[[["dkgmessage",3]],["result",4]]],[11,"try_from","ic_types::consensus::dkg","",70,[[["summary",3]],["result",4]]],[11,"try_from","","",71,[[["dealings",3]],["result",4]]],[11,"try_from","","",72,[[["dkgpayload",3]],["result",4]]],[11,"try_from","ic_types","",353,[[["blockproposal",3]],["result",4]]],[11,"try_from","","",359,[[["notarization",3]],["result",4]]],[11,"try_from","","",360,[[["finalization",3]],["result",4]]],[11,"try_from","","",361,[[["randombeacon",3]],["result",4]]],[11,"try_from","","",362,[[["randomtape",3]],["result",4]]],[11,"try_from","","",361,[[["consensusmessage",4]],["result",4]]],[11,"try_from","","",360,[[["consensusmessage",4]],["result",4]]],[11,"try_from","","",359,[[["consensusmessage",4]],["result",4]]],[11,"try_from","","",353,[[["consensusmessage",4]],["result",4]]],[11,"try_from","","",363,[[["consensusmessage",4]],["result",4]]],[11,"try_from","","",364,[[["consensusmessage",4]],["result",4]]],[11,"try_from","","",365,[[["consensusmessage",4]],["result",4]]],[11,"try_from","","",362,[[["consensusmessage",4]],["result",4]]],[11,"try_from","","",366,[[["consensusmessage",4]],["result",4]]],[11,"try_from","","",358,[[["consensusmessage",4]],["result",4]]],[11,"try_from","","",367,[[["consensusmessage",4]],["result",4]]],[11,"try_from","ic_types::consensus","",50,[[["block",3]],["result",4]]],[11,"try_from","ic_types::crypto::threshold_sig::ni_dkg::config","",152,[[["nidkgconfig",3]],["result",4]]],[11,"try_from","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[["nidkgidproto",3]],["result",4]]],[11,"try_from","ic_types::crypto::threshold_sig::ni_dkg","",138,[[],["result",4]]],[11,"try_from","","",137,[[["nidkgtranscript",3]],["result",4]]],[11,"try_from","ic_types::crypto::threshold_sig","",167,[[["publickeyproto",3]],["result",4]]],[11,"try_from","ic_types::funds","",178,[[["pbfunds",3]],["result",4]]],[11,"try_from","ic_types::ingress","",187,[[["ingressstatus",3]],["result",4]]],[11,"try_from","ic_types::messages","",213,[[["httprequestenvelope",3]],["result",4]]],[11,"try_from","","",237,[[["httprequestenvelope",3],["httpreadcontent",4]],["result",4]]],[11,"try_from","","",237,[[["httpsubmitcontent",4],["httprequestenvelope",3]],["result",4]]],[11,"try_from","","",240,[[["httpcanisterupdate",3]],["result",4]]],[11,"try_from","ic_types::artifact","",241,[[["signedrequestbytes",3]],["result",4]]],[11,"try_from","","",241,[[["httpsubmitcontent",4],["httprequestenvelope",3]],["result",4]]],[11,"try_from","ic_types::messages","",206,[[["ingress",3]],["result",4]]],[11,"try_from","","",208,[[["request",3]],["result",4]]],[11,"try_from","","",207,[[["rejectcontext",3]],["result",4]]],[11,"try_from","","",209,[[["response",3]],["result",4]]],[11,"try_from","","",230,[[["requestorresponse",3]],["result",4]]],[11,"try_from","","",242,[[],["result",4]]],[11,"try_from","","",210,[[["httpuserquery",3]],["result",4]]],[11,"try_from","","",211,[[["httpreadstate",3]],["result",4]]],[11,"try_from","","",243,[[],["result",4]]],[11,"try_from","","",244,[[["webauthnsignature",3]],["result",4]]],[11,"try_from","","",233,[[["stopcanistercontext",3]],["result",4]]],[11,"try_from","","",247,[[["httprequestenvelope",3]],["result",4]]],[11,"try_from","","",203,[[["signedrequestbytes",3]],["result",4]]],[11,"try_from","ic_types::methods","",250,[[["string",3]],["result",4]]],[11,"try_from","","",250,[[["wasmmethod",3]],["result",4]]],[11,"try_from","","",251,[[],["result",4]]],[11,"try_from","","",249,[[["callback",3]],["result",4]]],[11,"try_from","ic_types::nominal_cycles","",253,[[["nominalcycles",3]],["result",4]]],[11,"try_from","ic_types::p2p","",254,[[["gossipadvert",3]],["result",4]]],[11,"try_from","ic_types::registry::connection_endpoint","",341,[[["url",3]],["result",4]]],[11,"try_from","","",341,[[["pbconnectionendpoint",3]],["result",4]]],[11,"try_from","","",341,[[],[["connectionendpoint",3],["result",4]]]],[11,"try_from","ic_types::replica_version","",284,[[],["result",4]]],[11,"try_from","","",284,[[["string",3]],["result",4]]],[11,"try_from","ic_types::state_sync","",285,[[["fileinfo",3]],[["result",4],["proxydecodeerror",4]]]],[11,"try_from","","",286,[[["chunkinfo",3]],[["result",4],["proxydecodeerror",4]]]],[11,"try_from","","",287,[[["manifest",3]],[["result",4],["proxydecodeerror",4]]]],[11,"try_from","ic_types::consensus","",45,[[["thresholdsignature",3]],["result",4]]],[11,"try_from","ic_types::consensus::certification","",65,[[["certification",3]],["result",4]]],[11,"try_from","ic_types::xnet","",303,[[["certifiedstreamslice",3]],["result",4]]],[11,"try_from","ic_types","",310,[[],["result",4]]],[11,"try_from","","",311,[[],["result",4]]],[11,"try_from","","",313,[[["numbytes",6]],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"from_str","ic_types::registry::connection_endpoint","",341,[[],["result",4]]],[11,"from_str","ic_types::crypto","",95,[[],["result",4]]],[11,"borrow","ic_types::consensus::hashed","",73,[[]]],[11,"source","ic_types::crypto","",98,[[],[["error",8],["option",4]]]],[11,"source","ic_types::registry::connection_endpoint","",267,[[],[["error",8],["option",4]]]],[11,"source","","",275,[[],[["error",8],["option",4]]]],[11,"source","ic_types::registry","",255,[[],[["error",8],["option",4]]]],[11,"source","","",262,[[],[["error",8],["option",4]]]],[11,"serialize","ic_types::artifact","",23,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","ic_types::batch","",32,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","","",34,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"serialize","ic_types::consensus::catchup","",60,[[],["result",4]]],[11,"serialize","","",327,[[],["result",4]]],[11,"serialize","","",61,[[],["result",4]]],[11,"serialize","","",62,[[],["result",4]]],[11,"serialize","ic_types::consensus::certification","",67,[[],["result",4]]],[11,"serialize","","",68,[[],["result",4]]],[11,"serialize","","",64,[[],["result",4]]],[11,"serialize","","",65,[[],["result",4]]],[11,"serialize","","",66,[[],["result",4]]],[11,"serialize","ic_types::consensus::dkg","",69,[[],["result",4]]],[11,"serialize","","",70,[[],["result",4]]],[11,"serialize","","",72,[[],["result",4]]],[11,"serialize","","",71,[[],["result",4]]],[11,"serialize","ic_types::consensus::hashed","",73,[[],["result",4]]],[11,"serialize","ic_types::consensus","",55,[[],["result",4]]],[11,"serialize","","",74,[[],["result",4]]],[11,"serialize","ic_types::consensus::thunk","",75,[[["serializer",8]],["result",4]]],[11,"serialize","ic_types::consensus","",44,[[],["result",4]]],[11,"serialize","","",45,[[],["result",4]]],[11,"serialize","","",46,[[],["result",4]]],[11,"serialize","","",47,[[],["result",4]]],[11,"serialize","","",48,[[],["result",4]]],[11,"serialize","","",49,[[],["result",4]]],[11,"serialize","","",50,[[],["result",4]]],[11,"serialize","","",51,[[],["result",4]]],[11,"serialize","","",52,[[],["result",4]]],[11,"serialize","","",53,[[],["result",4]]],[11,"serialize","","",54,[[],["result",4]]],[11,"serialize","","",56,[[],["result",4]]],[11,"serialize","","",57,[[],["result",4]]],[11,"serialize","","",58,[[],["result",4]]],[11,"serialize","ic_types::crypto::dkg","",115,[[],["result",4]]],[11,"serialize","","",123,[[],["result",4]]],[11,"serialize","","",124,[[],["result",4]]],[11,"serialize","","",125,[[],["result",4]]],[11,"serialize","","",330,[[],["result",4]]],[11,"serialize","","",117,[[],["result",4]]],[11,"serialize","","",118,[[],["result",4]]],[11,"serialize","","",119,[[],["result",4]]],[11,"serialize","","",120,[[],["result",4]]],[11,"serialize","","",121,[[],["result",4]]],[11,"serialize","","",122,[[],["result",4]]],[11,"serialize","ic_types::crypto::threshold_sig::ni_dkg::config::dealers","",142,[[],["result",4]]],[11,"serialize","ic_types::crypto::threshold_sig::ni_dkg::config::receivers","",151,[[],["result",4]]],[11,"serialize","ic_types::crypto::threshold_sig::ni_dkg::config","",152,[[],["result",4]]],[11,"serialize","","",141,[[],["result",4]]],[11,"serialize","","",153,[[],["result",4]]],[11,"serialize","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[],["result",4]]],[11,"serialize","ic_types::crypto::threshold_sig::ni_dkg","",138,[[],["result",4]]],[11,"serialize","","",139,[[],["result",4]]],[11,"serialize","","",166,[[["serializer",8]],["result",4]]],[11,"serialize","","",140,[[],["result",4]]],[11,"serialize","","",136,[[],["result",4]]],[11,"serialize","","",137,[[],["result",4]]],[11,"serialize","ic_types::crypto::threshold_sig","",167,[[],["result",4]]],[11,"serialize","ic_types::crypto","",82,[[["serializer",8]],["result",4]]],[11,"serialize","","",83,[[],["result",4]]],[11,"serialize","","",84,[[],["result",4]]],[11,"serialize","","",95,[[],["result",4]]],[11,"serialize","","",96,[[],["result",4]]],[11,"serialize","","",85,[[],["result",4]]],[11,"serialize","","",88,[[],["result",4]]],[11,"serialize","","",98,[[],["result",4]]],[11,"serialize","","",89,[[],["result",4]]],[11,"serialize","","",90,[[],["result",4]]],[11,"serialize","","",91,[[],["result",4]]],[11,"serialize","","",92,[[],["result",4]]],[11,"serialize","","",93,[[],["result",4]]],[11,"serialize","","",94,[[],["result",4]]],[11,"serialize","ic_types::filetree_sync","",169,[[],["result",4]]],[11,"serialize","","",171,[[],["result",4]]],[11,"serialize","","",170,[[],["result",4]]],[11,"serialize","ic_types::funds","",172,[[],["result",4]]],[11,"serialize","ic_types::funds::icp","",175,[[],["result",4]]],[11,"serialize","ic_types::funds","",178,[[],["result",4]]],[11,"serialize","ic_types::ingress","",187,[[],["result",4]]],[11,"serialize","","",192,[[],["result",4]]],[11,"serialize","ic_types::malicious_behaviour","",193,[[],["result",4]]],[11,"serialize","ic_types::malicious_flags","",194,[[],["result",4]]],[11,"serialize","ic_types::messages","",196,[[],["result",4]]],[11,"serialize","","",199,[[],["result",4]]],[11,"serialize","","",225,[[],["result",4]]],[11,"serialize","","",205,[[],["result",4]]],[11,"serialize","","",201,[[],["result",4]]],[11,"serialize","","",217,[[],["result",4]]],[11,"serialize","","",203,[[],["result",4]]],[11,"serialize","","",237,[[],["result",4]]],[11,"serialize","","",213,[[],["result",4]]],[11,"serialize","","",238,[[],["result",4]]],[11,"serialize","","",239,[[],["result",4]]],[11,"serialize","","",227,[[],["result",4]]],[11,"serialize","","",222,[[],["result",4]]],[11,"serialize","","",220,[[],["result",4]]],[11,"serialize","","",214,[[],["result",4]]],[11,"serialize","","",200,[[],["result",4]]],[11,"serialize","","",202,[[],["result",4]]],[11,"serialize","","",197,[[],["result",4]]],[11,"serialize","","",198,[[],["result",4]]],[11,"serialize","","",204,[[],["result",4]]],[11,"serialize","","",240,[[],["result",4]]],[11,"serialize","ic_types::artifact","",241,[[["serializer",8]],["result",4]]],[11,"serialize","ic_types::messages","",206,[[],["result",4]]],[11,"serialize","","",208,[[],["result",4]]],[11,"serialize","","",207,[[],["result",4]]],[11,"serialize","","",229,[[],["result",4]]],[11,"serialize","","",209,[[],["result",4]]],[11,"serialize","","",230,[[],["result",4]]],[11,"serialize","","",242,[[["serializer",8]],["result",4]]],[11,"serialize","","",231,[[],["result",4]]],[11,"serialize","","",243,[[],["result",4]]],[11,"serialize","","",212,[[],["result",4]]],[11,"serialize","","",233,[[],["result",4]]],[11,"serialize","","",236,[[],["result",4]]],[11,"serialize","","",247,[[],["result",4]]],[11,"serialize","ic_types::methods","",250,[[],["result",4]]],[11,"serialize","","",251,[[],["result",4]]],[11,"serialize","","",248,[[],["result",4]]],[11,"serialize","","",249,[[],["result",4]]],[11,"serialize","","",252,[[],["result",4]]],[11,"serialize","ic_types::nominal_cycles","",253,[[],["result",4]]],[11,"serialize","ic_types::p2p","",254,[[],["result",4]]],[11,"serialize","ic_types::registry::connection_endpoint","",341,[[],["result",4]]],[11,"serialize","","",267,[[],["result",4]]],[11,"serialize","","",272,[[],["result",4]]],[11,"serialize","ic_types::registry","",255,[[],["result",4]]],[11,"serialize","","",260,[[],["result",4]]],[11,"serialize","","",262,[[],["result",4]]],[11,"serialize","ic_types::replica_config","",283,[[],["result",4]]],[11,"serialize","ic_types::replica_version","",284,[[],["result",4]]],[11,"serialize","ic_types::state_sync","",285,[[],["result",4]]],[11,"serialize","","",286,[[],["result",4]]],[11,"serialize","","",287,[[],["result",4]]],[11,"serialize","ic_types::time","",288,[[],["result",4]]],[11,"serialize","ic_types::transport","",344,[[],["result",4]]],[11,"serialize","","",289,[[],["result",4]]],[11,"serialize","","",290,[[],["result",4]]],[11,"serialize","","",296,[[],["result",4]]],[11,"serialize","","",291,[[],["result",4]]],[11,"serialize","","",292,[[],["result",4]]],[11,"serialize","","",293,[[],["result",4]]],[11,"serialize","","",297,[[],["result",4]]],[11,"serialize","","",298,[[],["result",4]]],[11,"serialize","","",294,[[],["result",4]]],[11,"serialize","","",299,[[],["result",4]]],[11,"serialize","ic_types::xnet","",306,[[],["result",4]]],[11,"serialize","","",302,[[],["result",4]]],[11,"serialize","","",307,[[],["result",4]]],[11,"serialize","","",303,[[],["result",4]]],[11,"serialize","","",304,[[],["result",4]]],[11,"serialize","ic_types","",6,[[],["result",4]]],[11,"serialize","","",309,[[],["result",4]]],[11,"serialize","","",310,[[],["result",4]]],[11,"serialize","","",311,[[],["result",4]]],[11,"serialize","","",313,[[],["result",4]]],[11,"deserialize","ic_types::artifact","",23,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","","",30,[[],["result",4]]],[11,"deserialize","","",16,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","ic_types::batch","",32,[[],["result",4]]],[11,"deserialize","","",33,[[],["result",4]]],[11,"deserialize","","",34,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"deserialize","ic_types::consensus::catchup","",60,[[],["result",4]]],[11,"deserialize","","",327,[[],["result",4]]],[11,"deserialize","","",61,[[],["result",4]]],[11,"deserialize","","",62,[[],["result",4]]],[11,"deserialize","ic_types::consensus::certification","",67,[[],["result",4]]],[11,"deserialize","","",68,[[],["result",4]]],[11,"deserialize","","",64,[[],["result",4]]],[11,"deserialize","","",65,[[],["result",4]]],[11,"deserialize","","",66,[[],["result",4]]],[11,"deserialize","ic_types::consensus::dkg","",69,[[],["result",4]]],[11,"deserialize","","",70,[[],["result",4]]],[11,"deserialize","","",72,[[],["result",4]]],[11,"deserialize","","",71,[[],["result",4]]],[11,"deserialize","ic_types::consensus::hashed","",73,[[],["result",4]]],[11,"deserialize","ic_types::consensus","",55,[[],["result",4]]],[11,"deserialize","","",74,[[],["result",4]]],[11,"deserialize","ic_types::consensus::thunk","",75,[[["deserializer",8]],["result",4]]],[11,"deserialize","ic_types::consensus","",44,[[],["result",4]]],[11,"deserialize","","",45,[[],["result",4]]],[11,"deserialize","","",46,[[],["result",4]]],[11,"deserialize","","",47,[[],["result",4]]],[11,"deserialize","","",48,[[],["result",4]]],[11,"deserialize","","",49,[[],["result",4]]],[11,"deserialize","","",50,[[],["result",4]]],[11,"deserialize","","",51,[[],["result",4]]],[11,"deserialize","","",52,[[],["result",4]]],[11,"deserialize","","",53,[[],["result",4]]],[11,"deserialize","","",54,[[],["result",4]]],[11,"deserialize","","",56,[[],["result",4]]],[11,"deserialize","","",57,[[],["result",4]]],[11,"deserialize","","",58,[[],["result",4]]],[11,"deserialize","ic_types::crypto::dkg","",115,[[],["result",4]]],[11,"deserialize","","",123,[[],["result",4]]],[11,"deserialize","","",124,[[],["result",4]]],[11,"deserialize","","",125,[[],["result",4]]],[11,"deserialize","","",330,[[],["result",4]]],[11,"deserialize","","",117,[[],["result",4]]],[11,"deserialize","","",118,[[],["result",4]]],[11,"deserialize","","",119,[[],["result",4]]],[11,"deserialize","","",120,[[],["result",4]]],[11,"deserialize","","",121,[[],["result",4]]],[11,"deserialize","","",122,[[],["result",4]]],[11,"deserialize","ic_types::crypto::threshold_sig::ni_dkg::config::dealers","",142,[[],["result",4]]],[11,"deserialize","ic_types::crypto::threshold_sig::ni_dkg::config::receivers","",151,[[],["result",4]]],[11,"deserialize","ic_types::crypto::threshold_sig::ni_dkg::config","",152,[[],["result",4]]],[11,"deserialize","","",141,[[],["result",4]]],[11,"deserialize","","",153,[[],["result",4]]],[11,"deserialize","ic_types::crypto::threshold_sig::ni_dkg::id","",163,[[],["result",4]]],[11,"deserialize","ic_types::crypto::threshold_sig::ni_dkg","",138,[[],["result",4]]],[11,"deserialize","","",139,[[],["result",4]]],[11,"deserialize","","",166,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",140,[[],["result",4]]],[11,"deserialize","","",136,[[],["result",4]]],[11,"deserialize","","",137,[[],["result",4]]],[11,"deserialize","ic_types::crypto::threshold_sig","",167,[[],["result",4]]],[11,"deserialize","ic_types::crypto","",82,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",83,[[],["result",4]]],[11,"deserialize","","",84,[[],["result",4]]],[11,"deserialize","","",95,[[],["result",4]]],[11,"deserialize","","",96,[[],["result",4]]],[11,"deserialize","","",85,[[],["result",4]]],[11,"deserialize","","",88,[[],["result",4]]],[11,"deserialize","","",98,[[],["result",4]]],[11,"deserialize","","",89,[[],["result",4]]],[11,"deserialize","","",90,[[],["result",4]]],[11,"deserialize","","",91,[[],["result",4]]],[11,"deserialize","","",92,[[],["result",4]]],[11,"deserialize","","",93,[[],["result",4]]],[11,"deserialize","","",94,[[],["result",4]]],[11,"deserialize","ic_types::filetree_sync","",169,[[],["result",4]]],[11,"deserialize","","",171,[[],["result",4]]],[11,"deserialize","","",170,[[],["result",4]]],[11,"deserialize","ic_types::funds","",172,[[],["result",4]]],[11,"deserialize","ic_types::funds::icp","",175,[[],["result",4]]],[11,"deserialize","ic_types::funds","",178,[[],["result",4]]],[11,"deserialize","ic_types::ingress","",187,[[],["result",4]]],[11,"deserialize","","",192,[[],["result",4]]],[11,"deserialize","ic_types::malicious_behaviour","",193,[[],["result",4]]],[11,"deserialize","ic_types::malicious_flags","",194,[[],["result",4]]],[11,"deserialize","ic_types::messages","",196,[[],["result",4]]],[11,"deserialize","","",199,[[],["result",4]]],[11,"deserialize","","",225,[[],["result",4]]],[11,"deserialize","","",205,[[],["result",4]]],[11,"deserialize","","",201,[[],["result",4]]],[11,"deserialize","","",217,[[],["result",4]]],[11,"deserialize","","",203,[[],["result",4]]],[11,"deserialize","","",237,[[],["result",4]]],[11,"deserialize","","",213,[[],["result",4]]],[11,"deserialize","","",238,[[],["result",4]]],[11,"deserialize","","",239,[[],["result",4]]],[11,"deserialize","","",227,[[],["result",4]]],[11,"deserialize","","",222,[[],["result",4]]],[11,"deserialize","","",220,[[],["result",4]]],[11,"deserialize","","",214,[[],["result",4]]],[11,"deserialize","","",200,[[],["result",4]]],[11,"deserialize","","",202,[[],["result",4]]],[11,"deserialize","","",197,[[],["result",4]]],[11,"deserialize","","",198,[[],["result",4]]],[11,"deserialize","","",204,[[],["result",4]]],[11,"deserialize","","",240,[[],["result",4]]],[11,"deserialize","ic_types::artifact","",241,[[["deserializer",8]],["result",4]]],[11,"deserialize","ic_types::messages","",206,[[],["result",4]]],[11,"deserialize","","",208,[[],["result",4]]],[11,"deserialize","","",207,[[],["result",4]]],[11,"deserialize","","",229,[[],["result",4]]],[11,"deserialize","","",209,[[],["result",4]]],[11,"deserialize","","",230,[[],["result",4]]],[11,"deserialize","","",242,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",243,[[],["result",4]]],[11,"deserialize","","",244,[[],["result",4]]],[11,"deserialize","","",212,[[],["result",4]]],[11,"deserialize","","",233,[[],["result",4]]],[11,"deserialize","","",247,[[],["result",4]]],[11,"deserialize","ic_types::methods","",250,[[],["result",4]]],[11,"deserialize","","",251,[[],["result",4]]],[11,"deserialize","","",248,[[],["result",4]]],[11,"deserialize","","",249,[[],["result",4]]],[11,"deserialize","","",252,[[],["result",4]]],[11,"deserialize","ic_types::nominal_cycles","",253,[[],["result",4]]],[11,"deserialize","ic_types::p2p","",254,[[],["result",4]]],[11,"deserialize","ic_types::registry::connection_endpoint","",341,[[],["result",4]]],[11,"deserialize","ic_types::registry","",255,[[],["result",4]]],[11,"deserialize","","",260,[[],["result",4]]],[11,"deserialize","","",262,[[],["result",4]]],[11,"deserialize","ic_types::replica_config","",283,[[],["result",4]]],[11,"deserialize","ic_types::replica_version","",284,[[],["result",4]]],[11,"deserialize","ic_types::state_sync","",285,[[],["result",4]]],[11,"deserialize","","",286,[[],["result",4]]],[11,"deserialize","","",287,[[],["result",4]]],[11,"deserialize","ic_types::time","",288,[[],["result",4]]],[11,"deserialize","ic_types::transport","",344,[[],["result",4]]],[11,"deserialize","","",289,[[],["result",4]]],[11,"deserialize","","",290,[[],["result",4]]],[11,"deserialize","","",296,[[],["result",4]]],[11,"deserialize","","",291,[[],["result",4]]],[11,"deserialize","","",292,[[],["result",4]]],[11,"deserialize","","",293,[[],["result",4]]],[11,"deserialize","","",297,[[],["result",4]]],[11,"deserialize","","",298,[[],["result",4]]],[11,"deserialize","","",294,[[],["result",4]]],[11,"deserialize","","",299,[[],["result",4]]],[11,"deserialize","ic_types::xnet","",306,[[],["result",4]]],[11,"deserialize","","",302,[[],["result",4]]],[11,"deserialize","","",307,[[],["result",4]]],[11,"deserialize","","",303,[[],["result",4]]],[11,"deserialize","","",304,[[],["result",4]]],[11,"deserialize","ic_types","",6,[[],["result",4]]],[11,"deserialize","","",309,[[],["result",4]]],[11,"deserialize","","",310,[[],["result",4]]],[11,"deserialize","","",311,[[],["result",4]]],[11,"deserialize","","",313,[[],["result",4]]],[11,"_ty","ic_types::funds","",172,[[],["type",4]]],[11,"id","","",172,[[],["typeid",3]]],[11,"idl_serialize","","",172,[[],["result",4]]],[11,"iter","ic_types::artifact","",26,[[],["artifacttagiter",3]]],[11,"iter","","",27,[[],["priorityiter",3]]],[11,"iter","ic_types::crypto::threshold_sig::ni_dkg","",138,[[],["nidkgtagiter",3]]],[11,"iter","ic_types::crypto","",95,[[],["keypurposeiter",3]]],[11,"iter","","",96,[[],["algorithmiditer",3]]],[11,"ic_00","ic_types","Returns the id of the management canister",314,[[],["canisterid",3]]],[11,"get_ref","","",314,[[],["principalid",3]]],[11,"get","","",314,[[],["principalid",3]]],[11,"new","","",314,[[["principalid",3]],[["result",4],["canisteriderror",4],["canisterid",3]]]],[11,"from_u64","","",314,[[],["canisterid",3]]],[18,"MAX_LENGTH_IN_BYTES","","",316,null],[11,"as_slice","","",316,[[]]],[11,"to_vec","","",316,[[],["vec",3]]],[11,"into_vec","","",316,[[],["vec",3]]],[11,"new_user_test_id","","",316,[[],["principalid",3]]],[11,"new_node_test_id","","",316,[[],["principalid",3]]],[11,"new_subnet_test_id","","",316,[[],["principalid",3]]],[11,"new","","",316,[[],["principalid",3]]],[11,"new_self_authenticating","","",316,[[],["principalid",3]]],[11,"new_derived","","",316,[[["principalid",3]],["principalid",3]]],[11,"new_anonymous","","",316,[[],["principalid",3]]],[11,"authenticates_for_pubkey","","",316,[[]]],[11,"is_self_authenticating","","",316,[[]]],[11,"is_derived","","",316,[[["principalid",3]]]],[11,"is_anonymous","","",316,[[]]],[11,"threshold_for_subnet_of_size","ic_types::crypto::threshold_sig::ni_dkg","Returns the threshold (minimal number of nodes) required…",138,[[],["threshold",6]]],[11,"get_canister_id","ic_types::ic00","",334,[[],["canisterid",3]]],[11,"new","","",335,[[["option",4],["numbytestag",3],["vec",3],["principalid",3],["amountof",3],["canisterstatustype",4]],["canisterstatusresult",3]]],[11,"status","","",335,[[],["canisterstatustype",4]]],[11,"module_hash","","",335,[[],[["option",4],["vec",3]]]],[11,"controller","","",335,[[],["principalid",3]]],[11,"memory_size","","",335,[[],[["amountof",3],["numbytestag",3]]]],[11,"cycles","","",335,[[]]],[11,"new","","",336,[[["option",4],["numbytestag",3],["option",4],["vec",3],["principalid",3],["amountof",3],["canisterstatustype",4]],["canisterstatusresultv2",3]]],[11,"status","","",336,[[],["canisterstatustype",4]]],[11,"module_hash","","",336,[[],[["option",4],["vec",3]]]],[11,"controller","","",336,[[],["principalid",3]]],[11,"memory_size","","",336,[[],[["amountof",3],["numbytestag",3]]]],[11,"cycles","","",336,[[]]],[11,"freezing_threshold","","",336,[[]]],[11,"encode","","",180,[[],["vec",3]]],[11,"decode","","",180,[[],[["usererror",3],["createcanisterargs",3],["result",4]]]],[11,"encode","","",337,[[],["vec",3]]],[11,"decode","","",337,[[],[["error",4],["result",4]]]],[11,"new","","",181,[[["canisterinstallmode",4],["option",4],["vec",3],["canisterid",3]],["installcodeargs",3]]],[11,"get_canister_id","","",181,[[],["canisterid",3]]],[11,"new","","",184,[[["option",4]],["provisionalcreatecanisterwithcyclesargs",3]]],[11,"to_u64","","",184,[[],["option",4]]],[11,"new","","",338,[[["canisterid",3]],["provisionaltopupcanisterargs",3]]],[11,"to_u64","","",338,[[],["option",4]]],[11,"get_canister_id","","",338,[[],["canisterid",3]]],[11,"new","","",339,[[["principalid",3],["canisterid",3]],["setcontrollerargs",3]]],[11,"get_canister_id","","",339,[[],["canisterid",3]]],[11,"get_new_controller","","",339,[[],["principalid",3]]],[11,"new","","",340,[[["amountof",3],["id",3],["vec",3],["registryversiontag",3]],["setupinitialdkgargs",3]]],[11,"get_set_of_node_ids","","",340,[[],[["result",4],["btreeset",3],["usererror",3]]]],[11,"get_registry_version","","",340,[[],[["amountof",3],["registryversiontag",3]]]],[11,"encode","","",185,[[],["vec",3]]],[11,"decode","","",185,[[],[["result",4],["setupinitialdkgresponse",3],["usererror",3]]]],[11,"get_canister_id","","",186,[[],["canisterid",3]]],[11,"iter","ic_types::messages","",195,[[],[["iter",3],["canisterinstallmode",4]]]],[11,"new","ic_types::user_error","",345,[[["errorcode",4]],["usererror",3]]],[11,"code","","",345,[[],["errorcode",4]]],[11,"description","","",345,[[]]],[11,"reject_code","","",345,[[],["rejectcode",4]]]],"p":[[4,"CanisterIdBlobParseError"],[4,"CanisterIdError"],[4,"CanisterStatusType"],[4,"PrincipalIdBlobParseError"],[4,"PrincipalIdParseError"],[13,"Wrong"],[3,"IDkgId"],[3,"InvalidQueryAllocationError"],[3,"InvalidMemoryAllocationError"],[3,"InstallCodeContext"],[4,"InstallCodeContextError"],[3,"ArtifactFilter"],[3,"Advert"],[3,"ConsensusMessageId"],[3,"ConsensusMessageFilter"],[3,"IngressMessageId"],[3,"CertificationMessageId"],[3,"CertificationMessageFilter"],[3,"DkgMessageAttribute"],[3,"StateSyncArtifactId"],[3,"StateSyncMessage"],[3,"StateSyncAttribute"],[3,"StateSyncFilter"],[4,"Artifact"],[4,"ArtifactAttribute"],[4,"ArtifactId"],[4,"ArtifactTag"],[4,"Priority"],[4,"CertificationMessageAttribute"],[8,"ArtifactKind"],[3,"IngressMessageAttribute"],[3,"Batch"],[3,"ValidationContext"],[3,"BatchPayload"],[3,"XNetPayload"],[4,"IngressPayloadError"],[4,"InvalidIngressPayload"],[3,"IngressPayload"],[3,"ArtifactChunk"],[4,"ArtifactErrorCode"],[4,"ArtifactChunkData"],[4,"SingleChunked"],[8,"ChunkableArtifact"],[8,"Chunkable"],[3,"BasicSignature"],[3,"ThresholdSignature"],[3,"ThresholdSignatureShare"],[3,"MultiSignature"],[3,"MultiSignatureShare"],[3,"Rank"],[3,"Block"],[3,"NotarizationContent"],[3,"FinalizationContent"],[3,"RandomBeaconContent"],[3,"RandomTapeContent"],[4,"BlockPayload"],[4,"ConsensusMessage"],[4,"ConsensusMessageHash"],[4,"ConsensusMessageAttribute"],[4,"Committee"],[3,"CatchUpContentT"],[3,"CatchUpContentProtobufBytes"],[3,"CUPWithOriginalProtobuf"],[6,"CatchUpContent"],[3,"CertificationContent"],[3,"Certification"],[3,"CertificationShare"],[4,"CertificationMessage"],[4,"CertificationMessageHash"],[3,"DealingContent"],[3,"Summary"],[3,"Dealings"],[4,"Payload"],[3,"Hashed"],[3,"Payload"],[3,"Thunk"],[8,"HasHeight"],[8,"HasBlockHash"],[8,"HasRank"],[8,"HasCommittee"],[8,"HasVersion"],[8,"ContentEq"],[3,"KeyId"],[3,"CryptoHash"],[3,"Signed"],[3,"UserPublicKey"],[3,"NodePublicKey"],[3,"IcpPublicKey"],[3,"CommitteeMemberPublicKey"],[3,"BasicSig"],[3,"IndividualMultiSig"],[3,"CombinedMultiSig"],[3,"ThresholdSigShare"],[3,"CombinedThresholdSig"],[3,"CanisterSig"],[4,"KeyPurpose"],[4,"AlgorithmId"],[4,"PublicKey"],[4,"CryptoError"],[13,"InvalidArgument"],[13,"PublicKeyNotFound"],[13,"TlsCertNotFound"],[13,"SecretKeyNotFound"],[13,"TlsSecretKeyNotFound"],[13,"MalformedSecretKey"],[13,"MalformedPublicKey"],[13,"MalformedSignature"],[13,"MalformedPop"],[13,"SignatureVerification"],[13,"PopVerification"],[13,"InconsistentAlgorithms"],[13,"AlgorithmNotSupported"],[13,"ThresholdSigDataNotFound"],[13,"DkgTranscriptNotFound"],[13,"RootSubnetPublicKeyNotFound"],[3,"Config"],[3,"DkgConfigData"],[3,"Dealing"],[3,"Transcript"],[3,"TranscriptBytes"],[3,"Response"],[3,"EncryptionPublicKeyWithPop"],[3,"EncryptionPublicKeyPop"],[3,"DkgConfig"],[3,"Dealers"],[3,"Receivers"],[3,"InvalidArgumentError"],[3,"MalformedPublicKeyError"],[3,"MalformedDataError"],[3,"KeyNotFoundError"],[4,"ThresholdSigPublicKeyBytesConversionError"],[13,"Malformed"],[4,"ThresholdSigDataNotFoundError"],[13,"ThresholdSigDataNotFound"],[4,"ThresholdSignError"],[13,"SecretKeyNotFound"],[3,"NiDkgDealing"],[3,"NiDkgTranscript"],[4,"NiDkgTag"],[4,"NiDkgTargetSubnet"],[4,"DkgId"],[3,"NiDkgConfigData"],[3,"NiDkgDealers"],[4,"NiDkgConfigValidationError"],[13,"TooManyReceivers"],[13,"TooManyDealers"],[13,"InsufficientThreshold"],[13,"InsufficientDealers"],[13,"InsufficientReceivers"],[13,"DealersNotInResharingCommittee"],[13,"InsufficientDealersForResharingThreshold"],[3,"NiDkgReceivers"],[3,"NiDkgConfig"],[3,"NiDkgThreshold"],[3,"NotADealerError"],[3,"FsEncryptionPublicKeyNotInRegistryError"],[3,"MalformedFsEncryptionPublicKeyError"],[4,"DkgCreateDealingError"],[4,"DkgCreateTranscriptError"],[4,"DkgKeyRemovalError"],[4,"DkgLoadTranscriptError"],[4,"TranscriptsToRetainValidationError"],[4,"DkgVerifyDealingError"],[3,"NiDkgId"],[4,"NiDkgIdFromProtoError"],[3,"TranscriptsToRetain"],[3,"NiDkgTargetId"],[3,"ThresholdSigPublicKey"],[8,"SignedBytesWithoutDomainSeparator"],[3,"FileTreeSyncArtifact"],[3,"FileTreeSyncChunksTracker"],[4,"UnderConstructionState"],[3,"Cycles"],[4,"ICPError"],[13,"OutOfICP"],[3,"ICP"],[3,"Tap"],[3,"Sink"],[3,"Funds"],[3,"CanisterSettingsArgs"],[3,"CreateCanisterArgs"],[3,"InstallCodeArgs"],[4,"Method"],[8,"Payload"],[3,"ProvisionalCreateCanisterWithCyclesArgs"],[3,"SetupInitialDKGResponse"],[3,"UpdateSettingsArgs"],[4,"IngressStatus"],[13,"Received"],[13,"Completed"],[13,"Failed"],[13,"Processing"],[4,"WasmResult"],[3,"MaliciousBehaviour"],[3,"MaliciousFlags"],[4,"CanisterInstallMode"],[3,"Blob"],[3,"Certificate"],[3,"CertificateDelegation"],[3,"HttpCanisterUpdate"],[3,"HttpQueryResponseReply"],[3,"HttpReadState"],[3,"HttpReadStateResponse"],[3,"HttpRequestEnvelope"],[3,"HttpStatusResponse"],[3,"HttpUserQuery"],[3,"Ingress"],[3,"RejectContext"],[3,"Request"],[3,"Response"],[3,"UserQuery"],[3,"ReadState"],[3,"UserSignature"],[4,"Authentication"],[4,"HttpQueryResponse"],[13,"Replied"],[13,"Rejected"],[4,"HttpReadContent"],[13,"Query"],[13,"ReadState"],[4,"HttpReply"],[13,"CodeCall"],[4,"HttpResponseStatus"],[13,"Replied"],[13,"Rejected"],[4,"HttpSubmitContent"],[13,"Call"],[4,"RawHttpRequestVal"],[4,"ReadContent"],[4,"Payload"],[4,"RequestOrResponse"],[4,"MessageIdError"],[13,"InvalidLength"],[4,"StopCanisterContext"],[13,"Ingress"],[13,"Canister"],[4,"HttpHandlerError"],[3,"HttpRequest"],[3,"Delegation"],[3,"SignedDelegation"],[3,"SignedIngressContent"],[3,"SignedIngress"],[3,"MessageId"],[3,"WebAuthnSignature"],[3,"WebAuthnEnvelope"],[8,"HasCanisterId"],[8,"HttpRequestContent"],[3,"SignedRequestBytes"],[3,"WasmClosure"],[3,"Callback"],[4,"WasmMethod"],[4,"SystemMethod"],[4,"FuncRef"],[3,"NominalCycles"],[3,"GossipAdvert"],[4,"RegistryError"],[13,"VersionTooOld"],[13,"VersionTooNew"],[13,"DuplicateKey"],[13,"ValidationError"],[4,"RegistryDataProviderError"],[13,"Transfer"],[4,"RegistryClientError"],[13,"VersionNotAvailable"],[13,"DataProviderQueryFailed"],[13,"PollLockFailed"],[4,"Protocol"],[4,"ConnectionEndpointTryFromProtoError"],[13,"InvalidScheme"],[13,"InvalidPort"],[13,"InvalidIpAddr"],[13,"InvalidUrl"],[4,"ConnectionEndpointTryFromStringError"],[13,"InvalidUrl"],[13,"InvalidScheme"],[4,"ConnectionEndpointTryFromError"],[13,"InvalidScheme"],[13,"MissingHost"],[13,"HostIsNotIpAddr"],[13,"MissingPort"],[13,"InvalidPort"],[13,"InvalidIpAddr"],[13,"InvalidUrl"],[3,"ReplicaConfig"],[3,"ReplicaVersion"],[3,"FileInfo"],[3,"ChunkInfo"],[3,"Manifest"],[3,"Time"],[3,"TransportPayload"],[3,"Bytes"],[3,"FlowId"],[3,"TransportConfig"],[3,"TransportFlowConfig"],[3,"TransportFlowInfo"],[4,"TransportNotification"],[4,"TransportClientType"],[4,"TransportStateChange"],[4,"TransportError"],[4,"TransportErrorCode"],[4,"ErrorCode"],[4,"RejectCode"],[3,"StreamHeader"],[3,"CertifiedStreamSlice"],[3,"QueueId"],[8,"StreamSliceTesting"],[3,"StreamIndexedQueue"],[3,"StreamSlice"],[8,"CountBytes"],[3,"AccumulatedPriority"],[3,"QueryAllocation"],[3,"ComputeAllocation"],[3,"InvalidComputeAllocationError"],[3,"MemoryAllocation"],[3,"CanisterId"],[3,"NodeTag"],[3,"PrincipalId"],[3,"UserTag"],[3,"HeightTag"],[3,"NumInstructionsTag"],[3,"QueueIndexTag"],[3,"RandomnessTag"],[3,"ExecutionRoundTag"],[4,"CanonicalPartialStateTag"],[4,"CanonicalStateTag"],[3,"ArtifactTagIter"],[3,"PriorityIter"],[3,"CatchUpPackageParam"],[3,"KeyPurposeIter"],[3,"AlgorithmIdIter"],[3,"EncryptionPublicKey"],[3,"NiDkgTagIter"],[3,"NiDkgThresholdZeroError"],[3,"InvalidNiDkgTargetIdSizeError"],[3,"CanisterIdRecord"],[3,"CanisterStatusResult"],[3,"CanisterStatusResultV2"],[3,"EmptyBlob"],[3,"ProvisionalTopUpCanisterArgs"],[3,"SetControllerArgs"],[3,"SetupInitialDKGArgs"],[3,"ConnectionEndpoint"],[3,"DefaultVersionAlreadySetError"],[3,"ReplicaVersionParseError"],[3,"FlowTagType"],[3,"UserError"],[3,"StreamIndexTag"],[3,"SessionTag"],[6,"Message"],[6,"HashedBlock"],[6,"BasicSigOf"],[6,"IndividualMultiSigOf"],[6,"CombinedMultiSigOf"],[6,"BlockProposal"],[6,"CatchUpShareContent"],[6,"FileTreeSyncAttribute"],[6,"FileTreeSyncId"],[6,"DkgMessageId"],[6,"CatchUpPackage"],[6,"Notarization"],[6,"Finalization"],[6,"RandomBeacon"],[6,"RandomTape"],[6,"RandomBeaconShare"],[6,"NotarizationShare"],[6,"FinalizationShare"],[6,"RandomTapeShare"],[6,"CatchUpPackageShare"]]},\
"ic_utils":{"doc":"This package provides various utility types and function…","i":[[0,"byte_slice_fmt","ic_utils","",null,null],[5,"truncate_and_format","ic_utils::byte_slice_fmt","Formats the first `max_bytes_to_format` bytes of a byte…",null,[[],["string",3]]],[0,"command","ic_utils","Functions related to spawning processes and executing…",null,null],[5,"is_file_on_path","ic_utils::command","Tests whether `file` exists in any of the directories…",null,[[]]],[5,"find_file_on_path","","Finds the `file` in the directories listed in the `PATH`…",null,[[],[["option",4],["pathbuf",3]]]],[0,"fs","ic_utils","",null,null],[5,"write_atomically_using_tmp_file","ic_utils::fs","Atomically writes to `dst` file, using `tmp` as a buffer.",null,[[],["result",6]]],[5,"copy_file_sparse","","Copies only valid regions of file preserving the…",null,[[["path",3]],["result",6]]],[5,"write_atomically","","Atomically write to `dst` file, using a random file in the…",null,[[],["result",6]]],[0,"ic_features","ic_utils","",null,null],[0,"cow_state_feature","ic_utils::ic_features","",null,null],[3,"Flags","ic_utils::ic_features::cow_state_feature","",null,null],[5,"enable","","",null,[[["flags",3]]]],[5,"disable","","",null,[[["flags",3]]]],[5,"is_enabled","","",null,[[["flags",3]]]],[5,"flags","","",null,[[],["flags",3]]],[17,"cow_state","","",null,null],[18,"cow_state","","",0,null],[11,"empty","","Returns an empty set of flags",0,[[],["flags",3]]],[11,"all","","Returns the set containing all flags.",0,[[],["flags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",0,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",0,[[],[["flags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",0,[[],["flags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",0,[[],["flags",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",0,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",0,[[["flags",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",0,[[["flags",3]]]],[11,"insert","","Inserts the specified flags in-place.",0,[[["flags",3]]]],[11,"remove","","Removes the specified flags in-place.",0,[[["flags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",0,[[["flags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",0,[[["flags",3]]]],[0,"sandboxed_execution_feature","ic_utils::ic_features","",null,null],[3,"Flags","ic_utils::ic_features::sandboxed_execution_feature","",null,null],[5,"enable","","",null,[[["flags",3]]]],[5,"disable","","",null,[[["flags",3]]]],[5,"is_enabled","","",null,[[["flags",3]]]],[5,"flags","","",null,[[],["flags",3]]],[17,"sandboxed_execution","","",null,null],[18,"sandboxed_execution","","",1,null],[11,"empty","","Returns an empty set of flags",1,[[],["flags",3]]],[11,"all","","Returns the set containing all flags.",1,[[],["flags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",1,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",1,[[],[["flags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",1,[[],["flags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",1,[[],["flags",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",1,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",1,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",1,[[["flags",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",1,[[["flags",3]]]],[11,"insert","","Inserts the specified flags in-place.",1,[[["flags",3]]]],[11,"remove","","Removes the specified flags in-place.",1,[[["flags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",1,[[["flags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",1,[[["flags",3]]]],[0,"rle","ic_utils","This module provides utilities to display byte slices…",null,null],[3,"DebugBlob","ic_utils::rle","A wrapper of a byte slice that displays it as a string…",null,null],[12,"0","","",2,null],[5,"display","","Displays a byte slice using RLE.",null,[[],["string",3]]],[0,"thread","ic_utils","",null,null],[3,"JoinOnDrop","ic_utils::thread","An object that joins a thread when it\'s dropped. Mostly…",null,null],[11,"new","","",3,[[["joinhandle",3]]]],[11,"join","","Explicitly joins the thread.",3,[[],["result",6]]],[11,"from","ic_utils::ic_features::cow_state_feature","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","ic_utils::ic_features::sandboxed_execution_feature","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","ic_utils::rle","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","ic_utils::thread","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"extend","ic_utils::ic_features::cow_state_feature","",0,[[["intoiterator",8]]]],[11,"extend","ic_utils::ic_features::sandboxed_execution_feature","",1,[[["intoiterator",8]]]],[11,"clone","ic_utils::ic_features::cow_state_feature","",0,[[],["flags",3]]],[11,"clone","ic_utils::ic_features::sandboxed_execution_feature","",1,[[],["flags",3]]],[11,"cmp","ic_utils::ic_features::cow_state_feature","",0,[[["flags",3]],["ordering",4]]],[11,"cmp","ic_utils::ic_features::sandboxed_execution_feature","",1,[[["flags",3]],["ordering",4]]],[11,"eq","ic_utils::ic_features::cow_state_feature","",0,[[["flags",3]]]],[11,"ne","","",0,[[["flags",3]]]],[11,"eq","ic_utils::ic_features::sandboxed_execution_feature","",1,[[["flags",3]]]],[11,"ne","","",1,[[["flags",3]]]],[11,"eq","ic_utils::rle","",2,[[["debugblob",3]]]],[11,"ne","","",2,[[["debugblob",3]]]],[11,"partial_cmp","ic_utils::ic_features::cow_state_feature","",0,[[["flags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["flags",3]]]],[11,"le","","",0,[[["flags",3]]]],[11,"gt","","",0,[[["flags",3]]]],[11,"ge","","",0,[[["flags",3]]]],[11,"partial_cmp","ic_utils::ic_features::sandboxed_execution_feature","",1,[[["flags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["flags",3]]]],[11,"le","","",1,[[["flags",3]]]],[11,"gt","","",1,[[["flags",3]]]],[11,"ge","","",1,[[["flags",3]]]],[11,"fmt","ic_utils::ic_features::cow_state_feature","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_utils::ic_features::sandboxed_execution_feature","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_utils::rle","",2,[[["formatter",3]],["result",6]]],[11,"sub","ic_utils::ic_features::cow_state_feature","Returns the set difference of the two sets of flags.",0,[[["flags",3]],["flags",3]]],[11,"sub","ic_utils::ic_features::sandboxed_execution_feature","Returns the set difference of the two sets of flags.",1,[[["flags",3]],["flags",3]]],[11,"sub_assign","ic_utils::ic_features::cow_state_feature","Disables all flags enabled in the set.",0,[[["flags",3]]]],[11,"sub_assign","ic_utils::ic_features::sandboxed_execution_feature","Disables all flags enabled in the set.",1,[[["flags",3]]]],[11,"not","ic_utils::ic_features::cow_state_feature","Returns the complement of this set of flags.",0,[[],["flags",3]]],[11,"not","ic_utils::ic_features::sandboxed_execution_feature","Returns the complement of this set of flags.",1,[[],["flags",3]]],[11,"bitand","ic_utils::ic_features::cow_state_feature","Returns the intersection between the two sets of flags.",0,[[["flags",3]],["flags",3]]],[11,"bitand","ic_utils::ic_features::sandboxed_execution_feature","Returns the intersection between the two sets of flags.",1,[[["flags",3]],["flags",3]]],[11,"bitor","ic_utils::ic_features::cow_state_feature","Returns the union of the two sets of flags.",0,[[["flags",3]],["flags",3]]],[11,"bitor","ic_utils::ic_features::sandboxed_execution_feature","Returns the union of the two sets of flags.",1,[[["flags",3]],["flags",3]]],[11,"bitxor","ic_utils::ic_features::cow_state_feature","Returns the left flags, but with all the right flags…",0,[[["flags",3]],["flags",3]]],[11,"bitxor","ic_utils::ic_features::sandboxed_execution_feature","Returns the left flags, but with all the right flags…",1,[[["flags",3]],["flags",3]]],[11,"bitand_assign","ic_utils::ic_features::cow_state_feature","Disables all flags disabled in the set.",0,[[["flags",3]]]],[11,"bitand_assign","ic_utils::ic_features::sandboxed_execution_feature","Disables all flags disabled in the set.",1,[[["flags",3]]]],[11,"bitor_assign","ic_utils::ic_features::cow_state_feature","Adds the set of flags.",0,[[["flags",3]]]],[11,"bitor_assign","ic_utils::ic_features::sandboxed_execution_feature","Adds the set of flags.",1,[[["flags",3]]]],[11,"bitxor_assign","ic_utils::ic_features::cow_state_feature","Toggles the set of flags.",0,[[["flags",3]]]],[11,"bitxor_assign","ic_utils::ic_features::sandboxed_execution_feature","Toggles the set of flags.",1,[[["flags",3]]]],[11,"hash","ic_utils::ic_features::cow_state_feature","",0,[[]]],[11,"hash","ic_utils::ic_features::sandboxed_execution_feature","",1,[[]]],[11,"from_iter","ic_utils::ic_features::cow_state_feature","",0,[[["intoiterator",8]],["flags",3]]],[11,"from_iter","ic_utils::ic_features::sandboxed_execution_feature","",1,[[["intoiterator",8]],["flags",3]]],[11,"fmt","ic_utils::ic_features::cow_state_feature","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_utils::ic_features::sandboxed_execution_feature","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_utils::ic_features::cow_state_feature","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_utils::ic_features::sandboxed_execution_feature","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_utils::ic_features::cow_state_feature","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_utils::ic_features::sandboxed_execution_feature","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ic_utils::ic_features::cow_state_feature","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ic_utils::ic_features::sandboxed_execution_feature","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"Flags"],[3,"Flags"],[3,"DebugBlob"],[3,"JoinOnDrop"]]},\
"ic_validator":{"doc":"A crate for validating an HttpRequest.","i":[[4,"AuthenticationError","ic_validator","Error in verifying the signature or authentication part of…",null,null],[13,"InvalidBasicSignature","","",0,null],[13,"InvalidCanisterSignature","","",0,null],[13,"InvalidPublicKey","","",0,null],[13,"WebAuthnError","","",0,null],[13,"DelegationTargetError","","",0,null],[4,"CanisterIdSet","","An enum representing a set of canister IDs.",null,null],[13,"All","","The entire domain of canister IDs.",1,null],[13,"Some","","A subet of canister IDs.",1,null],[4,"RequestValidationError","","Error in validating an [HttpRequest].",null,null],[13,"InvalidIngressExpiry","","",2,null],[13,"InvalidDelegationExpiry","","",2,null],[13,"UserIdDoesNotMatchPublicKey","","",2,null],[13,"InvalidSignature","","",2,null],[13,"InvalidDelegation","","",2,null],[13,"MissingSignature","","",2,null],[13,"AnonymousSignatureNotAllowed","","",2,null],[13,"CanisterNotInDelegationTargets","","",2,null],[5,"get_authorized_canisters","","Returns the set of canisters that the request is…",null,[[["registryversion",6],["httprequest",3],["time",3],["ingresssigverifier",8]],[["requestvalidationerror",4],["result",4],["canisteridset",4]]]],[5,"validate_request","","Validates the `request` and that the sender is authorized…",null,[[["registryversion",6],["httprequest",3],["time",3],["ingresssigverifier",8]],[["requestvalidationerror",4],["result",4]]]],[11,"contains","","",1,[[["canisterid",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"equivalent","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"eq","","",1,[[["canisteridset",4]]]],[11,"ne","","",1,[[["canisteridset",4]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[4,"AuthenticationError"],[4,"CanisterIdSet"],[4,"RequestValidationError"]]},\
"ic_wasm_types":{"doc":"A crate containing types useful for working with Wasm…","i":[[3,"ParityWasmError","ic_wasm_types","Represents an error that can happen when parsing a Wasm…",null,null],[3,"BinaryEncodedWasm","","A newtype for BinaryEncoded Wasm modules.",null,null],[4,"WasmInstrumentationError","","Different errors that can be returned by `instrument`",null,null],[13,"ParityDeserializeError","","Failure in party_wasm when deserializing the wasm module",0,null],[13,"ParitySerializeError","","Failure in party_wasm when serializing the wasm module",0,null],[13,"IncorrectNumberMemorySections","","Incorrect number of memory sections",0,null],[12,"expected","ic_wasm_types::WasmInstrumentationError","",1,null],[12,"got","","",1,null],[4,"WasmValidationError","ic_wasm_types","Different errors that be returned by `validate_wasm_binary`",null,null],[13,"ParityDeserializeError","","Failure in party_wasm when deserializing the wasm module.  ",2,null],[13,"WasmtimeValidation","","wasmtime::Module::validate() failed",2,null],[13,"InvalidFunctionSignature","","Module contains an invalid function signature",2,null],[13,"InvalidImportSection","","Module contains an invalid import section",2,null],[13,"InvalidExportSection","","Module contains an invalid export section",2,null],[13,"InvalidDataSection","","Module contains an invalid data section",2,null],[13,"LucetCompilerErr","","Failure when trying to compile in Lucet",2,null],[13,"TooManyGlobals","","Module contains too many globals.",2,null],[12,"defined","ic_wasm_types::WasmValidationError","",3,null],[12,"allowed","","",3,null],[13,"TooManyFunctions","ic_wasm_types","Module contains too many functions.",2,null],[12,"defined","ic_wasm_types::WasmValidationError","",4,null],[12,"allowed","","",4,null],[11,"new","ic_wasm_types","Creates a new `ParityWasmError` out of an error message.",5,[[["string",3]]]],[11,"new","","",6,[[["vec",3]]]],[11,"new_from_file","","",6,[[["pathbuf",3]],["result",6]]],[11,"file","","",6,[[],[["path",3],["option",4]]]],[11,"as_slice","","",6,[[]]],[11,"len","","",6,[[]]],[11,"is_empty","","",6,[[]]],[11,"hash_sha256","","Returns the Sha256 hash of this Wasm module.",6,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"clone","","",5,[[],["paritywasmerror",3]]],[11,"clone","","",2,[[],["wasmvalidationerror",4]]],[11,"clone","","",0,[[],["wasminstrumentationerror",4]]],[11,"clone","","",6,[[],["binaryencodedwasm",3]]],[11,"eq","","",5,[[["paritywasmerror",3]]]],[11,"ne","","",5,[[["paritywasmerror",3]]]],[11,"eq","","",2,[[["wasmvalidationerror",4]]]],[11,"ne","","",2,[[["wasmvalidationerror",4]]]],[11,"eq","","",0,[[["wasminstrumentationerror",4]]]],[11,"ne","","",0,[[["wasminstrumentationerror",4]]]],[11,"eq","","",6,[[]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"hash","","",6,[[]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[4,"WasmInstrumentationError"],[13,"IncorrectNumberMemorySections"],[4,"WasmValidationError"],[13,"TooManyGlobals"],[13,"TooManyFunctions"],[3,"ParityWasmError"],[3,"BinaryEncodedWasm"]]},\
"ic_wasm_utils":{"doc":"","i":[[0,"instrumentation","ic_wasm_utils","This module is responsible for instrumenting wasm binaries…",null,null],[3,"InstructionCostTable","ic_wasm_utils::instrumentation","The metering can be configured by providing a…",null,null],[3,"Segments","","Vector of heap data chunks with their offsets.",null,null],[3,"InstrumentationOutput","","",null,null],[12,"exports","","A set of all exports.",0,null],[12,"limits","","Memory limits (min, max).",0,null],[12,"data","","Data segements.",0,null],[12,"binary","","Instrumented Wasm binary.",0,null],[5,"instrument","","Takes a Wasm binary and inserts the instructions metering…",null,[[["instructioncosttable",3],["binaryencodedwasm",3]],[["instrumentationoutput",3],["wasminstrumentationerror",4],["result",4]]]],[11,"new","","",1,[[]]],[11,"with_default_cost","","",1,[[]]],[11,"with_instruction_cost","","",1,[[["string",3]]]],[11,"as_slice","","",2,[[]]],[11,"as_pages","","",2,[[],["vec",3]]],[0,"validation","ic_wasm_utils","This module is responsible for validating the wasm…",null,null],[3,"WasmValidationLimits","ic_wasm_utils::validation","Controls how many globals and functions are allowed in a…",null,null],[12,"max_globals","","Maximum number of globals allowed in a module.",3,null],[12,"max_functions","","Maximum number of functions allowed in a module.",3,null],[5,"validate_wasm_binary","","Validates a Wasm binary against the requirements of the…",null,[[["wasmvalidationlimits",3],["binaryencodedwasm",3]],[["result",4],["wasmvalidationerror",4]]]],[11,"from","ic_wasm_utils::instrumentation","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","ic_wasm_utils::validation","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","ic_wasm_utils::instrumentation","",2,[[["vec",3]]]],[11,"default","","",1,[[]]],[11,"default","ic_wasm_utils::validation","",3,[[]]]],"p":[[3,"InstrumentationOutput"],[3,"InstructionCostTable"],[3,"Segments"],[3,"WasmValidationLimits"]]},\
"identity_canister":{"doc":"","i":[[5,"main","identity_canister","",null,[[]]]],"p":[]},\
"instrument_wasm":{"doc":"","i":[[5,"usage","instrument_wasm","",null,[[]]],[5,"instrument_wasm","","",null,[[],["result",6]]],[5,"main","","",null,[[]]]],"p":[]},\
"ledger_archive_node_canister":{"doc":"","i":[[3,"ARCHIVE_STATE","ledger_archive_node_canister","",null,null],[12,"__private_field","","",0,null],[3,"ArchiveNodeState","","",null,null],[12,"max_memory_size_bytes","","",1,null],[12,"block_height_offset","","",1,null],[12,"blocks","","",1,null],[12,"total_block_size","","",1,null],[12,"ledger_canister_id","","",1,null],[12,"last_upgrade_timestamp","","",1,null],[5,"print","","",null,[[["asref",8]]]],[5,"append_blocks","","",null,[[["vec",3],["encodedblock",3]]]],[5,"remaining_capacity","","",null,[[]]],[5,"init","","",null,[[["canisterid",3],["option",4]]]],[5,"get_block","","Get Block by BlockHeight. If the BlockHeight is outside…",null,[[["blockheight",6]],["blockres",3]]],[5,"get_block_","","",null,[[]]],[5,"main","","",null,[[]]],[5,"remaining_capacity_","","",null,[[]]],[5,"append_blocks_","","",null,[[]]],[5,"iter_blocks_","","Get multiple blocks by offset into the container (not…",null,[[]]],[5,"get_blocks_","","Get multiple Blocks by BlockHeight and length. If the…",null,[[]]],[5,"post_upgrade","","",null,[[]]],[5,"pre_upgrade","","",null,[[]]],[5,"encode_metrics","","",null,[[["metricsencoder",3]],["result",6]]],[5,"http_request","","",null,[[]]],[17,"DEFAULT_MAX_MEMORY_SIZE","","",null,null],[11,"new","","",1,[[["canisterid",3],["option",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["result",4],["error",3],["ok",3]]]],[11,"vzip","","",1,[[]]],[11,"deref","","",0,[[],["rwlock",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"serialize","","",1,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"initialize","","",0,[[]]]],"p":[[3,"ARCHIVE_STATE"],[3,"ArchiveNodeState"]]},\
"ledger_canister":{"doc":"","i":[[3,"HashOf","ledger_canister","",null,null],[3,"EncodedBlock","","",null,null],[12,"0","","",0,null],[3,"Memo","","",null,null],[12,"0","","",1,null],[3,"Balances","","Describes the state of users accounts at the tip of the…",null,null],[12,"store","","",2,null],[12,"icpt_pool","","",2,null],[3,"Transaction","","A transfer with the metadata the client generated attached…",null,null],[12,"transfer","","",3,null],[12,"memo","","",3,null],[12,"created_at_time","","The time this transaction was created.",3,null],[3,"Block","","A transaction with the metadata the canister generated…",null,null],[12,"parent_hash","","",4,null],[12,"transaction","","",4,null],[12,"timestamp","","Nanoseconds since the Unix epoch.",4,null],[3,"Blockchain","","Stores a chain of transactions with their metadata",null,null],[12,"blocks","","",5,null],[12,"last_hash","","",5,null],[12,"last_timestamp","","The timestamp of the most recent block. Must be…",5,null],[12,"archive","","",5,null],[12,"num_archived_blocks","","How many blocks have been sent to the archive",5,null],[3,"Ledger","","",null,null],[12,"balances","","",6,null],[12,"blockchain","","",6,null],[12,"minting_account_id","","",6,null],[12,"blocks_notified","","",6,null],[12,"transaction_window","","How long transactions are remembered to detect duplicates.",6,null],[3,"LEDGER","","",null,null],[3,"MAX_MESSAGE_SIZE_BYTES","","",null,null],[3,"LedgerCanisterInitPayload","","",null,null],[12,"minting_account","","",7,null],[12,"initial_values","","",7,null],[12,"max_message_size_bytes","","",7,null],[12,"transaction_window","","",7,null],[12,"archive_options","","",7,null],[12,"send_whitelist","","",7,null],[3,"SendArgs","","Argument taken by the send endpoint",null,null],[12,"memo","","",8,null],[12,"amount","","",8,null],[12,"fee","","",8,null],[12,"from_subaccount","","",8,null],[12,"to","","",8,null],[12,"created_at_time","","",8,null],[3,"TransactionNotification","","Struct sent by the ledger canister when it notifies a…",null,null],[12,"from","","",9,null],[12,"from_subaccount","","",9,null],[12,"to","","",9,null],[12,"to_subaccount","","",9,null],[12,"block_height","","",9,null],[12,"amount","","",9,null],[12,"memo","","",9,null],[3,"NotifyCanisterArgs","","Argument taken by the notification endpoint",null,null],[12,"block_height","","",10,null],[12,"max_fee","","",10,null],[12,"from_subaccount","","",10,null],[12,"to_canister","","",10,null],[12,"to_subaccount","","",10,null],[3,"AccountBalanceArgs","","Argument taken by the account_balance endpoint",null,null],[12,"account","","",11,null],[3,"TotalSupplyArgs","","Argument taken by the total_supply endpoint",null,null],[3,"TipOfChainRes","","Argument returned by the tip_of_chain endpoint",null,null],[12,"certification","","",12,null],[12,"tip_index","","",12,null],[3,"GetBlocksArgs","","",null,null],[12,"start","","",13,null],[12,"length","","",13,null],[3,"GetBlocksRes","","",null,null],[12,"0","","",14,null],[3,"IterBlocksArgs","","",null,null],[12,"start","","",15,null],[12,"length","","",15,null],[3,"IterBlocksRes","","",null,null],[12,"0","","",16,null],[3,"BlockArg","","",null,null],[12,"0","","",17,null],[3,"BlockRes","","",null,null],[12,"0","","",18,null],[4,"Transfer","","An operation which modifies account balances",null,null],[13,"Burn","","",19,null],[12,"from","ledger_canister::Transfer","",20,null],[12,"amount","","",20,null],[13,"Mint","ledger_canister","",19,null],[12,"to","ledger_canister::Transfer","",21,null],[12,"amount","","",21,null],[13,"Send","ledger_canister","",19,null],[12,"from","ledger_canister::Transfer","",22,null],[12,"to","","",22,null],[12,"amount","","",22,null],[12,"fee","","",22,null],[4,"CyclesResponse","ledger_canister","",null,null],[13,"CanisterCreated","","",23,null],[13,"ToppedUp","","",23,null],[13,"Refunded","","",23,null],[5,"print","","",null,[[["asref",8]]]],[5,"split_off_front","","Similar to Vec::split_off. Splits the Vec into two at the…",null,[[["vec",3]],[["vec",3],["encodedblock",3]]]],[5,"add_payment","","",null,[[["transfer",4],["timestamp",3],["memo",3],["option",4]]]],[5,"change_notification_state","","",null,[[["blockheight",6],["timestamp",3]],[["result",4],["string",3]]]],[5,"get_chain_prefix","","Pop blocks off the start of the vector `blocks` as long as…",null,[[["vecdeque",3]],[["vec",3],["encodedblock",3]]]],[5,"get_blocks","","",null,[[["blockheight",6]],["getblocksres",3]]],[5,"iter_blocks","","",null,[[],["iterblocksres",3]]],[5,"recover_from_failed_archive","","",null,[[["encodedblock",3],["vecdeque",3],["vec",3]]]],[0,"account_identifier","","",null,null],[3,"AccountIdentifier","ledger_canister::account_identifier","While this is backed by an array of length 28, it\'s…",null,null],[12,"hash","","",24,null],[3,"Subaccount","","Subaccounts are arbitrary 32-byte values.",null,null],[12,"0","","",25,null],[7,"SUB_ACCOUNT_ZERO","","",null,null],[11,"new","","",24,[[["option",4],["subaccount",3],["principalid",3]],["accountidentifier",3]]],[11,"from_hex","","",24,[[],[["string",3],["accountidentifier",3],["result",4]]]],[11,"from_slice","","Goes from the canonical format (with checksum) encoded in…",24,[[],[["string",3],["accountidentifier",3],["result",4]]]],[11,"to_hex","","",24,[[],["string",3]]],[11,"to_vec","","",24,[[],["vec",3]]],[11,"generate_checksum","","",24,[[]]],[11,"to_vec","","",25,[[],["vec",3]]],[0,"http_request","ledger_canister","",null,null],[5,"serve_metrics","ledger_canister::http_request","",null,[[]]],[0,"icpts","ledger_canister","",null,null],[3,"ICPTs","ledger_canister::icpts","",null,null],[17,"DECIMAL_PLACES","","",null,null],[17,"ICP_SUBDIVIDABLE_BY","","How many times can ICPs be divided",null,null],[17,"TRANSACTION_FEE","","This is 1/10,000th of an ICP, this is probably more than…",null,null],[17,"MIN_BURN_AMOUNT","","",null,null],[18,"MAX","","The maximum value of this construct is 2^64-1 E8s or…",26,null],[11,"new","","Construct a new instance of ICPTs. This function will not…",26,[[],[["result",4],["string",3]]]],[18,"ZERO","","",26,null],[11,"from_icpts","","`# use ledger_canister::ICPTs; let icpt =…",26,[[],[["result",4],["string",3]]]],[11,"from_e8s","","Construct ICPTs from E8s, 10E8 E8s == 1 ICP `# use…",26,[[]]],[11,"get_icpts","","Gets the total number of whole ICPTs `# use…",26,[[]]],[11,"get_e8s","","Gets the total number of E8s `# use…",26,[[]]],[11,"get_remainder_e8s","","Gets the total number of E8s not part of a whole ICPT The…",26,[[]]],[11,"unpack","","This returns the number of ICPTs and E8s `# use…",26,[[]]],[0,"metrics_encoder","ledger_canister","",null,null],[3,"MetricsEncoder","ledger_canister::metrics_encoder","`MetricsEncoder` provides methods to encode metrics in a…",null,null],[11,"new","","Constructs a new encoder dumping metrics with the given…",27,[[]]],[11,"into_inner","","Returns the internal buffer that was used to record the…",27,[[]]],[11,"encode_histogram","","Encodes the metadata and the value of a histogram.",27,[[],["result",6]]],[11,"encode_single_value","","",27,[[],["result",6]]],[11,"encode_counter","","Encodes the metadata and the value of a counter.",27,[[],["result",6]]],[11,"encode_gauge","","Encodes the metadata and the value of a gauge.",27,[[],["result",6]]],[0,"protobuf","ledger_canister","",null,null],[3,"LedgerInit","ledger_canister::protobuf","Initialise the ledger canister",null,null],[12,"minting_account","","",28,null],[12,"initial_values","","",28,null],[12,"archive_canister","","",28,null],[12,"max_message_size_bytes","","",28,null],[3,"LedgerUpgrade","","The format of values serialized to/from the stable memory…",null,null],[3,"SendRequest","","Make a payment",null,null],[12,"memo","","",29,null],[12,"payment","","",29,null],[12,"max_fee","","",29,null],[12,"from_subaccount","","",29,null],[12,"to","","",29,null],[12,"created_at","","",29,null],[12,"created_at_time","","",29,null],[3,"SendResponse","","",null,null],[12,"resulting_height","","",30,null],[3,"NotifyRequest","","Notify a canister that it has recieved a payment",null,null],[12,"block_height","","",31,null],[12,"max_fee","","",31,null],[12,"from_subaccount","","",31,null],[12,"to_canister","","",31,null],[12,"to_subaccount","","",31,null],[3,"NotifyResponse","","",null,null],[3,"TransactionNotificationRequest","","",null,null],[12,"from","","",32,null],[12,"from_subaccount","","",32,null],[12,"to","","",32,null],[12,"to_subaccount","","",32,null],[12,"block_height","","",32,null],[12,"amount","","",32,null],[12,"memo","","",32,null],[3,"TransactionNotificationResponse","","",null,null],[12,"response","","",33,null],[3,"CyclesNotificationResponse","","",null,null],[12,"response","","",34,null],[3,"AccountBalanceRequest","","Get the balance of an account",null,null],[12,"account","","",35,null],[3,"AccountBalanceResponse","","",null,null],[12,"balance","","",36,null],[3,"TipOfChainRequest","","Get the length of the chain with a certification",null,null],[3,"TipOfChainResponse","","",null,null],[12,"certification","","",37,null],[12,"chain_length","","",37,null],[3,"TotalSupplyRequest","","How many ICPTs are there not in the minting account",null,null],[3,"TotalSupplyResponse","","",null,null],[12,"total_supply","","",38,null],[3,"LedgerArchiveRequest","","Archive any blocks older than this",null,null],[12,"timestamp","","",39,null],[3,"BlockRequest","","Get a single block",null,null],[12,"block_height","","",40,null],[3,"EncodedBlock","","",null,null],[12,"block","","",41,null],[3,"BlockResponse","","",null,null],[12,"block_content","","",42,null],[3,"GetBlocksRequest","","Get a set of blocks",null,null],[12,"start","","",43,null],[12,"length","","",43,null],[3,"Refund","","",null,null],[12,"refund","","",44,null],[12,"error","","",44,null],[3,"ToppedUp","","",null,null],[3,"EncodedBlocks","","",null,null],[12,"blocks","","",45,null],[3,"GetBlocksResponse","","",null,null],[12,"get_blocks_content","","",46,null],[3,"IterBlocksRequest","","Iterate through blocks",null,null],[12,"start","","",47,null],[12,"length","","",47,null],[3,"IterBlocksResponse","","",null,null],[12,"blocks","","",48,null],[3,"ArchiveIndexEntry","","",null,null],[12,"height_from","","",49,null],[12,"height_to","","",49,null],[12,"canister_id","","",49,null],[3,"ArchiveIndexResponse","","",null,null],[12,"entries","","",50,null],[3,"ArchiveInit","","",null,null],[12,"node_max_memory_size_bytes","","",51,null],[12,"max_message_size_bytes","","",51,null],[3,"ArchiveAddRequest","","Add blocks to the archive canister",null,null],[12,"blocks","","",52,null],[3,"ArchiveAddResponse","","",null,null],[3,"GetNodesRequest","","Fetch a list of all of the archive nodes",null,null],[3,"GetNodesResponse","","",null,null],[12,"nodes","","",53,null],[3,"IcpTs","","** BASIC TYPES **",null,null],[12,"e8s","","",54,null],[3,"Payment","","",null,null],[12,"receiver_gets","","",55,null],[3,"BlockHeight","","",null,null],[12,"height","","",56,null],[3,"Block","","This is the",null,null],[12,"parent_hash","","",57,null],[12,"timestamp","","",57,null],[12,"transaction","","",57,null],[3,"Hash","","",null,null],[12,"hash","","",58,null],[3,"Account","","",null,null],[12,"identifier","","",59,null],[12,"balance","","",59,null],[3,"Transaction","","",null,null],[12,"memo","","",60,null],[12,"created_at","","obsolete",60,null],[12,"created_at_time","","",60,null],[12,"transfer","","",60,null],[3,"Send","","",null,null],[12,"from","","",61,null],[12,"to","","",61,null],[12,"amount","","",61,null],[12,"max_fee","","",61,null],[3,"Mint","","",null,null],[12,"to","","",62,null],[12,"amount","","",62,null],[3,"Burn","","",null,null],[12,"from","","",63,null],[12,"amount","","",63,null],[3,"AccountIdentifier","","",null,null],[12,"hash","","",64,null],[3,"Subaccount","","",null,null],[12,"sub_account","","",65,null],[3,"Memo","","",null,null],[12,"memo","","",66,null],[3,"TimeStamp","","",null,null],[12,"timestamp_nanos","","",67,null],[3,"Certification","","",null,null],[12,"certification","","",68,null],[0,"cycles_notification_response","","Nested message and enum types in…",null,null],[4,"Response","ledger_canister::protobuf::cycles_notification_response","",null,null],[13,"CreatedCanisterId","","",69,null],[13,"Refund","","",69,null],[13,"ToppedUp","","",69,null],[11,"encode","","",69,[[]]],[11,"merge","","",69,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",69,[[]]],[0,"block_response","ledger_canister::protobuf","Nested message and enum types in `BlockResponse`.",null,null],[4,"BlockContent","ledger_canister::protobuf::block_response","",null,null],[13,"Block","","",70,null],[13,"CanisterId","","",70,null],[11,"encode","","",70,[[]]],[11,"merge","","",70,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",70,[[]]],[0,"get_blocks_response","ledger_canister::protobuf","Nested message and enum types in `GetBlocksResponse`.",null,null],[4,"GetBlocksContent","ledger_canister::protobuf::get_blocks_response","",null,null],[13,"Blocks","","",71,null],[13,"Error","","",71,null],[11,"encode","","",71,[[]]],[11,"merge","","",71,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",71,[[]]],[0,"transaction","ledger_canister::protobuf","Nested message and enum types in `Transaction`.",null,null],[4,"Transfer","ledger_canister::protobuf::transaction","",null,null],[13,"Burn","","",72,null],[13,"Mint","","",72,null],[13,"Send","","",72,null],[11,"encode","","",72,[[]]],[11,"merge","","",72,[[["option",4],["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",72,[[]]],[0,"timestamp","ledger_canister","",null,null],[11,"new","ledger_canister::protobuf","",67,[[]]],[11,"from_nanos_since_unix_epoch","","",67,[[]]],[11,"as_nanos_since_unix_epoch","","",67,[[]]],[0,"validate_endpoints","ledger_canister","",null,null],[0,"archive","","",null,null],[3,"ArchiveOptions","ledger_canister::archive","",null,null],[12,"trigger_threshold","","The number of blocks which, when exceeded, will trigger an…",73,null],[12,"num_blocks_to_archive","","The number of blocks to archive when trigger threshold is…",73,null],[12,"node_max_memory_size_bytes","","",73,null],[12,"max_message_size_bytes","","",73,null],[12,"controller_id","","",73,null],[3,"Archive","","",null,null],[12,"trigger_threshold","","The number of blocks which, when exceeded, will trigger an…",74,null],[12,"num_blocks_to_archive","","The number of blocks to archive when trigger threshold is…",74,null],[3,"FailedToArchiveBlocks","","This error type should only be returned in the case where…",null,null],[12,"0","","",75,null],[11,"new","","",73,[[["canisterid",3],["option",4]]]],[11,"new","","",74,[[["archiveoptions",3]]]],[11,"nodes","","",74,[[]]],[11,"archive_blocks","","",74,[[["encodedblock",3],["vecdeque",3]]]],[11,"index","","",74,[[],["vec",3]]],[0,"spawn","ledger_canister","",null,null],[5,"install_code","ledger_canister::spawn","",null,[[["vec",3],["intowire",8],["canisterid",3]]]],[5,"create_canister","","",null,[[]]],[6,"BlockHeight","ledger_canister","Position of a block in the chain. The first block has…",null,null],[6,"Certification","","",null,null],[6,"LedgerBalances","","",null,null],[17,"HASH_LENGTH","","",null,null],[8,"BalancesStore","","",null,null],[10,"get_balance","","",76,[[["accountidentifier",3]],[["option",4],["icpts",3]]]],[10,"update","","",76,[[["accountidentifier",3]]]],[11,"into_bytes","","",77,[[]]],[11,"new","","",77,[[]]],[11,"hash","","",0,[[],["hashof",3]]],[11,"decode","","",0,[[],[["block",3],["result",4],["string",3]]]],[11,"size_bytes","","",0,[[]]],[11,"new","","",2,[[]]],[11,"add_payment","","",2,[[["transfer",4]]]],[11,"debit","","",2,[[["icpts",3],["accountidentifier",3]]]],[11,"credit","","",2,[[["icpts",3],["accountidentifier",3]]]],[11,"account_balance","","",2,[[["accountidentifier",3]],["icpts",3]]],[11,"total_supply","","Returns the total quantity of ICPs that are \\\"in existence\\\"…",2,[[],["icpts",3]]],[11,"new","","",3,[[["accountidentifier",3],["icpts",3],["timestamp",3],["memo",3]]]],[11,"hash","","",3,[[],["hashof",3]]],[11,"new","","",4,[[["transfer",4],["option",4],["hashof",3],["memo",3],["timestamp",3]],[["result",4],["string",3]]]],[11,"new_from_transaction","","",4,[[["transaction",3],["option",4],["hashof",3],["timestamp",3]]]],[11,"encode","","",4,[[],[["result",4],["encodedblock",3],["string",3]]]],[11,"parent_hash","","",4,[[],[["option",4],["hashof",3]]]],[11,"transaction","","",4,[[],[["cow",4],["transaction",3]]]],[11,"timestamp","","",4,[[],["timestamp",3]]],[11,"add_block","","",5,[[["block",3]],[["blockheight",6],["result",4],["string",3]]]],[11,"add_block_with_encoded","","",5,[[["encodedblock",3],["block",3]],[["blockheight",6],["result",4],["string",3]]]],[11,"get","","",5,[[["blockheight",6]],[["encodedblock",3],["option",4]]]],[11,"last","","",5,[[],[["encodedblock",3],["option",4]]]],[11,"num_archived_blocks","","",5,[[]]],[11,"add_num_archived_blocks","","This is used when we try to archive a chunk",5,[[]]],[11,"sub_num_archived_blocks","","This is used when we fail to archive a chunk",5,[[]]],[11,"num_unarchived_blocks","","",5,[[]]],[11,"chain_length","","",5,[[],["blockheight",6]]],[11,"add_payment","","This creates a block and adds it to the ledger",6,[[["transfer",4],["timestamp",3],["memo",3],["option",4]],[["result",4],["string",3]]]],[11,"add_block","","This adds a pre created block to the ledger. This should…",6,[[["block",3]],[["blockheight",6],["result",4],["string",3]]]],[11,"from_init","","",6,[[["option",4],["hashmap",3],["timestamp",3],["duration",3],["canisterid",3],["accountidentifier",3],["hashset",3],["icpts",3]]]],[11,"change_notification_state","","",6,[[["blockheight",6],["timestamp",3]],[["result",4],["string",3]]]],[11,"find_block_in_archive","","",6,[[],[["option",4],["canisterid",3]]]],[11,"split_off_blocks_to_archive","","",6,[[],[["encodedblock",3],["vecdeque",3]]]],[11,"archive_blocks","","",6,[[],["option",4]]],[11,"can_send","","",6,[[["principalid",3]]]],[11,"transactions_by_hash_len","","",6,[[]]],[11,"transactions_by_height_len","","",6,[[]]],[11,"new","","",7,[[["option",4],["hashmap",3],["archiveoptions",3],["option",4],["duration",3],["canisterid",3],["accountidentifier",3],["hashset",3],["icpts",3],["option",4]]]],[11,"new_from_send","","Construct a `notify` call to notify a canister about the…",10,[[["subaccount",3],["sendargs",3],["blockheight",6],["option",4],["canisterid",3]],[["result",4],["string",3]]]],[11,"new","","",11,[[["accountidentifier",3]]]],[11,"new","","",13,[[["blockheight",6]]]],[11,"new","","",15,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"to_string","","",77,[[],["string",3]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from_proto","","",77,[[],[["result",4],["string",3]]]],[11,"to_proto","","",77,[[]]],[11,"erased_serialize","","",77,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",77,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from_proto","","",3,[[],[["result",4],["string",3]]]],[11,"to_proto","","",3,[[]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from_proto","","",4,[[],[["result",4],["string",3]]]],[11,"to_proto","","",4,[[]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"erased_serialize","","",5,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",6,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"erased_serialize","","",7,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from_proto","","",8,[[],[["result",4],["string",3]]]],[11,"to_proto","","",8,[[]]],[11,"erased_serialize","","",8,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from_proto","","",9,[[],[["result",4],["string",3]]]],[11,"to_proto","","",9,[[]]],[11,"erased_serialize","","",9,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from_proto","","",10,[[],[["result",4],["string",3]]]],[11,"to_proto","","",10,[[]]],[11,"erased_serialize","","",10,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from_proto","","",11,[[],[["result",4],["string",3]]]],[11,"to_proto","","",11,[[]]],[11,"erased_serialize","","",11,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",11,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from_proto","","",80,[[],[["result",4],["string",3]]]],[11,"to_proto","","",80,[[]]],[11,"erased_serialize","","",80,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",80,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from_proto","","",12,[[],[["result",4],["string",3]]]],[11,"to_proto","","",12,[[]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from_proto","","",13,[[],[["result",4],["string",3]]]],[11,"to_proto","","",13,[[]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from_proto","","",14,[[],[["result",4],["string",3]]]],[11,"to_proto","","",14,[[]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from_proto","","",15,[[],[["result",4],["string",3]]]],[11,"to_proto","","",15,[[]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from_proto","","",16,[[],[["result",4],["string",3]]]],[11,"to_proto","","",16,[[]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from_proto","","",17,[[],[["result",4],["string",3]]]],[11,"to_proto","","",17,[[]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from_proto","","",18,[[],[["result",4],["string",3]]]],[11,"to_proto","","",18,[[]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"erased_serialize","","",19,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",19,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from_proto","","",23,[[],[["result",4],["string",3]]]],[11,"to_proto","","",23,[[]]],[11,"vzip","","",23,[[]]],[11,"from","ledger_canister::account_identifier","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from_proto","","",24,[[],[["result",4],["string",3]]]],[11,"to_proto","","",24,[[]]],[11,"erased_serialize","","",24,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from_proto","","",25,[[],[["result",4],["string",3]]]],[11,"to_proto","","",25,[[]]],[11,"erased_serialize","","",25,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",25,[[]]],[11,"from","ledger_canister::icpts","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from_proto","","",26,[[],[["result",4],["string",3]]]],[11,"to_proto","","",26,[[]]],[11,"erased_serialize","","",26,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",26,[[]]],[11,"from","ledger_canister::metrics_encoder","",27,[[]]],[11,"into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","ledger_canister::protobuf","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from_proto","","",28,[[],[["result",4],["string",3]]]],[11,"to_proto","","",28,[[]]],[11,"proxy_encode","","",28,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",28,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",28,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from_proto","","",81,[[],[["result",4],["string",3]]]],[11,"to_proto","","",81,[[]]],[11,"proxy_encode","","",81,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",81,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",81,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from_proto","","",29,[[],[["result",4],["string",3]]]],[11,"to_proto","","",29,[[]]],[11,"proxy_encode","","",29,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",29,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from_proto","","",30,[[],[["result",4],["string",3]]]],[11,"to_proto","","",30,[[]]],[11,"proxy_encode","","",30,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",30,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from_proto","","",31,[[],[["result",4],["string",3]]]],[11,"to_proto","","",31,[[]]],[11,"proxy_encode","","",31,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",31,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",31,[[]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from_proto","","",82,[[],[["result",4],["string",3]]]],[11,"to_proto","","",82,[[]]],[11,"proxy_encode","","",82,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",82,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",82,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from_proto","","",32,[[],[["result",4],["string",3]]]],[11,"to_proto","","",32,[[]]],[11,"proxy_encode","","",32,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",32,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from_proto","","",33,[[],[["result",4],["string",3]]]],[11,"to_proto","","",33,[[]]],[11,"proxy_encode","","",33,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",33,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from_proto","","",34,[[],[["result",4],["string",3]]]],[11,"to_proto","","",34,[[]]],[11,"proxy_encode","","",34,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",34,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from_proto","","",35,[[],[["result",4],["string",3]]]],[11,"to_proto","","",35,[[]]],[11,"proxy_encode","","",35,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",35,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from_proto","","",36,[[],[["result",4],["string",3]]]],[11,"to_proto","","",36,[[]]],[11,"proxy_encode","","",36,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",36,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",36,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from_proto","","",83,[[],[["result",4],["string",3]]]],[11,"to_proto","","",83,[[]]],[11,"proxy_encode","","",83,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",83,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",83,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from_proto","","",37,[[],[["result",4],["string",3]]]],[11,"to_proto","","",37,[[]]],[11,"proxy_encode","","",37,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",37,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",37,[[]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from_proto","","",84,[[],[["result",4],["string",3]]]],[11,"to_proto","","",84,[[]]],[11,"proxy_encode","","",84,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",84,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",84,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from_proto","","",38,[[],[["result",4],["string",3]]]],[11,"to_proto","","",38,[[]]],[11,"proxy_encode","","",38,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",38,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from_proto","","",39,[[],[["result",4],["string",3]]]],[11,"to_proto","","",39,[[]]],[11,"proxy_encode","","",39,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",39,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",39,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from_proto","","",40,[[],[["result",4],["string",3]]]],[11,"to_proto","","",40,[[]]],[11,"proxy_encode","","",40,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",40,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from_proto","","",41,[[],[["result",4],["string",3]]]],[11,"to_proto","","",41,[[]]],[11,"proxy_encode","","",41,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",41,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from_proto","","",42,[[],[["result",4],["string",3]]]],[11,"to_proto","","",42,[[]]],[11,"proxy_encode","","",42,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",42,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from_proto","","",43,[[],[["result",4],["string",3]]]],[11,"to_proto","","",43,[[]]],[11,"proxy_encode","","",43,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",43,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from_proto","","",44,[[],[["result",4],["string",3]]]],[11,"to_proto","","",44,[[]]],[11,"proxy_encode","","",44,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",44,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",44,[[]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from_proto","","",85,[[],[["result",4],["string",3]]]],[11,"to_proto","","",85,[[]]],[11,"proxy_encode","","",85,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",85,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",85,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from_proto","","",45,[[],[["result",4],["string",3]]]],[11,"to_proto","","",45,[[]]],[11,"proxy_encode","","",45,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",45,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from_proto","","",46,[[],[["result",4],["string",3]]]],[11,"to_proto","","",46,[[]]],[11,"proxy_encode","","",46,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",46,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from_proto","","",47,[[],[["result",4],["string",3]]]],[11,"to_proto","","",47,[[]]],[11,"proxy_encode","","",47,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",47,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from_proto","","",48,[[],[["result",4],["string",3]]]],[11,"to_proto","","",48,[[]]],[11,"proxy_encode","","",48,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",48,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from_proto","","",49,[[],[["result",4],["string",3]]]],[11,"to_proto","","",49,[[]]],[11,"proxy_encode","","",49,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",49,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from_proto","","",50,[[],[["result",4],["string",3]]]],[11,"to_proto","","",50,[[]]],[11,"proxy_encode","","",50,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",50,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from_proto","","",51,[[],[["result",4],["string",3]]]],[11,"to_proto","","",51,[[]]],[11,"proxy_encode","","",51,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",51,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from_proto","","",52,[[],[["result",4],["string",3]]]],[11,"to_proto","","",52,[[]]],[11,"proxy_encode","","",52,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",52,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",52,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from_proto","","",86,[[],[["result",4],["string",3]]]],[11,"to_proto","","",86,[[]]],[11,"proxy_encode","","",86,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",86,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",86,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from_proto","","",87,[[],[["result",4],["string",3]]]],[11,"to_proto","","",87,[[]]],[11,"proxy_encode","","",87,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",87,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",87,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from_proto","","",53,[[],[["result",4],["string",3]]]],[11,"to_proto","","",53,[[]]],[11,"proxy_encode","","",53,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",53,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from_proto","","",54,[[],[["result",4],["string",3]]]],[11,"to_proto","","",54,[[]]],[11,"proxy_encode","","",54,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",54,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from_proto","","",55,[[],[["result",4],["string",3]]]],[11,"to_proto","","",55,[[]]],[11,"proxy_encode","","",55,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",55,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from_proto","","",56,[[],[["result",4],["string",3]]]],[11,"to_proto","","",56,[[]]],[11,"proxy_encode","","",56,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",56,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from_proto","","",57,[[],[["result",4],["string",3]]]],[11,"to_proto","","",57,[[]]],[11,"proxy_encode","","",57,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",57,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from_proto","","",58,[[],[["result",4],["string",3]]]],[11,"to_proto","","",58,[[]]],[11,"proxy_encode","","",58,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",58,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from_proto","","",59,[[],[["result",4],["string",3]]]],[11,"to_proto","","",59,[[]]],[11,"proxy_encode","","",59,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",59,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from_proto","","",60,[[],[["result",4],["string",3]]]],[11,"to_proto","","",60,[[]]],[11,"proxy_encode","","",60,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",60,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",60,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from_proto","","",61,[[],[["result",4],["string",3]]]],[11,"to_proto","","",61,[[]]],[11,"proxy_encode","","",61,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",61,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",61,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from_proto","","",62,[[],[["result",4],["string",3]]]],[11,"to_proto","","",62,[[]]],[11,"proxy_encode","","",62,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",62,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",62,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from_proto","","",63,[[],[["result",4],["string",3]]]],[11,"to_proto","","",63,[[]]],[11,"proxy_encode","","",63,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",63,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",63,[[]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from_proto","","",64,[[],[["result",4],["string",3]]]],[11,"to_proto","","",64,[[]]],[11,"proxy_encode","","",64,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",64,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from_proto","","",65,[[],[["result",4],["string",3]]]],[11,"to_proto","","",65,[[]]],[11,"proxy_encode","","",65,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",65,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",65,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from_proto","","",66,[[],[["result",4],["string",3]]]],[11,"to_proto","","",66,[[]]],[11,"proxy_encode","","",66,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",66,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",66,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from_proto","","",67,[[],[["result",4],["string",3]]]],[11,"to_proto","","",67,[[]]],[11,"proxy_encode","","",67,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",67,[[],[["result",4],["proxydecodeerror",4]]]],[11,"erased_serialize","","",67,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",67,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from_proto","","",68,[[],[["result",4],["string",3]]]],[11,"to_proto","","",68,[[]]],[11,"proxy_encode","","",68,[[],[["result",4],["vec",3],["encodeerror",3]]]],[11,"proxy_decode","","",68,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",68,[[]]],[11,"from","ledger_canister::protobuf::cycles_notification_response","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"from","ledger_canister::protobuf::block_response","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"vzip","","",70,[[]]],[11,"from","ledger_canister::protobuf::get_blocks_response","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"from","ledger_canister::protobuf::transaction","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"vzip","","",72,[[]]],[11,"from","ledger_canister::archive","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"erased_serialize","","",73,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",73,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"erased_serialize","","",74,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",74,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"from","ledger_canister::account_identifier","",24,[[["principalid",3]]]],[11,"from","","",24,[[["canisterid",3]]]],[11,"from","","",25,[[["principalid",3]]]],[11,"from","","",25,[[["canisterid",3]]]],[11,"from","ledger_canister::protobuf","",67,[[["systemtime",3]]]],[11,"from","ledger_canister","",0,[[["box",3]]]],[11,"into","ledger_canister::account_identifier","",24,[[],["accountidentifier",3]]],[11,"into","","",25,[[],["vec",3]]],[11,"clone","","",24,[[],["accountidentifier",3]]],[11,"clone","","",25,[[],["subaccount",3]]],[11,"clone","ledger_canister::icpts","",26,[[],["icpts",3]]],[11,"clone","ledger_canister::protobuf","",28,[[],["ledgerinit",3]]],[11,"clone","","",81,[[],["ledgerupgrade",3]]],[11,"clone","","",29,[[],["sendrequest",3]]],[11,"clone","","",30,[[],["sendresponse",3]]],[11,"clone","","",31,[[],["notifyrequest",3]]],[11,"clone","","",82,[[],["notifyresponse",3]]],[11,"clone","","",32,[[],["transactionnotificationrequest",3]]],[11,"clone","","",33,[[],["transactionnotificationresponse",3]]],[11,"clone","","",34,[[],["cyclesnotificationresponse",3]]],[11,"clone","ledger_canister::protobuf::cycles_notification_response","",69,[[],["response",4]]],[11,"clone","ledger_canister::protobuf","",35,[[],["accountbalancerequest",3]]],[11,"clone","","",36,[[],["accountbalanceresponse",3]]],[11,"clone","","",83,[[],["tipofchainrequest",3]]],[11,"clone","","",37,[[],["tipofchainresponse",3]]],[11,"clone","","",84,[[],["totalsupplyrequest",3]]],[11,"clone","","",38,[[],["totalsupplyresponse",3]]],[11,"clone","","",39,[[],["ledgerarchiverequest",3]]],[11,"clone","","",40,[[],["blockrequest",3]]],[11,"clone","","",41,[[],["encodedblock",3]]],[11,"clone","","",42,[[],["blockresponse",3]]],[11,"clone","ledger_canister::protobuf::block_response","",70,[[],["blockcontent",4]]],[11,"clone","ledger_canister::protobuf","",43,[[],["getblocksrequest",3]]],[11,"clone","","",44,[[],["refund",3]]],[11,"clone","","",85,[[],["toppedup",3]]],[11,"clone","","",45,[[],["encodedblocks",3]]],[11,"clone","","",46,[[],["getblocksresponse",3]]],[11,"clone","ledger_canister::protobuf::get_blocks_response","",71,[[],["getblockscontent",4]]],[11,"clone","ledger_canister::protobuf","",47,[[],["iterblocksrequest",3]]],[11,"clone","","",48,[[],["iterblocksresponse",3]]],[11,"clone","","",49,[[],["archiveindexentry",3]]],[11,"clone","","",50,[[],["archiveindexresponse",3]]],[11,"clone","","",51,[[],["archiveinit",3]]],[11,"clone","","",52,[[],["archiveaddrequest",3]]],[11,"clone","","",86,[[],["archiveaddresponse",3]]],[11,"clone","","",87,[[],["getnodesrequest",3]]],[11,"clone","","",53,[[],["getnodesresponse",3]]],[11,"clone","","",54,[[],["icpts",3]]],[11,"clone","","",55,[[],["payment",3]]],[11,"clone","","",56,[[],["blockheight",3]]],[11,"clone","","",57,[[],["block",3]]],[11,"clone","","",58,[[],["hash",3]]],[11,"clone","","",59,[[],["account",3]]],[11,"clone","","",60,[[],["transaction",3]]],[11,"clone","ledger_canister::protobuf::transaction","",72,[[],["transfer",4]]],[11,"clone","ledger_canister::protobuf","",61,[[],["send",3]]],[11,"clone","","",62,[[],["mint",3]]],[11,"clone","","",63,[[],["burn",3]]],[11,"clone","","",64,[[],["accountidentifier",3]]],[11,"clone","","",65,[[],["subaccount",3]]],[11,"clone","","",66,[[],["memo",3]]],[11,"clone","","",67,[[],["timestamp",3]]],[11,"clone","","",68,[[],["certification",3]]],[11,"clone","ledger_canister::archive","",73,[[],["archiveoptions",3]]],[11,"clone","ledger_canister","",77,[[],["hashof",3]]],[11,"clone","","",0,[[],["encodedblock",3]]],[11,"clone","","",1,[[],["memo",3]]],[11,"clone","","",2,[[],["balances",3]]],[11,"clone","","",19,[[],["transfer",4]]],[11,"clone","","",3,[[],["transaction",3]]],[11,"clone","","",4,[[],["block",3]]],[11,"clone","","",7,[[],["ledgercanisterinitpayload",3]]],[11,"clone","","",8,[[],["sendargs",3]]],[11,"clone","","",9,[[],["transactionnotification",3]]],[11,"clone","","",10,[[],["notifycanisterargs",3]]],[11,"clone","","",11,[[],["accountbalanceargs",3]]],[11,"clone","","",80,[[],["totalsupplyargs",3]]],[11,"default","ledger_canister::icpts","",26,[[],["icpts",3]]],[11,"default","ledger_canister::protobuf","",28,[[]]],[11,"default","","",81,[[]]],[11,"default","","",29,[[]]],[11,"default","","",30,[[]]],[11,"default","","",31,[[]]],[11,"default","","",82,[[]]],[11,"default","","",32,[[]]],[11,"default","","",33,[[]]],[11,"default","","",34,[[]]],[11,"default","","",35,[[]]],[11,"default","","",36,[[]]],[11,"default","","",83,[[]]],[11,"default","","",37,[[]]],[11,"default","","",84,[[]]],[11,"default","","",38,[[]]],[11,"default","","",39,[[]]],[11,"default","","",40,[[]]],[11,"default","","",41,[[]]],[11,"default","","",42,[[]]],[11,"default","","",43,[[]]],[11,"default","","",44,[[]]],[11,"default","","",85,[[]]],[11,"default","","",45,[[]]],[11,"default","","",46,[[]]],[11,"default","","",47,[[]]],[11,"default","","",48,[[]]],[11,"default","","",49,[[]]],[11,"default","","",50,[[]]],[11,"default","","",51,[[]]],[11,"default","","",52,[[]]],[11,"default","","",86,[[]]],[11,"default","","",87,[[]]],[11,"default","","",53,[[]]],[11,"default","","",54,[[]]],[11,"default","","",55,[[]]],[11,"default","","",56,[[]]],[11,"default","","",57,[[]]],[11,"default","","",58,[[]]],[11,"default","","",59,[[]]],[11,"default","","",60,[[]]],[11,"default","","",61,[[]]],[11,"default","","",62,[[]]],[11,"default","","",63,[[]]],[11,"default","","",64,[[]]],[11,"default","","",65,[[]]],[11,"default","","",66,[[]]],[11,"default","","",67,[[]]],[11,"default","","",68,[[]]],[11,"default","ledger_canister","",1,[[],["memo",3]]],[11,"default","","",2,[[]]],[11,"default","","",5,[[]]],[11,"default","","",6,[[]]],[11,"cmp","ledger_canister::account_identifier","",24,[[["accountidentifier",3]],["ordering",4]]],[11,"cmp","ledger_canister::icpts","",26,[[["icpts",3]],["ordering",4]]],[11,"cmp","ledger_canister::protobuf","",67,[[["timestamp",3]],["ordering",4]]],[11,"cmp","ledger_canister","",77,[[["hashof",3]],["ordering",4]]],[11,"cmp","","",0,[[["encodedblock",3]],["ordering",4]]],[11,"cmp","","",1,[[["memo",3]],["ordering",4]]],[11,"cmp","","",19,[[["transfer",4]],["ordering",4]]],[11,"cmp","","",3,[[["transaction",3]],["ordering",4]]],[11,"eq","ledger_canister::account_identifier","",24,[[["accountidentifier",3]]]],[11,"ne","","",24,[[["accountidentifier",3]]]],[11,"eq","","",25,[[["subaccount",3]]]],[11,"ne","","",25,[[["subaccount",3]]]],[11,"eq","ledger_canister::icpts","",26,[[["icpts",3]]]],[11,"ne","","",26,[[["icpts",3]]]],[11,"eq","ledger_canister::protobuf","",28,[[["ledgerinit",3]]]],[11,"ne","","",28,[[["ledgerinit",3]]]],[11,"eq","","",81,[[["ledgerupgrade",3]]]],[11,"eq","","",29,[[["sendrequest",3]]]],[11,"ne","","",29,[[["sendrequest",3]]]],[11,"eq","","",30,[[["sendresponse",3]]]],[11,"ne","","",30,[[["sendresponse",3]]]],[11,"eq","","",31,[[["notifyrequest",3]]]],[11,"ne","","",31,[[["notifyrequest",3]]]],[11,"eq","","",82,[[["notifyresponse",3]]]],[11,"eq","","",32,[[["transactionnotificationrequest",3]]]],[11,"ne","","",32,[[["transactionnotificationrequest",3]]]],[11,"eq","","",33,[[["transactionnotificationresponse",3]]]],[11,"ne","","",33,[[["transactionnotificationresponse",3]]]],[11,"eq","","",34,[[["cyclesnotificationresponse",3]]]],[11,"ne","","",34,[[["cyclesnotificationresponse",3]]]],[11,"eq","ledger_canister::protobuf::cycles_notification_response","",69,[[["response",4]]]],[11,"ne","","",69,[[["response",4]]]],[11,"eq","ledger_canister::protobuf","",35,[[["accountbalancerequest",3]]]],[11,"ne","","",35,[[["accountbalancerequest",3]]]],[11,"eq","","",36,[[["accountbalanceresponse",3]]]],[11,"ne","","",36,[[["accountbalanceresponse",3]]]],[11,"eq","","",83,[[["tipofchainrequest",3]]]],[11,"eq","","",37,[[["tipofchainresponse",3]]]],[11,"ne","","",37,[[["tipofchainresponse",3]]]],[11,"eq","","",84,[[["totalsupplyrequest",3]]]],[11,"eq","","",38,[[["totalsupplyresponse",3]]]],[11,"ne","","",38,[[["totalsupplyresponse",3]]]],[11,"eq","","",39,[[["ledgerarchiverequest",3]]]],[11,"ne","","",39,[[["ledgerarchiverequest",3]]]],[11,"eq","","",40,[[["blockrequest",3]]]],[11,"ne","","",40,[[["blockrequest",3]]]],[11,"eq","","",41,[[["encodedblock",3]]]],[11,"ne","","",41,[[["encodedblock",3]]]],[11,"eq","","",42,[[["blockresponse",3]]]],[11,"ne","","",42,[[["blockresponse",3]]]],[11,"eq","ledger_canister::protobuf::block_response","",70,[[["blockcontent",4]]]],[11,"ne","","",70,[[["blockcontent",4]]]],[11,"eq","ledger_canister::protobuf","",43,[[["getblocksrequest",3]]]],[11,"ne","","",43,[[["getblocksrequest",3]]]],[11,"eq","","",44,[[["refund",3]]]],[11,"ne","","",44,[[["refund",3]]]],[11,"eq","","",85,[[["toppedup",3]]]],[11,"eq","","",45,[[["encodedblocks",3]]]],[11,"ne","","",45,[[["encodedblocks",3]]]],[11,"eq","","",46,[[["getblocksresponse",3]]]],[11,"ne","","",46,[[["getblocksresponse",3]]]],[11,"eq","ledger_canister::protobuf::get_blocks_response","",71,[[["getblockscontent",4]]]],[11,"ne","","",71,[[["getblockscontent",4]]]],[11,"eq","ledger_canister::protobuf","",47,[[["iterblocksrequest",3]]]],[11,"ne","","",47,[[["iterblocksrequest",3]]]],[11,"eq","","",48,[[["iterblocksresponse",3]]]],[11,"ne","","",48,[[["iterblocksresponse",3]]]],[11,"eq","","",49,[[["archiveindexentry",3]]]],[11,"ne","","",49,[[["archiveindexentry",3]]]],[11,"eq","","",50,[[["archiveindexresponse",3]]]],[11,"ne","","",50,[[["archiveindexresponse",3]]]],[11,"eq","","",51,[[["archiveinit",3]]]],[11,"ne","","",51,[[["archiveinit",3]]]],[11,"eq","","",52,[[["archiveaddrequest",3]]]],[11,"ne","","",52,[[["archiveaddrequest",3]]]],[11,"eq","","",86,[[["archiveaddresponse",3]]]],[11,"eq","","",87,[[["getnodesrequest",3]]]],[11,"eq","","",53,[[["getnodesresponse",3]]]],[11,"ne","","",53,[[["getnodesresponse",3]]]],[11,"eq","","",54,[[["icpts",3]]]],[11,"ne","","",54,[[["icpts",3]]]],[11,"eq","","",55,[[["payment",3]]]],[11,"ne","","",55,[[["payment",3]]]],[11,"eq","","",56,[[["blockheight",3]]]],[11,"ne","","",56,[[["blockheight",3]]]],[11,"eq","","",57,[[["block",3]]]],[11,"ne","","",57,[[["block",3]]]],[11,"eq","","",58,[[["hash",3]]]],[11,"ne","","",58,[[["hash",3]]]],[11,"eq","","",59,[[["account",3]]]],[11,"ne","","",59,[[["account",3]]]],[11,"eq","","",60,[[["transaction",3]]]],[11,"ne","","",60,[[["transaction",3]]]],[11,"eq","ledger_canister::protobuf::transaction","",72,[[["transfer",4]]]],[11,"ne","","",72,[[["transfer",4]]]],[11,"eq","ledger_canister::protobuf","",61,[[["send",3]]]],[11,"ne","","",61,[[["send",3]]]],[11,"eq","","",62,[[["mint",3]]]],[11,"ne","","",62,[[["mint",3]]]],[11,"eq","","",63,[[["burn",3]]]],[11,"ne","","",63,[[["burn",3]]]],[11,"eq","","",64,[[["accountidentifier",3]]]],[11,"ne","","",64,[[["accountidentifier",3]]]],[11,"eq","","",65,[[["subaccount",3]]]],[11,"ne","","",65,[[["subaccount",3]]]],[11,"eq","","",66,[[["memo",3]]]],[11,"ne","","",66,[[["memo",3]]]],[11,"eq","","",67,[[["timestamp",3]]]],[11,"ne","","",67,[[["timestamp",3]]]],[11,"eq","","",68,[[["certification",3]]]],[11,"ne","","",68,[[["certification",3]]]],[11,"eq","ledger_canister::archive","",73,[[["archiveoptions",3]]]],[11,"ne","","",73,[[["archiveoptions",3]]]],[11,"eq","ledger_canister","",77,[[["hashof",3]]]],[11,"ne","","",77,[[["hashof",3]]]],[11,"eq","","",0,[[["encodedblock",3]]]],[11,"ne","","",0,[[["encodedblock",3]]]],[11,"eq","","",1,[[["memo",3]]]],[11,"ne","","",1,[[["memo",3]]]],[11,"eq","","",2,[[["balances",3]]]],[11,"ne","","",2,[[["balances",3]]]],[11,"eq","","",19,[[["transfer",4]]]],[11,"ne","","",19,[[["transfer",4]]]],[11,"eq","","",3,[[["transaction",3]]]],[11,"ne","","",3,[[["transaction",3]]]],[11,"eq","","",4,[[["block",3]]]],[11,"ne","","",4,[[["block",3]]]],[11,"eq","","",7,[[["ledgercanisterinitpayload",3]]]],[11,"ne","","",7,[[["ledgercanisterinitpayload",3]]]],[11,"eq","","",8,[[["sendargs",3]]]],[11,"ne","","",8,[[["sendargs",3]]]],[11,"eq","","",9,[[["transactionnotification",3]]]],[11,"ne","","",9,[[["transactionnotification",3]]]],[11,"eq","","",10,[[["notifycanisterargs",3]]]],[11,"ne","","",10,[[["notifycanisterargs",3]]]],[11,"eq","","",11,[[["accountbalanceargs",3]]]],[11,"ne","","",11,[[["accountbalanceargs",3]]]],[11,"eq","","",80,[[["totalsupplyargs",3]]]],[11,"partial_cmp","ledger_canister::account_identifier","",24,[[["accountidentifier",3]],[["option",4],["ordering",4]]]],[11,"lt","","",24,[[["accountidentifier",3]]]],[11,"le","","",24,[[["accountidentifier",3]]]],[11,"gt","","",24,[[["accountidentifier",3]]]],[11,"ge","","",24,[[["accountidentifier",3]]]],[11,"partial_cmp","ledger_canister::icpts","",26,[[["icpts",3]],[["option",4],["ordering",4]]]],[11,"lt","","",26,[[["icpts",3]]]],[11,"le","","",26,[[["icpts",3]]]],[11,"gt","","",26,[[["icpts",3]]]],[11,"ge","","",26,[[["icpts",3]]]],[11,"partial_cmp","ledger_canister::protobuf","",67,[[["timestamp",3]],[["option",4],["ordering",4]]]],[11,"lt","","",67,[[["timestamp",3]]]],[11,"le","","",67,[[["timestamp",3]]]],[11,"gt","","",67,[[["timestamp",3]]]],[11,"ge","","",67,[[["timestamp",3]]]],[11,"partial_cmp","ledger_canister","",77,[[["hashof",3]],[["option",4],["ordering",4]]]],[11,"lt","","",77,[[["hashof",3]]]],[11,"le","","",77,[[["hashof",3]]]],[11,"gt","","",77,[[["hashof",3]]]],[11,"ge","","",77,[[["hashof",3]]]],[11,"partial_cmp","","",0,[[["encodedblock",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["encodedblock",3]]]],[11,"le","","",0,[[["encodedblock",3]]]],[11,"gt","","",0,[[["encodedblock",3]]]],[11,"ge","","",0,[[["encodedblock",3]]]],[11,"partial_cmp","","",1,[[["memo",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["memo",3]]]],[11,"le","","",1,[[["memo",3]]]],[11,"gt","","",1,[[["memo",3]]]],[11,"ge","","",1,[[["memo",3]]]],[11,"partial_cmp","","",19,[[["transfer",4]],[["option",4],["ordering",4]]]],[11,"lt","","",19,[[["transfer",4]]]],[11,"le","","",19,[[["transfer",4]]]],[11,"gt","","",19,[[["transfer",4]]]],[11,"ge","","",19,[[["transfer",4]]]],[11,"partial_cmp","","",3,[[["transaction",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["transaction",3]]]],[11,"le","","",3,[[["transaction",3]]]],[11,"gt","","",3,[[["transaction",3]]]],[11,"ge","","",3,[[["transaction",3]]]],[11,"deref","","",78,[[],["rwlock",3]]],[11,"deref","","",79,[[],["rwlock",3]]],[11,"fmt","ledger_canister::account_identifier","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::icpts","",26,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::protobuf","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::protobuf::cycles_notification_response","",69,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::protobuf","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::protobuf::block_response","",70,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::protobuf","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::protobuf::get_blocks_response","",71,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::protobuf","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::protobuf::transaction","",72,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::protobuf","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::archive","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::account_identifier","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister::icpts","",26,[[["formatter",3]],["result",6]]],[11,"fmt","ledger_canister","",77,[[["formatter",3]],["result",6]]],[11,"sub","ledger_canister::icpts","",26,[[]]],[11,"sub","ledger_canister::protobuf","",67,[[["duration",3]]]],[11,"add","ledger_canister::icpts","This returns a result, in normal operation this should…",26,[[]]],[11,"add","ledger_canister::protobuf","",67,[[["duration",3]]]],[11,"add_assign","ledger_canister::icpts","",26,[[]]],[11,"sub_assign","","",26,[[]]],[11,"hash","ledger_canister::account_identifier","",24,[[]]],[11,"hash","","",25,[[]]],[11,"hash","ledger_canister::icpts","",26,[[]]],[11,"hash","ledger_canister::protobuf","",67,[[]]],[11,"hash","ledger_canister","",77,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",80,[[]]],[11,"try_from","ledger_canister::account_identifier","",24,[[["accountidentifier",3]],[["result",4],["string",3]]]],[11,"try_from","","",25,[[],["result",4]]],[11,"from_str","","",24,[[],[["string",3],["accountidentifier",3],["result",4]]]],[11,"from_str","ledger_canister","",77,[[],[["string",3],["hashof",3],["result",4]]]],[11,"serialize","ledger_canister::account_identifier","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","ledger_canister::icpts","",26,[[],["result",4]]],[11,"serialize","ledger_canister::protobuf","",67,[[],["result",4]]],[11,"serialize","ledger_canister::archive","",73,[[],["result",4]]],[11,"serialize","","",74,[[],["result",4]]],[11,"serialize","ledger_canister","",77,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",80,[[],["result",4]]],[11,"deserialize","ledger_canister::account_identifier","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","ledger_canister::icpts","",26,[[],["result",4]]],[11,"deserialize","ledger_canister::protobuf","",64,[[],["result",4]]],[11,"deserialize","","",67,[[],["result",4]]],[11,"deserialize","ledger_canister::archive","",73,[[],["result",4]]],[11,"deserialize","","",74,[[],["result",4]]],[11,"deserialize","ledger_canister","",77,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",80,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"_ty","ledger_canister::account_identifier","",24,[[],["type",4]]],[11,"idl_serialize","","",24,[[],["result",4]]],[11,"_ty","","",25,[[],["type",4]]],[11,"id","","",25,[[],["typeid",3]]],[11,"idl_serialize","","",25,[[],["result",4]]],[11,"_ty","ledger_canister::icpts","",26,[[],["type",4]]],[11,"id","","",26,[[],["typeid",3]]],[11,"idl_serialize","","",26,[[],["result",4]]],[11,"_ty","ledger_canister::protobuf","",64,[[],["type",4]]],[11,"id","","",64,[[],["typeid",3]]],[11,"idl_serialize","","",64,[[],["result",4]]],[11,"_ty","","",67,[[],["type",4]]],[11,"id","","",67,[[],["typeid",3]]],[11,"idl_serialize","","",67,[[],["result",4]]],[11,"_ty","ledger_canister::archive","",73,[[],["type",4]]],[11,"id","","",73,[[],["typeid",3]]],[11,"idl_serialize","","",73,[[],["result",4]]],[11,"_ty","ledger_canister","",77,[[],["type",4]]],[11,"id","","",77,[[],["typeid",3]]],[11,"idl_serialize","","",77,[[],["result",4]]],[11,"_ty","","",0,[[],["type",4]]],[11,"id","","",0,[[],["typeid",3]]],[11,"idl_serialize","","",0,[[],["result",4]]],[11,"_ty","","",1,[[],["type",4]]],[11,"id","","",1,[[],["typeid",3]]],[11,"idl_serialize","","",1,[[],["result",4]]],[11,"_ty","","",19,[[],["type",4]]],[11,"id","","",19,[[],["typeid",3]]],[11,"idl_serialize","","",19,[[],["result",4]]],[11,"_ty","","",3,[[],["type",4]]],[11,"id","","",3,[[],["typeid",3]]],[11,"idl_serialize","","",3,[[],["result",4]]],[11,"_ty","","",4,[[],["type",4]]],[11,"id","","",4,[[],["typeid",3]]],[11,"idl_serialize","","",4,[[],["result",4]]],[11,"_ty","","",7,[[],["type",4]]],[11,"id","","",7,[[],["typeid",3]]],[11,"idl_serialize","","",7,[[],["result",4]]],[11,"_ty","","",8,[[],["type",4]]],[11,"id","","",8,[[],["typeid",3]]],[11,"idl_serialize","","",8,[[],["result",4]]],[11,"_ty","","",9,[[],["type",4]]],[11,"id","","",9,[[],["typeid",3]]],[11,"idl_serialize","","",9,[[],["result",4]]],[11,"_ty","","",10,[[],["type",4]]],[11,"id","","",10,[[],["typeid",3]]],[11,"idl_serialize","","",10,[[],["result",4]]],[11,"_ty","","",11,[[],["type",4]]],[11,"id","","",11,[[],["typeid",3]]],[11,"idl_serialize","","",11,[[],["result",4]]],[11,"_ty","","",80,[[],["type",4]]],[11,"id","","",80,[[],["typeid",3]]],[11,"idl_serialize","","",80,[[],["result",4]]],[11,"_ty","","",23,[[],["type",4]]],[11,"id","","",23,[[],["typeid",3]]],[11,"idl_serialize","","",23,[[],["result",4]]],[11,"from_proto","","",80,[[],[["result",4],["string",3]]]],[11,"to_proto","","",80,[[],["totalsupplyrequest",3]]],[11,"from_proto","ledger_canister::icpts","",26,[[],[["result",4],["string",3]]]],[11,"to_proto","","",26,[[]]],[11,"from_proto","ledger_canister","",11,[[],[["result",4],["string",3]]]],[11,"to_proto","","",11,[[]]],[11,"from_proto","","",12,[[],[["result",4],["string",3]]]],[11,"to_proto","","",12,[[]]],[11,"from_proto","","",23,[[],[["result",4],["string",3]]]],[11,"to_proto","","",23,[[]]],[11,"from_proto","","",13,[[],[["result",4],["string",3]]]],[11,"to_proto","","",13,[[]]],[11,"from_proto","","",14,[[],[["result",4],["string",3]]]],[11,"to_proto","","",14,[[]]],[11,"from_proto","","",15,[[],[["result",4],["string",3]]]],[11,"to_proto","","",15,[[]]],[11,"from_proto","","",16,[[],[["result",4],["string",3]]]],[11,"to_proto","","",16,[[]]],[11,"from_proto","","",17,[[],[["result",4],["string",3]]]],[11,"to_proto","","",17,[[]]],[11,"from_proto","","",18,[[],[["result",4],["string",3]]]],[11,"to_proto","","",18,[[]]],[11,"from_proto","","",8,[[],[["result",4],["string",3]]]],[11,"to_proto","","",8,[[]]],[11,"from_proto","","",10,[[],[["result",4],["string",3]]]],[11,"to_proto","","",10,[[]]],[11,"from_proto","","",9,[[],[["result",4],["string",3]]]],[11,"to_proto","","",9,[[]]],[11,"from_proto","ledger_canister::account_identifier","",25,[[],[["result",4],["string",3]]]],[11,"to_proto","","",25,[[]]],[11,"from_proto","","",24,[[],[["result",4],["string",3]]]],[11,"to_proto","","",24,[[]]],[11,"from_proto","ledger_canister","",4,[[],[["result",4],["string",3]]]],[11,"to_proto","","",4,[[]]],[11,"from_proto","","",3,[[],[["result",4],["string",3]]]],[11,"to_proto","","",3,[[]]],[11,"from_proto","","",77,[[],[["result",4],["string",3]]]],[11,"to_proto","","",77,[[]]],[11,"encode_raw","ledger_canister::protobuf","",28,[[]]],[11,"merge_field","","",28,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",28,[[]]],[11,"clear","","",28,[[]]],[11,"encode_raw","","",81,[[]]],[11,"merge_field","","",81,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",81,[[]]],[11,"clear","","",81,[[]]],[11,"encode_raw","","",29,[[]]],[11,"merge_field","","",29,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",29,[[]]],[11,"clear","","",29,[[]]],[11,"encode_raw","","",30,[[]]],[11,"merge_field","","",30,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",30,[[]]],[11,"clear","","",30,[[]]],[11,"encode_raw","","",31,[[]]],[11,"merge_field","","",31,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",31,[[]]],[11,"clear","","",31,[[]]],[11,"encode_raw","","",82,[[]]],[11,"merge_field","","",82,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",82,[[]]],[11,"clear","","",82,[[]]],[11,"encode_raw","","",32,[[]]],[11,"merge_field","","",32,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",32,[[]]],[11,"clear","","",32,[[]]],[11,"encode_raw","","",33,[[]]],[11,"merge_field","","",33,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",33,[[]]],[11,"clear","","",33,[[]]],[11,"encode_raw","","",34,[[]]],[11,"merge_field","","",34,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",34,[[]]],[11,"clear","","",34,[[]]],[11,"encode_raw","","",35,[[]]],[11,"merge_field","","",35,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",35,[[]]],[11,"clear","","",35,[[]]],[11,"encode_raw","","",36,[[]]],[11,"merge_field","","",36,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",36,[[]]],[11,"clear","","",36,[[]]],[11,"encode_raw","","",83,[[]]],[11,"merge_field","","",83,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",83,[[]]],[11,"clear","","",83,[[]]],[11,"encode_raw","","",37,[[]]],[11,"merge_field","","",37,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",37,[[]]],[11,"clear","","",37,[[]]],[11,"encode_raw","","",84,[[]]],[11,"merge_field","","",84,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",84,[[]]],[11,"clear","","",84,[[]]],[11,"encode_raw","","",38,[[]]],[11,"merge_field","","",38,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",38,[[]]],[11,"clear","","",38,[[]]],[11,"encode_raw","","",39,[[]]],[11,"merge_field","","",39,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",39,[[]]],[11,"clear","","",39,[[]]],[11,"encode_raw","","",40,[[]]],[11,"merge_field","","",40,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",40,[[]]],[11,"clear","","",40,[[]]],[11,"encode_raw","","",41,[[]]],[11,"merge_field","","",41,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",41,[[]]],[11,"clear","","",41,[[]]],[11,"encode_raw","","",42,[[]]],[11,"merge_field","","",42,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",42,[[]]],[11,"clear","","",42,[[]]],[11,"encode_raw","","",43,[[]]],[11,"merge_field","","",43,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",43,[[]]],[11,"clear","","",43,[[]]],[11,"encode_raw","","",44,[[]]],[11,"merge_field","","",44,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",44,[[]]],[11,"clear","","",44,[[]]],[11,"encode_raw","","",85,[[]]],[11,"merge_field","","",85,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",85,[[]]],[11,"clear","","",85,[[]]],[11,"encode_raw","","",45,[[]]],[11,"merge_field","","",45,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",45,[[]]],[11,"clear","","",45,[[]]],[11,"encode_raw","","",46,[[]]],[11,"merge_field","","",46,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",46,[[]]],[11,"clear","","",46,[[]]],[11,"encode_raw","","",47,[[]]],[11,"merge_field","","",47,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",47,[[]]],[11,"clear","","",47,[[]]],[11,"encode_raw","","",48,[[]]],[11,"merge_field","","",48,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",48,[[]]],[11,"clear","","",48,[[]]],[11,"encode_raw","","",49,[[]]],[11,"merge_field","","",49,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",49,[[]]],[11,"clear","","",49,[[]]],[11,"encode_raw","","",50,[[]]],[11,"merge_field","","",50,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",50,[[]]],[11,"clear","","",50,[[]]],[11,"encode_raw","","",51,[[]]],[11,"merge_field","","",51,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",51,[[]]],[11,"clear","","",51,[[]]],[11,"encode_raw","","",52,[[]]],[11,"merge_field","","",52,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",52,[[]]],[11,"clear","","",52,[[]]],[11,"encode_raw","","",86,[[]]],[11,"merge_field","","",86,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",86,[[]]],[11,"clear","","",86,[[]]],[11,"encode_raw","","",87,[[]]],[11,"merge_field","","",87,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",87,[[]]],[11,"clear","","",87,[[]]],[11,"encode_raw","","",53,[[]]],[11,"merge_field","","",53,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",53,[[]]],[11,"clear","","",53,[[]]],[11,"encode_raw","","",54,[[]]],[11,"merge_field","","",54,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",54,[[]]],[11,"clear","","",54,[[]]],[11,"encode_raw","","",55,[[]]],[11,"merge_field","","",55,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",55,[[]]],[11,"clear","","",55,[[]]],[11,"encode_raw","","",56,[[]]],[11,"merge_field","","",56,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",56,[[]]],[11,"clear","","",56,[[]]],[11,"encode_raw","","",57,[[]]],[11,"merge_field","","",57,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",57,[[]]],[11,"clear","","",57,[[]]],[11,"encode_raw","","",58,[[]]],[11,"merge_field","","",58,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",58,[[]]],[11,"clear","","",58,[[]]],[11,"encode_raw","","",59,[[]]],[11,"merge_field","","",59,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",59,[[]]],[11,"clear","","",59,[[]]],[11,"encode_raw","","",60,[[]]],[11,"merge_field","","",60,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",60,[[]]],[11,"clear","","",60,[[]]],[11,"encode_raw","","",61,[[]]],[11,"merge_field","","",61,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",61,[[]]],[11,"clear","","",61,[[]]],[11,"encode_raw","","",62,[[]]],[11,"merge_field","","",62,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",62,[[]]],[11,"clear","","",62,[[]]],[11,"encode_raw","","",63,[[]]],[11,"merge_field","","",63,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",63,[[]]],[11,"clear","","",63,[[]]],[11,"encode_raw","","",64,[[]]],[11,"merge_field","","",64,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",64,[[]]],[11,"clear","","",64,[[]]],[11,"encode_raw","","",65,[[]]],[11,"merge_field","","",65,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",65,[[]]],[11,"clear","","",65,[[]]],[11,"encode_raw","","",66,[[]]],[11,"merge_field","","",66,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",66,[[]]],[11,"clear","","",66,[[]]],[11,"encode_raw","","",67,[[]]],[11,"merge_field","","",67,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",67,[[]]],[11,"clear","","",67,[[]]],[11,"encode_raw","","",68,[[]]],[11,"merge_field","","",68,[[["wiretype",4],["decodecontext",3]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",68,[[]]],[11,"clear","","",68,[[]]],[11,"initialize","ledger_canister","",78,[[]]],[11,"initialize","","",79,[[]]]],"p":[[3,"EncodedBlock"],[3,"Memo"],[3,"Balances"],[3,"Transaction"],[3,"Block"],[3,"Blockchain"],[3,"Ledger"],[3,"LedgerCanisterInitPayload"],[3,"SendArgs"],[3,"TransactionNotification"],[3,"NotifyCanisterArgs"],[3,"AccountBalanceArgs"],[3,"TipOfChainRes"],[3,"GetBlocksArgs"],[3,"GetBlocksRes"],[3,"IterBlocksArgs"],[3,"IterBlocksRes"],[3,"BlockArg"],[3,"BlockRes"],[4,"Transfer"],[13,"Burn"],[13,"Mint"],[13,"Send"],[4,"CyclesResponse"],[3,"AccountIdentifier"],[3,"Subaccount"],[3,"ICPTs"],[3,"MetricsEncoder"],[3,"LedgerInit"],[3,"SendRequest"],[3,"SendResponse"],[3,"NotifyRequest"],[3,"TransactionNotificationRequest"],[3,"TransactionNotificationResponse"],[3,"CyclesNotificationResponse"],[3,"AccountBalanceRequest"],[3,"AccountBalanceResponse"],[3,"TipOfChainResponse"],[3,"TotalSupplyResponse"],[3,"LedgerArchiveRequest"],[3,"BlockRequest"],[3,"EncodedBlock"],[3,"BlockResponse"],[3,"GetBlocksRequest"],[3,"Refund"],[3,"EncodedBlocks"],[3,"GetBlocksResponse"],[3,"IterBlocksRequest"],[3,"IterBlocksResponse"],[3,"ArchiveIndexEntry"],[3,"ArchiveIndexResponse"],[3,"ArchiveInit"],[3,"ArchiveAddRequest"],[3,"GetNodesResponse"],[3,"IcpTs"],[3,"Payment"],[3,"BlockHeight"],[3,"Block"],[3,"Hash"],[3,"Account"],[3,"Transaction"],[3,"Send"],[3,"Mint"],[3,"Burn"],[3,"AccountIdentifier"],[3,"Subaccount"],[3,"Memo"],[3,"TimeStamp"],[3,"Certification"],[4,"Response"],[4,"BlockContent"],[4,"GetBlocksContent"],[4,"Transfer"],[3,"ArchiveOptions"],[3,"Archive"],[3,"FailedToArchiveBlocks"],[8,"BalancesStore"],[3,"HashOf"],[3,"LEDGER"],[3,"MAX_MESSAGE_SIZE_BYTES"],[3,"TotalSupplyArgs"],[3,"LedgerUpgrade"],[3,"NotifyResponse"],[3,"TipOfChainRequest"],[3,"TotalSupplyRequest"],[3,"ToppedUp"],[3,"ArchiveAddResponse"],[3,"GetNodesRequest"]]},\
"lifeline":{"doc":"Exposes the lifeline canister wasm as a constant. This…","i":[[17,"LIFELINE_CANISTER_WASM","lifeline","",null,null]],"p":[]},\
"memory_tracker":{"doc":"","i":[[3,"MemoryArea","memory_tracker","",null,null],[3,"SigsegvMemoryTracker","","",null,null],[5,"sigsegv_fault_handler","","",null,[[["sigsegvmemorytracker",3],["fn",8]]]],[11,"new","","",0,[[]]],[11,"is_within","","",0,[[]]],[11,"addr","","",0,[[]]],[11,"size","","",0,[[]]],[11,"page_addr","","",0,[[]]],[11,"new","","",1,[[["replicalogger",6]],["result",6]]],[11,"handle_sigsegv","","",1,[[]]],[11,"area","","",1,[[],["memoryarea",3]]],[11,"expand","","",1,[[]]],[11,"dirty_pages","","",1,[[],["vec",3]]],[11,"num_accessed_pages","","",1,[[]]],[11,"num_dirty_pages","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clone","","",0,[[],["memoryarea",3]]]],"p":[[3,"MemoryArea"],[3,"SigsegvMemoryTracker"]]},\
"nns_ui_canister":{"doc":"","i":[[5,"main","nns_ui_canister","",null,[[]]]],"p":[]},\
"nodemanager":{"doc":"The node manager is a component of the Internet Computer…","i":[[0,"args","nodemanager","",null,null],[3,"NodeManagerArgs","nodemanager::args","Arguments for the node manager binary.",null,null],[0,"node_manager","nodemanager","",null,null],[3,"NodeManager","nodemanager::node_manager","",null,null],[12,"logger","","",0,null],[11,"new","","",0,[[["nodemanagerargs",3]]]],[11,"start","","Start the Node Manager",0,[[]]],[11,"spawn_wait_and_restart_replica","","",0,[[]]],[11,"stop_replica","","",0,[[]]],[11,"from","nodemanager::args","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","nodemanager::node_manager","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"fmt","nodemanager::args","",1,[[["formatter",3]],["result",6]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"is_subcommand","","",1,[[]]]],"p":[[3,"NodeManager"],[3,"NodeManagerArgs"]]},\
"on_wire":{"doc":"","i":[[3,"BytesS","on_wire","This tells the compiler to just read/write the raw bytes…",null,null],[12,"0","","",0,null],[3,"FromS","","This causes values to be serialized and deserialized using…",null,null],[12,"0","","",1,null],[5,"witness","","Every witness is a type specialization of this function…",null,[[["newtype",8]]]],[5,"bytes","","This tells communication function that you\'d like you…",null,[[["bytess",3],["vec",3]]]],[5,"from","","This tells communication function that you\'d like you…",null,[[["froms",3]]]],[8,"FromWire","","There are a lot of different ways of communicating with…",null,null],[10,"from_bytes","","",2,[[["vec",3]],[["result",4],["string",3]]]],[8,"IntoWire","","",null,null],[10,"into_bytes","","",3,[[],[["result",4],["vec",3],["string",3]]]],[8,"NewType","","",null,null],[16,"Inner","","",4,null],[10,"into_inner","","",4,[[]]],[10,"from_inner","","",4,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from_bytes","","",0,[[["vec",3]],[["bytess",3],["result",4],["string",3]]]],[11,"from_bytes","","",1,[[["vec",3]],[["froms",3],["result",4],["string",3]]]],[11,"into_bytes","","",0,[[],[["result",4],["vec",3],["string",3]]]],[11,"into_bytes","","",1,[[],[["result",4],["vec",3],["string",3]]]],[11,"into_inner","","",0,[[],["vec",3]]],[11,"from_inner","","",0,[[["vec",3]]]],[11,"into_inner","","",1,[[]]],[11,"from_inner","","",1,[[]]]],"p":[[3,"BytesS"],[3,"FromS"],[8,"FromWire"],[8,"IntoWire"],[8,"NewType"]]},\
"phantom_newtype":{"doc":"","i":[[3,"AmountOf","phantom_newtype","`AmountOf<Unit>` provides a type-safe way to keep an…",null,null],[3,"BitMask","","`BitMask<Unit>` provides a type-safe way to work with…",null,null],[3,"DisplayProxy","","An object `DisplayProxy`, when is asked to display itself,…",null,null],[3,"Id","","`Id<Entity, Repr>` provides a type-safe way to keep ids of…",null,null],[11,"get","","Returns the wrapped value.",0,[[]]],[11,"new","","`new` is a synonym for `from` that can be evaluated in…",0,[[],["amountof",3]]],[11,"unit","","Provides a useful shortcut to access units of an amount if…",0,[[]]],[11,"display","","`display` provides a machanism to implement a custom…",0,[[],["displayproxy",3]]],[11,"increment","","Returns the amount incremented by 1.",0,[[],["amountof",3]]],[11,"inc_assign","","Increments the amount by 1.",0,[[]]],[11,"decrement","","Returns the amount decremented by 1. Like regular…",0,[[],["amountof",3]]],[11,"dec_assign","","Decrements the amount by 1. Like regular subtraction,…",0,[[]]],[11,"get","","Returns the wrapped value.",1,[[]]],[11,"new","","`new` is a synonym for `from` that can be evaluated in…",1,[[],["bitmask",3]]],[11,"is_set","","",1,[[]]],[11,"display","","`display` provides a machanism to implement a custom…",1,[[],["displayproxy",3]]],[11,"new","","",2,[[]]],[11,"get","","`get` returns the underlying representation of the…",3,[[]]],[11,"get_ref","","`get_ref` returns a reference to the underlying…",3,[[]]],[11,"new","","`new` is a synonym for `from` that can be evaluated in…",3,[[],["id",3]]],[11,"display","","`display` provides a machanism to implement a custom…",3,[[],["displayproxy",3]]],[8,"DisplayerOf","","This trait provides display capabilities for the type it…",null,null],[10,"display","","",4,[[["formatter",3]],["result",6]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["error",3],["ok",3],["result",4]]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["error",3],["ok",3],["result",4]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"encode_hex","","",3,[[]]],[11,"encode_hex_upper","","",3,[[]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["error",3],["ok",3],["result",4]]]],[11,"as_ref","","",3,[[]]],[11,"from","","",0,[[]]],[11,"from","","",1,[[]]],[11,"from","","",3,[[]]],[11,"clone","","",0,[[]]],[11,"clone","","",1,[[]]],[11,"clone","","",3,[[]]],[11,"default","","Returns the default amount if the value implements…",0,[[]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"cmp","","",3,[[],["ordering",4]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[]]],[11,"eq","","",3,[[]]],[11,"partial_cmp","","",0,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",3,[[],[["ordering",4],["option",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"add","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"not","","",1,[[]]],[11,"bitand","","",1,[[]]],[11,"bitor","","",1,[[]]],[11,"bitxor","","",1,[[]]],[11,"bitand_assign","","",1,[[]]],[11,"bitor_assign","","",1,[[]]],[11,"bitxor_assign","","",1,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",3,[[]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"serialize","","",0,[[["serializer",8]],["result",4]]],[11,"serialize","","",1,[[["serializer",8]],["result",4]]],[11,"serialize","","",3,[[["serializer",8]],["result",4]]],[11,"deserialize","","",0,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",1,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",3,[[["deserializer",8]],["result",4]]],[11,"arbitrary_with","","",3,[[]]],[11,"id","","",0,[[],["typeid",3]]],[11,"_ty","","",0,[[],["type",4]]],[11,"idl_serialize","","",0,[[],["result",4]]],[11,"id","","",3,[[],["typeid",3]]],[11,"_ty","","",3,[[],["type",4]]],[11,"idl_serialize","","",3,[[],["result",4]]],[11,"serialize","","",0,[[["key",6],["serializer",8],["record",3]],["result",6]]],[11,"serialize","","",3,[[["key",6],["serializer",8],["record",3]],["result",6]]]],"p":[[3,"AmountOf"],[3,"BitMask"],[3,"DisplayProxy"],[3,"Id"],[8,"DisplayerOf"]]},\
"registry_canister":{"doc":"","i":[[0,"certification","registry_canister","This module contains utilities for constructing hash trees…",null,null],[5,"named_blob","registry_canister::certification","Adds a new edge labeled with `label` and pointing to a…",null,[[]]],[5,"named_num","","Builds a labeled leaf containing a number encoded in LEB128.",null,[[]]],[5,"rebuild_tree","","Constructs a hash tree that can be used to certify some…",null,[[["registry",3]],["witnessgeneratorimpl",3]]],[5,"num_leaf","","Builds a leaf of a labeled tree containing LEB128 encoded…",null,[[],[["vec",3],["labeledtree",4]]]],[5,"singleton","","Builds a fork of a labeled tree containing a single edge…",null,[[["vec",3],["labeledtree",4],["asref",8]],[["vec",3],["labeledtree",4]]]],[5,"build_deltas_tree","","Constructs a labeled tree encoding the specified range of…",null,[[["version",6]],[["vec",3],["labeledtree",4]]]],[0,"common","registry_canister","",null,null],[17,"LOG_PREFIX","registry_canister::common","",null,null],[0,"init","registry_canister","",null,null],[3,"RegistryCanisterInitPayload","registry_canister::init","",null,null],[12,"authz_info","","",0,null],[12,"mutations","","",0,null],[3,"RegistryCanisterInitPayloadBuilder","","",null,null],[11,"new","","",1,[[]]],[11,"allow_principal_to_mutate","","",1,[[["principalid",3]]]],[11,"push_init_mutate_request","","",1,[[["registryatomicmutaterequest",3]]]],[11,"build","","",1,[[],["registrycanisterinitpayload",3]]],[0,"invariants","registry_canister","",null,null],[0,"mutations","","",null,null],[0,"common","registry_canister::mutations","",null,null],[5,"decode_registry_value","registry_canister::mutations::common","",null,[[["vec",3]],[["message",8],["default",8]]]],[0,"do_add_node","registry_canister::mutations","",null,null],[3,"AddNodePayload","registry_canister::mutations::do_add_node","The payload of an update request to add a new node.",null,null],[12,"node_signing_pk","","",2,null],[12,"committee_signing_pk","","",2,null],[12,"ni_dkg_dealing_encryption_pk","","",2,null],[12,"transport_tls_cert","","",2,null],[12,"xnet_endpoint","","",2,null],[12,"http_endpoint","","",2,null],[12,"p2p_flow_endpoints","","",2,null],[12,"prometheus_metrics_endpoint","","",2,null],[5,"connection_endpoint_from_string","","Parses the ConnectionEndpoint string",null,[[],["connectionendpoint",3]]],[5,"flow_endpoint_from_string","","Parses a P2P flow encoded in a string",null,[[],["flowendpoint",3]]],[0,"do_add_node_operator","registry_canister::mutations","",null,null],[3,"AddNodeOperatorPayload","registry_canister::mutations::do_add_node_operator","The payload of a proposal to add a new Node Operator",null,null],[12,"node_operator_principal_id","","The principal id of the node operator. This principal is…",3,null],[12,"node_provider_principal_id","","",3,null],[12,"node_allowance","","The remaining number of nodes that could be added by this…",3,null],[0,"do_add_nodes_to_subnet","registry_canister::mutations","",null,null],[3,"AddNodesToSubnetPayload","registry_canister::mutations::do_add_nodes_to_subnet","The payload of a proposal to add nodes to an existing…",null,null],[12,"subnet_id","","The subnet ID to add the nodes to.",4,null],[12,"node_ids","","The list of node IDs that will be added to the existing…",4,null],[0,"do_bless_replica_version","registry_canister::mutations","",null,null],[3,"BlessReplicaVersionPayload","registry_canister::mutations::do_bless_replica_version","The payload of a proposal to bless a given replica version.",null,null],[12,"replica_version_id","","Version ID. This can be anything, it has not semantics.…",5,null],[12,"binary_url","","The URL against which a HTTP GET request will return a…",5,null],[12,"sha256_hex","","The hex-formatted SHA-256 hash of the binary served by…",5,null],[12,"node_manager_binary_url","","The URL against which a HTTP GET request will return a…",5,null],[12,"node_manager_sha256_hex","","The hex-formatted SHA-256 hash of the binary served by…",5,null],[12,"release_package_url","","The URL against which a HTTP GET request will return a…",5,null],[12,"release_package_sha256_hex","","The hex-formatted SHA-256 hash of the archive file served…",5,null],[5,"blessed_versions_to_string","","",null,[[["blessedreplicaversions",3]],["string",3]]],[0,"do_clear_provisional_whitelist","registry_canister::mutations","",null,null],[0,"do_create_subnet","","",null,null],[3,"CreateSubnetPayload","registry_canister::mutations::do_create_subnet","The payload of a proposal to create a new subnet.",null,null],[12,"node_ids","","The list of node IDs that will be part of the new subnet.",6,null],[12,"subnet_id_override","","",6,null],[12,"ingress_bytes_per_block_soft_cap","","",6,null],[12,"max_ingress_bytes_per_message","","",6,null],[12,"max_ingress_messages_per_block","","",6,null],[12,"unit_delay_millis","","",6,null],[12,"initial_notary_delay_millis","","",6,null],[12,"replica_version_id","","",6,null],[12,"dkg_interval_length","","",6,null],[12,"dkg_dealings_per_block","","",6,null],[12,"gossip_max_artifact_streams_per_peer","","",6,null],[12,"gossip_max_chunk_wait_ms","","",6,null],[12,"gossip_max_duplicity","","",6,null],[12,"gossip_max_chunk_size","","",6,null],[12,"gossip_receive_check_cache_size","","",6,null],[12,"gossip_pfn_evaluation_period_ms","","",6,null],[12,"gossip_registry_poll_period_ms","","",6,null],[12,"gossip_retransmission_request_ms","","",6,null],[12,"start_as_nns","","",6,null],[12,"subnet_type","","",6,null],[12,"is_halted","","",6,null],[0,"do_recover_subnet","registry_canister::mutations","Contains methods to recover a stalled subnet",null,null],[3,"RecoverSubnetPayload","registry_canister::mutations::do_recover_subnet","A payload used to recover a subnet that has stalled",null,null],[12,"subnet_id","","The subnet ID to add the recovery CUP to",7,null],[12,"height","","The height of the CUP",7,null],[12,"time_ns","","The block time to start from (nanoseconds from Epoch)",7,null],[12,"state_hash","","The hash of the state",7,null],[12,"replacement_nodes","","Replace the members of the given subnet with these nodes",7,null],[12,"registry_store_uri","","A uri from which data to replace the registry local store…",7,null],[0,"do_remove_node","registry_canister::mutations","",null,null],[3,"RemoveNodePayload","registry_canister::mutations::do_remove_node","The payload of an update request to add a new node.",null,null],[12,"node_id","","",8,null],[0,"do_remove_nodes_from_subnet","registry_canister::mutations","",null,null],[3,"RemoveNodesFromSubnetPayload","registry_canister::mutations::do_remove_nodes_from_subnet","The payload of a proposal to remove a Node from a Subnet",null,null],[12,"node_ids","","The list of Node IDs that will be removed from their subnet",9,null],[0,"do_set_firewall_config","registry_canister::mutations","",null,null],[3,"SetFirewallConfigPayload","registry_canister::mutations::do_set_firewall_config","The payload of a proposal to set the firewall configuration",null,null],[12,"firewall_config","","The firewall configuration content",10,null],[12,"ipv4_prefixes","","List of allowed IPv4 prefixes",10,null],[12,"ipv6_prefixes","","List of allowed IPv6 prefixes",10,null],[0,"do_update_icp_xdr_conversion_rate","registry_canister::mutations","",null,null],[3,"UpdateIcpXdrConversionRatePayload","registry_canister::mutations::do_update_icp_xdr_conversion_rate","The payload of a proposal to update the ICP/XDR conversion…",null,null],[12,"data_source","","",11,null],[12,"timestamp_seconds","","",11,null],[12,"xdr_permyriad_per_icp","","",11,null],[0,"do_update_node_operator_config","registry_canister::mutations","",null,null],[3,"UpdateNodeOperatorConfigPayload","registry_canister::mutations::do_update_node_operator_config","The payload of a proposal to update an existing Node…",null,null],[12,"node_operator_id","","The principal id of the node operator. This principal is…",12,null],[12,"node_allowance","","The remaining number of nodes that could be added by this…",12,null],[0,"do_update_subnet","registry_canister::mutations","",null,null],[3,"UpdateSubnetPayload","registry_canister::mutations::do_update_subnet","The payload of a proposal to update an existing subnet\'s…",null,null],[12,"subnet_id","","",13,null],[12,"ingress_bytes_per_block_soft_cap","","",13,null],[12,"max_ingress_bytes_per_message","","",13,null],[12,"unit_delay_millis","","",13,null],[12,"initial_notary_delay_millis","","",13,null],[12,"dkg_interval_length","","",13,null],[12,"dkg_dealings_per_block","","",13,null],[12,"max_artifact_streams_per_peer","","",13,null],[12,"max_chunk_wait_ms","","",13,null],[12,"max_duplicity","","",13,null],[12,"max_chunk_size","","",13,null],[12,"receive_check_cache_size","","",13,null],[12,"pfn_evaluation_period_ms","","",13,null],[12,"registry_poll_period_ms","","",13,null],[12,"retransmission_request_ms","","",13,null],[12,"set_gossip_config_to_default","","",13,null],[12,"start_as_nns","","",13,null],[12,"subnet_type","","",13,null],[12,"is_halted","","",13,null],[0,"do_update_subnet_replica","registry_canister::mutations","",null,null],[3,"UpdateSubnetReplicaVersionPayload","registry_canister::mutations::do_update_subnet_replica","The argument of a command to update the replica version of…",null,null],[12,"subnet_id","","The subnet to update.",14,null],[12,"replica_version_id","","The new Replica version to use.",14,null],[0,"pb","registry_canister","",null,null],[0,"v1","registry_canister::pb","",null,null],[3,"ChangelogEntry","registry_canister::pb::v1","",null,null],[12,"version","","The version that this mutation produced.",15,null],[12,"encoded_mutation","","Serialized value of…",15,null],[3,"RegistryStableStorage","","Just a container for a set of RegistryDelta that can be…",null,null],[12,"version","","Version of the stable store representation.",16,null],[12,"deltas","","Only present if version == VERSION_UNSPECIFIED.",16,null],[12,"changelog","","Only present if version == VERSION_1.",16,null],[3,"RegistryCanisterStableStorage","","A container for the what gets written to stable storage,…",null,null],[12,"authz","","",17,null],[12,"registry","","",17,null],[0,"registry_stable_storage","","Nested message and enum types in `RegistryStableStorage`.",null,null],[4,"Version","registry_canister::pb::v1::registry_stable_storage","Difference between stable versions…",null,null],[13,"Unspecified","","The original representation that contains a list of…",18,null],[13,"Version1","","The representation based on changelog (tag 3).",18,null],[11,"is_valid","","Returns `true` if `value` is a variant of `Version`.",18,[[]]],[11,"from_i32","","Converts an `i32` to a `Version`, or `None` if `value` is…",18,[[],[["version",4],["option",4]]]],[11,"version","registry_canister::pb::v1","Returns the enum value of `version`, or the default if the…",16,[[],["version",4]]],[11,"set_version","","Sets `version` to the provided enum value.",16,[[["version",4]]]],[0,"proto_on_wire","registry_canister","",null,null],[3,"Protobuf","registry_canister::proto_on_wire","Auxiliary type required for `protobuf` function below to…",null,null],[12,"0","","",19,null],[5,"protobuf","","This function simplifies implementation of and…",null,[[["protobuf",3]]]],[0,"registry","registry_canister","",null,null],[3,"Registry","registry_canister::registry","The main struct for the Registry.",null,null],[6,"RegistryMap","","The type for the registry map.",null,null],[6,"Version","","",null,null],[11,"new","","",20,[[]]],[11,"get_changes_since","","Returns the deltas applied since \'version\', exclusive.",20,[[],[["registrydelta",3],["vec",3]]]],[11,"get","","Returns the highest version of value such that it is lower…",20,[[["version",6]],[["option",4],["registryvalue",3]]]],[11,"latest_version","","",20,[[],["version",6]]],[11,"maybe_apply_mutation_internal","","Checks that invariants hold after applying mutations",20,[[["vec",3],["registrymutation",3]]]],[11,"maybe_apply_mutations","","",20,[[["registryatomicmutaterequest",3]],["registryatomicmutateresponse",3]]],[11,"serializable_form","","",20,[[],["registrystablestorage",3]]],[11,"changelog","","",20,[[]]],[11,"from_serializable_form","","Sets the content of the registry from its serialized…",20,[[["registrystablestorage",3]]]],[11,"from","registry_canister::init","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","registry_canister::mutations::do_add_node","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","registry_canister::mutations::do_add_node_operator","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"proxy_encode","","",3,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",3,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",3,[[]]],[11,"from","registry_canister::mutations::do_add_nodes_to_subnet","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","registry_canister::mutations::do_bless_replica_version","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","registry_canister::mutations::do_create_subnet","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","registry_canister::mutations::do_recover_subnet","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","registry_canister::mutations::do_remove_node","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","registry_canister::mutations::do_remove_nodes_from_subnet","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","registry_canister::mutations::do_set_firewall_config","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"proxy_encode","","",10,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",10,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",10,[[]]],[11,"from","registry_canister::mutations::do_update_icp_xdr_conversion_rate","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","registry_canister::mutations::do_update_node_operator_config","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"proxy_encode","","",12,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",12,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",12,[[]]],[11,"from","registry_canister::mutations::do_update_subnet","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","registry_canister::mutations::do_update_subnet_replica","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","registry_canister::pb::v1","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"proxy_encode","","",15,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",15,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"proxy_encode","","",16,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",16,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"proxy_encode","","",17,[[],[["vec",3],["encodeerror",3],["result",4]]]],[11,"proxy_decode","","",17,[[],[["result",4],["proxydecodeerror",4]]]],[11,"vzip","","",17,[[]]],[11,"from","registry_canister::pb::v1::registry_stable_storage","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","registry_canister::proto_on_wire","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","registry_canister::registry","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","registry_canister::mutations::do_set_firewall_config","",10,[[["firewallconfig",3]]]],[11,"into","registry_canister::mutations::do_add_node_operator","",3,[[],["nodeoperatorrecord",3]]],[11,"into","registry_canister::mutations::do_create_subnet","",6,[[],["subnetrecord",3]]],[11,"into","registry_canister::mutations::do_set_firewall_config","",10,[[],["firewallconfig",3]]],[11,"into","registry_canister::mutations::do_update_icp_xdr_conversion_rate","",11,[[],["icpxdrconversionraterecord",3]]],[11,"clone","registry_canister::init","",0,[[],["registrycanisterinitpayload",3]]],[11,"clone","registry_canister::mutations::do_add_node","",2,[[],["addnodepayload",3]]],[11,"clone","registry_canister::mutations::do_add_node_operator","",3,[[],["addnodeoperatorpayload",3]]],[11,"clone","registry_canister::mutations::do_add_nodes_to_subnet","",4,[[],["addnodestosubnetpayload",3]]],[11,"clone","registry_canister::mutations::do_bless_replica_version","",5,[[],["blessreplicaversionpayload",3]]],[11,"clone","registry_canister::mutations::do_create_subnet","",6,[[],["createsubnetpayload",3]]],[11,"clone","registry_canister::mutations::do_recover_subnet","",7,[[],["recoversubnetpayload",3]]],[11,"clone","registry_canister::mutations::do_remove_node","",8,[[],["removenodepayload",3]]],[11,"clone","registry_canister::mutations::do_remove_nodes_from_subnet","",9,[[],["removenodesfromsubnetpayload",3]]],[11,"clone","registry_canister::mutations::do_set_firewall_config","",10,[[],["setfirewallconfigpayload",3]]],[11,"clone","registry_canister::mutations::do_update_icp_xdr_conversion_rate","",11,[[],["updateicpxdrconversionratepayload",3]]],[11,"clone","registry_canister::mutations::do_update_node_operator_config","",12,[[],["updatenodeoperatorconfigpayload",3]]],[11,"clone","registry_canister::mutations::do_update_subnet","",13,[[],["updatesubnetpayload",3]]],[11,"clone","registry_canister::mutations::do_update_subnet_replica","",14,[[],["updatesubnetreplicaversionpayload",3]]],[11,"clone","registry_canister::pb::v1","",15,[[],["changelogentry",3]]],[11,"clone","","",16,[[],["registrystablestorage",3]]],[11,"clone","registry_canister::pb::v1::registry_stable_storage","",18,[[],["version",4]]],[11,"clone","registry_canister::pb::v1","",17,[[],["registrycanisterstablestorage",3]]],[11,"clone","registry_canister::registry","",20,[[],["registry",3]]],[11,"default","registry_canister::init","",0,[[]]],[11,"default","registry_canister::mutations::do_add_node_operator","",3,[[]]],[11,"default","registry_canister::mutations::do_set_firewall_config","",10,[[]]],[11,"default","registry_canister::mutations::do_update_node_operator_config","",12,[[]]],[11,"default","registry_canister::pb::v1","",15,[[]]],[11,"default","","",16,[[]]],[11,"default","registry_canister::pb::v1::registry_stable_storage","",18,[[],["version",4]]],[11,"default","registry_canister::pb::v1","",17,[[]]],[11,"default","registry_canister::registry","",20,[[],["registry",3]]],[11,"cmp","registry_canister::pb::v1::registry_stable_storage","",18,[[["version",4]],["ordering",4]]],[11,"eq","registry_canister::mutations::do_add_node","",2,[[["addnodepayload",3]]]],[11,"ne","","",2,[[["addnodepayload",3]]]],[11,"eq","registry_canister::mutations::do_add_node_operator","",3,[[["addnodeoperatorpayload",3]]]],[11,"ne","","",3,[[["addnodeoperatorpayload",3]]]],[11,"eq","registry_canister::mutations::do_add_nodes_to_subnet","",4,[[["addnodestosubnetpayload",3]]]],[11,"ne","","",4,[[["addnodestosubnetpayload",3]]]],[11,"eq","registry_canister::mutations::do_bless_replica_version","",5,[[["blessreplicaversionpayload",3]]]],[11,"ne","","",5,[[["blessreplicaversionpayload",3]]]],[11,"eq","registry_canister::mutations::do_create_subnet","",6,[[["createsubnetpayload",3]]]],[11,"ne","","",6,[[["createsubnetpayload",3]]]],[11,"eq","registry_canister::mutations::do_recover_subnet","",7,[[["recoversubnetpayload",3]]]],[11,"ne","","",7,[[["recoversubnetpayload",3]]]],[11,"eq","registry_canister::mutations::do_remove_node","",8,[[["removenodepayload",3]]]],[11,"ne","","",8,[[["removenodepayload",3]]]],[11,"eq","registry_canister::mutations::do_remove_nodes_from_subnet","",9,[[["removenodesfromsubnetpayload",3]]]],[11,"ne","","",9,[[["removenodesfromsubnetpayload",3]]]],[11,"eq","registry_canister::mutations::do_set_firewall_config","",10,[[["setfirewallconfigpayload",3]]]],[11,"ne","","",10,[[["setfirewallconfigpayload",3]]]],[11,"eq","registry_canister::mutations::do_update_icp_xdr_conversion_rate","",11,[[["updateicpxdrconversionratepayload",3]]]],[11,"ne","","",11,[[["updateicpxdrconversionratepayload",3]]]],[11,"eq","registry_canister::mutations::do_update_node_operator_config","",12,[[["updatenodeoperatorconfigpayload",3]]]],[11,"ne","","",12,[[["updatenodeoperatorconfigpayload",3]]]],[11,"eq","registry_canister::mutations::do_update_subnet","",13,[[["updatesubnetpayload",3]]]],[11,"ne","","",13,[[["updatesubnetpayload",3]]]],[11,"eq","registry_canister::mutations::do_update_subnet_replica","",14,[[["updatesubnetreplicaversionpayload",3]]]],[11,"ne","","",14,[[["updatesubnetreplicaversionpayload",3]]]],[11,"eq","registry_canister::pb::v1","",15,[[["changelogentry",3]]]],[11,"ne","","",15,[[["changelogentry",3]]]],[11,"eq","","",16,[[["registrystablestorage",3]]]],[11,"ne","","",16,[[["registrystablestorage",3]]]],[11,"eq","registry_canister::pb::v1::registry_stable_storage","",18,[[["version",4]]]],[11,"eq","registry_canister::pb::v1","",17,[[["registrycanisterstablestorage",3]]]],[11,"ne","","",17,[[["registrycanisterstablestorage",3]]]],[11,"eq","registry_canister::registry","",20,[[["registry",3]]]],[11,"ne","","",20,[[["registry",3]]]],[11,"partial_cmp","registry_canister::pb::v1::registry_stable_storage","",18,[[["version",4]],[["option",4],["ordering",4]]]],[11,"fmt","registry_canister::init","",0,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_add_node","",2,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_add_node_operator","",3,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_add_nodes_to_subnet","",4,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_bless_replica_version","",5,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_create_subnet","",6,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_recover_subnet","",7,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_remove_node","",8,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_remove_nodes_from_subnet","",9,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_set_firewall_config","",10,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_update_icp_xdr_conversion_rate","",11,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_update_node_operator_config","",12,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_update_subnet","",13,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::mutations::do_update_subnet_replica","",14,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::pb::v1","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::pb::v1::registry_stable_storage","",18,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::pb::v1","",17,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::registry","",20,[[["formatter",3]],["result",6]]],[11,"fmt","registry_canister::init","Produces a string that partly represent the content of…",0,[[["formatter",3]],["result",6]]],[11,"hash","registry_canister::pb::v1::registry_stable_storage","",18,[[]]],[11,"deserialize","registry_canister::init","",0,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_add_node","",2,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_add_node_operator","",3,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_add_nodes_to_subnet","",4,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_bless_replica_version","",5,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_create_subnet","",6,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_recover_subnet","",7,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_remove_node","",8,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_remove_nodes_from_subnet","",9,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_set_firewall_config","",10,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_update_icp_xdr_conversion_rate","",11,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_update_node_operator_config","",12,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_update_subnet","",13,[[],["result",4]]],[11,"deserialize","registry_canister::mutations::do_update_subnet_replica","",14,[[],["result",4]]],[11,"encode_raw","registry_canister::mutations::do_add_node_operator","",3,[[]]],[11,"merge_field","","",3,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"encode_raw","registry_canister::mutations::do_set_firewall_config","",10,[[]]],[11,"merge_field","","",10,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",10,[[]]],[11,"clear","","",10,[[]]],[11,"encode_raw","registry_canister::mutations::do_update_node_operator_config","",12,[[]]],[11,"merge_field","","",12,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",12,[[]]],[11,"clear","","",12,[[]]],[11,"encode_raw","registry_canister::pb::v1","",15,[[]]],[11,"merge_field","","",15,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",15,[[]]],[11,"clear","","",15,[[]]],[11,"encode_raw","","",16,[[]]],[11,"merge_field","","",16,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",16,[[]]],[11,"clear","","",16,[[]]],[11,"encode_raw","","",17,[[]]],[11,"merge_field","","",17,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",17,[[]]],[11,"clear","","",17,[[]]],[11,"_ty","registry_canister::init","",0,[[],["type",4]]],[11,"id","","",0,[[],["typeid",3]]],[11,"idl_serialize","","",0,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_add_node","",2,[[],["type",4]]],[11,"id","","",2,[[],["typeid",3]]],[11,"idl_serialize","","",2,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_add_node_operator","",3,[[],["type",4]]],[11,"id","","",3,[[],["typeid",3]]],[11,"idl_serialize","","",3,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_add_nodes_to_subnet","",4,[[],["type",4]]],[11,"id","","",4,[[],["typeid",3]]],[11,"idl_serialize","","",4,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_bless_replica_version","",5,[[],["type",4]]],[11,"id","","",5,[[],["typeid",3]]],[11,"idl_serialize","","",5,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_create_subnet","",6,[[],["type",4]]],[11,"id","","",6,[[],["typeid",3]]],[11,"idl_serialize","","",6,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_recover_subnet","",7,[[],["type",4]]],[11,"id","","",7,[[],["typeid",3]]],[11,"idl_serialize","","",7,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_remove_node","",8,[[],["type",4]]],[11,"id","","",8,[[],["typeid",3]]],[11,"idl_serialize","","",8,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_remove_nodes_from_subnet","",9,[[],["type",4]]],[11,"id","","",9,[[],["typeid",3]]],[11,"idl_serialize","","",9,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_set_firewall_config","",10,[[],["type",4]]],[11,"id","","",10,[[],["typeid",3]]],[11,"idl_serialize","","",10,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_update_icp_xdr_conversion_rate","",11,[[],["type",4]]],[11,"id","","",11,[[],["typeid",3]]],[11,"idl_serialize","","",11,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_update_node_operator_config","",12,[[],["type",4]]],[11,"id","","",12,[[],["typeid",3]]],[11,"idl_serialize","","",12,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_update_subnet","",13,[[],["type",4]]],[11,"id","","",13,[[],["typeid",3]]],[11,"idl_serialize","","",13,[[],["result",4]]],[11,"_ty","registry_canister::mutations::do_update_subnet_replica","",14,[[],["type",4]]],[11,"id","","",14,[[],["typeid",3]]],[11,"idl_serialize","","",14,[[],["result",4]]],[11,"from_bytes","registry_canister::proto_on_wire","",19,[[["vec",3]],[["protobuf",3],["result",4],["string",3]]]],[11,"into_bytes","","",19,[[],[["result",4],["vec",3],["string",3]]]],[11,"into_inner","","",19,[[]]],[11,"from_inner","","",19,[[]]],[11,"check_global_invariants","registry_canister::registry","",20,[[]]],[11,"do_add_node","","Adds a new node to the registry.",20,[[["addnodepayload",3]],[["result",4],["nodeid",6],["string",3]]]],[11,"do_add_node_operator","","Add a new Node Operator",20,[[["addnodeoperatorpayload",3]]]],[11,"do_add_nodes_to_subnet","","Adds the nodes to an existing subnet record in the registry.",20,[[["addnodestosubnetpayload",3]]]],[11,"do_bless_replica_version","","",20,[[["blessreplicaversionpayload",3]]]],[11,"do_clear_provisional_whitelist","","Clears the provisional whitelist. If no principals exist…",20,[[]]],[11,"do_create_subnet","","Adds the new subnet to the registry.",20,[[["createsubnetpayload",3]]]],[11,"do_recover_subnet","","Recover a subnet",20,[[["recoversubnetpayload",3]]]],[11,"do_remove_node","","Removes an existing node from the registry.",20,[[["removenodepayload",3]]]],[11,"do_remove_nodes_from_subnet","","Remove nodes from their subnets",20,[[["removenodesfromsubnetpayload",3]]]],[11,"do_set_firewall_config","","Sets the firewall config record in the registry.",20,[[["setfirewallconfigpayload",3]]]],[11,"do_update_icp_xdr_conversion_rate","","",20,[[["updateicpxdrconversionratepayload",3]]]],[11,"do_update_node_operator_config","","Update an existing Node Operator\'s config",20,[[["updatenodeoperatorconfigpayload",3]]]],[11,"do_update_subnet","","",20,[[["updatesubnetpayload",3]]]],[11,"do_update_subnet_replica_version","","",20,[[["updatesubnetreplicaversionpayload",3]]]],[11,"add_subnet_to_routing_table","","Handle adding a subnet to the routing table.",20,[[["subnetid",6]],["registrymutation",3]]],[11,"remove_subnet_from_routing_table","","Handle removing a subnet from the routing table. Marked as…",20,[[["subnetid",6]],["registrymutation",3]]],[11,"get_subnet_or_panic","","Get the subnet record or panic on error with a message.",20,[[["subnetid",6]],["subnetrecord",3]]],[11,"get_subnet_list_record","","",20,[[],["subnetlistrecord",3]]],[11,"make_replace_subnet_membership_mutation","","Return the mutation and preconditions that can be used to…",20,[[["subnetid",6],["vec",3],["nodeid",6]],["registrymutation",3]]]],"p":[[3,"RegistryCanisterInitPayload"],[3,"RegistryCanisterInitPayloadBuilder"],[3,"AddNodePayload"],[3,"AddNodeOperatorPayload"],[3,"AddNodesToSubnetPayload"],[3,"BlessReplicaVersionPayload"],[3,"CreateSubnetPayload"],[3,"RecoverSubnetPayload"],[3,"RemoveNodePayload"],[3,"RemoveNodesFromSubnetPayload"],[3,"SetFirewallConfigPayload"],[3,"UpdateIcpXdrConversionRatePayload"],[3,"UpdateNodeOperatorConfigPayload"],[3,"UpdateSubnetPayload"],[3,"UpdateSubnetReplicaVersionPayload"],[3,"ChangelogEntry"],[3,"RegistryStableStorage"],[3,"RegistryCanisterStableStorage"],[4,"Version"],[3,"Protobuf"],[3,"Registry"]]},\
"replica":{"doc":"Replica -- Internet Computer","i":[[5,"abort_on_panic","replica","",null,[[]]],[5,"get_replica_binary_hash","","Determine sha256 hash of the current replica binary",null,[[],[["string",3],["result",4]]]],[5,"main","","",null,[[],["result",6]]],[7,"ALLOC","","",null,null]],"p":[]},\
"root_canister":{"doc":"","i":[[5,"main","root_canister","",null,[[]]],[5,"canister_init","","",null,[[]]],[5,"canister_pre_upgrade","","",null,[[]]],[5,"canister_post_upgrade","","",null,[[]]],[5,"canister_status","","Returns the status of the canister specified in the input.",null,[[]]],[5,"submit_change_nns_canister_proposal","","",null,[[]]],[5,"change_nns_canister","","Executes a proposal to change an NNS canister.",null,[[]]],[5,"add_nns_canister","","",null,[[]]],[5,"stop_or_start_nns_canister","","",null,[[]]]],"p":[]},\
"runtime":{"doc":"","i":[[3,"WasmExecutionDispatcher","runtime","",null,null],[11,"new","","",0,[[["embeddertype",4],["config",3],["replicalogger",6]]]],[11,"execute","","",0,[[["wasmexecutioninput",3]],["wasmexecutionresult",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]]],"p":[[3,"WasmExecutionDispatcher"]]},\
"test_notified":{"doc":"","i":[[3,"COUNTER","test_notified","",null,null],[12,"__private_field","","",0,null],[3,"DIRTY_LOCK","","",null,null],[12,"__private_field","","",1,null],[3,"CLEAN_LOCK","","",null,null],[12,"__private_field","","",2,null],[5,"transaction_notification_pb_","","",null,[[]]],[5,"transaction_notification_","","",null,[[]]],[5,"transaction_notification","","",null,[[["transactionnotification",3]],[["result",4],["string",3]]]],[5,"check_counter_","","",null,[[]]],[5,"main","","",null,[[]]],[5,"do_nothing","","",null,[[]]],[5,"dirty_call_","","",null,[[]]],[5,"clean_call_","","",null,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"deref","","",0,[[],["rwlock",3]]],[11,"deref","","",1,[[],["rwlock",3]]],[11,"deref","","",2,[[],["rwlock",3]]],[11,"initialize","","",0,[[]]],[11,"initialize","","",1,[[]]],[11,"initialize","","",2,[[]]]],"p":[[3,"COUNTER"],[3,"DIRTY_LOCK"],[3,"CLEAN_LOCK"]]},\
"tperf":{"doc":"Load test for stand alone transport","i":[[3,"ConfigAndRecords","tperf","",null,null],[12,"config","","",0,null],[12,"node_records","","",0,null],[3,"Request","","",null,null],[12,"id","","",1,null],[12,"payload_size","","",1,null],[3,"Response","","",null,null],[12,"id","","",2,null],[12,"payload","","",2,null],[3,"EventMessage","","",null,null],[12,"received_ts","","",3,null],[12,"message","","",3,null],[3,"RateLimiterImpl","","",null,null],[12,"limiter","","",4,null],[3,"NoopRateLimiter","","",null,null],[3,"TestClient","","",null,null],[12,"transport","","",5,null],[12,"client_type","","",5,null],[12,"_event_handler","","",5,null],[12,"peer","","",5,null],[12,"peer_node_record","","",5,null],[12,"active_flows","","",5,null],[12,"receiver","","",5,null],[12,"registry_version","","",5,null],[12,"log","","",5,null],[3,"TestClientEventHandler","","",null,null],[12,"sender","","",6,null],[12,"active_flows","","",6,null],[12,"log","","",6,null],[4,"Role","","",null,null],[13,"Client","","",7,null],[13,"Server","","",7,null],[4,"TestMessage","","",null,null],[13,"Request","","",8,null],[13,"Response","","",8,null],[5,"cmd_line_matches","","",null,[[],["argmatches",3]]],[5,"generate_config_and_registry","","",null,[[["nodeid",6]],["configandrecords",3]]],[5,"main","","",null,[[]]],[0,"test_utils","","Helper functionality for the tests",null,null],[5,"to_node_id","tperf::test_utils","Converts the node_id in u8 -> NodeId format",null,[[],["nodeid",6]]],[5,"create_crypto","","",null,[[["nodeid",6],["registryversion",6]],[["arc",3],["result",6]]]],[6,"MpscSender","tperf","",null,null],[6,"MpscReceiver","","",null,null],[6,"RequestMap","","",null,null],[17,"REG_V1","","",null,null],[17,"ARG_NODE_ID","","",null,null],[17,"ARG_PEER_NODE_ID","","",null,null],[17,"ARG_NODE_IP","","",null,null],[17,"ARG_PEER_NODE_IP","","",null,null],[17,"ARG_ROLE","","",null,null],[17,"ARG_MSG_SIZE","","",null,null],[17,"ARG_MSG_COUNT","","",null,null],[17,"ARG_RPS","","",null,null],[17,"FLOW_TAG","","",null,null],[17,"FLOW_PORT","","",null,null],[17,"QFULL_DELAY_USEC","","",null,null],[17,"STATUS_UPDATE_SEC","","",null,null],[17,"LATENCY_SCALE","","",null,null],[8,"RateLimiter","","",null,null],[10,"wait","","",9,[[]]],[11,"new","","",4,[[]]],[11,"new","","",5,[[["replicalogger",6],["registryversion",6],["arc",3],["transport",8],["nodeid",6]]]],[11,"start_connections","","",5,[[]]],[11,"wait_for_flow_up","","",5,[[]]],[11,"send_message","","",5,[[["testmessage",4]]]],[11,"receive_message","","",5,[[["receiver",3]],["eventmessage",3]]],[11,"client","","",5,[[["byte",3],["option",4]]]],[11,"client_response_handler","","",5,[[["arc",3],["byte",3],["mutex",3],["eventmessage",3],["receiver",3],["replicalogger",6]]]],[11,"server","","",5,[[]]],[11,"show_latency_distribution","","",5,[[["replicalogger",6],["histogram",3]]]],[11,"bandwidth","","",5,[[["duration",3]],["string",3]]],[11,"format_bytes","","",5,[[],["string",3]]],[11,"on_message","","",6,[[["transportpayload",3],["flowid",3]],[["transportpayload",3],["option",4]]]],[11,"on_error","","",6,[[["transporterrorcode",4],["flowid",3]]]],[11,"on_state_change","","",6,[[["transportstatechange",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"erased_serialize","","",1,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"erased_serialize","","",8,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"vzip","","",8,[[]]],[11,"wait","","",4,[[]]],[11,"wait","","",10,[[]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"send_message","","",6,[[["transportpayload",3],["flowid",3]],[["pin",3],["box",3]]]],[11,"state_changed","","",6,[[["transportstatechange",4]],[["box",3],["pin",3]]]],[11,"error","","",6,[[["transporterrorcode",4],["flowid",3]],[["box",3],["pin",3]]]]],"p":[[3,"ConfigAndRecords"],[3,"Request"],[3,"Response"],[3,"EventMessage"],[3,"RateLimiterImpl"],[3,"TestClient"],[3,"TestClientEventHandler"],[4,"Role"],[4,"TestMessage"],[8,"RateLimiter"],[3,"NoopRateLimiter"]]},\
"transport_test_client":{"doc":"Transport client implementation for testing.","i":[[3,"TestMessage","transport_test_client","",null,null],[12,"flow_id","","",0,null],[12,"payload","","",0,null],[3,"TestClient","","",null,null],[12,"transport","","",1,null],[12,"client_type","","",1,null],[12,"_event_handler","","",1,null],[12,"prev","","",1,null],[12,"next","","",1,null],[12,"prev_node_record","","",1,null],[12,"next_node_record","","",1,null],[12,"receiver","","",1,null],[12,"active_flows","","",1,null],[12,"registry_version","","",1,null],[12,"log","","",1,null],[12,"active","","",1,null],[3,"TestClientEventHandler","","",null,null],[12,"sender","","",2,null],[12,"active_flows","","",2,null],[12,"log","","",2,null],[3,"ConfigAndRecords","","",null,null],[12,"config","","",3,null],[12,"node_records","","",3,null],[4,"Role","","",null,null],[13,"Source","","",4,null],[13,"Relay","","",4,null],[4,"TestClientErrorCode","","",null,null],[13,"TransportError","","",5,null],[13,"MessageMismatch","","",5,null],[13,"NotAllFlowsUp","","",5,null],[13,"Timeout","","",5,null],[13,"UnknownFailure","","",5,null],[5,"cmd_line_matches","","",null,[[],["argmatches",3]]],[5,"generate_config_and_registry","","",null,[[["nodeid",6]],["configandrecords",3]]],[5,"parse_topology","","",null,[[["nodeid",6]]]],[5,"do_work_source","","",null,[[["testclient",3]]]],[5,"task_main","","",null,[[["arc",3],["atomicbool",3]]]],[5,"main","","",null,[[],[["result",4],["testclienterrorcode",4]]]],[0,"test_utils","","Helper functionality for the tests",null,null],[5,"to_node_id","transport_test_client::test_utils","Converts the node_id in u8 -> NodeId format",null,[[],["nodeid",6]]],[5,"create_crypto","","",null,[[["nodeid",6],["registryversion",6]],[["result",6],["arc",3]]]],[6,"MpscSender","transport_test_client","",null,null],[6,"MpscReceiver","","",null,null],[17,"ARG_NODE_ID","","",null,null],[17,"ARG_MSG_COUNT","","",null,null],[17,"REG_V1","","",null,null],[17,"SUBNET_ID","","",null,null],[17,"FLOW_TAG_1","","",null,null],[17,"FLOW_TAG_2","","",null,null],[17,"TEST_MESSAGE_LEN","","",null,null],[17,"RECV_TIMEOUT_MS","","",null,null],[11,"new","","",1,[[["transport",8],["nodeid",6],["registryversion",6],["arc",3],["replicalogger",6],["arc",3],["atomicbool",3]]]],[11,"start_connections","","",1,[[],[["result",4],["transporterrorcode",4]]]],[11,"stop_connections","","",1,[[],[["result",4],["transporterrorcode",4]]]],[11,"wait_for_flow_up","","",1,[[]]],[11,"relay_loop","","",1,[[],[["result",4],["transporterrorcode",4]]]],[11,"send_receive_compare","","",1,[[["flowtag",6]],[["result",4],["testclienterrorcode",4]]]],[11,"receive","","",1,[[],[["result",4],["testmessage",3],["testclienterrorcode",4]]]],[11,"build_message","","",1,[[],["transportpayload",3]]],[11,"compare","","",1,[[["flowid",3],["testmessage",3],["transportpayload",3]]]],[11,"on_message","","",2,[[["flowid",3],["transportpayload",3]],[["option",4],["transportpayload",3]]]],[11,"on_error","","",2,[[["flowid",3],["transporterrorcode",4]]]],[11,"on_state_change","","",2,[[["transportstatechange",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"equivalent","","",5,[[]]],[11,"clone","","",5,[[],["testclienterrorcode",4]]],[11,"eq","","",5,[[["testclienterrorcode",4]]]],[11,"ne","","",5,[[["testclienterrorcode",4]]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"hash","","",5,[[]]],[11,"send_message","","",2,[[["flowid",3],["transportpayload",3]],[["pin",3],["box",3]]]],[11,"state_changed","","",2,[[["transportstatechange",4]],[["box",3],["pin",3]]]],[11,"error","","",2,[[["flowid",3],["transporterrorcode",4]],[["box",3],["pin",3]]]]],"p":[[3,"TestMessage"],[3,"TestClient"],[3,"TestClientEventHandler"],[3,"ConfigAndRecords"],[4,"Role"],[4,"TestClientErrorCode"]]},\
"tree_deserializer":{"doc":"","i":[[3,"LabeledTreeDeserializer","tree_deserializer","`LabeledTreeDeserializer` is a deserializer that decodes a…",null,null],[4,"Error","","`Error` describes error conditions that can happen when…",null,null],[13,"UnsupportedType","","The type with the given name is not supported by this…",0,null],[13,"UnsupportedMethod","","One of the Deserializer method is not implemented (yet?).",0,null],[13,"BadTupleSize","","The expected size of the tuple being parsed doesn\'t match…",0,null],[12,"expected","tree_deserializer::Error","",1,null],[12,"actual","","",1,null],[13,"BadString","tree_deserializer","Failed to parse a string from a blob.",0,null],[13,"BadState","","The tree structure is incompatible with the data being…",0,null],[13,"BadLabel","","Cannot decode a label into the requested data type.",0,null],[13,"Other","","Custom error produced by serde.",0,null],[11,"new","","",2,[[["labeledtree",4]]]],[0,"types","","",null,null],[3,"Leb128EncodedU64","tree_deserializer::types","64-bit unsigned integer that is deserialized from a byte…",null,null],[12,"0","","",3,null],[4,"LebDecodingError","","Error indicating that conversion from bytes to an integer…",null,null],[13,"Overflow","","The bytes contained a number bigger than u64::MAX.",4,null],[13,"TrailingData","","The bytes contained a valid number, but there was extra…",4,null],[11,"from","tree_deserializer","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","tree_deserializer::types","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"clone","tree_deserializer","",2,[[],["labeledtreedeserializer",3]]],[11,"eq","","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"eq","tree_deserializer::types","",3,[[["leb128encodedu64",3]]]],[11,"ne","","",3,[[["leb128encodedu64",3]]]],[11,"fmt","tree_deserializer","",0,[[["formatter",3]],["result",6]]],[11,"fmt","tree_deserializer::types","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","tree_deserializer","",0,[[["formatter",3]],["result",6]]],[11,"fmt","tree_deserializer::types","",4,[[["formatter",3]],["result",6]]],[11,"try_from","","",3,[[],[["result",4],["lebdecodingerror",4]]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize_unit","tree_deserializer","",2,[[],["result",4]]],[11,"deserialize_bool","","",2,[[],["result",4]]],[11,"deserialize_char","","",2,[[],["result",4]]],[11,"deserialize_i8","","",2,[[],["result",4]]],[11,"deserialize_i16","","",2,[[],["result",4]]],[11,"deserialize_i32","","",2,[[],["result",4]]],[11,"deserialize_i64","","",2,[[],["result",4]]],[11,"deserialize_u8","","",2,[[],["result",4]]],[11,"deserialize_u16","","",2,[[],["result",4]]],[11,"deserialize_f32","","",2,[[],["result",4]]],[11,"deserialize_f64","","",2,[[],["result",4]]],[11,"deserialize_any","","",2,[[],["result",4]]],[11,"deserialize_u32","","",2,[[],["result",4]]],[11,"deserialize_u64","","",2,[[],["result",4]]],[11,"deserialize_str","","",2,[[],["result",4]]],[11,"deserialize_string","","",2,[[],["result",4]]],[11,"deserialize_bytes","","",2,[[],["result",4]]],[11,"deserialize_byte_buf","","",2,[[],["result",4]]],[11,"deserialize_option","","",2,[[],["result",4]]],[11,"deserialize_unit_struct","","",2,[[],["result",4]]],[11,"deserialize_newtype_struct","","",2,[[],["result",4]]],[11,"deserialize_seq","","",2,[[],["result",4]]],[11,"deserialize_tuple","","",2,[[],["result",4]]],[11,"deserialize_tuple_struct","","",2,[[],["result",4]]],[11,"deserialize_map","","",2,[[],["result",4]]],[11,"deserialize_struct","","",2,[[],["result",4]]],[11,"deserialize_enum","","",2,[[],["result",4]]],[11,"deserialize_identifier","","",2,[[],["result",4]]],[11,"deserialize_ignored_any","","",2,[[],["result",4]]],[11,"custom","","",0,[[["display",8]]]]],"p":[[4,"Error"],[13,"BadTupleSize"],[3,"LabeledTreeDeserializer"],[3,"Leb128EncodedU64"],[4,"LebDecodingError"]]},\
"upgrade_test_canister":{"doc":"","i":[[5,"main","upgrade_test_canister","",null,[[]]],[5,"post_upgrade","","",null,[[]]],[5,"read_stable","","",null,[[]]]],"p":[]},\
"wasm":{"doc":"","i":[[5,"reverse","wasm","",null,[[]]],[5,"set_certified_data","","",null,[[]]],[5,"get_certificate","","",null,[[]]],[5,"main","","",null,[[]]]],"p":[]},\
"xnet_test":{"doc":"","i":[[3,"Metrics","xnet_test","Metrics observed by this canister.",null,null],[12,"requests_sent","","Number of requests sent.",0,null],[12,"seq_errors","","Number of sequence number errors.",0,null],[12,"call_errors","","Number of times `call_raw` failed.",0,null],[12,"latency_distribution","","Observed message rountrip latencies.",0,null],[12,"log","","Rotating buffer collecting log messages.",0,null],[3,"LatencyDistribution","","Latency distribution implements a cumulative histogram…",null,null],[6,"CanisterId","","Id of a canister is an opaque blob.",null,null],[6,"NetworkTopology","","Configuration of the network: the outer vector enumerates…",null,null],[11,"merge","","Adds the observations of `other` to `self`.",0,[[["metrics",3]]]],[11,"observe","","Updates this histogram with a new observed latency.",1,[[["duration",3]]]],[11,"buckets","","Returns an iterator over buckets of the histogram.",1,[[]]],[11,"sum_millis","","Returns the sum of all observed latencies.",1,[[]]],[11,"merge","","Adds the observations of `other` to `self`.",1,[[["latencydistribution",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"default","","",0,[[],["metrics",3]]],[11,"default","","",1,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"_ty","","",0,[[],["type",4]]],[11,"id","","",0,[[],["typeid",3]]],[11,"idl_serialize","","",0,[[],["result",4]]],[11,"_ty","","",1,[[],["type",4]]],[11,"id","","",1,[[],["typeid",3]]],[11,"idl_serialize","","",1,[[],["result",4]]]],"p":[[3,"Metrics"],[3,"LatencyDistribution"]]},\
"xnet_test_canister":{"doc":"This module contains a canister used for XNet integration…","i":[[3,"Request","xnet_test_canister","Request sent by the \\\"fanout\\\" method.",null,null],[12,"seq_no","","Sequence number of this message in the stream of messages…",0,null],[12,"time_nanos","","Local time observed in the round when this message was sent.",0,null],[3,"Reply","","A `Reply` to the `Request` message, sent from the…",null,null],[12,"time_nanos","","Time copied from the corresponding request. It\'s used to…",1,null],[3,"MessagingState","","State of the XNet messaging.",null,null],[12,"in_seq_no","","The last sequence number expected to be observed in a…",2,null],[12,"out_seq_no","","The last sequence number used to send a message to the…",2,null],[5,"candid_reply","","Calls \\\"msg_reply\\\" with reply being argument encoded as…",null,[[]]],[5,"candid_encode_padded","","Encodes `t` as Candid, padded to `PAYLOAD_SIZE`.",null,[[],["vec",3]]],[5,"time_nanos","","Returns system time in nanoseconds.",null,[[]]],[5,"on_reply","","Callback for handling replies from \\\"handle_request\\\".",null,[[]]],[5,"on_reject","","Callback for handling reject responses from…",null,[[]]],[5,"is_running","","Returns true if this canister should continue generating…",null,[[]]],[5,"schedule_fanout","","Enqueues a `fanout()` \\\"loopback\\\" call for next round.",null,[[]]],[5,"log","","Appends a message to the log, ensuring log size stays…",null,[[]]],[5,"start","","Initializes network topology and instructs this canister…",null,[[]]],[5,"stop","","Stops traffic.",null,[[]]],[5,"fanout","","An internal endpoint that sends a messages to a random…",null,[[]]],[5,"handle_request","","Endpoint that handles requests from canisters located on…",null,[[]]],[5,"metrics","","Query call that serializes metrics as a candid message.",null,[[]]],[5,"main","","",null,[[]]],[17,"RUNNING","","Whether this canister is generating traffic.",null,null],[17,"NETWORK_TOPOLOGY","","The configuration of the subnets that should be specified…",null,null],[17,"PER_SUBNET_RATE","","Number of requests to send to each subnet (other than…",null,null],[17,"PAYLOAD_SIZE","","Pad requests AND responses to this size (in bytes) if…",null,null],[17,"STATE","","State of the messaging that we use to check invariants…",null,null],[17,"METRICS","","Various metrics observed by this canister, e.g. message…",null,null],[17,"RNG","","The pseudo-random number generator we use to pick the next…",null,null],[11,"next_out_seq_no","","",2,[[["canisterid",6]]]],[11,"set_in_seq_no","","Sets `in_seq_no` to the provided value and returns the…",2,[[["canisterid",6]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"default","","",2,[[],["messagingstate",3]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"_ty","","",0,[[],["type",4]]],[11,"id","","",0,[[],["typeid",3]]],[11,"idl_serialize","","",0,[[],["result",4]]],[11,"_ty","","",1,[[],["type",4]]],[11,"id","","",1,[[],["typeid",3]]],[11,"idl_serialize","","",1,[[],["result",4]]]],"p":[[3,"Request"],[3,"Reply"],[3,"MessagingState"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);