initSidebarItems({"enum":[["CanisterStatus",""],["TokenUnit","Represents the different token units that are available on canisters."]],"fn":[["arg_data","Returns the argument extracted from the message payload."],["arg_size","Safe wrapper around an unsafe function"],["call","This function has some really nasty behavior if it traps in a callback. Use call_with_cleanup."],["call_bytes","Calls another canister and returns a future."],["call_bytes_with_cleanup",""],["call_cycles_add",""],["call_explicit",""],["call_explicit_with_cleanup",""],["call_no_reply",""],["call_raw","A thin wrapper around `call_simple`.  Calls another canisters and invokes on_reply/on_reject with the given `env` once reply/reject is received."],["call_with_callbacks","Calls another canister and executes one of the callbacks."],["call_with_cleanup",""],["call_with_funds",""],["call_with_funds_and_cleanup",""],["caller","Returns the caller of the current call."],["canister_cycle_balance","Returns the amount of cycles in the canister's account."],["canister_status",""],["controller","Returns the controller of the canister as a blob."],["data_certificate","When called from a query call, returns the data certificate authenticating certified_data set by this canister."],["id","Returns this canister's id as a blob."],["mint_cycles",""],["msg_cycles_accept","Indicates that `amount` of cycles should be accepted in the current message."],["msg_cycles_available","Returns the cycles available in this current message."],["msg_cycles_refunded","Returns the amount of cycles refunded with a response."],["now",""],["print","Prints the given message."],["reject","Rejects the current call with the given message. Warning if you use this with an endpoint it will cause a trap due to the message trying to return multiple responses"],["reject_code","Returns the rejection code."],["reject_message","Returns the rejection message."],["reply","Replies with the given byte array. Note, currently we do not support chunkwise assembling of the response. Warning if you use this with an endpoint it will cause a trap due to the message trying to return multiple responses"],["set_certified_data","Sets the certified data of this canister."],["stable_memory_size_in_pages",""],["time_nanos",""],["trap_with","Traps with the given message."]],"mod":[["futures","This module contains all mechanisms required to enable asynchronous programming in Rust, based on native async Rust capabilities:"],["ic0",""]],"struct":[["CanisterId","A type representing a canister's [`PrincipalId`]."],["Funds","This is a simplified version of `ic_types::Funds`."],["PrincipalId","The type representing principals as described in the interface spec."]]});