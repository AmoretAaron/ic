initSidebarItems({"fn":[["bytes","This tells communication function that you'd like you communicate using raw bytes"],["from","This tells communication function that you'd like you communicate using FromS"],["over","Over allows you to create canister endpoints easily `no_run # use dfn_core::over; #[export_name = \"canister_query happy_birthday\"] fn hb() {     fn happy_birthday((name, age): (String, u16)) -> String {         format!(\"Happy Birthday {}\", name)     }     over(dfn_json::json, happy_birthday) } `"],["over_async","Allows you to create asynchronous canister endpoints `no_run # use dfn_core::over_async; # async fn get_age(_: &str) -> Result<u16, String> { #     Ok(28) # } #[export_name = \"canister_query happy_birthday\"] fn hb() {     async fn happy_birthday(name :String) -> Result<String, String> {         let age = get_age(&name).await?;         Ok(format!(\"Happy Birthday {} {}\", name, age))     }     over_async(dfn_json::json, happy_birthday) } `"],["over_async_bytes",""],["over_async_bytes_may_reject",""],["over_async_explicit",""],["over_async_may_reject","Like over_async, but `reject`s the call when the function `f` given as argument returns an `Err`. If `f` returns an `Ok`, it calls `reply`."],["over_async_may_reject_explicit",""],["over_bytes",""],["over_bytes_init",""],["over_bytes_may_reject",""],["over_bytes_result",""],["over_explicit","Create endpoints with the incoming and outgoing encoding schemes explicitly stated ```no_run # use dfn_core::over_explicit; use dfn_json::Json;"],["over_from",""],["over_init","Useful for writing the canister_init function because it doesn't return anything"],["over_may_reject","Like over, but `reject`s the call when the function `f` given as argument returns an `Err`. If `f` returns an `Ok`, it calls `reply`."]]});