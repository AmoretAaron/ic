initSidebarItems({"constant":[["EXPECTED_MESSAGE_ID_LENGTH","The length of a [`MessageId`] is 32: https://sdk.dfinity.org/docs/interface-spec/index.html#api-request-id)"],["MAX_INTER_CANISTER_PAYLOAD_IN_BYTES","This sets the upper bound on how big a single inter-canister request or response can be.  We know that allowing messages larger than around 2MB has various security and performance impacts on the network.  More specifically, large messages can allow dishonest block makers to always manage to get their blocks notarized; and when the consensus protocol is configured for smaller messages, a large message in the network can cause the finalization rate to drop."],["MAX_XNET_PAYLOAD_IN_BYTES","The maximum size of an inter-canister request or response that the IC can support."]],"enum":[["Authentication","The authentication associated with an HTTP request."],["CanisterInstallMode","The mode with which a canister is installed."],["HttpHandlerError","Errors returned by `HttpHandler` when processing ingress messages."],["HttpQueryResponse","The response to `/api/v1/read` with `request_type` set to `query`."],["HttpReadContent","Describes the contents of a /api/v1/read request."],["HttpReply","The reply to an update call."],["HttpResponseStatus","The status of an update call."],["HttpSubmitContent","Describes the contents of a /api/v1/submit request."],["MessageIdError","Errors returned when converting to a [`MessageId`] from a blob."],["Payload","A union of all possible message payloads."],["RawHttpRequestVal","The different types of values supported in `RawHttpRequest`."],["ReadContent","Internal representation of the content of a `api/v1/read` request."],["RequestOrResponse","Canister-to-canister message."],["StopCanisterContext","Stores info needed for processing and tracking requests to stop canisters."]],"fn":[["is_subnet_message",""]],"struct":[["Blob","A binary \"blob\", i.e. a byte array."],["Certificate","A `Certificate` as defined in https://sdk.dfinity.org/docs/interface-spec/index.html#_certificate"],["CertificateDelegation","This enum is defined as a filler to make the encoding of `Certificate` compliant with the interface spec. It is not currently being used."],["Delegation","Describes a delegation map as defined in https://sdk.dfinity.org/docs/interface-spec/index.html#certification-delegation."],["HttpCanisterUpdate","Describes the fields of a canister update call as defined in https://sdk.dfinity.org/docs/interface-spec/index.html#api-update."],["HttpQueryResponseReply","The body of the `QueryResponse`"],["HttpReadState","A `read_state` request as defined in https://sdk.dfinity.org/docs/interface-spec/index.html#api-request-read-state."],["HttpReadStateResponse","The response to a `read_state` request."],["HttpRequest","A strongly-typed version of [`HttpRequestEnvelope`]."],["HttpRequestEnvelope","A request envelope as defined in https://sdk.dfinity.org/docs/interface-spec/index.html#authentication."],["HttpStatusResponse","The response to `/api/v1/status`."],["HttpUserQuery","Describes the fields of a canister query call (a query from a user to a canister) as defined in https://sdk.dfinity.org/docs/interface-spec/index.html#api-query."],["Ingress","A message sent from an end user to a canister."],["MessageId","The ID used to uniquely identify a user's ingress message."],["ReadState","A `read_state` request sent from the user."],["RejectContext","The context attached when an inter-canister message is rejected."],["Request","Canister-to-canister request message."],["Response","Canister-to-canister response message."],["SignedDelegation","Describes a delegation as defined in https://sdk.dfinity.org/docs/interface-spec/index.html#certification-delegation."],["SignedIngress","Describes the signed ingress message that was received from the end user. To construct a `SignedIngress`, either use `TryFrom<SignedRequestBytes>` or directly deserialize from bytes. This guarantees that the correct byte sequence is remembered as part of `SignedIngress`, which will always serialize to the same sequence."],["SignedIngressContent","The contents of a signed ingress message."],["SignedRequestBytes","Bytes representation of signed HTTP requests, using CBOR as a serialization format. Use `TryFrom` or `TryInto` to convert between `SignedRequestBytes` and other types, corresponding to serialization/deserialization."],["UserQuery","Represents a Query that is sent by an end user to a canister."],["UserSignature","An end user's signature."],["WebAuthnEnvelope","The challenge signed with web authentication is contained in ClientDataJSON. WebAuthnEnvelope parses a WebAuthenticationSignature, provides access to the challenge contained in it, and also produces the byte string that is required in the signature verification."],["WebAuthnSignature","Verification of a signature that was generated with web authentication requires as auxiliary information the AuthenticatorData and the ClientDataJSON objects returned by the call to the authenticator. A WebAuthnSignature contains both the actual cryptographic signature and this auxiliary information."]],"trait":[["HasCanisterId","A trait implemented by HTTP requests that contain a `canister_id`."],["HttpRequestContent","Common attributes that all HTTP request contents should have."]],"type":[["CallContextId","Identifies an incoming call."],["CallbackId","A value used as an opaque nonce to couple outgoing calls with their callbacks."]]});