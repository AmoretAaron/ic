initSidebarItems({"fn":[["active_high_threshold_transcript","Return the current high transcript for the given height if it was found."],["active_low_threshold_transcript","Return the current low transcript for the given height if it was found."],["aggregate","Aggregate shares into complete artifacts"],["crypto_hashable_to_seed","Convert a CryptoHashable into a 32 bytes which can be used to seed a RNG"],["find_lowest_ranked_proposals","Return the validated block proposals with the lowest rank at height `h`, if there are any. Else return `None`."],["get_adjusted_notary_delay","Calculate the required delay for notary based on the rank of block to notarize, adjusted by a multiplier depending the gap between finalized and notarized heights, and adjusted by how far the certified height lags behind the finalized height."],["get_block_hash_string","Return the hash of a block as a string."],["get_block_maker_delay","Calculate the required delay for block making based on the block maker's rank."],["get_notarization_delay_settings","Fetches the notarization delay settings from the registry."],["is_root_subnet","Return true if the given subnet id is the root subnet"],["is_time_to_make_block","Return true if the time since round start is greater than the required block maker delay for the given rank."],["lookup_replica_version","Helper function to lookup replica version, and log errors if any."],["registry_version_at_height","Return the registry version to be used for the given height. Note that this can only look up for height that is greater than or equal to the latest catch-up package height, otherwise an error is returned."]],"struct":[["RoundRobin","Rotate on_state_change calls with a round robin schedule to ensure fairness."]]});