initSidebarItems({"constant":[["THRESHOLD_SIG_DATA_STORE_CAPACITY","Defines the maximum number of entries contained in the `ThresholdSigDataStore`."]],"enum":[["KeyBytesContentType","Indicates the content type of serialised key bytes passed for parsing."]],"fn":[["combined_threshold_signature_and_public_key","Creates a combined threshold signature together with its public key. This is only used for testing."],["crypto_hash","Creates a (typed) domain-separated cryptographic hash."],["ecdsa_p256_signature_from_der_bytes","Decodes an ECDSA P-256 signature from DER."],["ed25519_public_key_to_der","Encodes a raw ed25519 public key into DER."],["threshold_sig_public_key_from_der","Decodes a threshold signature public key from DER."],["threshold_sig_public_key_to_der","Encodes a threshold signature public key into DER."],["user_public_key_from_bytes","Parses the given `bytes` as a DER- or COSE-encoded public key, and returns, if the parsing is successful, the key as `UserPublicKey`-struct and an enum that indicates the content type of the passed `bytes`. If parsing fails, returns an error."],["verify_combined_threshold_sig","Verifies a combined threshold signature."]],"mod":[["cli","Command line interface for the crypto component."],["prng","Offers cryptographically secure pseudorandom number generation (CSPRNG)."],["utils","Static crypto utility methods."]],"struct":[["CryptoComponentFatClient","Allows Internet Computer nodes to perform crypto operations such as distributed key generation, signing, signature verification, and TLS handshakes."],["LockableThresholdSigDataStore","A `ThresholdSigDataStore` that is wrapped by a `RwLock`."]],"trait":[["CryptoComponentForNonReplicaProcess","A crypto component that offers limited functionality and can be used outside of the replica process."]],"type":[["CryptoComponent","A type alias for `CryptoComponentFatClient<Csp<OsRng, ProtoSecretKeyStore>>`. See the Rust documentation of `CryptoComponentFatClient`."]]});